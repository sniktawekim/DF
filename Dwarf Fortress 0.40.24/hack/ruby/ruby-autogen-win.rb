module DFHack
class AbstractBuildingType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :MEAD_HALL ; NUME[:MEAD_HALL] = 0
    ENUM[1] = :KEEP ; NUME[:KEEP] = 1
    ENUM[2] = :TEMPLE ; NUME[:TEMPLE] = 2
    ENUM[3] = :DARK_TOWER ; NUME[:DARK_TOWER] = 3
    ENUM[4] = :MARKET ; NUME[:MARKET] = 4
    ENUM[5] = :TOMB ; NUME[:TOMB] = 5
    ENUM[6] = :DUNGEON ; NUME[:DUNGEON] = 6
    ENUM[7] = :UNDERWORLD_SPIRE ; NUME[:UNDERWORLD_SPIRE] = 7
end

class ActivityEventType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :TrainingSession ; NUME[:TrainingSession] = 0
    ENUM[1] = :CombatTraining ; NUME[:CombatTraining] = 1
    ENUM[2] = :SkillDemonstration ; NUME[:SkillDemonstration] = 2
    ENUM[3] = :IndividualSkillDrill ; NUME[:IndividualSkillDrill] = 3
    ENUM[4] = :Sparring ; NUME[:Sparring] = 4
    ENUM[5] = :RangedPractice ; NUME[:RangedPractice] = 5
    ENUM[6] = :Harassment ; NUME[:Harassment] = 6
    ENUM[7] = :Conversation ; NUME[:Conversation] = 7
    ENUM[8] = :Conflict ; NUME[:Conflict] = 8
    ENUM[9] = :Guard ; NUME[:Guard] = 9
    ENUM[10] = :Reunion ; NUME[:Reunion] = 10
end

class AgreementConclusionReason < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :None ; NUME[:None] = 0
    ENUM[14] = :Whim ; NUME[:Whim] = 14
    ENUM[31] = :ShouldHaveReachedGoal ; NUME[:ShouldHaveReachedGoal] = 31
    ENUM[32] = :InsufficientProgressTowardGoal ; NUME[:InsufficientProgressTowardGoal] = 32
    ENUM[33] = :GoingWrongDirection ; NUME[:GoingWrongDirection] = 33
    ENUM[34] = :ArrivedAtLocation ; NUME[:ArrivedAtLocation] = 34
    ENUM[35] = :EntityNoLongerRules ; NUME[:EntityNoLongerRules] = 35
    ENUM[36] = :LeftSite ; NUME[:LeftSite] = 36
    ENUM[37] = :ReunitedWithLovedOne ; NUME[:ReunitedWithLovedOne] = 37
    ENUM[38] = :ViolentDisagreement ; NUME[:ViolentDisagreement] = 38
    ENUM[39] = :Adopted ; NUME[:Adopted] = 39
    ENUM[41] = :ArrivedAtPerson ; NUME[:ArrivedAtPerson] = 41
end

class AmmoFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :HAS_EDGE_ATTACK ; NUME[:HAS_EDGE_ATTACK] = 0
end

class AnimalTrainingLevel < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :SemiWild ; NUME[:SemiWild] = 0
    ENUM[1] = :Trained ; NUME[:Trained] = 1
    ENUM[2] = :WellTrained ; NUME[:WellTrained] = 2
    ENUM[3] = :SkilfullyTrained ; NUME[:SkilfullyTrained] = 3
    ENUM[4] = :ExpertlyTrained ; NUME[:ExpertlyTrained] = 4
    ENUM[5] = :ExceptionallyTrained ; NUME[:ExceptionallyTrained] = 5
    ENUM[6] = :MasterfullyTrained ; NUME[:MasterfullyTrained] = 6
    ENUM[7] = :Domesticated ; NUME[:Domesticated] = 7
    ENUM[8] = :Unk8 ; NUME[:Unk8] = 8
    ENUM[9] = :WildUntamed ; NUME[:WildUntamed] = 9
end

class AnnouncementType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :REACHED_PEAK ; NUME[:REACHED_PEAK] = 0
    ENUM[1] = :ERA_CHANGE ; NUME[:ERA_CHANGE] = 1
    ENUM[2] = :FEATURE_DISCOVERY ; NUME[:FEATURE_DISCOVERY] = 2
    ENUM[3] = :STRUCK_DEEP_METAL ; NUME[:STRUCK_DEEP_METAL] = 3
    ENUM[4] = :STRUCK_MINERAL ; NUME[:STRUCK_MINERAL] = 4
    ENUM[5] = :STRUCK_ECONOMIC_MINERAL ; NUME[:STRUCK_ECONOMIC_MINERAL] = 5
    ENUM[6] = :COMBAT_TWIST_WEAPON ; NUME[:COMBAT_TWIST_WEAPON] = 6
    ENUM[7] = :COMBAT_LET_ITEM_DROP ; NUME[:COMBAT_LET_ITEM_DROP] = 7
    ENUM[8] = :COMBAT_START_CHARGE ; NUME[:COMBAT_START_CHARGE] = 8
    ENUM[9] = :COMBAT_SURPRISE_CHARGE ; NUME[:COMBAT_SURPRISE_CHARGE] = 9
    ENUM[10] = :COMBAT_JUMP_DODGE_PROJ ; NUME[:COMBAT_JUMP_DODGE_PROJ] = 10
    ENUM[11] = :COMBAT_JUMP_DODGE_STRIKE ; NUME[:COMBAT_JUMP_DODGE_STRIKE] = 11
    ENUM[12] = :COMBAT_DODGE ; NUME[:COMBAT_DODGE] = 12
    ENUM[13] = :COMBAT_COUNTERSTRIKE ; NUME[:COMBAT_COUNTERSTRIKE] = 13
    ENUM[14] = :COMBAT_BLOCK ; NUME[:COMBAT_BLOCK] = 14
    ENUM[15] = :COMBAT_PARRY ; NUME[:COMBAT_PARRY] = 15
    ENUM[16] = :COMBAT_CHARGE_COLLISION ; NUME[:COMBAT_CHARGE_COLLISION] = 16
    ENUM[17] = :COMBAT_CHARGE_DEFENDER_TUMBLES ; NUME[:COMBAT_CHARGE_DEFENDER_TUMBLES] = 17
    ENUM[18] = :COMBAT_CHARGE_DEFENDER_KNOCKED_OVER ; NUME[:COMBAT_CHARGE_DEFENDER_KNOCKED_OVER] = 18
    ENUM[19] = :COMBAT_CHARGE_ATTACKER_TUMBLES ; NUME[:COMBAT_CHARGE_ATTACKER_TUMBLES] = 19
    ENUM[20] = :COMBAT_CHARGE_ATTACKER_BOUNCE_BACK ; NUME[:COMBAT_CHARGE_ATTACKER_BOUNCE_BACK] = 20
    ENUM[21] = :COMBAT_CHARGE_TANGLE_TOGETHER ; NUME[:COMBAT_CHARGE_TANGLE_TOGETHER] = 21
    ENUM[22] = :COMBAT_CHARGE_TANGLE_TUMBLE ; NUME[:COMBAT_CHARGE_TANGLE_TUMBLE] = 22
    ENUM[23] = :COMBAT_CHARGE_RUSH_BY ; NUME[:COMBAT_CHARGE_RUSH_BY] = 23
    ENUM[24] = :COMBAT_CHARGE_MANAGE_STOP ; NUME[:COMBAT_CHARGE_MANAGE_STOP] = 24
    ENUM[25] = :COMBAT_CHARGE_OBSTACLE_SLAM ; NUME[:COMBAT_CHARGE_OBSTACLE_SLAM] = 25
    ENUM[26] = :COMBAT_WRESTLE_LOCK ; NUME[:COMBAT_WRESTLE_LOCK] = 26
    ENUM[27] = :COMBAT_WRESTLE_CHOKEHOLD ; NUME[:COMBAT_WRESTLE_CHOKEHOLD] = 27
    ENUM[28] = :COMBAT_WRESTLE_TAKEDOWN ; NUME[:COMBAT_WRESTLE_TAKEDOWN] = 28
    ENUM[29] = :COMBAT_WRESTLE_THROW ; NUME[:COMBAT_WRESTLE_THROW] = 29
    ENUM[30] = :COMBAT_WRESTLE_RELEASE_LOCK ; NUME[:COMBAT_WRESTLE_RELEASE_LOCK] = 30
    ENUM[31] = :COMBAT_WRESTLE_RELEASE_CHOKE ; NUME[:COMBAT_WRESTLE_RELEASE_CHOKE] = 31
    ENUM[32] = :COMBAT_WRESTLE_RELEASE_GRIP ; NUME[:COMBAT_WRESTLE_RELEASE_GRIP] = 32
    ENUM[33] = :COMBAT_WRESTLE_STRUGGLE ; NUME[:COMBAT_WRESTLE_STRUGGLE] = 33
    ENUM[34] = :COMBAT_WRESTLE_RELEASE_LATCH ; NUME[:COMBAT_WRESTLE_RELEASE_LATCH] = 34
    ENUM[35] = :COMBAT_WRESTLE_STRANGLE_KO ; NUME[:COMBAT_WRESTLE_STRANGLE_KO] = 35
    ENUM[36] = :COMBAT_WRESTLE_ADJUST_GRIP ; NUME[:COMBAT_WRESTLE_ADJUST_GRIP] = 36
    ENUM[37] = :COMBAT_GRAB_TEAR ; NUME[:COMBAT_GRAB_TEAR] = 37
    ENUM[38] = :COMBAT_STRIKE_DETAILS ; NUME[:COMBAT_STRIKE_DETAILS] = 38
    ENUM[39] = :COMBAT_STRIKE_DETAILS_2 ; NUME[:COMBAT_STRIKE_DETAILS_2] = 39
    ENUM[40] = :COMBAT_EVENT_ENRAGED ; NUME[:COMBAT_EVENT_ENRAGED] = 40
    ENUM[41] = :COMBAT_EVENT_STUCKIN ; NUME[:COMBAT_EVENT_STUCKIN] = 41
    ENUM[42] = :COMBAT_EVENT_LATCH_BP ; NUME[:COMBAT_EVENT_LATCH_BP] = 42
    ENUM[43] = :COMBAT_EVENT_LATCH_GENERAL ; NUME[:COMBAT_EVENT_LATCH_GENERAL] = 43
    ENUM[44] = :COMBAT_EVENT_PROPELLED_AWAY ; NUME[:COMBAT_EVENT_PROPELLED_AWAY] = 44
    ENUM[45] = :COMBAT_EVENT_KNOCKED_OUT ; NUME[:COMBAT_EVENT_KNOCKED_OUT] = 45
    ENUM[46] = :COMBAT_EVENT_STUNNED ; NUME[:COMBAT_EVENT_STUNNED] = 46
    ENUM[47] = :COMBAT_EVENT_WINDED ; NUME[:COMBAT_EVENT_WINDED] = 47
    ENUM[48] = :COMBAT_EVENT_NAUSEATED ; NUME[:COMBAT_EVENT_NAUSEATED] = 48
    ENUM[49] = :MIGRANT_ARRIVAL_NAMED ; NUME[:MIGRANT_ARRIVAL_NAMED] = 49
    ENUM[50] = :MIGRANT_ARRIVAL ; NUME[:MIGRANT_ARRIVAL] = 50
    ENUM[51] = :DIG_CANCEL_WARM ; NUME[:DIG_CANCEL_WARM] = 51
    ENUM[52] = :DIG_CANCEL_DAMP ; NUME[:DIG_CANCEL_DAMP] = 52
    ENUM[53] = :AMBUSH_DEFENDER ; NUME[:AMBUSH_DEFENDER] = 53
    ENUM[54] = :AMBUSH_RESIDENT ; NUME[:AMBUSH_RESIDENT] = 54
    ENUM[55] = :AMBUSH_THIEF ; NUME[:AMBUSH_THIEF] = 55
    ENUM[56] = :AMBUSH_THIEF_SUPPORT_SKULKING ; NUME[:AMBUSH_THIEF_SUPPORT_SKULKING] = 56
    ENUM[57] = :AMBUSH_THIEF_SUPPORT_NATURE ; NUME[:AMBUSH_THIEF_SUPPORT_NATURE] = 57
    ENUM[58] = :AMBUSH_THIEF_SUPPORT ; NUME[:AMBUSH_THIEF_SUPPORT] = 58
    ENUM[59] = :AMBUSH_MISCHIEVOUS ; NUME[:AMBUSH_MISCHIEVOUS] = 59
    ENUM[60] = :AMBUSH_SNATCHER ; NUME[:AMBUSH_SNATCHER] = 60
    ENUM[61] = :AMBUSH_SNATCHER_SUPPORT ; NUME[:AMBUSH_SNATCHER_SUPPORT] = 61
    ENUM[62] = :AMBUSH_AMBUSHER_NATURE ; NUME[:AMBUSH_AMBUSHER_NATURE] = 62
    ENUM[63] = :AMBUSH_AMBUSHER ; NUME[:AMBUSH_AMBUSHER] = 63
    ENUM[64] = :AMBUSH_INJURED ; NUME[:AMBUSH_INJURED] = 64
    ENUM[65] = :AMBUSH_OTHER ; NUME[:AMBUSH_OTHER] = 65
    ENUM[66] = :AMBUSH_INCAPACITATED ; NUME[:AMBUSH_INCAPACITATED] = 66
    ENUM[67] = :CARAVAN_ARRIVAL ; NUME[:CARAVAN_ARRIVAL] = 67
    ENUM[68] = :NOBLE_ARRIVAL ; NUME[:NOBLE_ARRIVAL] = 68
    ENUM[69] = :D_MIGRANTS_ARRIVAL ; NUME[:D_MIGRANTS_ARRIVAL] = 69
    ENUM[70] = :D_MIGRANT_ARRIVAL ; NUME[:D_MIGRANT_ARRIVAL] = 70
    ENUM[71] = :D_MIGRANT_ARRIVAL_DISCOURAGED ; NUME[:D_MIGRANT_ARRIVAL_DISCOURAGED] = 71
    ENUM[72] = :D_NO_MIGRANT_ARRIVAL ; NUME[:D_NO_MIGRANT_ARRIVAL] = 72
    ENUM[73] = :ANIMAL_TRAP_CATCH ; NUME[:ANIMAL_TRAP_CATCH] = 73
    ENUM[74] = :ANIMAL_TRAP_ROBBED ; NUME[:ANIMAL_TRAP_ROBBED] = 74
    ENUM[75] = :MISCHIEF_LEVER ; NUME[:MISCHIEF_LEVER] = 75
    ENUM[76] = :MISCHIEF_PLATE ; NUME[:MISCHIEF_PLATE] = 76
    ENUM[77] = :MISCHIEF_CAGE ; NUME[:MISCHIEF_CAGE] = 77
    ENUM[78] = :MISCHIEF_CHAIN ; NUME[:MISCHIEF_CHAIN] = 78
    ENUM[79] = :DIPLOMAT_ARRIVAL ; NUME[:DIPLOMAT_ARRIVAL] = 79
    ENUM[80] = :LIAISON_ARRIVAL ; NUME[:LIAISON_ARRIVAL] = 80
    ENUM[81] = :TRADE_DIPLOMAT_ARRIVAL ; NUME[:TRADE_DIPLOMAT_ARRIVAL] = 81
    ENUM[82] = :CAVE_COLLAPSE ; NUME[:CAVE_COLLAPSE] = 82
    ENUM[83] = :BIRTH_CITIZEN ; NUME[:BIRTH_CITIZEN] = 83
    ENUM[84] = :BIRTH_ANIMAL ; NUME[:BIRTH_ANIMAL] = 84
    ENUM[85] = :STRANGE_MOOD ; NUME[:STRANGE_MOOD] = 85
    ENUM[86] = :MADE_ARTIFACT ; NUME[:MADE_ARTIFACT] = 86
    ENUM[87] = :NAMED_ARTIFACT ; NUME[:NAMED_ARTIFACT] = 87
    ENUM[88] = :ITEM_ATTACHMENT ; NUME[:ITEM_ATTACHMENT] = 88
    ENUM[89] = :VERMIN_CAGE_ESCAPE ; NUME[:VERMIN_CAGE_ESCAPE] = 89
    ENUM[90] = :TRIGGER_WEB ; NUME[:TRIGGER_WEB] = 90
    ENUM[91] = :MOOD_BUILDING_CLAIMED ; NUME[:MOOD_BUILDING_CLAIMED] = 91
    ENUM[92] = :ARTIFACT_BEGUN ; NUME[:ARTIFACT_BEGUN] = 92
    ENUM[93] = :MEGABEAST_ARRIVAL ; NUME[:MEGABEAST_ARRIVAL] = 93
    ENUM[94] = :BERSERK_CITIZEN ; NUME[:BERSERK_CITIZEN] = 94
    ENUM[95] = :MAGMA_DEFACES_ENGRAVING ; NUME[:MAGMA_DEFACES_ENGRAVING] = 95
    ENUM[96] = :ENGRAVING_MELTS ; NUME[:ENGRAVING_MELTS] = 96
    ENUM[97] = :MASTERPIECE_ARCHITECTURE ; NUME[:MASTERPIECE_ARCHITECTURE] = 97
    ENUM[98] = :MASTERPIECE_CONSTRUCTION ; NUME[:MASTERPIECE_CONSTRUCTION] = 98
    ENUM[99] = :MASTER_ARCHITECTURE_LOST ; NUME[:MASTER_ARCHITECTURE_LOST] = 99
    ENUM[100] = :MASTER_CONSTRUCTION_LOST ; NUME[:MASTER_CONSTRUCTION_LOST] = 100
    ENUM[101] = :ADV_AWAKEN ; NUME[:ADV_AWAKEN] = 101
    ENUM[102] = :ADV_SLEEP_INTERRUPTED ; NUME[:ADV_SLEEP_INTERRUPTED] = 102
    ENUM[103] = :CANCEL_JOB ; NUME[:CANCEL_JOB] = 103
    ENUM[104] = :ADV_CREATURE_DEATH ; NUME[:ADV_CREATURE_DEATH] = 104
    ENUM[105] = :CITIZEN_DEATH ; NUME[:CITIZEN_DEATH] = 105
    ENUM[106] = :PET_DEATH ; NUME[:PET_DEATH] = 106
    ENUM[107] = :ENDGAME_EVENT_1 ; NUME[:ENDGAME_EVENT_1] = 107
    ENUM[108] = :ENDGAME_EVENT_2 ; NUME[:ENDGAME_EVENT_2] = 108
    ENUM[109] = :FALL_OVER ; NUME[:FALL_OVER] = 109
    ENUM[110] = :CAUGHT_IN_FLAMES ; NUME[:CAUGHT_IN_FLAMES] = 110
    ENUM[111] = :CAUGHT_IN_WEB ; NUME[:CAUGHT_IN_WEB] = 111
    ENUM[112] = :UNIT_PROJECTILE_SLAM_BLOW_APART ; NUME[:UNIT_PROJECTILE_SLAM_BLOW_APART] = 112
    ENUM[113] = :UNIT_PROJECTILE_SLAM ; NUME[:UNIT_PROJECTILE_SLAM] = 113
    ENUM[114] = :UNIT_PROJECTILE_SLAM_INTO_UNIT ; NUME[:UNIT_PROJECTILE_SLAM_INTO_UNIT] = 114
    ENUM[115] = :VOMIT ; NUME[:VOMIT] = 115
    ENUM[116] = :LOSE_HOLD_OF_ITEM ; NUME[:LOSE_HOLD_OF_ITEM] = 116
    ENUM[117] = :REGAIN_CONSCIOUSNESS ; NUME[:REGAIN_CONSCIOUSNESS] = 117
    ENUM[118] = :FREE_FROM_WEB ; NUME[:FREE_FROM_WEB] = 118
    ENUM[119] = :PARALYZED ; NUME[:PARALYZED] = 119
    ENUM[120] = :OVERCOME_PARALYSIS ; NUME[:OVERCOME_PARALYSIS] = 120
    ENUM[121] = :NOT_STUNNED ; NUME[:NOT_STUNNED] = 121
    ENUM[122] = :EXHAUSTION ; NUME[:EXHAUSTION] = 122
    ENUM[123] = :PAIN_KO ; NUME[:PAIN_KO] = 123
    ENUM[124] = :BREAK_GRIP ; NUME[:BREAK_GRIP] = 124
    ENUM[125] = :NO_BREAK_GRIP ; NUME[:NO_BREAK_GRIP] = 125
    ENUM[126] = :BLOCK_FIRE ; NUME[:BLOCK_FIRE] = 126
    ENUM[127] = :BREATHE_FIRE ; NUME[:BREATHE_FIRE] = 127
    ENUM[128] = :SHOOT_WEB ; NUME[:SHOOT_WEB] = 128
    ENUM[129] = :PULL_OUT_DROP ; NUME[:PULL_OUT_DROP] = 129
    ENUM[130] = :STAND_UP ; NUME[:STAND_UP] = 130
    ENUM[131] = :MARTIAL_TRANCE ; NUME[:MARTIAL_TRANCE] = 131
    ENUM[132] = :MAT_BREATH ; NUME[:MAT_BREATH] = 132
    ENUM[133] = :ADV_REACTION_PRODUCTS ; NUME[:ADV_REACTION_PRODUCTS] = 133
    ENUM[134] = :NIGHT_ATTACK_STARTS ; NUME[:NIGHT_ATTACK_STARTS] = 134
    ENUM[135] = :NIGHT_ATTACK_ENDS ; NUME[:NIGHT_ATTACK_ENDS] = 135
    ENUM[136] = :NIGHT_ATTACK_TRAVEL ; NUME[:NIGHT_ATTACK_TRAVEL] = 136
    ENUM[137] = :GHOST_ATTACK ; NUME[:GHOST_ATTACK] = 137
    ENUM[138] = :FLAME_HIT ; NUME[:FLAME_HIT] = 138
    ENUM[139] = :TRAVEL_SITE_DISCOVERY ; NUME[:TRAVEL_SITE_DISCOVERY] = 139
    ENUM[140] = :TRAVEL_SITE_BUMP ; NUME[:TRAVEL_SITE_BUMP] = 140
    ENUM[141] = :ADVENTURE_INTRO ; NUME[:ADVENTURE_INTRO] = 141
    ENUM[142] = :CREATURE_SOUND ; NUME[:CREATURE_SOUND] = 142
    ENUM[143] = :CREATURE_STEALS_OBJECT ; NUME[:CREATURE_STEALS_OBJECT] = 143
    ENUM[144] = :FOUND_TRAP ; NUME[:FOUND_TRAP] = 144
    ENUM[145] = :BODY_TRANSFORMATION ; NUME[:BODY_TRANSFORMATION] = 145
    ENUM[146] = :INTERACTION_ACTOR ; NUME[:INTERACTION_ACTOR] = 146
    ENUM[147] = :INTERACTION_TARGET ; NUME[:INTERACTION_TARGET] = 147
    ENUM[148] = :UNDEAD_ATTACK ; NUME[:UNDEAD_ATTACK] = 148
    ENUM[149] = :CITIZEN_MISSING ; NUME[:CITIZEN_MISSING] = 149
    ENUM[150] = :PET_MISSING ; NUME[:PET_MISSING] = 150
    ENUM[151] = :EMBRACE ; NUME[:EMBRACE] = 151
    ENUM[152] = :STRANGE_RAIN_SNOW ; NUME[:STRANGE_RAIN_SNOW] = 152
    ENUM[153] = :STRANGE_CLOUD ; NUME[:STRANGE_CLOUD] = 153
    ENUM[154] = :SIMPLE_ANIMAL_ACTION ; NUME[:SIMPLE_ANIMAL_ACTION] = 154
    ENUM[155] = :FLOUNDER_IN_LIQUID ; NUME[:FLOUNDER_IN_LIQUID] = 155
    ENUM[156] = :TRAINING_DOWN_TO_SEMI_WILD ; NUME[:TRAINING_DOWN_TO_SEMI_WILD] = 156
    ENUM[157] = :TRAINING_FULL_REVERSION ; NUME[:TRAINING_FULL_REVERSION] = 157
    ENUM[158] = :ANIMAL_TRAINING_KNOWLEDGE ; NUME[:ANIMAL_TRAINING_KNOWLEDGE] = 158
    ENUM[159] = :SKIP_ON_LIQUID ; NUME[:SKIP_ON_LIQUID] = 159
    ENUM[160] = :DODGE_FLYING_OBJECT ; NUME[:DODGE_FLYING_OBJECT] = 160
    ENUM[161] = :REGULAR_CONVERSATION ; NUME[:REGULAR_CONVERSATION] = 161
    ENUM[162] = :BANDIT_EMPTY_CONTAINER ; NUME[:BANDIT_EMPTY_CONTAINER] = 162
    ENUM[163] = :BANDIT_GRAB_ITEM ; NUME[:BANDIT_GRAB_ITEM] = 163
    ENUM[164] = :COMBAT_EVENT_ATTACK_INTERRUPTED ; NUME[:COMBAT_EVENT_ATTACK_INTERRUPTED] = 164
    ENUM[165] = :COMBAT_WRESTLE_CATCH_ATTACK ; NUME[:COMBAT_WRESTLE_CATCH_ATTACK] = 165
    ENUM[166] = :FAIL_TO_GRAB_SURFACE ; NUME[:FAIL_TO_GRAB_SURFACE] = 166
    ENUM[167] = :LOSE_HOLD_OF_SURFACE ; NUME[:LOSE_HOLD_OF_SURFACE] = 167
    ENUM[168] = :TRAVEL_COMPLAINT ; NUME[:TRAVEL_COMPLAINT] = 168
    ENUM[169] = :LOSE_EMOTION ; NUME[:LOSE_EMOTION] = 169
    ENUM[170] = :REORGANIZE_POSSESSIONS ; NUME[:REORGANIZE_POSSESSIONS] = 170
    ENUM[171] = :PUSH_ITEM ; NUME[:PUSH_ITEM] = 171
    ENUM[172] = :DRAW_ITEM ; NUME[:DRAW_ITEM] = 172
    ENUM[173] = :STRAP_ITEM ; NUME[:STRAP_ITEM] = 173
    ENUM[174] = :GAIN_SITE_CONTROL ; NUME[:GAIN_SITE_CONTROL] = 174
    ENUM[175] = :CONFLICT_CONVERSATION ; NUME[:CONFLICT_CONVERSATION] = 175
    ENUM[176] = :FORT_POSITION_SUCCESSION ; NUME[:FORT_POSITION_SUCCESSION] = 176
    ENUM[177] = :MECHANISM_SOUND ; NUME[:MECHANISM_SOUND] = 177
    ENUM[178] = :BIRTH_WILD_ANIMAL ; NUME[:BIRTH_WILD_ANIMAL] = 178
    ENUM[179] = :STRESSED_CITIZEN ; NUME[:STRESSED_CITIZEN] = 179
    ENUM[180] = :CITIZEN_LOST_TO_STRESS ; NUME[:CITIZEN_LOST_TO_STRESS] = 180
    ENUM[181] = :CITIZEN_TANTRUM ; NUME[:CITIZEN_TANTRUM] = 181
    ENUM[182] = :MOVED_OUT_OF_RANGE ; NUME[:MOVED_OUT_OF_RANGE] = 182
    ENUM[183] = :CANNOT_JUMP ; NUME[:CANNOT_JUMP] = 183
    ENUM[184] = :NO_TRACKS ; NUME[:NO_TRACKS] = 184
    ENUM[185] = :ALREADY_SEARCHED_AREA ; NUME[:ALREADY_SEARCHED_AREA] = 185
    ENUM[186] = :SEARCH_FOUND_SOMETHING ; NUME[:SEARCH_FOUND_SOMETHING] = 186
    ENUM[187] = :SEARCH_FOUND_NOTHING ; NUME[:SEARCH_FOUND_NOTHING] = 187
    ENUM[188] = :NOTHING_TO_INTERACT ; NUME[:NOTHING_TO_INTERACT] = 188
    ENUM[189] = :NOTHING_TO_EXAMINE ; NUME[:NOTHING_TO_EXAMINE] = 189
    ENUM[190] = :YOU_YIELDED ; NUME[:YOU_YIELDED] = 190
    ENUM[191] = :YOU_UNYIELDED ; NUME[:YOU_UNYIELDED] = 191
    ENUM[192] = :YOU_STRAP_ITEM ; NUME[:YOU_STRAP_ITEM] = 192
    ENUM[193] = :YOU_DRAW_ITEM ; NUME[:YOU_DRAW_ITEM] = 193
    ENUM[194] = :NO_GRASP_TO_DRAW_ITEM ; NUME[:NO_GRASP_TO_DRAW_ITEM] = 194
    ENUM[195] = :NO_ITEM_TO_STRAP ; NUME[:NO_ITEM_TO_STRAP] = 195
    ENUM[196] = :NO_INV_TO_REMOVE ; NUME[:NO_INV_TO_REMOVE] = 196
    ENUM[197] = :NO_INV_TO_WEAR ; NUME[:NO_INV_TO_WEAR] = 197
    ENUM[198] = :NO_INV_TO_EAT ; NUME[:NO_INV_TO_EAT] = 198
    ENUM[199] = :NO_INV_TO_CONTAIN ; NUME[:NO_INV_TO_CONTAIN] = 199
    ENUM[200] = :NO_INV_TO_DROP ; NUME[:NO_INV_TO_DROP] = 200
    ENUM[201] = :NOTHING_TO_PICK_UP ; NUME[:NOTHING_TO_PICK_UP] = 201
    ENUM[202] = :NO_INV_TO_THROW ; NUME[:NO_INV_TO_THROW] = 202
    ENUM[203] = :NO_INV_TO_FIRE ; NUME[:NO_INV_TO_FIRE] = 203
    ENUM[204] = :CURRENT_SMELL ; NUME[:CURRENT_SMELL] = 204
    ENUM[205] = :CURRENT_WEATHER ; NUME[:CURRENT_WEATHER] = 205
    ENUM[206] = :CURRENT_TEMPERATURE ; NUME[:CURRENT_TEMPERATURE] = 206
    ENUM[207] = :CURRENT_DATE ; NUME[:CURRENT_DATE] = 207
    ENUM[208] = :NO_GRASP_FOR_PICKUP ; NUME[:NO_GRASP_FOR_PICKUP] = 208
    ENUM[209] = :TRAVEL_ADVISORY ; NUME[:TRAVEL_ADVISORY] = 209
    ENUM[210] = :CANNOT_CLIMB ; NUME[:CANNOT_CLIMB] = 210
    ENUM[211] = :CANNOT_STAND ; NUME[:CANNOT_STAND] = 211
    ENUM[212] = :MUST_UNRETRACT_FIRST ; NUME[:MUST_UNRETRACT_FIRST] = 212
    ENUM[213] = :CANNOT_REST ; NUME[:CANNOT_REST] = 213
    ENUM[214] = :CANNOT_MAKE_CAMPFIRE ; NUME[:CANNOT_MAKE_CAMPFIRE] = 214
    ENUM[215] = :MADE_CAMPFIRE ; NUME[:MADE_CAMPFIRE] = 215
    ENUM[216] = :CANNOT_SET_FIRE ; NUME[:CANNOT_SET_FIRE] = 216
    ENUM[217] = :SET_FIRE ; NUME[:SET_FIRE] = 217
    ENUM[218] = :DAWN_BREAKS ; NUME[:DAWN_BREAKS] = 218
    ENUM[219] = :NOON ; NUME[:NOON] = 219
    ENUM[220] = :NIGHTFALL ; NUME[:NIGHTFALL] = 220
    ENUM[221] = :NO_INV_INTERACTION ; NUME[:NO_INV_INTERACTION] = 221
    ENUM[222] = :EMPTY_CONTAINER ; NUME[:EMPTY_CONTAINER] = 222
    ENUM[223] = :TAKE_OUT_OF_CONTAINER ; NUME[:TAKE_OUT_OF_CONTAINER] = 223
    ENUM[224] = :NO_CONTAINER_FOR_ITEM ; NUME[:NO_CONTAINER_FOR_ITEM] = 224
    ENUM[225] = :PUT_INTO_CONTAINER ; NUME[:PUT_INTO_CONTAINER] = 225
    ENUM[226] = :EAT_ITEM ; NUME[:EAT_ITEM] = 226
    ENUM[227] = :DRINK_ITEM ; NUME[:DRINK_ITEM] = 227
    ENUM[228] = :CONSUME_FAILURE ; NUME[:CONSUME_FAILURE] = 228
    ENUM[229] = :DROP_ITEM ; NUME[:DROP_ITEM] = 229
    ENUM[230] = :PICK_UP_ITEM ; NUME[:PICK_UP_ITEM] = 230
    ENUM[231] = :YOU_BUILDING_INTERACTION ; NUME[:YOU_BUILDING_INTERACTION] = 231
    ENUM[232] = :YOU_ITEM_INTERACTION ; NUME[:YOU_ITEM_INTERACTION] = 232
    ENUM[233] = :YOU_TEMPERATURE_EFFECTS ; NUME[:YOU_TEMPERATURE_EFFECTS] = 233
    ENUM[234] = :PROFESSION_CHANGES ; NUME[:PROFESSION_CHANGES] = 234
    ENUM[235] = :RECRUIT_PROMOTED ; NUME[:RECRUIT_PROMOTED] = 235
    ENUM[236] = :SOLDIER_BECOMES_MASTER ; NUME[:SOLDIER_BECOMES_MASTER] = 236
    ENUM[237] = :RESOLVE_SHARED_ITEMS ; NUME[:RESOLVE_SHARED_ITEMS] = 237
    ENUM[238] = :COUGH_BLOOD ; NUME[:COUGH_BLOOD] = 238
    ENUM[239] = :VOMIT_BLOOD ; NUME[:VOMIT_BLOOD] = 239
    ENUM[240] = :MERCHANTS_UNLOADING ; NUME[:MERCHANTS_UNLOADING] = 240
    ENUM[241] = :MERCHANTS_NEED_DEPOT ; NUME[:MERCHANTS_NEED_DEPOT] = 241
    ENUM[242] = :MERCHANT_WAGONS_BYPASSED ; NUME[:MERCHANT_WAGONS_BYPASSED] = 242
    ENUM[243] = :MERCHANTS_LEAVING_SOON ; NUME[:MERCHANTS_LEAVING_SOON] = 243
    ENUM[244] = :MERCHANTS_EMBARKED ; NUME[:MERCHANTS_EMBARKED] = 244
    ENUM[245] = :PET_LOSES_DEAD_OWNER ; NUME[:PET_LOSES_DEAD_OWNER] = 245
    ENUM[246] = :PET_ADOPTS_OWNER ; NUME[:PET_ADOPTS_OWNER] = 246
    ENUM[247] = :VERMIN_BITE ; NUME[:VERMIN_BITE] = 247
    ENUM[248] = :UNABLE_TO_COMPLETE_BUILDING ; NUME[:UNABLE_TO_COMPLETE_BUILDING] = 248
    ENUM[249] = :JOBS_REMOVED_FROM_UNPOWERED_BUILDING ; NUME[:JOBS_REMOVED_FROM_UNPOWERED_BUILDING] = 249
    ENUM[250] = :CITIZEN_SNATCHED ; NUME[:CITIZEN_SNATCHED] = 250
    ENUM[251] = :VERMIN_DISTURBED ; NUME[:VERMIN_DISTURBED] = 251
    ENUM[252] = :LAND_GAINS_STATUS ; NUME[:LAND_GAINS_STATUS] = 252
    ENUM[253] = :LAND_ELEVATED_STATUS ; NUME[:LAND_ELEVATED_STATUS] = 253
    ENUM[254] = :MASTERPIECE_CRAFTED ; NUME[:MASTERPIECE_CRAFTED] = 254
    ENUM[255] = :ARTWORK_DEFACED ; NUME[:ARTWORK_DEFACED] = 255
    ENUM[256] = :POWER_LEARNED ; NUME[:POWER_LEARNED] = 256
    ENUM[257] = :YOU_FEED_ON_SUCKEE ; NUME[:YOU_FEED_ON_SUCKEE] = 257
    ENUM[258] = :ANIMAL_TRAINED ; NUME[:ANIMAL_TRAINED] = 258
    ENUM[259] = :DYED_MASTERPIECE ; NUME[:DYED_MASTERPIECE] = 259
    ENUM[260] = :COOKED_MASTERPIECE ; NUME[:COOKED_MASTERPIECE] = 260
    ENUM[261] = :MANDATE_ENDS ; NUME[:MANDATE_ENDS] = 261
    ENUM[262] = :SLOWDOWN_ENDS ; NUME[:SLOWDOWN_ENDS] = 262
    ENUM[263] = :FAREWELL_HELPER ; NUME[:FAREWELL_HELPER] = 263
    ENUM[264] = :ELECTION_RESULTS ; NUME[:ELECTION_RESULTS] = 264
    ENUM[265] = :SITE_PRESENT ; NUME[:SITE_PRESENT] = 265
    ENUM[266] = :CONSTRUCTION_SUSPENDED ; NUME[:CONSTRUCTION_SUSPENDED] = 266
    ENUM[267] = :LINKAGE_SUSPENDED ; NUME[:LINKAGE_SUSPENDED] = 267
    ENUM[268] = :QUOTA_FILLED ; NUME[:QUOTA_FILLED] = 268
    ENUM[269] = :JOB_OVERWRITTEN ; NUME[:JOB_OVERWRITTEN] = 269
    ENUM[270] = :NOTHING_TO_CATCH_IN_WATER ; NUME[:NOTHING_TO_CATCH_IN_WATER] = 270
    ENUM[271] = :DEMAND_FORGOTTEN ; NUME[:DEMAND_FORGOTTEN] = 271
    ENUM[272] = :NEW_DEMAND ; NUME[:NEW_DEMAND] = 272
    ENUM[273] = :NEW_MANDATE ; NUME[:NEW_MANDATE] = 273
    ENUM[274] = :PRICES_ALTERED ; NUME[:PRICES_ALTERED] = 274
    ENUM[275] = :NAMED_RESIDENT_CREATURE ; NUME[:NAMED_RESIDENT_CREATURE] = 275
    ENUM[276] = :SOMEBODY_GROWS_UP ; NUME[:SOMEBODY_GROWS_UP] = 276
    ENUM[277] = :GUILD_REQUEST_TAKEN ; NUME[:GUILD_REQUEST_TAKEN] = 277
    ENUM[278] = :GUILD_WAGES_CHANGED ; NUME[:GUILD_WAGES_CHANGED] = 278
    ENUM[279] = :NEW_WORK_MANDATE ; NUME[:NEW_WORK_MANDATE] = 279
    ENUM[280] = :CITIZEN_BECOMES_SOLDIER ; NUME[:CITIZEN_BECOMES_SOLDIER] = 280
    ENUM[281] = :CITIZEN_BECOMES_NONSOLDIER ; NUME[:CITIZEN_BECOMES_NONSOLDIER] = 281
    ENUM[282] = :PARTY_ORGANIZED ; NUME[:PARTY_ORGANIZED] = 282
    ENUM[283] = :POSSESSED_TANTRUM ; NUME[:POSSESSED_TANTRUM] = 283
    ENUM[284] = :BUILDING_TOPPLED_BY_GHOST ; NUME[:BUILDING_TOPPLED_BY_GHOST] = 284
    ENUM[285] = :MASTERFUL_IMPROVEMENT ; NUME[:MASTERFUL_IMPROVEMENT] = 285
    ENUM[286] = :MASTERPIECE_ENGRAVING ; NUME[:MASTERPIECE_ENGRAVING] = 286
    ENUM[287] = :MARRIAGE ; NUME[:MARRIAGE] = 287
    ENUM[288] = :NO_MARRIAGE_CELEBRATION ; NUME[:NO_MARRIAGE_CELEBRATION] = 288
    ENUM[289] = :CURIOUS_GUZZLER ; NUME[:CURIOUS_GUZZLER] = 289
    ENUM[290] = :WEATHER_BECOMES_CLEAR ; NUME[:WEATHER_BECOMES_CLEAR] = 290
    ENUM[291] = :WEATHER_BECOMES_SNOW ; NUME[:WEATHER_BECOMES_SNOW] = 291
    ENUM[292] = :WEATHER_BECOMES_RAIN ; NUME[:WEATHER_BECOMES_RAIN] = 292
    ENUM[293] = :SEASON_WET ; NUME[:SEASON_WET] = 293
    ENUM[294] = :SEASON_DRY ; NUME[:SEASON_DRY] = 294
    ENUM[295] = :SEASON_SPRING ; NUME[:SEASON_SPRING] = 295
    ENUM[296] = :SEASON_SUMMER ; NUME[:SEASON_SUMMER] = 296
    ENUM[297] = :SEASON_AUTUMN ; NUME[:SEASON_AUTUMN] = 297
    ENUM[298] = :SEASON_WINTER ; NUME[:SEASON_WINTER] = 298
end

class AppearanceModifierType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :HEIGHT ; NUME[:HEIGHT] = 0
    ENUM[1] = :BROADNESS ; NUME[:BROADNESS] = 1
    ENUM[2] = :LENGTH ; NUME[:LENGTH] = 2
    ENUM[3] = :CLOSE_SET ; NUME[:CLOSE_SET] = 3
    ENUM[4] = :DEEP_SET ; NUME[:DEEP_SET] = 4
    ENUM[5] = :HIGH_POSITION ; NUME[:HIGH_POSITION] = 5
    ENUM[6] = :LARGE_IRIS ; NUME[:LARGE_IRIS] = 6
    ENUM[7] = :WRINKLY ; NUME[:WRINKLY] = 7
    ENUM[8] = :CURLY ; NUME[:CURLY] = 8
    ENUM[9] = :CONVEX ; NUME[:CONVEX] = 9
    ENUM[10] = :DENSE ; NUME[:DENSE] = 10
    ENUM[11] = :THICKNESS ; NUME[:THICKNESS] = 11
    ENUM[12] = :UPTURNED ; NUME[:UPTURNED] = 12
    ENUM[13] = :SPLAYED_OUT ; NUME[:SPLAYED_OUT] = 13
    ENUM[14] = :HANGING_LOBES ; NUME[:HANGING_LOBES] = 14
    ENUM[15] = :GAPS ; NUME[:GAPS] = 15
    ENUM[16] = :HIGH_CHEEKBONES ; NUME[:HIGH_CHEEKBONES] = 16
    ENUM[17] = :BROAD_CHIN ; NUME[:BROAD_CHIN] = 17
    ENUM[18] = :JUTTING_CHIN ; NUME[:JUTTING_CHIN] = 18
    ENUM[19] = :SQUARE_CHIN ; NUME[:SQUARE_CHIN] = 19
    ENUM[20] = :ROUND_VS_NARROW ; NUME[:ROUND_VS_NARROW] = 20
    ENUM[21] = :GREASY ; NUME[:GREASY] = 21
    ENUM[22] = :DEEP_VOICE ; NUME[:DEEP_VOICE] = 22
    ENUM[23] = :RASPY_VOICE ; NUME[:RASPY_VOICE] = 23
end

class ArmorFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :METAL_ARMOR_LEVELS ; NUME[:METAL_ARMOR_LEVELS] = 0
end

class ArmorGeneralFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :SOFT ; NUME[:SOFT] = 0
    ENUM[1] = :HARD ; NUME[:HARD] = 1
    ENUM[2] = :METAL ; NUME[:METAL] = 2
    ENUM[3] = :BARRED ; NUME[:BARRED] = 3
    ENUM[4] = :SCALED ; NUME[:SCALED] = 4
    ENUM[5] = :LEATHER ; NUME[:LEATHER] = 5
    ENUM[6] = :SHAPED ; NUME[:SHAPED] = 6
    ENUM[7] = :CHAIN_METAL_TEXT ; NUME[:CHAIN_METAL_TEXT] = 7
    ENUM[8] = :STRUCTURAL_ELASTICITY_WOVEN_THREAD ; NUME[:STRUCTURAL_ELASTICITY_WOVEN_THREAD] = 8
    ENUM[9] = :STRUCTURAL_ELASTICITY_CHAIN_METAL ; NUME[:STRUCTURAL_ELASTICITY_CHAIN_METAL] = 9
    ENUM[10] = :STRUCTURAL_ELASTICITY_CHAIN_ALL ; NUME[:STRUCTURAL_ELASTICITY_CHAIN_ALL] = 10
end

class ArtFacetType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :OWN_RACE ; NUME[:OWN_RACE] = 0
    ENUM[1] = :FANCIFUL ; NUME[:FANCIFUL] = 1
    ENUM[2] = :GOOD ; NUME[:GOOD] = 2
    ENUM[3] = :EVIL ; NUME[:EVIL] = 3
end

class ArtImageElementType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :CREATURE ; NUME[:CREATURE] = 0
    ENUM[1] = :PLANT ; NUME[:PLANT] = 1
    ENUM[2] = :TREE ; NUME[:TREE] = 2
    ENUM[3] = :SHAPE ; NUME[:SHAPE] = 3
    ENUM[4] = :ITEM ; NUME[:ITEM] = 4
end

class ArtImagePropertyType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :TransitiveVerb ; NUME[:TransitiveVerb] = 0
    ENUM[1] = :IntransitiveVerb ; NUME[:IntransitiveVerb] = 1
end

class ArtImagePropertyVerb < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Withering ; NUME[:Withering] = 0
    ENUM[1] = :SurroundedBy ; NUME[:SurroundedBy] = 1
    ENUM[2] = :Massacring ; NUME[:Massacring] = 2
    ENUM[3] = :Fighting ; NUME[:Fighting] = 3
    ENUM[4] = :Laboring ; NUME[:Laboring] = 4
    ENUM[5] = :Greeting ; NUME[:Greeting] = 5
    ENUM[6] = :Refusing ; NUME[:Refusing] = 6
    ENUM[7] = :Speaking ; NUME[:Speaking] = 7
    ENUM[8] = :Embracing ; NUME[:Embracing] = 8
    ENUM[9] = :StrikingDown ; NUME[:StrikingDown] = 9
    ENUM[10] = :MenacingPose ; NUME[:MenacingPose] = 10
    ENUM[11] = :Traveling ; NUME[:Traveling] = 11
    ENUM[12] = :Raising ; NUME[:Raising] = 12
    ENUM[13] = :Hiding ; NUME[:Hiding] = 13
    ENUM[14] = :LookingConfused ; NUME[:LookingConfused] = 14
    ENUM[15] = :LookingTerrified ; NUME[:LookingTerrified] = 15
    ENUM[16] = :Devouring ; NUME[:Devouring] = 16
    ENUM[17] = :Admiring ; NUME[:Admiring] = 17
    ENUM[18] = :Burning ; NUME[:Burning] = 18
    ENUM[19] = :Weeping ; NUME[:Weeping] = 19
    ENUM[20] = :LookingDejected ; NUME[:LookingDejected] = 20
    ENUM[21] = :Cringing ; NUME[:Cringing] = 21
    ENUM[22] = :Screaming ; NUME[:Screaming] = 22
    ENUM[23] = :SubmissiveGesture ; NUME[:SubmissiveGesture] = 23
    ENUM[24] = :FetalPosition ; NUME[:FetalPosition] = 24
    ENUM[25] = :SmearedIntoSpiral ; NUME[:SmearedIntoSpiral] = 25
    ENUM[26] = :Falling ; NUME[:Falling] = 26
    ENUM[27] = :Dead ; NUME[:Dead] = 27
    ENUM[28] = :Laughing ; NUME[:Laughing] = 28
    ENUM[29] = :LookingOffended ; NUME[:LookingOffended] = 29
    ENUM[30] = :BeingShot ; NUME[:BeingShot] = 30
    ENUM[31] = :PlaintiveGesture ; NUME[:PlaintiveGesture] = 31
    ENUM[32] = :Melting ; NUME[:Melting] = 32
    ENUM[33] = :Shooting ; NUME[:Shooting] = 33
    ENUM[34] = :Torturing ; NUME[:Torturing] = 34
    ENUM[35] = :CommittingDepravedAct ; NUME[:CommittingDepravedAct] = 35
    ENUM[36] = :Praying ; NUME[:Praying] = 36
    ENUM[37] = :Contemplating ; NUME[:Contemplating] = 37
    ENUM[38] = :Cooking ; NUME[:Cooking] = 38
    ENUM[39] = :Engraving ; NUME[:Engraving] = 39
    ENUM[40] = :Prostrating ; NUME[:Prostrating] = 40
    ENUM[41] = :Suffering ; NUME[:Suffering] = 41
    ENUM[42] = :BeingImpaled ; NUME[:BeingImpaled] = 42
    ENUM[43] = :BeingContorted ; NUME[:BeingContorted] = 43
    ENUM[44] = :BeingFlayed ; NUME[:BeingFlayed] = 44
    ENUM[45] = :HangingFrom ; NUME[:HangingFrom] = 45
    ENUM[46] = :BeingMutilated ; NUME[:BeingMutilated] = 46
    ENUM[47] = :TriumphantPose ; NUME[:TriumphantPose] = 47
end

class BarrackPreferenceCategory < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Bed ; NUME[:Bed] = 0
    ENUM[1] = :Armorstand ; NUME[:Armorstand] = 1
    ENUM[2] = :Box ; NUME[:Box] = 2
    ENUM[3] = :Cabinet ; NUME[:Cabinet] = 3
end

class BiomeType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :MOUNTAIN ; NUME[:MOUNTAIN] = 0
    ENUM[1] = :GLACIER ; NUME[:GLACIER] = 1
    ENUM[2] = :TUNDRA ; NUME[:TUNDRA] = 2
    ENUM[3] = :SWAMP_TEMPERATE_FRESHWATER ; NUME[:SWAMP_TEMPERATE_FRESHWATER] = 3
    ENUM[4] = :SWAMP_TEMPERATE_SALTWATER ; NUME[:SWAMP_TEMPERATE_SALTWATER] = 4
    ENUM[5] = :MARSH_TEMPERATE_FRESHWATER ; NUME[:MARSH_TEMPERATE_FRESHWATER] = 5
    ENUM[6] = :MARSH_TEMPERATE_SALTWATER ; NUME[:MARSH_TEMPERATE_SALTWATER] = 6
    ENUM[7] = :SWAMP_TROPICAL_FRESHWATER ; NUME[:SWAMP_TROPICAL_FRESHWATER] = 7
    ENUM[8] = :SWAMP_TROPICAL_SALTWATER ; NUME[:SWAMP_TROPICAL_SALTWATER] = 8
    ENUM[9] = :SWAMP_MANGROVE ; NUME[:SWAMP_MANGROVE] = 9
    ENUM[10] = :MARSH_TROPICAL_FRESHWATER ; NUME[:MARSH_TROPICAL_FRESHWATER] = 10
    ENUM[11] = :MARSH_TROPICAL_SALTWATER ; NUME[:MARSH_TROPICAL_SALTWATER] = 11
    ENUM[12] = :FOREST_TAIGA ; NUME[:FOREST_TAIGA] = 12
    ENUM[13] = :FOREST_TEMPERATE_CONIFER ; NUME[:FOREST_TEMPERATE_CONIFER] = 13
    ENUM[14] = :FOREST_TEMPERATE_BROADLEAF ; NUME[:FOREST_TEMPERATE_BROADLEAF] = 14
    ENUM[15] = :FOREST_TROPICAL_CONIFER ; NUME[:FOREST_TROPICAL_CONIFER] = 15
    ENUM[16] = :FOREST_TROPICAL_DRY_BROADLEAF ; NUME[:FOREST_TROPICAL_DRY_BROADLEAF] = 16
    ENUM[17] = :FOREST_TROPICAL_MOIST_BROADLEAF ; NUME[:FOREST_TROPICAL_MOIST_BROADLEAF] = 17
    ENUM[18] = :GRASSLAND_TEMPERATE ; NUME[:GRASSLAND_TEMPERATE] = 18
    ENUM[19] = :SAVANNA_TEMPERATE ; NUME[:SAVANNA_TEMPERATE] = 19
    ENUM[20] = :SHRUBLAND_TEMPERATE ; NUME[:SHRUBLAND_TEMPERATE] = 20
    ENUM[21] = :GRASSLAND_TROPICAL ; NUME[:GRASSLAND_TROPICAL] = 21
    ENUM[22] = :SAVANNA_TROPICAL ; NUME[:SAVANNA_TROPICAL] = 22
    ENUM[23] = :SHRUBLAND_TROPICAL ; NUME[:SHRUBLAND_TROPICAL] = 23
    ENUM[24] = :DESERT_BADLAND ; NUME[:DESERT_BADLAND] = 24
    ENUM[25] = :DESERT_ROCK ; NUME[:DESERT_ROCK] = 25
    ENUM[26] = :DESERT_SAND ; NUME[:DESERT_SAND] = 26
    ENUM[27] = :OCEAN_TROPICAL ; NUME[:OCEAN_TROPICAL] = 27
    ENUM[28] = :OCEAN_TEMPERATE ; NUME[:OCEAN_TEMPERATE] = 28
    ENUM[29] = :OCEAN_ARCTIC ; NUME[:OCEAN_ARCTIC] = 29
    ENUM[30] = :POOL_TEMPERATE_FRESHWATER ; NUME[:POOL_TEMPERATE_FRESHWATER] = 30
    ENUM[31] = :POOL_TEMPERATE_BRACKISHWATER ; NUME[:POOL_TEMPERATE_BRACKISHWATER] = 31
    ENUM[32] = :POOL_TEMPERATE_SALTWATER ; NUME[:POOL_TEMPERATE_SALTWATER] = 32
    ENUM[33] = :POOL_TROPICAL_FRESHWATER ; NUME[:POOL_TROPICAL_FRESHWATER] = 33
    ENUM[34] = :POOL_TROPICAL_BRACKISHWATER ; NUME[:POOL_TROPICAL_BRACKISHWATER] = 34
    ENUM[35] = :POOL_TROPICAL_SALTWATER ; NUME[:POOL_TROPICAL_SALTWATER] = 35
    ENUM[36] = :LAKE_TEMPERATE_FRESHWATER ; NUME[:LAKE_TEMPERATE_FRESHWATER] = 36
    ENUM[37] = :LAKE_TEMPERATE_BRACKISHWATER ; NUME[:LAKE_TEMPERATE_BRACKISHWATER] = 37
    ENUM[38] = :LAKE_TEMPERATE_SALTWATER ; NUME[:LAKE_TEMPERATE_SALTWATER] = 38
    ENUM[39] = :LAKE_TROPICAL_FRESHWATER ; NUME[:LAKE_TROPICAL_FRESHWATER] = 39
    ENUM[40] = :LAKE_TROPICAL_BRACKISHWATER ; NUME[:LAKE_TROPICAL_BRACKISHWATER] = 40
    ENUM[41] = :LAKE_TROPICAL_SALTWATER ; NUME[:LAKE_TROPICAL_SALTWATER] = 41
    ENUM[42] = :RIVER_TEMPERATE_FRESHWATER ; NUME[:RIVER_TEMPERATE_FRESHWATER] = 42
    ENUM[43] = :RIVER_TEMPERATE_BRACKISHWATER ; NUME[:RIVER_TEMPERATE_BRACKISHWATER] = 43
    ENUM[44] = :RIVER_TEMPERATE_SALTWATER ; NUME[:RIVER_TEMPERATE_SALTWATER] = 44
    ENUM[45] = :RIVER_TROPICAL_FRESHWATER ; NUME[:RIVER_TROPICAL_FRESHWATER] = 45
    ENUM[46] = :RIVER_TROPICAL_BRACKISHWATER ; NUME[:RIVER_TROPICAL_BRACKISHWATER] = 46
    ENUM[47] = :RIVER_TROPICAL_SALTWATER ; NUME[:RIVER_TROPICAL_SALTWATER] = 47
    ENUM[48] = :SUBTERRANEAN_WATER ; NUME[:SUBTERRANEAN_WATER] = 48
    ENUM[49] = :SUBTERRANEAN_CHASM ; NUME[:SUBTERRANEAN_CHASM] = 49
    ENUM[50] = :SUBTERRANEAN_LAVA ; NUME[:SUBTERRANEAN_LAVA] = 50
end

class BlockSquareEventType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Mineral ; NUME[:Mineral] = 0
    ENUM[1] = :FrozenLiquid ; NUME[:FrozenLiquid] = 1
    ENUM[2] = :WorldConstruction ; NUME[:WorldConstruction] = 2
    ENUM[3] = :MaterialSpatter ; NUME[:MaterialSpatter] = 3
    ENUM[4] = :Grass ; NUME[:Grass] = 4
    ENUM[5] = :Spoor ; NUME[:Spoor] = 5
    ENUM[6] = :ItemSpatter ; NUME[:ItemSpatter] = 6
    ENUM[7] = :DesignationPriority ; NUME[:DesignationPriority] = 7
end

class BodyPartLayerFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :CONNECTS ; NUME[:CONNECTS] = 0
end

class BodyPartRawFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :HEAD ; NUME[:HEAD] = 0
    ENUM[1] = :UPPERBODY ; NUME[:UPPERBODY] = 1
    ENUM[2] = :LOWERBODY ; NUME[:LOWERBODY] = 2
    ENUM[3] = :SIGHT ; NUME[:SIGHT] = 3
    ENUM[4] = :EMBEDDED ; NUME[:EMBEDDED] = 4
    ENUM[5] = :INTERNAL ; NUME[:INTERNAL] = 5
    ENUM[6] = :CIRCULATION ; NUME[:CIRCULATION] = 6
    ENUM[7] = :SKELETON ; NUME[:SKELETON] = 7
    ENUM[8] = :LIMB ; NUME[:LIMB] = 8
    ENUM[9] = :GRASP ; NUME[:GRASP] = 9
    ENUM[10] = :STANCE ; NUME[:STANCE] = 10
    ENUM[11] = :GUTS ; NUME[:GUTS] = 11
    ENUM[12] = :BREATHE ; NUME[:BREATHE] = 12
    ENUM[13] = :SMALL ; NUME[:SMALL] = 13
    ENUM[14] = :THROAT ; NUME[:THROAT] = 14
    ENUM[15] = :JOINT ; NUME[:JOINT] = 15
    ENUM[16] = :THOUGHT ; NUME[:THOUGHT] = 16
    ENUM[17] = :NERVOUS ; NUME[:NERVOUS] = 17
    ENUM[18] = :RIGHT ; NUME[:RIGHT] = 18
    ENUM[19] = :LEFT ; NUME[:LEFT] = 19
    ENUM[20] = :HEAR ; NUME[:HEAR] = 20
    ENUM[21] = :SMELL ; NUME[:SMELL] = 21
    ENUM[22] = :FLIER ; NUME[:FLIER] = 22
    ENUM[23] = :DIGIT ; NUME[:DIGIT] = 23
    ENUM[24] = :MOUTH ; NUME[:MOUTH] = 24
    ENUM[25] = :APERTURE ; NUME[:APERTURE] = 25
    ENUM[26] = :SOCKET ; NUME[:SOCKET] = 26
    ENUM[27] = :TOTEMABLE ; NUME[:TOTEMABLE] = 27
    ENUM[30] = :UNDER_PRESSURE ; NUME[:UNDER_PRESSURE] = 30
    ENUM[32] = :VERMIN_BUTCHER_ITEM ; NUME[:VERMIN_BUTCHER_ITEM] = 32
    ENUM[33] = :CONNECTOR ; NUME[:CONNECTOR] = 33
end

class BodyPartTemplateContype < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :UPPERBODY ; NUME[:UPPERBODY] = 0
    ENUM[1] = :LOWERBODY ; NUME[:LOWERBODY] = 1
    ENUM[2] = :HEAD ; NUME[:HEAD] = 2
    ENUM[3] = :GRASP ; NUME[:GRASP] = 3
    ENUM[4] = :STANCE ; NUME[:STANCE] = 4
end

class BodyPartTemplateFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :HEAD ; NUME[:HEAD] = 0
    ENUM[1] = :UPPERBODY ; NUME[:UPPERBODY] = 1
    ENUM[2] = :LOWERBODY ; NUME[:LOWERBODY] = 2
    ENUM[3] = :SIGHT ; NUME[:SIGHT] = 3
    ENUM[4] = :EMBEDDED ; NUME[:EMBEDDED] = 4
    ENUM[5] = :INTERNAL ; NUME[:INTERNAL] = 5
    ENUM[6] = :CIRCULATION ; NUME[:CIRCULATION] = 6
    ENUM[7] = :SKELETON ; NUME[:SKELETON] = 7
    ENUM[8] = :LIMB ; NUME[:LIMB] = 8
    ENUM[9] = :GRASP ; NUME[:GRASP] = 9
    ENUM[10] = :STANCE ; NUME[:STANCE] = 10
    ENUM[11] = :GUTS ; NUME[:GUTS] = 11
    ENUM[12] = :BREATHE ; NUME[:BREATHE] = 12
    ENUM[13] = :SMALL ; NUME[:SMALL] = 13
    ENUM[14] = :THROAT ; NUME[:THROAT] = 14
    ENUM[15] = :JOINT ; NUME[:JOINT] = 15
    ENUM[16] = :THOUGHT ; NUME[:THOUGHT] = 16
    ENUM[17] = :NERVOUS ; NUME[:NERVOUS] = 17
    ENUM[18] = :RIGHT ; NUME[:RIGHT] = 18
    ENUM[19] = :LEFT ; NUME[:LEFT] = 19
    ENUM[20] = :HEAR ; NUME[:HEAR] = 20
    ENUM[21] = :SMELL ; NUME[:SMELL] = 21
    ENUM[22] = :FLIER ; NUME[:FLIER] = 22
    ENUM[23] = :DIGIT ; NUME[:DIGIT] = 23
    ENUM[24] = :MOUTH ; NUME[:MOUTH] = 24
    ENUM[25] = :APERTURE ; NUME[:APERTURE] = 25
    ENUM[26] = :SOCKET ; NUME[:SOCKET] = 26
    ENUM[27] = :TOTEMABLE ; NUME[:TOTEMABLE] = 27
    ENUM[28] = :UNDER_PRESSURE ; NUME[:UNDER_PRESSURE] = 28
    ENUM[29] = :VERMIN_BUTCHER_ITEM ; NUME[:VERMIN_BUTCHER_ITEM] = 29
    ENUM[30] = :CONNECTOR ; NUME[:CONNECTOR] = 30
end

class BreathAttackType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :TRAILING_DUST_FLOW ; NUME[:TRAILING_DUST_FLOW] = 0
    ENUM[1] = :TRAILING_VAPOR_FLOW ; NUME[:TRAILING_VAPOR_FLOW] = 1
    ENUM[2] = :TRAILING_GAS_FLOW ; NUME[:TRAILING_GAS_FLOW] = 2
    ENUM[3] = :SOLID_GLOB ; NUME[:SOLID_GLOB] = 3
    ENUM[4] = :LIQUID_GLOB ; NUME[:LIQUID_GLOB] = 4
    ENUM[5] = :UNDIRECTED_GAS ; NUME[:UNDIRECTED_GAS] = 5
    ENUM[6] = :UNDIRECTED_VAPOR ; NUME[:UNDIRECTED_VAPOR] = 6
    ENUM[7] = :UNDIRECTED_DUST ; NUME[:UNDIRECTED_DUST] = 7
    ENUM[8] = :WEB_SPRAY ; NUME[:WEB_SPRAY] = 8
    ENUM[9] = :DRAGONFIRE ; NUME[:DRAGONFIRE] = 9
    ENUM[10] = :FIREJET ; NUME[:FIREJET] = 10
    ENUM[11] = :FIREBALL ; NUME[:FIREBALL] = 11
    ENUM[12] = :WEATHER_CREEPING_GAS ; NUME[:WEATHER_CREEPING_GAS] = 12
    ENUM[13] = :WEATHER_CREEPING_VAPOR ; NUME[:WEATHER_CREEPING_VAPOR] = 13
    ENUM[14] = :WEATHER_CREEPING_DUST ; NUME[:WEATHER_CREEPING_DUST] = 14
    ENUM[15] = :WEATHER_FALLING_MATERIAL ; NUME[:WEATHER_FALLING_MATERIAL] = 15
    ENUM[16] = :SPATTER_POWDER ; NUME[:SPATTER_POWDER] = 16
    ENUM[17] = :SPATTER_LIQUID ; NUME[:SPATTER_LIQUID] = 17
    ENUM[18] = :UNDIRECTED_ITEM_CLOUD ; NUME[:UNDIRECTED_ITEM_CLOUD] = 18
    ENUM[19] = :TRAILING_ITEM_FLOW ; NUME[:TRAILING_ITEM_FLOW] = 19
end

class BuildReqChoiceType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :General ; NUME[:General] = 0
    ENUM[1] = :Specific ; NUME[:Specific] = 1
end

class BuildingType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Classname = Hash.new
    ENUM[-1] = :NONE ; NUME[:NONE] = -1
    ENUM[0] = :Chair ; NUME[:Chair] = 0 ; Classname[:Chair] = 'building_chairst'
    ENUM[1] = :Bed ; NUME[:Bed] = 1 ; Classname[:Bed] = 'building_bedst'
    ENUM[2] = :Table ; NUME[:Table] = 2 ; Classname[:Table] = 'building_tablest'
    ENUM[3] = :Coffin ; NUME[:Coffin] = 3 ; Classname[:Coffin] = 'building_coffinst'
    ENUM[4] = :FarmPlot ; NUME[:FarmPlot] = 4 ; Classname[:FarmPlot] = 'building_farmplotst'
    ENUM[5] = :Furnace ; NUME[:Furnace] = 5 ; Classname[:Furnace] = 'building_furnacest'
    ENUM[6] = :TradeDepot ; NUME[:TradeDepot] = 6 ; Classname[:TradeDepot] = 'building_tradedepotst'
    ENUM[7] = :Shop ; NUME[:Shop] = 7 ; Classname[:Shop] = 'building_shopst'
    ENUM[8] = :Door ; NUME[:Door] = 8 ; Classname[:Door] = 'building_doorst'
    ENUM[9] = :Floodgate ; NUME[:Floodgate] = 9 ; Classname[:Floodgate] = 'building_floodgatest'
    ENUM[10] = :Box ; NUME[:Box] = 10 ; Classname[:Box] = 'building_boxst'
    ENUM[11] = :Weaponrack ; NUME[:Weaponrack] = 11 ; Classname[:Weaponrack] = 'building_weaponrackst'
    ENUM[12] = :Armorstand ; NUME[:Armorstand] = 12 ; Classname[:Armorstand] = 'building_armorstandst'
    ENUM[13] = :Workshop ; NUME[:Workshop] = 13 ; Classname[:Workshop] = 'building_workshopst'
    ENUM[14] = :Cabinet ; NUME[:Cabinet] = 14 ; Classname[:Cabinet] = 'building_cabinetst'
    ENUM[15] = :Statue ; NUME[:Statue] = 15 ; Classname[:Statue] = 'building_statuest'
    ENUM[16] = :WindowGlass ; NUME[:WindowGlass] = 16 ; Classname[:WindowGlass] = 'building_window_glassst'
    ENUM[17] = :WindowGem ; NUME[:WindowGem] = 17 ; Classname[:WindowGem] = 'building_window_gemst'
    ENUM[18] = :Well ; NUME[:Well] = 18 ; Classname[:Well] = 'building_wellst'
    ENUM[19] = :Bridge ; NUME[:Bridge] = 19 ; Classname[:Bridge] = 'building_bridgest'
    ENUM[20] = :RoadDirt ; NUME[:RoadDirt] = 20 ; Classname[:RoadDirt] = 'building_road_dirtst'
    ENUM[21] = :RoadPaved ; NUME[:RoadPaved] = 21 ; Classname[:RoadPaved] = 'building_road_pavedst'
    ENUM[22] = :SiegeEngine ; NUME[:SiegeEngine] = 22 ; Classname[:SiegeEngine] = 'building_siegeenginest'
    ENUM[23] = :Trap ; NUME[:Trap] = 23 ; Classname[:Trap] = 'building_trapst'
    ENUM[24] = :AnimalTrap ; NUME[:AnimalTrap] = 24 ; Classname[:AnimalTrap] = 'building_animaltrapst'
    ENUM[25] = :Support ; NUME[:Support] = 25 ; Classname[:Support] = 'building_supportst'
    ENUM[26] = :ArcheryTarget ; NUME[:ArcheryTarget] = 26 ; Classname[:ArcheryTarget] = 'building_archerytargetst'
    ENUM[27] = :Chain ; NUME[:Chain] = 27 ; Classname[:Chain] = 'building_chainst'
    ENUM[28] = :Cage ; NUME[:Cage] = 28 ; Classname[:Cage] = 'building_cagest'
    ENUM[29] = :Stockpile ; NUME[:Stockpile] = 29 ; Classname[:Stockpile] = 'building_stockpilest'
    ENUM[30] = :Civzone ; NUME[:Civzone] = 30 ; Classname[:Civzone] = 'building_civzonest'
    ENUM[31] = :Weapon ; NUME[:Weapon] = 31 ; Classname[:Weapon] = 'building_weaponst'
    ENUM[32] = :Wagon ; NUME[:Wagon] = 32 ; Classname[:Wagon] = 'building_wagonst'
    ENUM[33] = :ScrewPump ; NUME[:ScrewPump] = 33 ; Classname[:ScrewPump] = 'building_screw_pumpst'
    ENUM[34] = :Construction ; NUME[:Construction] = 34 ; Classname[:Construction] = 'building_constructionst'
    ENUM[35] = :Hatch ; NUME[:Hatch] = 35 ; Classname[:Hatch] = 'building_hatchst'
    ENUM[36] = :GrateWall ; NUME[:GrateWall] = 36 ; Classname[:GrateWall] = 'building_grate_wallst'
    ENUM[37] = :GrateFloor ; NUME[:GrateFloor] = 37 ; Classname[:GrateFloor] = 'building_grate_floorst'
    ENUM[38] = :BarsVertical ; NUME[:BarsVertical] = 38 ; Classname[:BarsVertical] = 'building_bars_verticalst'
    ENUM[39] = :BarsFloor ; NUME[:BarsFloor] = 39 ; Classname[:BarsFloor] = 'building_bars_floorst'
    ENUM[40] = :GearAssembly ; NUME[:GearAssembly] = 40 ; Classname[:GearAssembly] = 'building_gear_assemblyst'
    ENUM[41] = :AxleHorizontal ; NUME[:AxleHorizontal] = 41 ; Classname[:AxleHorizontal] = 'building_axle_horizontalst'
    ENUM[42] = :AxleVertical ; NUME[:AxleVertical] = 42 ; Classname[:AxleVertical] = 'building_axle_verticalst'
    ENUM[43] = :WaterWheel ; NUME[:WaterWheel] = 43 ; Classname[:WaterWheel] = 'building_water_wheelst'
    ENUM[44] = :Windmill ; NUME[:Windmill] = 44 ; Classname[:Windmill] = 'building_windmillst'
    ENUM[45] = :TractionBench ; NUME[:TractionBench] = 45 ; Classname[:TractionBench] = 'building_traction_benchst'
    ENUM[46] = :Slab ; NUME[:Slab] = 46 ; Classname[:Slab] = 'building_slabst'
    ENUM[47] = :Nest ; NUME[:Nest] = 47 ; Classname[:Nest] = 'building_nestst'
    ENUM[48] = :NestBox ; NUME[:NestBox] = 48 ; Classname[:NestBox] = 'building_nest_boxst'
    ENUM[49] = :Hive ; NUME[:Hive] = 49 ; Classname[:Hive] = 'building_hivest'
    ENUM[50] = :Rollers ; NUME[:Rollers] = 50 ; Classname[:Rollers] = 'building_rollersst'
end

class BuildingsOtherId < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Building = Hash.new(:NONE)
    GenericBuilding = Hash.new { |h, k| h[k] = [] }
    Workshop = Hash.new { |h, k| h[k] = [] }
    Furnace = Hash.new { |h, k| h[k] = [] }
    Civzone = Hash.new { |h, k| h[k] = [] }
    ENUM[-1] = :ANY ; NUME[:ANY] = -1
    ENUM[0] = :IN_PLAY ; NUME[:IN_PLAY] = 0
    ENUM[1] = :STOCKPILE ; NUME[:STOCKPILE] = 1 ; Building[:STOCKPILE] = :Stockpile
    ENUM[2] = :ANY_ZONE ; NUME[:ANY_ZONE] = 2 ; Building[:ANY_ZONE] = :Civzone
    ENUM[3] = :ACTIVITY_ZONE ; NUME[:ACTIVITY_ZONE] = 3 ; Building[:ACTIVITY_ZONE] = :Civzone ; Civzone[:ACTIVITY_ZONE] << :ActivityZone
    ENUM[4] = :ANY_ACTUAL ; NUME[:ANY_ACTUAL] = 4
    ENUM[5] = :ANY_MACHINE ; NUME[:ANY_MACHINE] = 5 ; GenericBuilding[:ANY_MACHINE] << :ScrewPump ; GenericBuilding[:ANY_MACHINE] << :GearAssembly ; GenericBuilding[:ANY_MACHINE] << :AxleHorizontal ; GenericBuilding[:ANY_MACHINE] << :AxleVertical ; GenericBuilding[:ANY_MACHINE] << :WaterWheel ; GenericBuilding[:ANY_MACHINE] << :Windmill ; GenericBuilding[:ANY_MACHINE] << :Workshop ; Workshop[:ANY_MACHINE] << :Millstone
    ENUM[6] = :ANY_HOSPITAL_STORAGE ; NUME[:ANY_HOSPITAL_STORAGE] = 6 ; GenericBuilding[:ANY_HOSPITAL_STORAGE] << :Box ; GenericBuilding[:ANY_HOSPITAL_STORAGE] << :Cabinet
    ENUM[7] = :ANY_STORAGE ; NUME[:ANY_STORAGE] = 7 ; GenericBuilding[:ANY_STORAGE] << :Box ; GenericBuilding[:ANY_STORAGE] << :Cabinet ; GenericBuilding[:ANY_STORAGE] << :Weaponrack ; GenericBuilding[:ANY_STORAGE] << :Armorstand
    ENUM[8] = :ANY_BARRACKS ; NUME[:ANY_BARRACKS] = 8 ; GenericBuilding[:ANY_BARRACKS] << :Bed ; GenericBuilding[:ANY_BARRACKS] << :Box ; GenericBuilding[:ANY_BARRACKS] << :Cabinet ; GenericBuilding[:ANY_BARRACKS] << :Weaponrack ; GenericBuilding[:ANY_BARRACKS] << :Armorstand
    ENUM[9] = :ANY_NOBLE_ROOM ; NUME[:ANY_NOBLE_ROOM] = 9 ; GenericBuilding[:ANY_NOBLE_ROOM] << :Chair ; GenericBuilding[:ANY_NOBLE_ROOM] << :Bed ; GenericBuilding[:ANY_NOBLE_ROOM] << :Table ; GenericBuilding[:ANY_NOBLE_ROOM] << :Coffin
    ENUM[10] = :ANY_HOSPITAL ; NUME[:ANY_HOSPITAL] = 10 ; GenericBuilding[:ANY_HOSPITAL] << :Bed ; GenericBuilding[:ANY_HOSPITAL] << :TractionBench
    ENUM[11] = :BOX ; NUME[:BOX] = 11 ; Building[:BOX] = :Box
    ENUM[12] = :CABINET ; NUME[:CABINET] = 12 ; Building[:CABINET] = :Cabinet
    ENUM[13] = :TRAP ; NUME[:TRAP] = 13 ; Building[:TRAP] = :Trap
    ENUM[14] = :DOOR ; NUME[:DOOR] = 14 ; Building[:DOOR] = :Door
    ENUM[15] = :FLOODGATE ; NUME[:FLOODGATE] = 15 ; Building[:FLOODGATE] = :Floodgate
    ENUM[16] = :HATCH ; NUME[:HATCH] = 16 ; Building[:HATCH] = :Hatch
    ENUM[17] = :GRATE_WALL ; NUME[:GRATE_WALL] = 17 ; Building[:GRATE_WALL] = :GrateWall
    ENUM[18] = :GRATE_FLOOR ; NUME[:GRATE_FLOOR] = 18 ; Building[:GRATE_FLOOR] = :GrateFloor
    ENUM[19] = :BARS_VERTICAL ; NUME[:BARS_VERTICAL] = 19 ; Building[:BARS_VERTICAL] = :BarsVertical
    ENUM[20] = :BARS_FLOOR ; NUME[:BARS_FLOOR] = 20 ; Building[:BARS_FLOOR] = :BarsFloor
    ENUM[21] = :WINDOW_ANY ; NUME[:WINDOW_ANY] = 21 ; GenericBuilding[:WINDOW_ANY] << :WindowGlass ; GenericBuilding[:WINDOW_ANY] << :WindowGem
    ENUM[22] = :WELL ; NUME[:WELL] = 22 ; Building[:WELL] = :Well
    ENUM[23] = :TABLE ; NUME[:TABLE] = 23 ; Building[:TABLE] = :Table
    ENUM[24] = :BRIDGE ; NUME[:BRIDGE] = 24 ; Building[:BRIDGE] = :Bridge
    ENUM[25] = :CHAIR ; NUME[:CHAIR] = 25 ; Building[:CHAIR] = :Chair
    ENUM[26] = :TRADE_DEPOT ; NUME[:TRADE_DEPOT] = 26 ; Building[:TRADE_DEPOT] = :TradeDepot
    ENUM[27] = :NEST ; NUME[:NEST] = 27 ; Building[:NEST] = :Nest
    ENUM[28] = :NEST_BOX ; NUME[:NEST_BOX] = 28 ; Building[:NEST_BOX] = :NestBox
    ENUM[29] = :HIVE ; NUME[:HIVE] = 29 ; Building[:HIVE] = :Hive
    ENUM[30] = :WAGON ; NUME[:WAGON] = 30 ; Building[:WAGON] = :Wagon
    ENUM[31] = :SHOP ; NUME[:SHOP] = 31 ; Building[:SHOP] = :Shop
    ENUM[32] = :BED ; NUME[:BED] = 32 ; Building[:BED] = :Bed
    ENUM[33] = :TRACTION_BENCH ; NUME[:TRACTION_BENCH] = 33 ; Building[:TRACTION_BENCH] = :TractionBench
    ENUM[34] = :ANY_ROAD ; NUME[:ANY_ROAD] = 34 ; GenericBuilding[:ANY_ROAD] << :RoadDirt ; GenericBuilding[:ANY_ROAD] << :RoadPaved
    ENUM[35] = :FARM_PLOT ; NUME[:FARM_PLOT] = 35 ; Building[:FARM_PLOT] = :FarmPlot
    ENUM[36] = :GEAR_ASSEMBLY ; NUME[:GEAR_ASSEMBLY] = 36 ; Building[:GEAR_ASSEMBLY] = :GearAssembly
    ENUM[37] = :ROLLERS ; NUME[:ROLLERS] = 37 ; Building[:ROLLERS] = :Rollers
    ENUM[38] = :AXLE_HORIZONTAL ; NUME[:AXLE_HORIZONTAL] = 38 ; Building[:AXLE_HORIZONTAL] = :AxleHorizontal
    ENUM[39] = :AXLE_VERTICAL ; NUME[:AXLE_VERTICAL] = 39 ; Building[:AXLE_VERTICAL] = :AxleVertical
    ENUM[40] = :SUPPORT ; NUME[:SUPPORT] = 40 ; Building[:SUPPORT] = :Support
    ENUM[41] = :ARCHERY_TARGET ; NUME[:ARCHERY_TARGET] = 41 ; Building[:ARCHERY_TARGET] = :ArcheryTarget
    ENUM[42] = :SCREW_PUMP ; NUME[:SCREW_PUMP] = 42 ; Building[:SCREW_PUMP] = :ScrewPump
    ENUM[43] = :WATER_WHEEL ; NUME[:WATER_WHEEL] = 43 ; Building[:WATER_WHEEL] = :WaterWheel
    ENUM[44] = :WINDMILL ; NUME[:WINDMILL] = 44 ; Building[:WINDMILL] = :Windmill
    ENUM[45] = :CHAIN ; NUME[:CHAIN] = 45 ; Building[:CHAIN] = :Chain
    ENUM[46] = :CAGE ; NUME[:CAGE] = 46 ; Building[:CAGE] = :Cage
    ENUM[47] = :STATUE ; NUME[:STATUE] = 47 ; Building[:STATUE] = :Statue
    ENUM[48] = :SLAB ; NUME[:SLAB] = 48 ; Building[:SLAB] = :Slab
    ENUM[49] = :COFFIN ; NUME[:COFFIN] = 49 ; Building[:COFFIN] = :Coffin
    ENUM[50] = :WEAPON_RACK ; NUME[:WEAPON_RACK] = 50 ; Building[:WEAPON_RACK] = :Weaponrack
    ENUM[51] = :ARMOR_STAND ; NUME[:ARMOR_STAND] = 51 ; Building[:ARMOR_STAND] = :Armorstand
    ENUM[52] = :FURNACE_ANY ; NUME[:FURNACE_ANY] = 52 ; Building[:FURNACE_ANY] = :Furnace
    ENUM[53] = :FURNACE_WOOD ; NUME[:FURNACE_WOOD] = 53 ; Building[:FURNACE_WOOD] = :Furnace ; Furnace[:FURNACE_WOOD] << :WoodFurnace
    ENUM[54] = :FURNACE_SMELTER_ANY ; NUME[:FURNACE_SMELTER_ANY] = 54 ; Building[:FURNACE_SMELTER_ANY] = :Furnace ; Furnace[:FURNACE_SMELTER_ANY] << :Smelter ; Furnace[:FURNACE_SMELTER_ANY] << :MagmaSmelter
    ENUM[55] = :FURNACE_SMELTER_MAGMA ; NUME[:FURNACE_SMELTER_MAGMA] = 55 ; Building[:FURNACE_SMELTER_MAGMA] = :Furnace ; Furnace[:FURNACE_SMELTER_MAGMA] << :MagmaSmelter
    ENUM[56] = :FURNACE_KILN_ANY ; NUME[:FURNACE_KILN_ANY] = 56 ; Building[:FURNACE_KILN_ANY] = :Furnace ; Furnace[:FURNACE_KILN_ANY] << :Kiln ; Furnace[:FURNACE_KILN_ANY] << :MagmaKiln
    ENUM[57] = :FURNACE_GLASS_ANY ; NUME[:FURNACE_GLASS_ANY] = 57 ; Building[:FURNACE_GLASS_ANY] = :Furnace ; Furnace[:FURNACE_GLASS_ANY] << :GlassFurnace ; Furnace[:FURNACE_GLASS_ANY] << :MagmaGlassFurnace
    ENUM[58] = :FURNACE_CUSTOM ; NUME[:FURNACE_CUSTOM] = 58 ; Building[:FURNACE_CUSTOM] = :Furnace ; Furnace[:FURNACE_CUSTOM] << :Custom
    ENUM[59] = :WORKSHOP_ANY ; NUME[:WORKSHOP_ANY] = 59 ; Building[:WORKSHOP_ANY] = :Workshop
    ENUM[60] = :WORKSHOP_BUTCHER ; NUME[:WORKSHOP_BUTCHER] = 60 ; Building[:WORKSHOP_BUTCHER] = :Workshop ; Workshop[:WORKSHOP_BUTCHER] << :Butchers
    ENUM[61] = :WORKSHOP_MASON ; NUME[:WORKSHOP_MASON] = 61 ; Building[:WORKSHOP_MASON] = :Workshop ; Workshop[:WORKSHOP_MASON] << :Masons
    ENUM[62] = :WORKSHOP_KENNEL ; NUME[:WORKSHOP_KENNEL] = 62 ; Building[:WORKSHOP_KENNEL] = :Workshop ; Workshop[:WORKSHOP_KENNEL] << :Kennels
    ENUM[63] = :WORKSHOP_FISHERY ; NUME[:WORKSHOP_FISHERY] = 63 ; Building[:WORKSHOP_FISHERY] = :Workshop ; Workshop[:WORKSHOP_FISHERY] << :Fishery
    ENUM[64] = :WORKSHOP_JEWELER ; NUME[:WORKSHOP_JEWELER] = 64 ; Building[:WORKSHOP_JEWELER] = :Workshop ; Workshop[:WORKSHOP_JEWELER] << :Jewelers
    ENUM[65] = :WORKSHOP_LOOM ; NUME[:WORKSHOP_LOOM] = 65 ; Building[:WORKSHOP_LOOM] = :Workshop ; Workshop[:WORKSHOP_LOOM] << :Loom
    ENUM[66] = :WORKSHOP_TANNER ; NUME[:WORKSHOP_TANNER] = 66 ; Building[:WORKSHOP_TANNER] = :Workshop ; Workshop[:WORKSHOP_TANNER] << :Tanners
    ENUM[67] = :WORKSHOP_DYER ; NUME[:WORKSHOP_DYER] = 67 ; Building[:WORKSHOP_DYER] = :Workshop ; Workshop[:WORKSHOP_DYER] << :Dyers
    ENUM[68] = :WORKSHOP_MILL_ANY ; NUME[:WORKSHOP_MILL_ANY] = 68 ; Building[:WORKSHOP_MILL_ANY] = :Workshop ; Workshop[:WORKSHOP_MILL_ANY] << :Quern ; Workshop[:WORKSHOP_MILL_ANY] << :Millstone
    ENUM[69] = :WORKSHOP_QUERN ; NUME[:WORKSHOP_QUERN] = 69 ; Building[:WORKSHOP_QUERN] = :Workshop ; Workshop[:WORKSHOP_QUERN] << :Quern
    ENUM[70] = :WORKSHOP_TOOL ; NUME[:WORKSHOP_TOOL] = 70 ; Building[:WORKSHOP_TOOL] = :Workshop ; Workshop[:WORKSHOP_TOOL] << :Tool
    ENUM[71] = :WORKSHOP_MILLSTONE ; NUME[:WORKSHOP_MILLSTONE] = 71 ; Building[:WORKSHOP_MILLSTONE] = :Workshop ; Workshop[:WORKSHOP_MILLSTONE] << :Millstone
    ENUM[72] = :WORKSHOP_KITCHEN ; NUME[:WORKSHOP_KITCHEN] = 72 ; Building[:WORKSHOP_KITCHEN] = :Workshop ; Workshop[:WORKSHOP_KITCHEN] << :Kitchen
    ENUM[73] = :WORKSHOP_STILL ; NUME[:WORKSHOP_STILL] = 73 ; Building[:WORKSHOP_STILL] = :Workshop ; Workshop[:WORKSHOP_STILL] << :Still
    ENUM[74] = :WORKSHOP_FARMER ; NUME[:WORKSHOP_FARMER] = 74 ; Building[:WORKSHOP_FARMER] = :Workshop ; Workshop[:WORKSHOP_FARMER] << :Farmers
    ENUM[75] = :WORKSHOP_ASHERY ; NUME[:WORKSHOP_ASHERY] = 75 ; Building[:WORKSHOP_ASHERY] = :Workshop ; Workshop[:WORKSHOP_ASHERY] << :Ashery
    ENUM[76] = :WORKSHOP_CARPENTER ; NUME[:WORKSHOP_CARPENTER] = 76 ; Building[:WORKSHOP_CARPENTER] = :Workshop ; Workshop[:WORKSHOP_CARPENTER] << :Carpenters
    ENUM[77] = :WORKSHOP_CRAFTSDWARF ; NUME[:WORKSHOP_CRAFTSDWARF] = 77 ; Building[:WORKSHOP_CRAFTSDWARF] = :Workshop ; Workshop[:WORKSHOP_CRAFTSDWARF] << :Craftsdwarfs
    ENUM[78] = :WORKSHOP_MECHANIC ; NUME[:WORKSHOP_MECHANIC] = 78 ; Building[:WORKSHOP_MECHANIC] = :Workshop ; Workshop[:WORKSHOP_MECHANIC] << :Mechanics
    ENUM[79] = :WORKSHOP_SIEGE ; NUME[:WORKSHOP_SIEGE] = 79 ; Building[:WORKSHOP_SIEGE] = :Workshop ; Workshop[:WORKSHOP_SIEGE] << :Siege
    ENUM[80] = :WORKSHOP_CLOTHIER ; NUME[:WORKSHOP_CLOTHIER] = 80 ; Building[:WORKSHOP_CLOTHIER] = :Workshop ; Workshop[:WORKSHOP_CLOTHIER] << :Clothiers
    ENUM[81] = :WORKSHOP_LEATHER ; NUME[:WORKSHOP_LEATHER] = 81 ; Building[:WORKSHOP_LEATHER] = :Workshop ; Workshop[:WORKSHOP_LEATHER] << :Leatherworks
    ENUM[82] = :WORKSHOP_BOWYER ; NUME[:WORKSHOP_BOWYER] = 82 ; Building[:WORKSHOP_BOWYER] = :Workshop ; Workshop[:WORKSHOP_BOWYER] << :Bowyers
    ENUM[83] = :WORKSHOP_MAGMA_FORGE ; NUME[:WORKSHOP_MAGMA_FORGE] = 83 ; Building[:WORKSHOP_MAGMA_FORGE] = :Workshop ; Workshop[:WORKSHOP_MAGMA_FORGE] << :MagmaForge
    ENUM[84] = :WORKSHOP_FORGE_ANY ; NUME[:WORKSHOP_FORGE_ANY] = 84 ; Building[:WORKSHOP_FORGE_ANY] = :Workshop ; Workshop[:WORKSHOP_FORGE_ANY] << :MetalsmithsForge ; Workshop[:WORKSHOP_FORGE_ANY] << :MagmaForge
    ENUM[85] = :WORKSHOP_CUSTOM ; NUME[:WORKSHOP_CUSTOM] = 85 ; Building[:WORKSHOP_CUSTOM] = :Workshop ; Workshop[:WORKSHOP_CUSTOM] << :Custom
    ENUM[86] = :WEAPON_UPRIGHT ; NUME[:WEAPON_UPRIGHT] = 86 ; Building[:WEAPON_UPRIGHT] = :Weapon
end

class BuiltinMats < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :INORGANIC ; NUME[:INORGANIC] = 0
    ENUM[1] = :AMBER ; NUME[:AMBER] = 1
    ENUM[2] = :CORAL ; NUME[:CORAL] = 2
    ENUM[3] = :GLASS_GREEN ; NUME[:GLASS_GREEN] = 3
    ENUM[4] = :GLASS_CLEAR ; NUME[:GLASS_CLEAR] = 4
    ENUM[5] = :GLASS_CRYSTAL ; NUME[:GLASS_CRYSTAL] = 5
    ENUM[6] = :WATER ; NUME[:WATER] = 6
    ENUM[7] = :COAL ; NUME[:COAL] = 7
    ENUM[8] = :POTASH ; NUME[:POTASH] = 8
    ENUM[9] = :ASH ; NUME[:ASH] = 9
    ENUM[10] = :PEARLASH ; NUME[:PEARLASH] = 10
    ENUM[11] = :LYE ; NUME[:LYE] = 11
    ENUM[12] = :MUD ; NUME[:MUD] = 12
    ENUM[13] = :VOMIT ; NUME[:VOMIT] = 13
    ENUM[14] = :SALT ; NUME[:SALT] = 14
    ENUM[15] = :FILTH_B ; NUME[:FILTH_B] = 15
    ENUM[16] = :FILTH_Y ; NUME[:FILTH_Y] = 16
    ENUM[17] = :UNKNOWN_SUBSTANCE ; NUME[:UNKNOWN_SUBSTANCE] = 17
    ENUM[18] = :GRIME ; NUME[:GRIME] = 18
end

class CasteRawFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :AMPHIBIOUS ; NUME[:AMPHIBIOUS] = 0
    ENUM[1] = :AQUATIC ; NUME[:AQUATIC] = 1
    ENUM[2] = :LOCKPICKER ; NUME[:LOCKPICKER] = 2
    ENUM[3] = :MISCHIEVOUS ; NUME[:MISCHIEVOUS] = 3
    ENUM[4] = :PATTERNFLIER ; NUME[:PATTERNFLIER] = 4
    ENUM[5] = :CURIOUSBEAST_ANY ; NUME[:CURIOUSBEAST_ANY] = 5
    ENUM[6] = :CURIOUSBEAST_ITEM ; NUME[:CURIOUSBEAST_ITEM] = 6
    ENUM[7] = :CURIOUSBEAST_GUZZLER ; NUME[:CURIOUSBEAST_GUZZLER] = 7
    ENUM[8] = :FLEEQUICK ; NUME[:FLEEQUICK] = 8
    ENUM[9] = :AT_PEACE_WITH_WILDLIFE ; NUME[:AT_PEACE_WITH_WILDLIFE] = 9
    ENUM[10] = :SWIMS_LEARNED ; NUME[:SWIMS_LEARNED] = 10
    ENUM[11] = :OPPOSED_TO_LIFE ; NUME[:OPPOSED_TO_LIFE] = 11
    ENUM[12] = :CURIOUSBEAST_EATER ; NUME[:CURIOUSBEAST_EATER] = 12
    ENUM[13] = :NO_EAT ; NUME[:NO_EAT] = 13
    ENUM[14] = :NO_DRINK ; NUME[:NO_DRINK] = 14
    ENUM[15] = :NO_SLEEP ; NUME[:NO_SLEEP] = 15
    ENUM[16] = :COMMON_DOMESTIC ; NUME[:COMMON_DOMESTIC] = 16
    ENUM[17] = :WAGON_PULLER ; NUME[:WAGON_PULLER] = 17
    ENUM[18] = :PACK_ANIMAL ; NUME[:PACK_ANIMAL] = 18
    ENUM[19] = :FLIER ; NUME[:FLIER] = 19
    ENUM[20] = :LARGE_PREDATOR ; NUME[:LARGE_PREDATOR] = 20
    ENUM[21] = :MAGMA_VISION ; NUME[:MAGMA_VISION] = 21
    ENUM[22] = :FIREIMMUNE ; NUME[:FIREIMMUNE] = 22
    ENUM[23] = :FIREIMMUNE_SUPER ; NUME[:FIREIMMUNE_SUPER] = 23
    ENUM[24] = :WEBBER ; NUME[:WEBBER] = 24
    ENUM[25] = :WEBIMMUNE ; NUME[:WEBIMMUNE] = 25
    ENUM[26] = :FISHITEM ; NUME[:FISHITEM] = 26
    ENUM[27] = :IMMOBILE_LAND ; NUME[:IMMOBILE_LAND] = 27
    ENUM[28] = :IMMOLATE ; NUME[:IMMOLATE] = 28
    ENUM[29] = :MILKABLE ; NUME[:MILKABLE] = 29
    ENUM[30] = :NO_SPRING ; NUME[:NO_SPRING] = 30
    ENUM[31] = :NO_SUMMER ; NUME[:NO_SUMMER] = 31
    ENUM[32] = :NO_AUTUMN ; NUME[:NO_AUTUMN] = 32
    ENUM[33] = :NO_WINTER ; NUME[:NO_WINTER] = 33
    ENUM[34] = :BENIGN ; NUME[:BENIGN] = 34
    ENUM[35] = :VERMIN_NOROAM ; NUME[:VERMIN_NOROAM] = 35
    ENUM[36] = :VERMIN_NOTRAP ; NUME[:VERMIN_NOTRAP] = 36
    ENUM[37] = :VERMIN_NOFISH ; NUME[:VERMIN_NOFISH] = 37
    ENUM[38] = :HAS_NERVES ; NUME[:HAS_NERVES] = 38
    ENUM[39] = :NO_DIZZINESS ; NUME[:NO_DIZZINESS] = 39
    ENUM[40] = :NO_FEVERS ; NUME[:NO_FEVERS] = 40
    ENUM[41] = :NO_UNIT_TYPE_COLOR ; NUME[:NO_UNIT_TYPE_COLOR] = 41
    ENUM[42] = :NO_CONNECTIONS_FOR_MOVEMENT ; NUME[:NO_CONNECTIONS_FOR_MOVEMENT] = 42
    ENUM[43] = :Unk2b ; NUME[:Unk2b] = 43
    ENUM[44] = :AMBUSHPREDATOR ; NUME[:AMBUSHPREDATOR] = 44
    ENUM[45] = :Unk2d ; NUME[:Unk2d] = 45
    ENUM[46] = :NOT_BUTCHERABLE ; NUME[:NOT_BUTCHERABLE] = 46
    ENUM[47] = :COOKABLE_LIVE ; NUME[:COOKABLE_LIVE] = 47
    ENUM[48] = :SECRETION ; NUME[:SECRETION] = 48
    ENUM[49] = :IMMOBILE ; NUME[:IMMOBILE] = 49
    ENUM[50] = :MULTIPART_FULL_VISION ; NUME[:MULTIPART_FULL_VISION] = 50
    ENUM[51] = :MEANDERER ; NUME[:MEANDERER] = 51
    ENUM[52] = :THICKWEB ; NUME[:THICKWEB] = 52
    ENUM[53] = :TRAINABLE_HUNTING ; NUME[:TRAINABLE_HUNTING] = 53
    ENUM[54] = :PET ; NUME[:PET] = 54
    ENUM[55] = :PET_EXOTIC ; NUME[:PET_EXOTIC] = 55
    ENUM[56] = :Unk38 ; NUME[:Unk38] = 56
    ENUM[57] = :CAN_SPEAK ; NUME[:CAN_SPEAK] = 57
    ENUM[58] = :CAN_LEARN ; NUME[:CAN_LEARN] = 58
    ENUM[59] = :UTTERANCES ; NUME[:UTTERANCES] = 59
    ENUM[60] = :BONECARN ; NUME[:BONECARN] = 60
    ENUM[61] = :CARNIVORE ; NUME[:CARNIVORE] = 61
    ENUM[62] = :UNDERSWIM ; NUME[:UNDERSWIM] = 62
    ENUM[63] = :NOEXERT ; NUME[:NOEXERT] = 63
    ENUM[64] = :NOPAIN ; NUME[:NOPAIN] = 64
    ENUM[65] = :EXTRAVISION ; NUME[:EXTRAVISION] = 65
    ENUM[66] = :NOBREATHE ; NUME[:NOBREATHE] = 66
    ENUM[67] = :NOSTUN ; NUME[:NOSTUN] = 67
    ENUM[68] = :NONAUSEA ; NUME[:NONAUSEA] = 68
    ENUM[69] = :BLOOD ; NUME[:BLOOD] = 69
    ENUM[70] = :TRANCES ; NUME[:TRANCES] = 70
    ENUM[71] = :NOEMOTION ; NUME[:NOEMOTION] = 71
    ENUM[72] = :SLOW_LEARNER ; NUME[:SLOW_LEARNER] = 72
    ENUM[73] = :NOSTUCKINS ; NUME[:NOSTUCKINS] = 73
    ENUM[74] = :PUS ; NUME[:PUS] = 74
    ENUM[75] = :NOSKULL ; NUME[:NOSKULL] = 75
    ENUM[76] = :NOSKIN ; NUME[:NOSKIN] = 76
    ENUM[77] = :NOBONES ; NUME[:NOBONES] = 77
    ENUM[78] = :NOMEAT ; NUME[:NOMEAT] = 78
    ENUM[79] = :PARALYZEIMMUNE ; NUME[:PARALYZEIMMUNE] = 79
    ENUM[80] = :NOFEAR ; NUME[:NOFEAR] = 80
    ENUM[81] = :CANOPENDOORS ; NUME[:CANOPENDOORS] = 81
    ENUM[82] = :ITEMCORPSE ; NUME[:ITEMCORPSE] = 82
    ENUM[83] = :GETS_WOUND_INFECTIONS ; NUME[:GETS_WOUND_INFECTIONS] = 83
    ENUM[84] = :NOSMELLYROT ; NUME[:NOSMELLYROT] = 84
    ENUM[85] = :REMAINS_UNDETERMINED ; NUME[:REMAINS_UNDETERMINED] = 85
    ENUM[86] = :HASSHELL ; NUME[:HASSHELL] = 86
    ENUM[87] = :PEARL ; NUME[:PEARL] = 87
    ENUM[88] = :TRAINABLE_WAR ; NUME[:TRAINABLE_WAR] = 88
    ENUM[89] = :NO_THOUGHT_CENTER_FOR_MOVEMENT ; NUME[:NO_THOUGHT_CENTER_FOR_MOVEMENT] = 89
    ENUM[90] = :ARENA_RESTRICTED ; NUME[:ARENA_RESTRICTED] = 90
    ENUM[91] = :LAIR_HUNTER ; NUME[:LAIR_HUNTER] = 91
    ENUM[92] = :LIKES_FIGHTING ; NUME[:LIKES_FIGHTING] = 92
    ENUM[93] = :VERMIN_HATEABLE ; NUME[:VERMIN_HATEABLE] = 93
    ENUM[94] = :VEGETATION ; NUME[:VEGETATION] = 94
    ENUM[95] = :MAGICAL ; NUME[:MAGICAL] = 95
    ENUM[96] = :NATURAL ; NUME[:NATURAL] = 96
    ENUM[97] = :BABY ; NUME[:BABY] = 97
    ENUM[98] = :CHILD ; NUME[:CHILD] = 98
    ENUM[99] = :MULTIPLE_LITTER_RARE ; NUME[:MULTIPLE_LITTER_RARE] = 99
    ENUM[100] = :MOUNT ; NUME[:MOUNT] = 100
    ENUM[101] = :MOUNT_EXOTIC ; NUME[:MOUNT_EXOTIC] = 101
    ENUM[102] = :FEATURE_ATTACK_GROUP ; NUME[:FEATURE_ATTACK_GROUP] = 102
    ENUM[103] = :VERMIN_MICRO ; NUME[:VERMIN_MICRO] = 103
    ENUM[104] = :EQUIPS ; NUME[:EQUIPS] = 104
    ENUM[105] = :LAYS_EGGS ; NUME[:LAYS_EGGS] = 105
    ENUM[106] = :GRAZER ; NUME[:GRAZER] = 106
    ENUM[107] = :NOTHOUGHT ; NUME[:NOTHOUGHT] = 107
    ENUM[108] = :TRAPAVOID ; NUME[:TRAPAVOID] = 108
    ENUM[109] = :CAVE_ADAPT ; NUME[:CAVE_ADAPT] = 109
    ENUM[110] = :MEGABEAST ; NUME[:MEGABEAST] = 110
    ENUM[111] = :SEMIMEGABEAST ; NUME[:SEMIMEGABEAST] = 111
    ENUM[112] = :ALL_ACTIVE ; NUME[:ALL_ACTIVE] = 112
    ENUM[113] = :DIURNAL ; NUME[:DIURNAL] = 113
    ENUM[114] = :NOCTURNAL ; NUME[:NOCTURNAL] = 114
    ENUM[115] = :CREPUSCULAR ; NUME[:CREPUSCULAR] = 115
    ENUM[116] = :MATUTINAL ; NUME[:MATUTINAL] = 116
    ENUM[117] = :VESPERTINE ; NUME[:VESPERTINE] = 117
    ENUM[118] = :LIGHT_GEN ; NUME[:LIGHT_GEN] = 118
    ENUM[119] = :LISP ; NUME[:LISP] = 119
    ENUM[120] = :GETS_INFECTIONS_FROM_ROT ; NUME[:GETS_INFECTIONS_FROM_ROT] = 120
    ENUM[121] = :Unk79 ; NUME[:Unk79] = 121
    ENUM[122] = :ALCOHOL_DEPENDENT ; NUME[:ALCOHOL_DEPENDENT] = 122
    ENUM[123] = :SWIMS_INNATE ; NUME[:SWIMS_INNATE] = 123
    ENUM[124] = :POWER ; NUME[:POWER] = 124
    ENUM[125] = :Unk7d ; NUME[:Unk7d] = 125
    ENUM[126] = :Unk7e ; NUME[:Unk7e] = 126
    ENUM[127] = :CASTE_TILE ; NUME[:CASTE_TILE] = 127
    ENUM[128] = :CASTE_COLOR ; NUME[:CASTE_COLOR] = 128
    ENUM[129] = :Unk81 ; NUME[:Unk81] = 129
    ENUM[130] = :Unk82 ; NUME[:Unk82] = 130
    ENUM[131] = :FEATURE_BEAST ; NUME[:FEATURE_BEAST] = 131
    ENUM[132] = :TITAN ; NUME[:TITAN] = 132
    ENUM[133] = :UNIQUE_DEMON ; NUME[:UNIQUE_DEMON] = 133
    ENUM[134] = :DEMON ; NUME[:DEMON] = 134
    ENUM[135] = :MANNERISM_LAUGH ; NUME[:MANNERISM_LAUGH] = 135
    ENUM[136] = :MANNERISM_SMILE ; NUME[:MANNERISM_SMILE] = 136
    ENUM[137] = :MANNERISM_WALK ; NUME[:MANNERISM_WALK] = 137
    ENUM[138] = :MANNERISM_SIT ; NUME[:MANNERISM_SIT] = 138
    ENUM[139] = :MANNERISM_BREATH ; NUME[:MANNERISM_BREATH] = 139
    ENUM[140] = :MANNERISM_POSTURE ; NUME[:MANNERISM_POSTURE] = 140
    ENUM[141] = :MANNERISM_STRETCH ; NUME[:MANNERISM_STRETCH] = 141
    ENUM[142] = :MANNERISM_EYELIDS ; NUME[:MANNERISM_EYELIDS] = 142
    ENUM[143] = :NIGHT_CREATURE_ANY ; NUME[:NIGHT_CREATURE_ANY] = 143
    ENUM[144] = :NIGHT_CREATURE_HUNTER ; NUME[:NIGHT_CREATURE_HUNTER] = 144
    ENUM[145] = :NIGHT_CREATURE_BOGEYMAN ; NUME[:NIGHT_CREATURE_BOGEYMAN] = 145
    ENUM[146] = :CONVERTED_SPOUSE ; NUME[:CONVERTED_SPOUSE] = 146
    ENUM[147] = :SPOUSE_CONVERTER ; NUME[:SPOUSE_CONVERTER] = 147
    ENUM[148] = :SPOUSE_CONVERSION_TARGET ; NUME[:SPOUSE_CONVERSION_TARGET] = 148
    ENUM[149] = :DIE_WHEN_VERMIN_BITE ; NUME[:DIE_WHEN_VERMIN_BITE] = 149
    ENUM[150] = :REMAINS_ON_VERMIN_BITE_DEATH ; NUME[:REMAINS_ON_VERMIN_BITE_DEATH] = 150
    ENUM[151] = :COLONY_EXTERNAL ; NUME[:COLONY_EXTERNAL] = 151
    ENUM[152] = :LAYS_UNUSUAL_EGGS ; NUME[:LAYS_UNUSUAL_EGGS] = 152
    ENUM[153] = :RETURNS_VERMIN_KILLS_TO_OWNER ; NUME[:RETURNS_VERMIN_KILLS_TO_OWNER] = 153
    ENUM[154] = :HUNTS_VERMIN ; NUME[:HUNTS_VERMIN] = 154
    ENUM[155] = :ADOPTS_OWNER ; NUME[:ADOPTS_OWNER] = 155
    ENUM[156] = :SOUND_ALERT ; NUME[:SOUND_ALERT] = 156
    ENUM[157] = :SOUND_PEACEFUL_INTERMITTENT ; NUME[:SOUND_PEACEFUL_INTERMITTENT] = 157
    ENUM[158] = :Unk9e ; NUME[:Unk9e] = 158
    ENUM[159] = :Unk9f ; NUME[:Unk9f] = 159
    ENUM[160] = :UnkA0 ; NUME[:UnkA0] = 160
    ENUM[161] = :CRAZED ; NUME[:CRAZED] = 161
    ENUM[162] = :BLOODSUCKER ; NUME[:BLOODSUCKER] = 162
    ENUM[163] = :NO_VEGETATION_PERTURB ; NUME[:NO_VEGETATION_PERTURB] = 163
    ENUM[164] = :DIVE_HUNTS_VERMIN ; NUME[:DIVE_HUNTS_VERMIN] = 164
    ENUM[165] = :GOBBLE_VERMIN ; NUME[:GOBBLE_VERMIN] = 165
    ENUM[166] = :CANNOT_JUMP ; NUME[:CANNOT_JUMP] = 166
    ENUM[167] = :STANCE_CLIMBER ; NUME[:STANCE_CLIMBER] = 167
    ENUM[168] = :CANNOT_CLIMB ; NUME[:CANNOT_CLIMB] = 168
end

class CivzoneType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Home ; NUME[:Home] = 0
    ENUM[1] = :CraftShop ; NUME[:CraftShop] = 1
    ENUM[2] = :Basement ; NUME[:Basement] = 2
    ENUM[3] = :WeaponsmithsShop ; NUME[:WeaponsmithsShop] = 3
    ENUM[4] = :ArmorsmithsShop ; NUME[:ArmorsmithsShop] = 4
    ENUM[5] = :GeneralStore ; NUME[:GeneralStore] = 5
    ENUM[6] = :FoodShop ; NUME[:FoodShop] = 6
    ENUM[7] = :MeadHall ; NUME[:MeadHall] = 7
    ENUM[8] = :ThroneRoom ; NUME[:ThroneRoom] = 8
    ENUM[9] = :ActivityZone ; NUME[:ActivityZone] = 9
    ENUM[10] = :Temple ; NUME[:Temple] = 10
    ENUM[11] = :Kitchen ; NUME[:Kitchen] = 11
    ENUM[12] = :CaptiveRoom ; NUME[:CaptiveRoom] = 12
    ENUM[13] = :TowerTop ; NUME[:TowerTop] = 13
    ENUM[14] = :Courtyard ; NUME[:Courtyard] = 14
    ENUM[15] = :Treasury ; NUME[:Treasury] = 15
    ENUM[16] = :GuardPost ; NUME[:GuardPost] = 16
    ENUM[17] = :Entrance ; NUME[:Entrance] = 17
    ENUM[18] = :SecretLibrary ; NUME[:SecretLibrary] = 18
    ENUM[19] = :Library ; NUME[:Library] = 19
    ENUM[20] = :Plot ; NUME[:Plot] = 20
    ENUM[21] = :MarketStall ; NUME[:MarketStall] = 21
end

class CombatReportEventType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[1] = :Deflected ; NUME[:Deflected] = 1
    ENUM[6] = :Unconscious ; NUME[:Unconscious] = 6
    ENUM[7] = :Stunned ; NUME[:Stunned] = 7
    ENUM[8] = :MoreStunned ; NUME[:MoreStunned] = 8
    ENUM[9] = :Winded ; NUME[:Winded] = 9
    ENUM[10] = :MoreWinded ; NUME[:MoreWinded] = 10
    ENUM[11] = :Nausea ; NUME[:Nausea] = 11
    ENUM[12] = :MoreNausea ; NUME[:MoreNausea] = 12
    ENUM[15] = :ExtractInjected ; NUME[:ExtractInjected] = 15
    ENUM[16] = :ExtractSprayed ; NUME[:ExtractSprayed] = 16
    ENUM[17] = :BloodSucked ; NUME[:BloodSucked] = 17
    ENUM[18] = :SeveredPart ; NUME[:SeveredPart] = 18
    ENUM[20] = :KnockedBack ; NUME[:KnockedBack] = 20
    ENUM[21] = :StuckIn ; NUME[:StuckIn] = 21
    ENUM[22] = :LatchOnPart ; NUME[:LatchOnPart] = 22
    ENUM[23] = :LatchOn ; NUME[:LatchOn] = 23
    ENUM[24] = :Enraged ; NUME[:Enraged] = 24
    ENUM[25] = :PassThrough ; NUME[:PassThrough] = 25
    ENUM[26] = :GlancesAway ; NUME[:GlancesAway] = 26
    ENUM[29] = :MajorArtery ; NUME[:MajorArtery] = 29
    ENUM[30] = :Artery ; NUME[:Artery] = 30
    ENUM[31] = :MotorNerve ; NUME[:MotorNerve] = 31
    ENUM[32] = :SensoryNerve ; NUME[:SensoryNerve] = 32
    ENUM[33] = :NoForce ; NUME[:NoForce] = 33
    ENUM[34] = :Interrupted ; NUME[:Interrupted] = 34
end

class ConstructionType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Fortification ; NUME[:Fortification] = 0
    ENUM[1] = :Wall ; NUME[:Wall] = 1
    ENUM[2] = :Floor ; NUME[:Floor] = 2
    ENUM[3] = :UpStair ; NUME[:UpStair] = 3
    ENUM[4] = :DownStair ; NUME[:DownStair] = 4
    ENUM[5] = :UpDownStair ; NUME[:UpDownStair] = 5
    ENUM[6] = :Ramp ; NUME[:Ramp] = 6
    ENUM[7] = :TrackN ; NUME[:TrackN] = 7
    ENUM[8] = :TrackS ; NUME[:TrackS] = 8
    ENUM[9] = :TrackE ; NUME[:TrackE] = 9
    ENUM[10] = :TrackW ; NUME[:TrackW] = 10
    ENUM[11] = :TrackNS ; NUME[:TrackNS] = 11
    ENUM[12] = :TrackNE ; NUME[:TrackNE] = 12
    ENUM[13] = :TrackNW ; NUME[:TrackNW] = 13
    ENUM[14] = :TrackSE ; NUME[:TrackSE] = 14
    ENUM[15] = :TrackSW ; NUME[:TrackSW] = 15
    ENUM[16] = :TrackEW ; NUME[:TrackEW] = 16
    ENUM[17] = :TrackNSE ; NUME[:TrackNSE] = 17
    ENUM[18] = :TrackNSW ; NUME[:TrackNSW] = 18
    ENUM[19] = :TrackNEW ; NUME[:TrackNEW] = 19
    ENUM[20] = :TrackSEW ; NUME[:TrackSEW] = 20
    ENUM[21] = :TrackNSEW ; NUME[:TrackNSEW] = 21
    ENUM[22] = :TrackRampN ; NUME[:TrackRampN] = 22
    ENUM[23] = :TrackRampS ; NUME[:TrackRampS] = 23
    ENUM[24] = :TrackRampE ; NUME[:TrackRampE] = 24
    ENUM[25] = :TrackRampW ; NUME[:TrackRampW] = 25
    ENUM[26] = :TrackRampNS ; NUME[:TrackRampNS] = 26
    ENUM[27] = :TrackRampNE ; NUME[:TrackRampNE] = 27
    ENUM[28] = :TrackRampNW ; NUME[:TrackRampNW] = 28
    ENUM[29] = :TrackRampSE ; NUME[:TrackRampSE] = 29
    ENUM[30] = :TrackRampSW ; NUME[:TrackRampSW] = 30
    ENUM[31] = :TrackRampEW ; NUME[:TrackRampEW] = 31
    ENUM[32] = :TrackRampNSE ; NUME[:TrackRampNSE] = 32
    ENUM[33] = :TrackRampNSW ; NUME[:TrackRampNSW] = 33
    ENUM[34] = :TrackRampNEW ; NUME[:TrackRampNEW] = 34
    ENUM[35] = :TrackRampSEW ; NUME[:TrackRampSEW] = 35
    ENUM[36] = :TrackRampNSEW ; NUME[:TrackRampNSEW] = 36
end

class CorpseMaterialType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Plant ; NUME[:Plant] = 0
    ENUM[1] = :Silk ; NUME[:Silk] = 1
    ENUM[2] = :Leather ; NUME[:Leather] = 2
    ENUM[3] = :Bone ; NUME[:Bone] = 3
    ENUM[4] = :Shell ; NUME[:Shell] = 4
    ENUM[6] = :Soap ; NUME[:Soap] = 6
    ENUM[7] = :Tooth ; NUME[:Tooth] = 7
    ENUM[8] = :Horn ; NUME[:Horn] = 8
    ENUM[9] = :Pearl ; NUME[:Pearl] = 9
    ENUM[10] = :HairWool ; NUME[:HairWool] = 10
    ENUM[11] = :Yarn ; NUME[:Yarn] = 11
end

class CraftMaterialClass < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    MakeSkill = Hash.new(:NONE)
    ImproveSkill = Hash.new(:NONE)
    ENUM[-1] = :None ; NUME[:None] = -1
    ENUM[0] = :Metal ; NUME[:Metal] = 0 ; MakeSkill[:Metal] = :FORGE_FURNITURE ; ImproveSkill[:Metal] = :METALCRAFT
    ENUM[1] = :Wood ; NUME[:Wood] = 1 ; MakeSkill[:Wood] = :CARPENTRY ; ImproveSkill[:Wood] = :WOODCRAFT
    ENUM[2] = :Gem ; NUME[:Gem] = 2 ; MakeSkill[:Gem] = :CUTGEM ; ImproveSkill[:Gem] = :ENCRUSTGEM
    ENUM[3] = :Glass ; NUME[:Glass] = 3 ; MakeSkill[:Glass] = :GLASSMAKER
    ENUM[4] = :Stone ; NUME[:Stone] = 4 ; MakeSkill[:Stone] = :MASONRY
    ENUM[5] = :Bone ; NUME[:Bone] = 5 ; MakeSkill[:Bone] = :BONECARVE ; ImproveSkill[:Bone] = :BONECARVE
    ENUM[6] = :Ivory ; NUME[:Ivory] = 6 ; MakeSkill[:Ivory] = :BONECARVE ; ImproveSkill[:Ivory] = :BONECARVE
    ENUM[7] = :Horn ; NUME[:Horn] = 7 ; MakeSkill[:Horn] = :BONECARVE ; ImproveSkill[:Horn] = :BONECARVE
    ENUM[8] = :Pearl ; NUME[:Pearl] = 8 ; MakeSkill[:Pearl] = :BONECARVE ; ImproveSkill[:Pearl] = :BONECARVE
    ENUM[9] = :Shell ; NUME[:Shell] = 9 ; MakeSkill[:Shell] = :BONECARVE ; ImproveSkill[:Shell] = :BONECARVE
    ENUM[10] = :Leather ; NUME[:Leather] = 10 ; MakeSkill[:Leather] = :LEATHERWORK ; ImproveSkill[:Leather] = :LEATHERWORK
    ENUM[11] = :Cloth ; NUME[:Cloth] = 11 ; MakeSkill[:Cloth] = :CLOTHESMAKING ; ImproveSkill[:Cloth] = :CLOTHESMAKING
end

class CreatureGraphicsRole < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :DEFAULT ; NUME[:DEFAULT] = 0
    ENUM[1] = :ADVENTURER ; NUME[:ADVENTURER] = 1
    ENUM[2] = :GUARD ; NUME[:GUARD] = 2
    ENUM[3] = :ROYALGUARD ; NUME[:ROYALGUARD] = 3
    ENUM[4] = :ANIMATED ; NUME[:ANIMATED] = 4
    ENUM[5] = :GHOST ; NUME[:GHOST] = 5
end

class CreatureInteractionEffectTargetMode < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :BY_TYPE ; NUME[:BY_TYPE] = 0
    ENUM[1] = :BY_TOKEN ; NUME[:BY_TOKEN] = 1
    ENUM[2] = :BY_CATEGORY ; NUME[:BY_CATEGORY] = 2
end

class CreatureInteractionEffectType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :PAIN ; NUME[:PAIN] = 0
    ENUM[1] = :SWELLING ; NUME[:SWELLING] = 1
    ENUM[2] = :OOZING ; NUME[:OOZING] = 2
    ENUM[3] = :BRUISING ; NUME[:BRUISING] = 3
    ENUM[4] = :BLISTERS ; NUME[:BLISTERS] = 4
    ENUM[5] = :NUMBNESS ; NUME[:NUMBNESS] = 5
    ENUM[6] = :PARALYSIS ; NUME[:PARALYSIS] = 6
    ENUM[7] = :FEVER ; NUME[:FEVER] = 7
    ENUM[8] = :BLEEDING ; NUME[:BLEEDING] = 8
    ENUM[9] = :COUGH_BLOOD ; NUME[:COUGH_BLOOD] = 9
    ENUM[10] = :VOMIT_BLOOD ; NUME[:VOMIT_BLOOD] = 10
    ENUM[11] = :NAUSEA ; NUME[:NAUSEA] = 11
    ENUM[12] = :UNCONSCIOUSNESS ; NUME[:UNCONSCIOUSNESS] = 12
    ENUM[13] = :NECROSIS ; NUME[:NECROSIS] = 13
    ENUM[14] = :IMPAIR_FUNCTION ; NUME[:IMPAIR_FUNCTION] = 14
    ENUM[15] = :DROWSINESS ; NUME[:DROWSINESS] = 15
    ENUM[16] = :DIZZINESS ; NUME[:DIZZINESS] = 16
    ENUM[17] = :ADD_TAG ; NUME[:ADD_TAG] = 17
    ENUM[18] = :REMOVE_TAG ; NUME[:REMOVE_TAG] = 18
    ENUM[19] = :DISPLAY_TILE ; NUME[:DISPLAY_TILE] = 19
    ENUM[20] = :FLASH_TILE ; NUME[:FLASH_TILE] = 20
    ENUM[21] = :SPEED_CHANGE ; NUME[:SPEED_CHANGE] = 21
    ENUM[22] = :CAN_DO_INTERACTION ; NUME[:CAN_DO_INTERACTION] = 22
    ENUM[23] = :SKILL_ROLL_ADJUST ; NUME[:SKILL_ROLL_ADJUST] = 23
    ENUM[24] = :BODY_TRANSFORMATION ; NUME[:BODY_TRANSFORMATION] = 24
    ENUM[25] = :PHYS_ATT_CHANGE ; NUME[:PHYS_ATT_CHANGE] = 25
    ENUM[26] = :MENT_ATT_CHANGE ; NUME[:MENT_ATT_CHANGE] = 26
    ENUM[27] = :MATERIAL_FORCE_MULTIPLIER ; NUME[:MATERIAL_FORCE_MULTIPLIER] = 27
    ENUM[28] = :BODY_MAT_INTERACTION ; NUME[:BODY_MAT_INTERACTION] = 28
    ENUM[29] = :BODY_APPEARANCE_MODIFIER ; NUME[:BODY_APPEARANCE_MODIFIER] = 29
    ENUM[30] = :BP_APPEARANCE_MODIFIER ; NUME[:BP_APPEARANCE_MODIFIER] = 30
    ENUM[31] = :DISPLAY_NAME ; NUME[:DISPLAY_NAME] = 31
    ENUM[32] = :SENSE_CREATURE_CLASS ; NUME[:SENSE_CREATURE_CLASS] = 32
end

class CreatureRawFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :UnkWagon ; NUME[:UnkWagon] = 0
    ENUM[1] = :EQUIPMENT_WAGON ; NUME[:EQUIPMENT_WAGON] = 1
    ENUM[2] = :MUNDANE ; NUME[:MUNDANE] = 2
    ENUM[3] = :VERMIN_EATER ; NUME[:VERMIN_EATER] = 3
    ENUM[4] = :VERMIN_GROUNDER ; NUME[:VERMIN_GROUNDER] = 4
    ENUM[5] = :VERMIN_ROTTER ; NUME[:VERMIN_ROTTER] = 5
    ENUM[6] = :VERMIN_SOIL ; NUME[:VERMIN_SOIL] = 6
    ENUM[7] = :VERMIN_SOIL_COLONY ; NUME[:VERMIN_SOIL_COLONY] = 7
    ENUM[8] = :LARGE_ROAMING ; NUME[:LARGE_ROAMING] = 8
    ENUM[9] = :VERMIN_FISH ; NUME[:VERMIN_FISH] = 9
    ENUM[10] = :LOOSE_CLUSTERS ; NUME[:LOOSE_CLUSTERS] = 10
    ENUM[11] = :FANCIFUL ; NUME[:FANCIFUL] = 11
    ENUM[12] = :BIOME_MOUNTAIN ; NUME[:BIOME_MOUNTAIN] = 12
    ENUM[13] = :BIOME_GLACIER ; NUME[:BIOME_GLACIER] = 13
    ENUM[14] = :BIOME_TUNDRA ; NUME[:BIOME_TUNDRA] = 14
    ENUM[15] = :BIOME_SWAMP_TEMPERATE_FRESHWATER ; NUME[:BIOME_SWAMP_TEMPERATE_FRESHWATER] = 15
    ENUM[16] = :BIOME_SWAMP_TEMPERATE_SALTWATER ; NUME[:BIOME_SWAMP_TEMPERATE_SALTWATER] = 16
    ENUM[17] = :BIOME_MARSH_TEMPERATE_FRESHWATER ; NUME[:BIOME_MARSH_TEMPERATE_FRESHWATER] = 17
    ENUM[18] = :BIOME_MARSH_TEMPERATE_SALTWATER ; NUME[:BIOME_MARSH_TEMPERATE_SALTWATER] = 18
    ENUM[19] = :BIOME_SWAMP_TROPICAL_FRESHWATER ; NUME[:BIOME_SWAMP_TROPICAL_FRESHWATER] = 19
    ENUM[20] = :BIOME_SWAMP_TROPICAL_SALTWATER ; NUME[:BIOME_SWAMP_TROPICAL_SALTWATER] = 20
    ENUM[21] = :BIOME_SWAMP_MANGROVE ; NUME[:BIOME_SWAMP_MANGROVE] = 21
    ENUM[22] = :BIOME_MARSH_TROPICAL_FRESHWATER ; NUME[:BIOME_MARSH_TROPICAL_FRESHWATER] = 22
    ENUM[23] = :BIOME_MARSH_TROPICAL_SALTWATER ; NUME[:BIOME_MARSH_TROPICAL_SALTWATER] = 23
    ENUM[24] = :BIOME_FOREST_TAIGA ; NUME[:BIOME_FOREST_TAIGA] = 24
    ENUM[25] = :BIOME_FOREST_TEMPERATE_CONIFER ; NUME[:BIOME_FOREST_TEMPERATE_CONIFER] = 25
    ENUM[26] = :BIOME_FOREST_TEMPERATE_BROADLEAF ; NUME[:BIOME_FOREST_TEMPERATE_BROADLEAF] = 26
    ENUM[27] = :BIOME_FOREST_TROPICAL_CONIFER ; NUME[:BIOME_FOREST_TROPICAL_CONIFER] = 27
    ENUM[28] = :BIOME_FOREST_TROPICAL_DRY_BROADLEAF ; NUME[:BIOME_FOREST_TROPICAL_DRY_BROADLEAF] = 28
    ENUM[29] = :BIOME_FOREST_TROPICAL_MOIST_BROADLEAF ; NUME[:BIOME_FOREST_TROPICAL_MOIST_BROADLEAF] = 29
    ENUM[30] = :BIOME_GRASSLAND_TEMPERATE ; NUME[:BIOME_GRASSLAND_TEMPERATE] = 30
    ENUM[31] = :BIOME_SAVANNA_TEMPERATE ; NUME[:BIOME_SAVANNA_TEMPERATE] = 31
    ENUM[32] = :BIOME_SHRUBLAND_TEMPERATE ; NUME[:BIOME_SHRUBLAND_TEMPERATE] = 32
    ENUM[33] = :BIOME_GRASSLAND_TROPICAL ; NUME[:BIOME_GRASSLAND_TROPICAL] = 33
    ENUM[34] = :BIOME_SAVANNA_TROPICAL ; NUME[:BIOME_SAVANNA_TROPICAL] = 34
    ENUM[35] = :BIOME_SHRUBLAND_TROPICAL ; NUME[:BIOME_SHRUBLAND_TROPICAL] = 35
    ENUM[36] = :BIOME_DESERT_BADLAND ; NUME[:BIOME_DESERT_BADLAND] = 36
    ENUM[37] = :BIOME_DESERT_ROCK ; NUME[:BIOME_DESERT_ROCK] = 37
    ENUM[38] = :BIOME_DESERT_SAND ; NUME[:BIOME_DESERT_SAND] = 38
    ENUM[39] = :BIOME_OCEAN_TROPICAL ; NUME[:BIOME_OCEAN_TROPICAL] = 39
    ENUM[40] = :BIOME_OCEAN_TEMPERATE ; NUME[:BIOME_OCEAN_TEMPERATE] = 40
    ENUM[41] = :BIOME_OCEAN_ARCTIC ; NUME[:BIOME_OCEAN_ARCTIC] = 41
    ENUM[42] = :BIOME_SUBTERRANEAN_WATER ; NUME[:BIOME_SUBTERRANEAN_WATER] = 42
    ENUM[43] = :BIOME_SUBTERRANEAN_CHASM ; NUME[:BIOME_SUBTERRANEAN_CHASM] = 43
    ENUM[44] = :BIOME_SUBTERRANEAN_LAVA ; NUME[:BIOME_SUBTERRANEAN_LAVA] = 44
    ENUM[45] = :BIOME_POOL_TEMPERATE_FRESHWATER ; NUME[:BIOME_POOL_TEMPERATE_FRESHWATER] = 45
    ENUM[46] = :BIOME_POOL_TEMPERATE_BRACKISHWATER ; NUME[:BIOME_POOL_TEMPERATE_BRACKISHWATER] = 46
    ENUM[47] = :BIOME_POOL_TEMPERATE_SALTWATER ; NUME[:BIOME_POOL_TEMPERATE_SALTWATER] = 47
    ENUM[48] = :BIOME_POOL_TROPICAL_FRESHWATER ; NUME[:BIOME_POOL_TROPICAL_FRESHWATER] = 48
    ENUM[49] = :BIOME_POOL_TROPICAL_BRACKISHWATER ; NUME[:BIOME_POOL_TROPICAL_BRACKISHWATER] = 49
    ENUM[50] = :BIOME_POOL_TROPICAL_SALTWATER ; NUME[:BIOME_POOL_TROPICAL_SALTWATER] = 50
    ENUM[51] = :BIOME_LAKE_TEMPERATE_FRESHWATER ; NUME[:BIOME_LAKE_TEMPERATE_FRESHWATER] = 51
    ENUM[52] = :BIOME_LAKE_TEMPERATE_BRACKISHWATER ; NUME[:BIOME_LAKE_TEMPERATE_BRACKISHWATER] = 52
    ENUM[53] = :BIOME_LAKE_TEMPERATE_SALTWATER ; NUME[:BIOME_LAKE_TEMPERATE_SALTWATER] = 53
    ENUM[54] = :BIOME_LAKE_TROPICAL_FRESHWATER ; NUME[:BIOME_LAKE_TROPICAL_FRESHWATER] = 54
    ENUM[55] = :BIOME_LAKE_TROPICAL_BRACKISHWATER ; NUME[:BIOME_LAKE_TROPICAL_BRACKISHWATER] = 55
    ENUM[56] = :BIOME_LAKE_TROPICAL_SALTWATER ; NUME[:BIOME_LAKE_TROPICAL_SALTWATER] = 56
    ENUM[57] = :BIOME_RIVER_TEMPERATE_FRESHWATER ; NUME[:BIOME_RIVER_TEMPERATE_FRESHWATER] = 57
    ENUM[58] = :BIOME_RIVER_TEMPERATE_BRACKISHWATER ; NUME[:BIOME_RIVER_TEMPERATE_BRACKISHWATER] = 58
    ENUM[59] = :BIOME_RIVER_TEMPERATE_SALTWATER ; NUME[:BIOME_RIVER_TEMPERATE_SALTWATER] = 59
    ENUM[60] = :BIOME_RIVER_TROPICAL_FRESHWATER ; NUME[:BIOME_RIVER_TROPICAL_FRESHWATER] = 60
    ENUM[61] = :BIOME_RIVER_TROPICAL_BRACKISHWATER ; NUME[:BIOME_RIVER_TROPICAL_BRACKISHWATER] = 61
    ENUM[62] = :BIOME_RIVER_TROPICAL_SALTWATER ; NUME[:BIOME_RIVER_TROPICAL_SALTWATER] = 62
    ENUM[63] = :GOOD ; NUME[:GOOD] = 63
    ENUM[64] = :EVIL ; NUME[:EVIL] = 64
    ENUM[65] = :SAVAGE ; NUME[:SAVAGE] = 65
    ENUM[66] = :NOT_ASEXUAL ; NUME[:NOT_ASEXUAL] = 66
    ENUM[67] = :Unk43 ; NUME[:Unk43] = 67
    ENUM[68] = :Unk44 ; NUME[:Unk44] = 68
    ENUM[69] = :Unk45 ; NUME[:Unk45] = 69
    ENUM[70] = :AnyVermin ; NUME[:AnyVermin] = 70
    ENUM[71] = :CASTE_CAN_LEARN ; NUME[:CASTE_CAN_LEARN] = 71
    ENUM[72] = :CASTE_VERMIN_HATEABLE ; NUME[:CASTE_VERMIN_HATEABLE] = 72
    ENUM[73] = :Unk49 ; NUME[:Unk49] = 73
    ENUM[74] = :CASTE_LARGE_PREDATOR ; NUME[:CASTE_LARGE_PREDATOR] = 74
    ENUM[75] = :CASTE_CURIOUSBEAST ; NUME[:CASTE_CURIOUSBEAST] = 75
    ENUM[76] = :CASTE_BENIGN ; NUME[:CASTE_BENIGN] = 76
    ENUM[77] = :CASTE_NATURAL ; NUME[:CASTE_NATURAL] = 77
    ENUM[78] = :CASTE_MEGABEAST ; NUME[:CASTE_MEGABEAST] = 78
    ENUM[79] = :CASTE_SEMIMEGABEAST ; NUME[:CASTE_SEMIMEGABEAST] = 79
    ENUM[80] = :CASTE_POWER ; NUME[:CASTE_POWER] = 80
    ENUM[81] = :CASTE_VERMIN_MICRO ; NUME[:CASTE_VERMIN_MICRO] = 81
    ENUM[82] = :CASTE_NOT_FIREIMMUNE ; NUME[:CASTE_NOT_FIREIMMUNE] = 82
    ENUM[83] = :CASTE_MUST_BREATHE_AIR ; NUME[:CASTE_MUST_BREATHE_AIR] = 83
    ENUM[84] = :CASTE_MUST_BREATHE_WATER ; NUME[:CASTE_MUST_BREATHE_WATER] = 84
    ENUM[85] = :Unk55 ; NUME[:Unk55] = 85
    ENUM[86] = :CASTE_SWIMS_LEARNED ; NUME[:CASTE_SWIMS_LEARNED] = 86
    ENUM[87] = :CASTE_COMMON_DOMESTIC ; NUME[:CASTE_COMMON_DOMESTIC] = 87
    ENUM[88] = :CASTE_UTTERANCES ; NUME[:CASTE_UTTERANCES] = 88
    ENUM[89] = :CASTE_CAN_SPEAK ; NUME[:CASTE_CAN_SPEAK] = 89
    ENUM[90] = :CASTE_FEATURE_BEAST ; NUME[:CASTE_FEATURE_BEAST] = 90
    ENUM[91] = :GENERATED ; NUME[:GENERATED] = 91
    ENUM[92] = :CASTE_TITAN ; NUME[:CASTE_TITAN] = 92
    ENUM[93] = :CASTE_UNIQUE_DEMON ; NUME[:CASTE_UNIQUE_DEMON] = 93
    ENUM[94] = :DOES_NOT_EXIST ; NUME[:DOES_NOT_EXIST] = 94
    ENUM[95] = :CASTEUnk9e ; NUME[:CASTEUnk9e] = 95
    ENUM[96] = :CASTE_MISCHIEVOUS ; NUME[:CASTE_MISCHIEVOUS] = 96
    ENUM[97] = :CASTE_FLIER ; NUME[:CASTE_FLIER] = 97
    ENUM[98] = :CASTE_DEMON ; NUME[:CASTE_DEMON] = 98
    ENUM[99] = :CASTE_NIGHT_CREATURE_ANY ; NUME[:CASTE_NIGHT_CREATURE_ANY] = 99
    ENUM[100] = :CASTE_NIGHT_CREATURE_HUNTER ; NUME[:CASTE_NIGHT_CREATURE_HUNTER] = 100
    ENUM[101] = :CASTE_NIGHT_CREATURE_BOGEYMAN ; NUME[:CASTE_NIGHT_CREATURE_BOGEYMAN] = 101
    ENUM[102] = :CASTE_CARNIVORE ; NUME[:CASTE_CARNIVORE] = 102
    ENUM[103] = :ARTIFICIAL_HIVEABLE ; NUME[:ARTIFICIAL_HIVEABLE] = 103
    ENUM[104] = :UBIQUITOUS ; NUME[:UBIQUITOUS] = 104
    ENUM[105] = :Unk69 ; NUME[:Unk69] = 105
    ENUM[106] = :CASTEUnk2b ; NUME[:CASTEUnk2b] = 106
    ENUM[107] = :CASTE_BLOOD ; NUME[:CASTE_BLOOD] = 107
    ENUM[108] = :CASTE_GRAZER ; NUME[:CASTE_GRAZER] = 108
    ENUM[109] = :CASTEUnk31 ; NUME[:CASTEUnk31] = 109
    ENUM[110] = :Unk6e ; NUME[:Unk6e] = 110
    ENUM[111] = :Unk6f ; NUME[:Unk6f] = 111
end

class DInitEmbarkConfirm < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :ALWAYS ; NUME[:ALWAYS] = 0
    ENUM[1] = :IF_POINTS_REMAIN ; NUME[:IF_POINTS_REMAIN] = 1
    ENUM[2] = :NO ; NUME[:NO] = 2
end

class DInitFlags1 < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :VARIED_GROUND_TILES ; NUME[:VARIED_GROUND_TILES] = 0
    ENUM[1] = :ENGRAVINGS_START_OBSCURED ; NUME[:ENGRAVINGS_START_OBSCURED] = 1
    ENUM[2] = :SHOW_IMP_QUALITY ; NUME[:SHOW_IMP_QUALITY] = 2
    ENUM[3] = :SHOW_FLOW_AMOUNTS ; NUME[:SHOW_FLOW_AMOUNTS] = 3
end

class DInitFlags2 < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :MORE ; NUME[:MORE] = 0
    ENUM[1] = :ADVENTURER_TRAPS ; NUME[:ADVENTURER_TRAPS] = 1
    ENUM[2] = :ADVENTURER_ALWAYS_CENTER ; NUME[:ADVENTURER_ALWAYS_CENTER] = 2
end

class DInitFlags3 < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :COFFIN_NO_PETS_DEFAULT ; NUME[:COFFIN_NO_PETS_DEFAULT] = 0
end

class DInitFlags4 < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :TEMPERATURE ; NUME[:TEMPERATURE] = 0
    ENUM[1] = :WEATHER ; NUME[:WEATHER] = 1
    ENUM[2] = :ECONOMY ; NUME[:ECONOMY] = 2
    ENUM[3] = :ZERO_RENT ; NUME[:ZERO_RENT] = 3
    ENUM[4] = :AUTOSAVE_SEASONAL ; NUME[:AUTOSAVE_SEASONAL] = 4
    ENUM[5] = :AUTOSAVE_YEARLY ; NUME[:AUTOSAVE_YEARLY] = 5
    ENUM[6] = :AUTOSAVE_PAUSE ; NUME[:AUTOSAVE_PAUSE] = 6
    ENUM[7] = :AUTOBACKUP ; NUME[:AUTOBACKUP] = 7
    ENUM[8] = :INITIAL_SAVE ; NUME[:INITIAL_SAVE] = 8
    ENUM[9] = :INVADERS ; NUME[:INVADERS] = 9
    ENUM[10] = :CAVEINS ; NUME[:CAVEINS] = 10
    ENUM[11] = :ARTIFACTS ; NUME[:ARTIFACTS] = 11
    ENUM[12] = :LOG_MAP_REJECTS ; NUME[:LOG_MAP_REJECTS] = 12
    ENUM[13] = :PAUSE_ON_LOAD ; NUME[:PAUSE_ON_LOAD] = 13
    ENUM[14] = :EMBARK_WARNING_ALWAYS ; NUME[:EMBARK_WARNING_ALWAYS] = 14
    ENUM[15] = :SHOW_ALL_HISTORY_IN_DWARF_MODE ; NUME[:SHOW_ALL_HISTORY_IN_DWARF_MODE] = 15
    ENUM[16] = :TESTING_ARENA ; NUME[:TESTING_ARENA] = 16
    ENUM[17] = :WALKING_SPREADS_SPATTER_DWF ; NUME[:WALKING_SPREADS_SPATTER_DWF] = 17
    ENUM[18] = :WALKING_SPREADS_SPATTER_ADV ; NUME[:WALKING_SPREADS_SPATTER_ADV] = 18
end

class DInitIdlers < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :OFF ; NUME[:OFF] = -1
    ENUM[0] = :TOP ; NUME[:TOP] = 0
    ENUM[1] = :BOTTOM ; NUME[:BOTTOM] = 1
end

class DInitNickname < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :REPLACE_FIRST ; NUME[:REPLACE_FIRST] = 0
    ENUM[1] = :CENTRALIZE ; NUME[:CENTRALIZE] = 1
    ENUM[2] = :REPLACE_ALL ; NUME[:REPLACE_ALL] = 2
end

class DInitTunnel < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :NO ; NUME[:NO] = 0
    ENUM[1] = :FINDER ; NUME[:FINDER] = 1
    ENUM[2] = :ALWAYS ; NUME[:ALWAYS] = 2
end

class DInitZView < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :OFF ; NUME[:OFF] = 0
    ENUM[1] = :UNHIDDEN ; NUME[:UNHIDDEN] = 1
    ENUM[2] = :CREATURE ; NUME[:CREATURE] = 2
    ENUM[3] = :ON ; NUME[:ON] = 3
end

class DeathType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :OLD_AGE ; NUME[:OLD_AGE] = 0
    ENUM[1] = :HUNGER ; NUME[:HUNGER] = 1
    ENUM[2] = :THIRST ; NUME[:THIRST] = 2
    ENUM[3] = :SHOT ; NUME[:SHOT] = 3
    ENUM[4] = :BLEED ; NUME[:BLEED] = 4
    ENUM[5] = :DROWN ; NUME[:DROWN] = 5
    ENUM[6] = :SUFFOCATE ; NUME[:SUFFOCATE] = 6
    ENUM[7] = :STRUCK_DOWN ; NUME[:STRUCK_DOWN] = 7
    ENUM[8] = :SCUTTLE ; NUME[:SCUTTLE] = 8
    ENUM[9] = :COLLISION ; NUME[:COLLISION] = 9
    ENUM[10] = :MAGMA ; NUME[:MAGMA] = 10
    ENUM[11] = :MAGMA_MIST ; NUME[:MAGMA_MIST] = 11
    ENUM[12] = :DRAGONFIRE ; NUME[:DRAGONFIRE] = 12
    ENUM[13] = :FIRE ; NUME[:FIRE] = 13
    ENUM[14] = :SCALD ; NUME[:SCALD] = 14
    ENUM[15] = :CAVEIN ; NUME[:CAVEIN] = 15
    ENUM[16] = :DRAWBRIDGE ; NUME[:DRAWBRIDGE] = 16
    ENUM[17] = :FALLING_ROCKS ; NUME[:FALLING_ROCKS] = 17
    ENUM[18] = :CHASM ; NUME[:CHASM] = 18
    ENUM[19] = :CAGE ; NUME[:CAGE] = 19
    ENUM[20] = :MURDER ; NUME[:MURDER] = 20
    ENUM[21] = :TRAP ; NUME[:TRAP] = 21
    ENUM[22] = :VANISH ; NUME[:VANISH] = 22
    ENUM[23] = :QUIT ; NUME[:QUIT] = 23
    ENUM[24] = :ABANDON ; NUME[:ABANDON] = 24
    ENUM[25] = :HEAT ; NUME[:HEAT] = 25
    ENUM[26] = :COLD ; NUME[:COLD] = 26
    ENUM[27] = :SPIKE ; NUME[:SPIKE] = 27
    ENUM[28] = :ENCASE_LAVA ; NUME[:ENCASE_LAVA] = 28
    ENUM[29] = :ENCASE_MAGMA ; NUME[:ENCASE_MAGMA] = 29
    ENUM[30] = :ENCASE_ICE ; NUME[:ENCASE_ICE] = 30
    ENUM[31] = :BEHEAD ; NUME[:BEHEAD] = 31
    ENUM[32] = :CRUCIFY ; NUME[:CRUCIFY] = 32
    ENUM[33] = :BURY_ALIVE ; NUME[:BURY_ALIVE] = 33
    ENUM[34] = :DROWN_ALT ; NUME[:DROWN_ALT] = 34
    ENUM[35] = :BURN_ALIVE ; NUME[:BURN_ALIVE] = 35
    ENUM[36] = :FEED_TO_BEASTS ; NUME[:FEED_TO_BEASTS] = 36
    ENUM[37] = :HACK_TO_PIECES ; NUME[:HACK_TO_PIECES] = 37
    ENUM[38] = :LEAVE_OUT_IN_AIR ; NUME[:LEAVE_OUT_IN_AIR] = 38
    ENUM[39] = :BOIL ; NUME[:BOIL] = 39
    ENUM[40] = :MELT ; NUME[:MELT] = 40
    ENUM[41] = :CONDENSE ; NUME[:CONDENSE] = 41
    ENUM[42] = :SOLIDIFY ; NUME[:SOLIDIFY] = 42
    ENUM[43] = :INFECTION ; NUME[:INFECTION] = 43
    ENUM[44] = :MEMORIALIZE ; NUME[:MEMORIALIZE] = 44
    ENUM[45] = :SCARE ; NUME[:SCARE] = 45
    ENUM[46] = :DARKNESS ; NUME[:DARKNESS] = 46
    ENUM[47] = :COLLAPSE ; NUME[:COLLAPSE] = 47
    ENUM[48] = :DRAIN_BLOOD ; NUME[:DRAIN_BLOOD] = 48
    ENUM[49] = :SLAUGHTER ; NUME[:SLAUGHTER] = 49
    ENUM[50] = :VEHICLE ; NUME[:VEHICLE] = 50
    ENUM[51] = :FALLING_OBJECT ; NUME[:FALLING_OBJECT] = 51
end

class EmbarkFinderOption < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :DimensionX ; NUME[:DimensionX] = 0
    ENUM[1] = :DimensionY ; NUME[:DimensionY] = 1
    ENUM[2] = :Savagery ; NUME[:Savagery] = 2
    ENUM[3] = :Evil ; NUME[:Evil] = 3
    ENUM[4] = :Elevation ; NUME[:Elevation] = 4
    ENUM[5] = :Temperature ; NUME[:Temperature] = 5
    ENUM[6] = :Rain ; NUME[:Rain] = 6
    ENUM[7] = :Drainage ; NUME[:Drainage] = 7
    ENUM[8] = :FluxStone ; NUME[:FluxStone] = 8
    ENUM[9] = :Aquifer ; NUME[:Aquifer] = 9
    ENUM[10] = :River ; NUME[:River] = 10
    ENUM[11] = :UndergroundRiver ; NUME[:UndergroundRiver] = 11
    ENUM[12] = :UndergroundPool ; NUME[:UndergroundPool] = 12
    ENUM[13] = :MagmaPool ; NUME[:MagmaPool] = 13
    ENUM[14] = :MagmaPipe ; NUME[:MagmaPipe] = 14
    ENUM[15] = :Chasm ; NUME[:Chasm] = 15
    ENUM[16] = :BottomlessPit ; NUME[:BottomlessPit] = 16
    ENUM[17] = :OtherFeatures ; NUME[:OtherFeatures] = 17
    ENUM[18] = :ShallowMetal ; NUME[:ShallowMetal] = 18
    ENUM[19] = :DeepMetal ; NUME[:DeepMetal] = 19
    ENUM[20] = :Soil ; NUME[:Soil] = 20
    ENUM[21] = :Clay ; NUME[:Clay] = 21
end

class EmotionType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Color = Hash.new(7)
    Divider = Hash.new
    ENUM[-1] = :Anything ; NUME[:Anything] = -1
    ENUM[0] = :Acceptance ; NUME[:Acceptance] = 0 ; Color[:Acceptance] = 7 ; Divider[:Acceptance] = -8
    ENUM[1] = :Adoration ; NUME[:Adoration] = 1 ; Color[:Adoration] = 11 ; Divider[:Adoration] = -1
    ENUM[2] = :Affection ; NUME[:Affection] = 2 ; Color[:Affection] = 11 ; Divider[:Affection] = -2
    ENUM[3] = :Agitation ; NUME[:Agitation] = 3 ; Color[:Agitation] = 6 ; Divider[:Agitation] = 4
    ENUM[4] = :Aggravation ; NUME[:Aggravation] = 4 ; Color[:Aggravation] = 6 ; Divider[:Aggravation] = 4
    ENUM[5] = :Agony ; NUME[:Agony] = 5 ; Color[:Agony] = 14 ; Divider[:Agony] = 1
    ENUM[6] = :Alarm ; NUME[:Alarm] = 6 ; Color[:Alarm] = 12 ; Divider[:Alarm] = 4
    ENUM[7] = :Alienation ; NUME[:Alienation] = 7 ; Color[:Alienation] = 6 ; Divider[:Alienation] = 8
    ENUM[8] = :Amazement ; NUME[:Amazement] = 8 ; Color[:Amazement] = 9 ; Divider[:Amazement] = 0
    ENUM[9] = :Ambivalence ; NUME[:Ambivalence] = 9 ; Color[:Ambivalence] = 7 ; Divider[:Ambivalence] = 0
    ENUM[10] = :Amusement ; NUME[:Amusement] = 10 ; Color[:Amusement] = 10 ; Divider[:Amusement] = -4
    ENUM[11] = :Anger ; NUME[:Anger] = 11 ; Color[:Anger] = 12 ; Divider[:Anger] = 2
    ENUM[13] = :Anguish ; NUME[:Anguish] = 13 ; Color[:Anguish] = 14 ; Divider[:Anguish] = 1
    ENUM[14] = :Annoyance ; NUME[:Annoyance] = 14 ; Color[:Annoyance] = 6 ; Divider[:Annoyance] = 8
    ENUM[16] = :Anxiety ; NUME[:Anxiety] = 16 ; Color[:Anxiety] = 6 ; Divider[:Anxiety] = 4
    ENUM[17] = :Apathy ; NUME[:Apathy] = 17 ; Color[:Apathy] = 7 ; Divider[:Apathy] = 0
    ENUM[19] = :Arousal ; NUME[:Arousal] = 19 ; Color[:Arousal] = 11 ; Divider[:Arousal] = -8
    ENUM[20] = :Astonishment ; NUME[:Astonishment] = 20 ; Color[:Astonishment] = 9 ; Divider[:Astonishment] = 0
    ENUM[22] = :Aversion ; NUME[:Aversion] = 22 ; Color[:Aversion] = 6 ; Divider[:Aversion] = 4
    ENUM[23] = :Awe ; NUME[:Awe] = 23 ; Color[:Awe] = 9 ; Divider[:Awe] = 0
    ENUM[24] = :Bitterness ; NUME[:Bitterness] = 24 ; Color[:Bitterness] = 6 ; Divider[:Bitterness] = 2
    ENUM[25] = :Bliss ; NUME[:Bliss] = 25 ; Color[:Bliss] = 10 ; Divider[:Bliss] = -1
    ENUM[26] = :Boredom ; NUME[:Boredom] = 26 ; Color[:Boredom] = 6 ; Divider[:Boredom] = 8
    ENUM[27] = :Caring ; NUME[:Caring] = 27 ; Color[:Caring] = 11 ; Divider[:Caring] = -2
    ENUM[29] = :Confusion ; NUME[:Confusion] = 29 ; Color[:Confusion] = 6 ; Divider[:Confusion] = 8
    ENUM[30] = :Contempt ; NUME[:Contempt] = 30 ; Color[:Contempt] = 6 ; Divider[:Contempt] = 4
    ENUM[31] = :Contentment ; NUME[:Contentment] = 31 ; Color[:Contentment] = 10 ; Divider[:Contentment] = -8
    ENUM[35] = :Dejection ; NUME[:Dejection] = 35 ; Color[:Dejection] = 6 ; Divider[:Dejection] = 4
    ENUM[36] = :Delight ; NUME[:Delight] = 36 ; Color[:Delight] = 10 ; Divider[:Delight] = -1
    ENUM[39] = :Despair ; NUME[:Despair] = 39 ; Color[:Despair] = 14 ; Divider[:Despair] = 1
    ENUM[40] = :Disappointment ; NUME[:Disappointment] = 40 ; Color[:Disappointment] = 6 ; Divider[:Disappointment] = 8
    ENUM[41] = :Disgust ; NUME[:Disgust] = 41 ; Color[:Disgust] = 14 ; Divider[:Disgust] = 4
    ENUM[42] = :Disillusioned ; NUME[:Disillusioned] = 42 ; Color[:Disillusioned] = 6 ; Divider[:Disillusioned] = 8
    ENUM[43] = :Dislike ; NUME[:Dislike] = 43 ; Color[:Dislike] = 6 ; Divider[:Dislike] = 8
    ENUM[44] = :Dismay ; NUME[:Dismay] = 44 ; Color[:Dismay] = 14 ; Divider[:Dismay] = 2
    ENUM[45] = :Displeasure ; NUME[:Displeasure] = 45 ; Color[:Displeasure] = 6 ; Divider[:Displeasure] = 8
    ENUM[46] = :Distress ; NUME[:Distress] = 46 ; Color[:Distress] = 14 ; Divider[:Distress] = 2
    ENUM[49] = :Eagerness ; NUME[:Eagerness] = 49 ; Color[:Eagerness] = 9 ; Divider[:Eagerness] = -4
    ENUM[51] = :Elation ; NUME[:Elation] = 51 ; Color[:Elation] = 10 ; Divider[:Elation] = -2
    ENUM[52] = :Embarrassment ; NUME[:Embarrassment] = 52 ; Color[:Embarrassment] = 6 ; Divider[:Embarrassment] = 8
    ENUM[53] = :Empathy ; NUME[:Empathy] = 53 ; Color[:Empathy] = 11 ; Divider[:Empathy] = -2
    ENUM[54] = :Emptiness ; NUME[:Emptiness] = 54 ; Color[:Emptiness] = 14 ; Divider[:Emptiness] = 4
    ENUM[55] = :Enjoyment ; NUME[:Enjoyment] = 55 ; Color[:Enjoyment] = 10 ; Divider[:Enjoyment] = -8
    ENUM[60] = :Exasperation ; NUME[:Exasperation] = 60 ; Color[:Exasperation] = 6 ; Divider[:Exasperation] = 8
    ENUM[62] = :Exhilaration ; NUME[:Exhilaration] = 62 ; Color[:Exhilaration] = 9 ; Divider[:Exhilaration] = -2
    ENUM[64] = :Fear ; NUME[:Fear] = 64 ; Color[:Fear] = 12 ; Divider[:Fear] = 1
    ENUM[65] = :Ferocity ; NUME[:Ferocity] = 65 ; Color[:Ferocity] = 12 ; Divider[:Ferocity] = 2
    ENUM[66] = :Fondness ; NUME[:Fondness] = 66 ; Color[:Fondness] = 11 ; Divider[:Fondness] = -8
    ENUM[67] = :Free ; NUME[:Free] = 67 ; Color[:Free] = 10 ; Divider[:Free] = -4
    ENUM[68] = :Fright ; NUME[:Fright] = 68 ; Color[:Fright] = 14 ; Divider[:Fright] = 2
    ENUM[69] = :Frustration ; NUME[:Frustration] = 69 ; Color[:Frustration] = 6 ; Divider[:Frustration] = 8
    ENUM[73] = :Glee ; NUME[:Glee] = 73 ; Color[:Glee] = 10 ; Divider[:Glee] = -2
    ENUM[74] = :Gloom ; NUME[:Gloom] = 74 ; Color[:Gloom] = 6 ; Divider[:Gloom] = 4
    ENUM[75] = :Glumness ; NUME[:Glumness] = 75 ; Color[:Glumness] = 6 ; Divider[:Glumness] = 8
    ENUM[76] = :Gratitude ; NUME[:Gratitude] = 76 ; Color[:Gratitude] = 11 ; Divider[:Gratitude] = -4
    ENUM[78] = :Grief ; NUME[:Grief] = 78 ; Color[:Grief] = 14 ; Divider[:Grief] = 2
    ENUM[79] = :GrimSatisfaction ; NUME[:GrimSatisfaction] = 79 ; Color[:GrimSatisfaction] = 13 ; Divider[:GrimSatisfaction] = 0
    ENUM[80] = :Grouchiness ; NUME[:Grouchiness] = 80 ; Color[:Grouchiness] = 6 ; Divider[:Grouchiness] = 8
    ENUM[81] = :Grumpiness ; NUME[:Grumpiness] = 81 ; Color[:Grumpiness] = 6 ; Divider[:Grumpiness] = 8
    ENUM[82] = :Guilt ; NUME[:Guilt] = 82 ; Color[:Guilt] = 6 ; Divider[:Guilt] = 4
    ENUM[83] = :Happiness ; NUME[:Happiness] = 83 ; Color[:Happiness] = 10 ; Divider[:Happiness] = -2
    ENUM[84] = :Hatred ; NUME[:Hatred] = 84 ; Color[:Hatred] = 12 ; Divider[:Hatred] = 2
    ENUM[86] = :Hope ; NUME[:Hope] = 86 ; Color[:Hope] = 10 ; Divider[:Hope] = -2
    ENUM[87] = :Hopelessness ; NUME[:Hopelessness] = 87 ; Color[:Hopelessness] = 14 ; Divider[:Hopelessness] = 2
    ENUM[88] = :Horror ; NUME[:Horror] = 88 ; Color[:Horror] = 12 ; Divider[:Horror] = 1
    ENUM[90] = :Humiliation ; NUME[:Humiliation] = 90 ; Color[:Humiliation] = 14 ; Divider[:Humiliation] = 4
    ENUM[95] = :Insult ; NUME[:Insult] = 95 ; Color[:Insult] = 6 ; Divider[:Insult] = 4
    ENUM[96] = :Interest ; NUME[:Interest] = 96 ; Color[:Interest] = 9 ; Divider[:Interest] = -8
    ENUM[97] = :Irritation ; NUME[:Irritation] = 97 ; Color[:Irritation] = 6 ; Divider[:Irritation] = 8
    ENUM[98] = :Isolation ; NUME[:Isolation] = 98 ; Color[:Isolation] = 6 ; Divider[:Isolation] = 4
    ENUM[100] = :Jolliness ; NUME[:Jolliness] = 100 ; Color[:Jolliness] = 10 ; Divider[:Jolliness] = -4
    ENUM[101] = :Jovialty ; NUME[:Jovialty] = 101 ; Color[:Jovialty] = 10 ; Divider[:Jovialty] = -2
    ENUM[102] = :Joy ; NUME[:Joy] = 102 ; Color[:Joy] = 10 ; Divider[:Joy] = -1
    ENUM[103] = :Jubilation ; NUME[:Jubilation] = 103 ; Color[:Jubilation] = 10 ; Divider[:Jubilation] = -1
    ENUM[105] = :Loathing ; NUME[:Loathing] = 105 ; Color[:Loathing] = 12 ; Divider[:Loathing] = 2
    ENUM[106] = :Loneliness ; NUME[:Loneliness] = 106 ; Color[:Loneliness] = 6 ; Divider[:Loneliness] = 4
    ENUM[108] = :Love ; NUME[:Love] = 108 ; Color[:Love] = 11 ; Divider[:Love] = -1
    ENUM[110] = :Lust ; NUME[:Lust] = 110 ; Color[:Lust] = 11 ; Divider[:Lust] = -8
    ENUM[112] = :Misery ; NUME[:Misery] = 112 ; Color[:Misery] = 14 ; Divider[:Misery] = 1
    ENUM[113] = :Mortification ; NUME[:Mortification] = 113 ; Color[:Mortification] = 14 ; Divider[:Mortification] = 2
    ENUM[115] = :Nervousness ; NUME[:Nervousness] = 115 ; Color[:Nervousness] = 6 ; Divider[:Nervousness] = 8
    ENUM[116] = :Nostalgia ; NUME[:Nostalgia] = 116 ; Color[:Nostalgia] = 9 ; Divider[:Nostalgia] = -8
    ENUM[117] = :Optimism ; NUME[:Optimism] = 117 ; Color[:Optimism] = 10 ; Divider[:Optimism] = -4
    ENUM[118] = :Outrage ; NUME[:Outrage] = 118 ; Color[:Outrage] = 12 ; Divider[:Outrage] = 2
    ENUM[119] = :Panic ; NUME[:Panic] = 119 ; Color[:Panic] = 14 ; Divider[:Panic] = 1
    ENUM[120] = :Patience ; NUME[:Patience] = 120 ; Color[:Patience] = 7 ; Divider[:Patience] = -8
    ENUM[121] = :Passion ; NUME[:Passion] = 121 ; Color[:Passion] = 11 ; Divider[:Passion] = -2
    ENUM[124] = :Pleasure ; NUME[:Pleasure] = 124 ; Color[:Pleasure] = 11 ; Divider[:Pleasure] = -4
    ENUM[125] = :Pride ; NUME[:Pride] = 125 ; Color[:Pride] = 11 ; Divider[:Pride] = -4
    ENUM[126] = :Rage ; NUME[:Rage] = 126 ; Color[:Rage] = 12 ; Divider[:Rage] = 1
    ENUM[127] = :Rapture ; NUME[:Rapture] = 127 ; Color[:Rapture] = 11 ; Divider[:Rapture] = -1
    ENUM[128] = :Rejection ; NUME[:Rejection] = 128 ; Color[:Rejection] = 6 ; Divider[:Rejection] = 4
    ENUM[129] = :Relief ; NUME[:Relief] = 129 ; Color[:Relief] = 10 ; Divider[:Relief] = -2
    ENUM[130] = :Regret ; NUME[:Regret] = 130 ; Color[:Regret] = 6 ; Divider[:Regret] = 8
    ENUM[131] = :Remorse ; NUME[:Remorse] = 131 ; Color[:Remorse] = 6 ; Divider[:Remorse] = 4
    ENUM[132] = :Repentance ; NUME[:Repentance] = 132 ; Color[:Repentance] = 9 ; Divider[:Repentance] = -2
    ENUM[133] = :Resentment ; NUME[:Resentment] = 133 ; Color[:Resentment] = 6 ; Divider[:Resentment] = 8
    ENUM[135] = :RighteousIndignation ; NUME[:RighteousIndignation] = 135 ; Color[:RighteousIndignation] = 6 ; Divider[:RighteousIndignation] = 8
    ENUM[136] = :Sadness ; NUME[:Sadness] = 136 ; Color[:Sadness] = 14 ; Divider[:Sadness] = 4
    ENUM[137] = :Satisfaction ; NUME[:Satisfaction] = 137 ; Color[:Satisfaction] = 10 ; Divider[:Satisfaction] = -8
    ENUM[139] = :SelfPity ; NUME[:SelfPity] = 139 ; Color[:SelfPity] = 6 ; Divider[:SelfPity] = 8
    ENUM[141] = :Servile ; NUME[:Servile] = 141 ; Color[:Servile] = 9 ; Divider[:Servile] = 0
    ENUM[142] = :Shaken ; NUME[:Shaken] = 142 ; Color[:Shaken] = 14 ; Divider[:Shaken] = 1
    ENUM[143] = :Shame ; NUME[:Shame] = 143 ; Color[:Shame] = 14 ; Divider[:Shame] = 4
    ENUM[144] = :Shock ; NUME[:Shock] = 144 ; Color[:Shock] = 14 ; Divider[:Shock] = 1
    ENUM[149] = :Suspicion ; NUME[:Suspicion] = 149 ; Color[:Suspicion] = 13 ; Divider[:Suspicion] = 8
    ENUM[150] = :Sympathy ; NUME[:Sympathy] = 150 ; Color[:Sympathy] = 11 ; Divider[:Sympathy] = -8
    ENUM[151] = :Tenderness ; NUME[:Tenderness] = 151 ; Color[:Tenderness] = 11 ; Divider[:Tenderness] = -2
    ENUM[153] = :Terror ; NUME[:Terror] = 153 ; Color[:Terror] = 12 ; Divider[:Terror] = 1
    ENUM[154] = :Thrill ; NUME[:Thrill] = 154 ; Color[:Thrill] = 9 ; Divider[:Thrill] = -2
    ENUM[156] = :Triumph ; NUME[:Triumph] = 156 ; Color[:Triumph] = 10 ; Divider[:Triumph] = -2
    ENUM[157] = :Uneasiness ; NUME[:Uneasiness] = 157 ; Color[:Uneasiness] = 6 ; Divider[:Uneasiness] = 8
    ENUM[158] = :Unhappiness ; NUME[:Unhappiness] = 158 ; Color[:Unhappiness] = 6 ; Divider[:Unhappiness] = 4
    ENUM[159] = :Vengefulness ; NUME[:Vengefulness] = 159 ; Color[:Vengefulness] = 12 ; Divider[:Vengefulness] = 4
    ENUM[161] = :Wonder ; NUME[:Wonder] = 161 ; Color[:Wonder] = 9 ; Divider[:Wonder] = -8
    ENUM[162] = :Worry ; NUME[:Worry] = 162 ; Color[:Worry] = 6 ; Divider[:Worry] = 8
    ENUM[163] = :Wrath ; NUME[:Wrath] = 163 ; Color[:Wrath] = 12 ; Divider[:Wrath] = 1
    ENUM[164] = :Zeal ; NUME[:Zeal] = 164 ; Color[:Zeal] = 9 ; Divider[:Zeal] = -4
    ENUM[168] = :Restless ; NUME[:Restless] = 168 ; Color[:Restless] = 6 ; Divider[:Restless] = 8
    ENUM[169] = :Admiration ; NUME[:Admiration] = 169 ; Color[:Admiration] = 11 ; Divider[:Admiration] = -8
end

class EntityActionType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :EntityPrimaryCriminals ; NUME[:EntityPrimaryCriminals] = 0
    ENUM[1] = :EntityRelocate ; NUME[:EntityRelocate] = 1
end

class EntityEntityLinkType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :PARENT ; NUME[:PARENT] = 0
    ENUM[1] = :CHILD ; NUME[:CHILD] = 1
end

class EntityEventType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Invasion ; NUME[:Invasion] = 0
    ENUM[1] = :Abduction ; NUME[:Abduction] = 1
    ENUM[2] = :Incident ; NUME[:Incident] = 2
    ENUM[3] = :Occupation ; NUME[:Occupation] = 3
    ENUM[4] = :Beast ; NUME[:Beast] = 4
    ENUM[5] = :Group ; NUME[:Group] = 5
    ENUM[6] = :Harass ; NUME[:Harass] = 6
    ENUM[7] = :Flee ; NUME[:Flee] = 7
    ENUM[8] = :Abandon ; NUME[:Abandon] = 8
    ENUM[9] = :Reclaimed ; NUME[:Reclaimed] = 9
    ENUM[10] = :Founded ; NUME[:Founded] = 10
    ENUM[11] = :Reclaiming ; NUME[:Reclaiming] = 11
    ENUM[12] = :Founding ; NUME[:Founding] = 12
    ENUM[13] = :Leave ; NUME[:Leave] = 13
    ENUM[14] = :Insurrection ; NUME[:Insurrection] = 14
    ENUM[15] = :InsurrectionEnd ; NUME[:InsurrectionEnd] = 15
    ENUM[16] = :Succession ; NUME[:Succession] = 16
    ENUM[17] = :Claim ; NUME[:Claim] = 17
    ENUM[18] = :AcceptTributeOffer ; NUME[:AcceptTributeOffer] = 18
    ENUM[19] = :RefuseTributeOffer ; NUME[:RefuseTributeOffer] = 19
    ENUM[20] = :AcceptTributeDemand ; NUME[:AcceptTributeDemand] = 20
    ENUM[21] = :RefuseTributeDemand ; NUME[:RefuseTributeDemand] = 21
    ENUM[22] = :AcceptPeaceOffer ; NUME[:AcceptPeaceOffer] = 22
    ENUM[23] = :RefusePeaceOffer ; NUME[:RefusePeaceOffer] = 23
    ENUM[24] = :CeaseTributeOffer ; NUME[:CeaseTributeOffer] = 24
end

class EntityMaterialCategory < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :None ; NUME[:None] = -1
    ENUM[0] = :Clothing ; NUME[:Clothing] = 0
    ENUM[1] = :Leather ; NUME[:Leather] = 1
    ENUM[2] = :Cloth ; NUME[:Cloth] = 2
    ENUM[3] = :Wood ; NUME[:Wood] = 3
    ENUM[4] = :Crafts ; NUME[:Crafts] = 4
    ENUM[5] = :Stone ; NUME[:Stone] = 5
    ENUM[6] = :Improvement ; NUME[:Improvement] = 6
    ENUM[7] = :Glass ; NUME[:Glass] = 7
    ENUM[8] = :Wood2 ; NUME[:Wood2] = 8
    ENUM[9] = :Bag ; NUME[:Bag] = 9
    ENUM[10] = :Cage ; NUME[:Cage] = 10
    ENUM[11] = :WeaponMelee ; NUME[:WeaponMelee] = 11
    ENUM[12] = :WeaponRanged ; NUME[:WeaponRanged] = 12
    ENUM[13] = :Ammo ; NUME[:Ammo] = 13
    ENUM[14] = :Ammo2 ; NUME[:Ammo2] = 14
    ENUM[15] = :Pick ; NUME[:Pick] = 15
    ENUM[16] = :Armor ; NUME[:Armor] = 16
    ENUM[17] = :Gem ; NUME[:Gem] = 17
    ENUM[18] = :Bone ; NUME[:Bone] = 18
    ENUM[19] = :Shell ; NUME[:Shell] = 19
    ENUM[20] = :Pearl ; NUME[:Pearl] = 20
    ENUM[21] = :Ivory ; NUME[:Ivory] = 21
    ENUM[22] = :Horn ; NUME[:Horn] = 22
    ENUM[23] = :Other ; NUME[:Other] = 23
    ENUM[24] = :Anvil ; NUME[:Anvil] = 24
    ENUM[25] = :Booze ; NUME[:Booze] = 25
    ENUM[26] = :Metal ; NUME[:Metal] = 26
    ENUM[27] = :PlantFiber ; NUME[:PlantFiber] = 27
    ENUM[28] = :Silk ; NUME[:Silk] = 28
    ENUM[29] = :Wool ; NUME[:Wool] = 29
    ENUM[30] = :Furniture ; NUME[:Furniture] = 30
    ENUM[31] = :MiscWood2 ; NUME[:MiscWood2] = 31
end

class EntityPositionFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :IS_LAW_MAKER ; NUME[:IS_LAW_MAKER] = 0
    ENUM[1] = :ELECTED ; NUME[:ELECTED] = 1
    ENUM[2] = :DUTY_BOUND ; NUME[:DUTY_BOUND] = 2
    ENUM[3] = :MILITARY_SCREEN_ONLY ; NUME[:MILITARY_SCREEN_ONLY] = 3
    ENUM[4] = :GENDER_MALE ; NUME[:GENDER_MALE] = 4
    ENUM[5] = :GENDER_FEMALE ; NUME[:GENDER_FEMALE] = 5
    ENUM[6] = :SUCCESSION_BY_HEIR ; NUME[:SUCCESSION_BY_HEIR] = 6
    ENUM[7] = :HAS_RESPONSIBILITIES ; NUME[:HAS_RESPONSIBILITIES] = 7
    ENUM[8] = :FLASHES ; NUME[:FLASHES] = 8
    ENUM[9] = :BRAG_ON_KILL ; NUME[:BRAG_ON_KILL] = 9
    ENUM[10] = :CHAT_WORTHY ; NUME[:CHAT_WORTHY] = 10
    ENUM[11] = :DO_NOT_CULL ; NUME[:DO_NOT_CULL] = 11
    ENUM[12] = :KILL_QUEST ; NUME[:KILL_QUEST] = 12
    ENUM[13] = :IS_LEADER ; NUME[:IS_LEADER] = 13
    ENUM[14] = :IS_DIPLOMAT ; NUME[:IS_DIPLOMAT] = 14
    ENUM[15] = :EXPORTED_IN_LEGENDS ; NUME[:EXPORTED_IN_LEGENDS] = 15
    ENUM[16] = :DETERMINES_COIN_DESIGN ; NUME[:DETERMINES_COIN_DESIGN] = 16
    ENUM[17] = :ACCOUNT_EXEMPT ; NUME[:ACCOUNT_EXEMPT] = 17
    ENUM[18] = :Unk12 ; NUME[:Unk12] = 18
    ENUM[19] = :Unk13 ; NUME[:Unk13] = 19
    ENUM[20] = :COLOR ; NUME[:COLOR] = 20
    ENUM[21] = :RULES_FROM_LOCATION ; NUME[:RULES_FROM_LOCATION] = 21
    ENUM[22] = :MENIAL_WORK_EXEMPTION ; NUME[:MENIAL_WORK_EXEMPTION] = 22
    ENUM[23] = :MENIAL_WORK_EXEMPTION_SPOUSE ; NUME[:MENIAL_WORK_EXEMPTION_SPOUSE] = 23
    ENUM[24] = :SLEEP_PRETENSION ; NUME[:SLEEP_PRETENSION] = 24
    ENUM[25] = :PUNISHMENT_EXEMPTION ; NUME[:PUNISHMENT_EXEMPTION] = 25
    ENUM[26] = :Unk1a ; NUME[:Unk1a] = 26
    ENUM[27] = :Unk1b ; NUME[:Unk1b] = 27
    ENUM[28] = :QUEST_GIVER ; NUME[:QUEST_GIVER] = 28
end

class EntityPositionRawFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :SITE ; NUME[:SITE] = 0
    ENUM[1] = :ELECTED ; NUME[:ELECTED] = 1
    ENUM[2] = :CONQUERED_SITE ; NUME[:CONQUERED_SITE] = 2
    ENUM[3] = :MILITARY_SCREEN_ONLY ; NUME[:MILITARY_SCREEN_ONLY] = 3
    ENUM[4] = :GENDER_MALE ; NUME[:GENDER_MALE] = 4
    ENUM[5] = :GENDER_FEMALE ; NUME[:GENDER_FEMALE] = 5
    ENUM[6] = :SUCCESSION_BY_HEIR ; NUME[:SUCCESSION_BY_HEIR] = 6
    ENUM[7] = :EXPORTED_IN_LEGENDS ; NUME[:EXPORTED_IN_LEGENDS] = 7
    ENUM[8] = :FLASHES ; NUME[:FLASHES] = 8
    ENUM[9] = :BRAG_ON_KILL ; NUME[:BRAG_ON_KILL] = 9
    ENUM[10] = :CHAT_WORTHY ; NUME[:CHAT_WORTHY] = 10
    ENUM[11] = :DO_NOT_CULL ; NUME[:DO_NOT_CULL] = 11
    ENUM[12] = :KILL_QUEST ; NUME[:KILL_QUEST] = 12
    ENUM[13] = :DETERMINES_COIN_DESIGN ; NUME[:DETERMINES_COIN_DESIGN] = 13
    ENUM[14] = :ACCOUNT_EXEMPT ; NUME[:ACCOUNT_EXEMPT] = 14
    ENUM[15] = :DUTY_BOUND ; NUME[:DUTY_BOUND] = 15
    ENUM[16] = :COLOR ; NUME[:COLOR] = 16
    ENUM[17] = :RULES_FROM_LOCATION ; NUME[:RULES_FROM_LOCATION] = 17
    ENUM[18] = :MENIAL_WORK_EXEMPTION ; NUME[:MENIAL_WORK_EXEMPTION] = 18
    ENUM[19] = :MENIAL_WORK_EXEMPTION_SPOUSE ; NUME[:MENIAL_WORK_EXEMPTION_SPOUSE] = 19
    ENUM[20] = :SLEEP_PRETENSION ; NUME[:SLEEP_PRETENSION] = 20
    ENUM[21] = :PUNISHMENT_EXEMPTION ; NUME[:PUNISHMENT_EXEMPTION] = 21
    ENUM[22] = :QUEST_GIVER ; NUME[:QUEST_GIVER] = 22
    ENUM[23] = :SPECIAL_BURIAL ; NUME[:SPECIAL_BURIAL] = 23
    ENUM[24] = :REQUIRES_MARKET ; NUME[:REQUIRES_MARKET] = 24
end

class EntityPositionResponsibility < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :LAW_MAKING ; NUME[:LAW_MAKING] = 0
    ENUM[1] = :LAW_ENFORCEMENT ; NUME[:LAW_ENFORCEMENT] = 1
    ENUM[2] = :RECEIVE_DIPLOMATS ; NUME[:RECEIVE_DIPLOMATS] = 2
    ENUM[3] = :MEET_WORKERS ; NUME[:MEET_WORKERS] = 3
    ENUM[4] = :MANAGE_PRODUCTION ; NUME[:MANAGE_PRODUCTION] = 4
    ENUM[5] = :TRADE ; NUME[:TRADE] = 5
    ENUM[6] = :ACCOUNTING ; NUME[:ACCOUNTING] = 6
    ENUM[7] = :ESTABLISH_COLONY_TRADE_AGREEMENTS ; NUME[:ESTABLISH_COLONY_TRADE_AGREEMENTS] = 7
    ENUM[8] = :MAKE_INTRODUCTIONS ; NUME[:MAKE_INTRODUCTIONS] = 8
    ENUM[9] = :MAKE_PEACE_AGREEMENTS ; NUME[:MAKE_PEACE_AGREEMENTS] = 9
    ENUM[10] = :MAKE_TOPIC_AGREEMENTS ; NUME[:MAKE_TOPIC_AGREEMENTS] = 10
    ENUM[11] = :COLLECT_TAXES ; NUME[:COLLECT_TAXES] = 11
    ENUM[12] = :ESCORT_TAX_COLLECTOR ; NUME[:ESCORT_TAX_COLLECTOR] = 12
    ENUM[13] = :EXECUTIONS ; NUME[:EXECUTIONS] = 13
    ENUM[14] = :TAME_EXOTICS ; NUME[:TAME_EXOTICS] = 14
    ENUM[15] = :RELIGION ; NUME[:RELIGION] = 15
    ENUM[16] = :ATTACK_ENEMIES ; NUME[:ATTACK_ENEMIES] = 16
    ENUM[17] = :PATROL_TERRITORY ; NUME[:PATROL_TERRITORY] = 17
    ENUM[18] = :MILITARY_GOALS ; NUME[:MILITARY_GOALS] = 18
    ENUM[19] = :MILITARY_STRATEGY ; NUME[:MILITARY_STRATEGY] = 19
    ENUM[20] = :UPGRADE_SQUAD_EQUIPMENT ; NUME[:UPGRADE_SQUAD_EQUIPMENT] = 20
    ENUM[21] = :EQUIPMENT_MANIFESTS ; NUME[:EQUIPMENT_MANIFESTS] = 21
    ENUM[22] = :SORT_AMMUNITION ; NUME[:SORT_AMMUNITION] = 22
    ENUM[23] = :BUILD_MORALE ; NUME[:BUILD_MORALE] = 23
    ENUM[24] = :HEALTH_MANAGEMENT ; NUME[:HEALTH_MANAGEMENT] = 24
end

class EntityRawFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :CIV_CONTROLLABLE ; NUME[:CIV_CONTROLLABLE] = 0
    ENUM[1] = :INDIV_CONTROLLABLE ; NUME[:INDIV_CONTROLLABLE] = 1
    ENUM[2] = :LAYER_LINKED ; NUME[:LAYER_LINKED] = 2
    ENUM[3] = :INDOOR_WOOD ; NUME[:INDOOR_WOOD] = 3
    ENUM[4] = :WOOD_ARMOR ; NUME[:WOOD_ARMOR] = 4
    ENUM[5] = :SIEGER ; NUME[:SIEGER] = 5
    ENUM[6] = :AMBUSHER ; NUME[:AMBUSHER] = 6
    ENUM[7] = :BABYSNATCHER ; NUME[:BABYSNATCHER] = 7
    ENUM[8] = :ITEM_THIEF ; NUME[:ITEM_THIEF] = 8
    ENUM[9] = :CLOTHING ; NUME[:CLOTHING] = 9
    ENUM[10] = :CURRENCY_BY_YEAR ; NUME[:CURRENCY_BY_YEAR] = 10
    ENUM[11] = :METAL_PREF ; NUME[:METAL_PREF] = 11
    ENUM[12] = :GEM_PREF ; NUME[:GEM_PREF] = 12
    ENUM[13] = :STONE_PREF ; NUME[:STONE_PREF] = 13
    ENUM[14] = :WOOD_WEAPONS ; NUME[:WOOD_WEAPONS] = 14
    ENUM[15] = :BUILDS_OUTDOOR_FORTIFICATIONS ; NUME[:BUILDS_OUTDOOR_FORTIFICATIONS] = 15
    ENUM[16] = :RIVER_PRODUCTS ; NUME[:RIVER_PRODUCTS] = 16
    ENUM[17] = :OCEAN_PRODUCTS ; NUME[:OCEAN_PRODUCTS] = 17
    ENUM[18] = :INDOOR_FARMING ; NUME[:INDOOR_FARMING] = 18
    ENUM[19] = :OUTDOOR_FARMING ; NUME[:OUTDOOR_FARMING] = 19
    ENUM[20] = :USE_CAVE_ANIMALS ; NUME[:USE_CAVE_ANIMALS] = 20
    ENUM[21] = :USE_EVIL_ANIMALS ; NUME[:USE_EVIL_ANIMALS] = 21
    ENUM[22] = :USE_ANIMAL_PRODUCTS ; NUME[:USE_ANIMAL_PRODUCTS] = 22
    ENUM[23] = :COMMON_DOMESTIC_PACK ; NUME[:COMMON_DOMESTIC_PACK] = 23
    ENUM[24] = :COMMON_DOMESTIC_PULL ; NUME[:COMMON_DOMESTIC_PULL] = 24
    ENUM[25] = :COMMON_DOMESTIC_MOUNT ; NUME[:COMMON_DOMESTIC_MOUNT] = 25
    ENUM[26] = :COMMON_DOMESTIC_PET ; NUME[:COMMON_DOMESTIC_PET] = 26
    ENUM[27] = :SUBTERRANEAN_CLOTHING ; NUME[:SUBTERRANEAN_CLOTHING] = 27
    ENUM[28] = :USE_EVIL_WOOD ; NUME[:USE_EVIL_WOOD] = 28
    ENUM[29] = :USE_GOOD_WOOD ; NUME[:USE_GOOD_WOOD] = 29
    ENUM[30] = :USE_EVIL_PLANTS ; NUME[:USE_EVIL_PLANTS] = 30
    ENUM[31] = :USE_GOOD_PLANTS ; NUME[:USE_GOOD_PLANTS] = 31
    ENUM[32] = :USE_GOOD_ANIMALS ; NUME[:USE_GOOD_ANIMALS] = 32
    ENUM[33] = :USE_ANY_PET_RACE ; NUME[:USE_ANY_PET_RACE] = 33
    ENUM[34] = :USE_MISC_PROCESSED_WOOD_PRODUCTS ; NUME[:USE_MISC_PROCESSED_WOOD_PRODUCTS] = 34
    ENUM[35] = :IMPROVED_BOWS ; NUME[:IMPROVED_BOWS] = 35
    ENUM[36] = :OUTDOOR_WOOD ; NUME[:OUTDOOR_WOOD] = 36
    ENUM[37] = :LOCAL_BANDITRY ; NUME[:LOCAL_BANDITRY] = 37
    ENUM[38] = :BUILDS_OUTDOOR_TOMBS ; NUME[:BUILDS_OUTDOOR_TOMBS] = 38
    ENUM[39] = :INVADERS_IGNORE_NEUTRALS ; NUME[:INVADERS_IGNORE_NEUTRALS] = 39
    ENUM[40] = :AT_PEACE_WITH_WILDLIFE ; NUME[:AT_PEACE_WITH_WILDLIFE] = 40
    ENUM[41] = :EQUIPMENT_IMPROVEMENTS ; NUME[:EQUIPMENT_IMPROVEMENTS] = 41
    ENUM[42] = :ABUSE_BODIES ; NUME[:ABUSE_BODIES] = 42
    ENUM[43] = :UNDEAD_CANDIDATE ; NUME[:UNDEAD_CANDIDATE] = 43
    ENUM[44] = :GENERATED ; NUME[:GENERATED] = 44
    ENUM[45] = :SKULKING ; NUME[:SKULKING] = 45
    ENUM[47] = :MERCHANT_NOBILITY ; NUME[:MERCHANT_NOBILITY] = 47
    ENUM[48] = :TREE_CAP_DIPLOMACY ; NUME[:TREE_CAP_DIPLOMACY] = 48
    ENUM[49] = :DIPLOMAT_BODYGUARDS ; NUME[:DIPLOMAT_BODYGUARDS] = 49
    ENUM[50] = :MERCHANT_BODYGUARDS ; NUME[:MERCHANT_BODYGUARDS] = 50
    ENUM[51] = :INDOOR_ORCHARDS ; NUME[:INDOOR_ORCHARDS] = 51
    ENUM[52] = :OUTDOOR_ORCHARDS ; NUME[:OUTDOOR_ORCHARDS] = 52
    ENUM[53] = :WANDERER ; NUME[:WANDERER] = 53
    ENUM[54] = :BEAST_HUNTER ; NUME[:BEAST_HUNTER] = 54
    ENUM[55] = :SCOUT ; NUME[:SCOUT] = 55
    ENUM[56] = :WILL_ACCEPT_TRIBUTE ; NUME[:WILL_ACCEPT_TRIBUTE] = 56
    ENUM[57] = :INDOOR_GARDENS ; NUME[:INDOOR_GARDENS] = 57
    ENUM[58] = :OUTDOOR_GARDENS ; NUME[:OUTDOOR_GARDENS] = 58
    ENUM[59] = :MERCENARY ; NUME[:MERCENARY] = 59
    ENUM[60] = :SITE_GUARDIAN ; NUME[:SITE_GUARDIAN] = 60
    ENUM[61] = :DIVINE_MAT_WEAPONS ; NUME[:DIVINE_MAT_WEAPONS] = 61
    ENUM[62] = :DIVINE_MAT_ARMOR ; NUME[:DIVINE_MAT_ARMOR] = 62
    ENUM[63] = :DIVINE_MAT_CRAFTS ; NUME[:DIVINE_MAT_CRAFTS] = 63
    ENUM[64] = :DIVINE_MAT_CLOTHING ; NUME[:DIVINE_MAT_CLOTHING] = 64
end

class EntitySellCategory < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Leather ; NUME[:Leather] = 0
    ENUM[1] = :ClothPlant ; NUME[:ClothPlant] = 1
    ENUM[2] = :ClothSilk ; NUME[:ClothSilk] = 2
    ENUM[3] = :Crafts ; NUME[:Crafts] = 3
    ENUM[4] = :Wood ; NUME[:Wood] = 4
    ENUM[5] = :MetalBars ; NUME[:MetalBars] = 5
    ENUM[6] = :SmallCutGems ; NUME[:SmallCutGems] = 6
    ENUM[7] = :LargeCutGems ; NUME[:LargeCutGems] = 7
    ENUM[8] = :StoneBlocks ; NUME[:StoneBlocks] = 8
    ENUM[9] = :Seeds ; NUME[:Seeds] = 9
    ENUM[10] = :Anvils ; NUME[:Anvils] = 10
    ENUM[11] = :Weapons ; NUME[:Weapons] = 11
    ENUM[12] = :TrainingWeapons ; NUME[:TrainingWeapons] = 12
    ENUM[13] = :Ammo ; NUME[:Ammo] = 13
    ENUM[14] = :TrapComponents ; NUME[:TrapComponents] = 14
    ENUM[15] = :DiggingImplements ; NUME[:DiggingImplements] = 15
    ENUM[16] = :Bodywear ; NUME[:Bodywear] = 16
    ENUM[17] = :Headwear ; NUME[:Headwear] = 17
    ENUM[18] = :Handwear ; NUME[:Handwear] = 18
    ENUM[19] = :Footwear ; NUME[:Footwear] = 19
    ENUM[20] = :Legwear ; NUME[:Legwear] = 20
    ENUM[21] = :Shields ; NUME[:Shields] = 21
    ENUM[22] = :Toys ; NUME[:Toys] = 22
    ENUM[23] = :Instruments ; NUME[:Instruments] = 23
    ENUM[24] = :Pets ; NUME[:Pets] = 24
    ENUM[25] = :Drinks ; NUME[:Drinks] = 25
    ENUM[26] = :Cheese ; NUME[:Cheese] = 26
    ENUM[27] = :Powders ; NUME[:Powders] = 27
    ENUM[28] = :Extracts ; NUME[:Extracts] = 28
    ENUM[29] = :Meat ; NUME[:Meat] = 29
    ENUM[30] = :Fish ; NUME[:Fish] = 30
    ENUM[31] = :Plants ; NUME[:Plants] = 31
    ENUM[32] = :FruitsNuts ; NUME[:FruitsNuts] = 32
    ENUM[33] = :GardenVegetables ; NUME[:GardenVegetables] = 33
    ENUM[34] = :MeatFishRecipes ; NUME[:MeatFishRecipes] = 34
    ENUM[35] = :OtherRecipes ; NUME[:OtherRecipes] = 35
    ENUM[36] = :Stone ; NUME[:Stone] = 36
    ENUM[37] = :Cages ; NUME[:Cages] = 37
    ENUM[38] = :BagsLeather ; NUME[:BagsLeather] = 38
    ENUM[39] = :BagsPlant ; NUME[:BagsPlant] = 39
    ENUM[40] = :BagsSilk ; NUME[:BagsSilk] = 40
    ENUM[41] = :ThreadPlant ; NUME[:ThreadPlant] = 41
    ENUM[42] = :ThreadSilk ; NUME[:ThreadSilk] = 42
    ENUM[43] = :RopesPlant ; NUME[:RopesPlant] = 43
    ENUM[44] = :RopesSilk ; NUME[:RopesSilk] = 44
    ENUM[45] = :Barrels ; NUME[:Barrels] = 45
    ENUM[46] = :FlasksWaterskins ; NUME[:FlasksWaterskins] = 46
    ENUM[47] = :Quivers ; NUME[:Quivers] = 47
    ENUM[48] = :Backpacks ; NUME[:Backpacks] = 48
    ENUM[49] = :Sand ; NUME[:Sand] = 49
    ENUM[50] = :Glass ; NUME[:Glass] = 50
    ENUM[51] = :Miscellaneous ; NUME[:Miscellaneous] = 51
    ENUM[52] = :Buckets ; NUME[:Buckets] = 52
    ENUM[53] = :Splints ; NUME[:Splints] = 53
    ENUM[54] = :Crutches ; NUME[:Crutches] = 54
    ENUM[55] = :Eggs ; NUME[:Eggs] = 55
    ENUM[56] = :BagsYarn ; NUME[:BagsYarn] = 56
    ENUM[57] = :RopesYarn ; NUME[:RopesYarn] = 57
    ENUM[58] = :ClothYarn ; NUME[:ClothYarn] = 58
    ENUM[59] = :ThreadYarn ; NUME[:ThreadYarn] = 59
    ENUM[60] = :Tools ; NUME[:Tools] = 60
    ENUM[61] = :Clay ; NUME[:Clay] = 61
end

class EnvironmentType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :SOIL ; NUME[:SOIL] = 0
    ENUM[1] = :SOIL_OCEAN ; NUME[:SOIL_OCEAN] = 1
    ENUM[2] = :SOIL_SAND ; NUME[:SOIL_SAND] = 2
    ENUM[3] = :METAMORPHIC ; NUME[:METAMORPHIC] = 3
    ENUM[4] = :SEDIMENTARY ; NUME[:SEDIMENTARY] = 4
    ENUM[5] = :IGNEOUS_INTRUSIVE ; NUME[:IGNEOUS_INTRUSIVE] = 5
    ENUM[6] = :IGNEOUS_EXTRUSIVE ; NUME[:IGNEOUS_EXTRUSIVE] = 6
    ENUM[7] = :ALLUVIAL ; NUME[:ALLUVIAL] = 7
end

class EraType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :ThreePowers ; NUME[:ThreePowers] = 0
    ENUM[1] = :TwoPowers ; NUME[:TwoPowers] = 1
    ENUM[2] = :OnePower ; NUME[:OnePower] = 2
    ENUM[3] = :Myth ; NUME[:Myth] = 3
    ENUM[4] = :Legends ; NUME[:Legends] = 4
    ENUM[5] = :Twilight ; NUME[:Twilight] = 5
    ENUM[6] = :FairyTales ; NUME[:FairyTales] = 6
    ENUM[7] = :Race ; NUME[:Race] = 7
    ENUM[8] = :Heroes ; NUME[:Heroes] = 8
    ENUM[9] = :Golden ; NUME[:Golden] = 9
    ENUM[10] = :Death ; NUME[:Death] = 10
    ENUM[11] = :Civilization ; NUME[:Civilization] = 11
    ENUM[12] = :Emptiness ; NUME[:Emptiness] = 12
end

class EthicResponse < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :NOT_APPLICABLE ; NUME[:NOT_APPLICABLE] = 0
    ENUM[1] = :ACCEPTABLE ; NUME[:ACCEPTABLE] = 1
    ENUM[2] = :PERSONAL_MATTER ; NUME[:PERSONAL_MATTER] = 2
    ENUM[3] = :JUSTIFIED_IF_NO_REPERCUSSIONS ; NUME[:JUSTIFIED_IF_NO_REPERCUSSIONS] = 3
    ENUM[4] = :JUSTIFIED_IF_GOOD_REASON ; NUME[:JUSTIFIED_IF_GOOD_REASON] = 4
    ENUM[5] = :JUSTIFIED_IF_EXTREME_REASON ; NUME[:JUSTIFIED_IF_EXTREME_REASON] = 5
    ENUM[6] = :JUSTIFIED_IF_SELF_DEFENSE ; NUME[:JUSTIFIED_IF_SELF_DEFENSE] = 6
    ENUM[7] = :ONLY_IF_SANCTIONED ; NUME[:ONLY_IF_SANCTIONED] = 7
    ENUM[8] = :MISGUIDED ; NUME[:MISGUIDED] = 8
    ENUM[9] = :SHUN ; NUME[:SHUN] = 9
    ENUM[10] = :APPALLING ; NUME[:APPALLING] = 10
    ENUM[11] = :PUNISH_REPRIMAND ; NUME[:PUNISH_REPRIMAND] = 11
    ENUM[12] = :PUNISH_SERIOUS ; NUME[:PUNISH_SERIOUS] = 12
    ENUM[13] = :PUNISH_EXILE ; NUME[:PUNISH_EXILE] = 13
    ENUM[14] = :PUNISH_CAPITAL ; NUME[:PUNISH_CAPITAL] = 14
    ENUM[15] = :UNTHINKABLE ; NUME[:UNTHINKABLE] = 15
    ENUM[16] = :REQUIRED ; NUME[:REQUIRED] = 16
end

class EthicType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :KILL_ENTITY_MEMBER ; NUME[:KILL_ENTITY_MEMBER] = 0
    ENUM[1] = :KILL_NEUTRAL ; NUME[:KILL_NEUTRAL] = 1
    ENUM[2] = :KILL_ENEMY ; NUME[:KILL_ENEMY] = 2
    ENUM[3] = :KILL_ANIMAL ; NUME[:KILL_ANIMAL] = 3
    ENUM[4] = :KILL_PLANT ; NUME[:KILL_PLANT] = 4
    ENUM[5] = :TORTURE_AS_EXAMPLE ; NUME[:TORTURE_AS_EXAMPLE] = 5
    ENUM[6] = :TORTURE_FOR_INFORMATION ; NUME[:TORTURE_FOR_INFORMATION] = 6
    ENUM[7] = :TORTURE_FOR_FUN ; NUME[:TORTURE_FOR_FUN] = 7
    ENUM[8] = :TORTURE_ANIMALS ; NUME[:TORTURE_ANIMALS] = 8
    ENUM[9] = :TREASON ; NUME[:TREASON] = 9
    ENUM[10] = :OATH_BREAKING ; NUME[:OATH_BREAKING] = 10
    ENUM[11] = :LYING ; NUME[:LYING] = 11
    ENUM[12] = :VANDALISM ; NUME[:VANDALISM] = 12
    ENUM[13] = :TRESPASSING ; NUME[:TRESPASSING] = 13
    ENUM[14] = :THEFT ; NUME[:THEFT] = 14
    ENUM[15] = :ASSAULT ; NUME[:ASSAULT] = 15
    ENUM[16] = :SLAVERY ; NUME[:SLAVERY] = 16
    ENUM[17] = :EAT_SAPIENT_OTHER ; NUME[:EAT_SAPIENT_OTHER] = 17
    ENUM[18] = :EAT_SAPIENT_KILL ; NUME[:EAT_SAPIENT_KILL] = 18
    ENUM[19] = :MAKE_TROPHY_SAME_RACE ; NUME[:MAKE_TROPHY_SAME_RACE] = 19
    ENUM[20] = :MAKE_TROPHY_SAPIENT ; NUME[:MAKE_TROPHY_SAPIENT] = 20
    ENUM[21] = :MAKE_TROPHY_ANIMAL ; NUME[:MAKE_TROPHY_ANIMAL] = 21
end

class FeatureAlterationType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :NewPopMax ; NUME[:NewPopMax] = 0
    ENUM[1] = :NewLavaFillZ ; NUME[:NewLavaFillZ] = 1
end

class FeatureInitFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[3] = :Discovered ; NUME[:Discovered] = 3
end

class FeatureType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :OutdoorRiver ; NUME[:OutdoorRiver] = 0
    ENUM[1] = :Cave ; NUME[:Cave] = 1
    ENUM[2] = :Pit ; NUME[:Pit] = 2
    ENUM[3] = :MagmaPool ; NUME[:MagmaPool] = 3
    ENUM[4] = :Volcano ; NUME[:Volcano] = 4
    ENUM[5] = :DeepSpecialTube ; NUME[:DeepSpecialTube] = 5
    ENUM[6] = :DeepSurfacePortal ; NUME[:DeepSurfacePortal] = 6
    ENUM[7] = :SubterraneanFromLayer ; NUME[:SubterraneanFromLayer] = 7
    ENUM[8] = :MagmaCoreFromLayer ; NUME[:MagmaCoreFromLayer] = 8
    ENUM[9] = :FeatureUnderworldFromLayer ; NUME[:FeatureUnderworldFromLayer] = 9
end

class FlowGuideType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :TrailingFlow ; NUME[:TrailingFlow] = 0
    ENUM[1] = :ItemCloud ; NUME[:ItemCloud] = 1
end

class FlowType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Miasma ; NUME[:Miasma] = 0
    ENUM[1] = :Steam ; NUME[:Steam] = 1
    ENUM[2] = :Mist ; NUME[:Mist] = 2
    ENUM[3] = :MaterialDust ; NUME[:MaterialDust] = 3
    ENUM[4] = :MagmaMist ; NUME[:MagmaMist] = 4
    ENUM[5] = :Smoke ; NUME[:Smoke] = 5
    ENUM[6] = :Dragonfire ; NUME[:Dragonfire] = 6
    ENUM[7] = :Fire ; NUME[:Fire] = 7
    ENUM[8] = :Web ; NUME[:Web] = 8
    ENUM[9] = :MaterialGas ; NUME[:MaterialGas] = 9
    ENUM[10] = :MaterialVapor ; NUME[:MaterialVapor] = 10
    ENUM[11] = :OceanWave ; NUME[:OceanWave] = 11
    ENUM[12] = :SeaFoam ; NUME[:SeaFoam] = 12
    ENUM[13] = :ItemCloud ; NUME[:ItemCloud] = 13
end

class FurnaceType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :WoodFurnace ; NUME[:WoodFurnace] = 0
    ENUM[1] = :Smelter ; NUME[:Smelter] = 1
    ENUM[2] = :GlassFurnace ; NUME[:GlassFurnace] = 2
    ENUM[3] = :Kiln ; NUME[:Kiln] = 3
    ENUM[4] = :MagmaSmelter ; NUME[:MagmaSmelter] = 4
    ENUM[5] = :MagmaGlassFurnace ; NUME[:MagmaGlassFurnace] = 5
    ENUM[6] = :MagmaKiln ; NUME[:MagmaKiln] = 6
    ENUM[7] = :Custom ; NUME[:Custom] = 7
end

class FurnitureType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :FLOODGATE ; NUME[:FLOODGATE] = 0
    ENUM[1] = :HATCH_COVER ; NUME[:HATCH_COVER] = 1
    ENUM[2] = :GRATE ; NUME[:GRATE] = 2
    ENUM[3] = :DOOR ; NUME[:DOOR] = 3
    ENUM[4] = :CATAPULTPARTS ; NUME[:CATAPULTPARTS] = 4
    ENUM[5] = :BALLISTAPARTS ; NUME[:BALLISTAPARTS] = 5
    ENUM[6] = :TRAPPARTS ; NUME[:TRAPPARTS] = 6
    ENUM[7] = :BED ; NUME[:BED] = 7
    ENUM[8] = :TRACTION_BENCH ; NUME[:TRACTION_BENCH] = 8
    ENUM[9] = :WINDOW ; NUME[:WINDOW] = 9
    ENUM[10] = :CHAIR ; NUME[:CHAIR] = 10
    ENUM[11] = :TABLE ; NUME[:TABLE] = 11
    ENUM[12] = :COFFIN ; NUME[:COFFIN] = 12
    ENUM[13] = :STATUE ; NUME[:STATUE] = 13
    ENUM[14] = :SLAB ; NUME[:SLAB] = 14
    ENUM[15] = :QUERN ; NUME[:QUERN] = 15
    ENUM[16] = :MILLSTONE ; NUME[:MILLSTONE] = 16
    ENUM[17] = :ARMORSTAND ; NUME[:ARMORSTAND] = 17
    ENUM[18] = :WEAPONRACK ; NUME[:WEAPONRACK] = 18
    ENUM[19] = :CABINET ; NUME[:CABINET] = 19
    ENUM[20] = :ANVIL ; NUME[:ANVIL] = 20
    ENUM[21] = :BUCKET ; NUME[:BUCKET] = 21
    ENUM[22] = :BIN ; NUME[:BIN] = 22
    ENUM[23] = :BOX ; NUME[:BOX] = 23
    ENUM[24] = :SIEGEAMMO ; NUME[:SIEGEAMMO] = 24
    ENUM[25] = :BARREL ; NUME[:BARREL] = 25
    ENUM[26] = :BALLISTAARROWHEAD ; NUME[:BALLISTAARROWHEAD] = 26
    ENUM[27] = :PIPE_SECTION ; NUME[:PIPE_SECTION] = 27
    ENUM[28] = :FOOD_STORAGE ; NUME[:FOOD_STORAGE] = 28
    ENUM[29] = :MINECART ; NUME[:MINECART] = 29
    ENUM[30] = :WHEELBARROW ; NUME[:WHEELBARROW] = 30
    ENUM[31] = :OTHER_LARGE_TOOLS ; NUME[:OTHER_LARGE_TOOLS] = 31
    ENUM[32] = :SAND_BAG ; NUME[:SAND_BAG] = 32
end

class GaitType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :WALK ; NUME[:WALK] = 0
    ENUM[1] = :FLY ; NUME[:FLY] = 1
    ENUM[2] = :SWIM ; NUME[:SWIM] = 2
    ENUM[3] = :CRAWL ; NUME[:CRAWL] = 3
    ENUM[4] = :CLIMB ; NUME[:CLIMB] = 4
end

class GameMode < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :DWARF ; NUME[:DWARF] = 0
    ENUM[1] = :ADVENTURE ; NUME[:ADVENTURE] = 1
    ENUM[2] = :Num ; NUME[:Num] = 2
    ENUM[3] = :NONE ; NUME[:NONE] = 3
end

class GameType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :DWARF_MAIN ; NUME[:DWARF_MAIN] = 0
    ENUM[1] = :ADVENTURE_MAIN ; NUME[:ADVENTURE_MAIN] = 1
    ENUM[2] = :VIEW_LEGENDS ; NUME[:VIEW_LEGENDS] = 2
    ENUM[3] = :DWARF_RECLAIM ; NUME[:DWARF_RECLAIM] = 3
    ENUM[4] = :DWARF_ARENA ; NUME[:DWARF_ARENA] = 4
    ENUM[5] = :ADVENTURE_ARENA ; NUME[:ADVENTURE_ARENA] = 5
    ENUM[6] = :ADVENTURE_DUNGEON ; NUME[:ADVENTURE_DUNGEON] = 6
    ENUM[7] = :DWARF_TUTORIAL ; NUME[:DWARF_TUTORIAL] = 7
    ENUM[8] = :DWARF_UNRETIRE ; NUME[:DWARF_UNRETIRE] = 8
    ENUM[9] = :ADVENTURE_WORLD_DEBUG ; NUME[:ADVENTURE_WORLD_DEBUG] = 9
    ENUM[10] = :Num ; NUME[:Num] = 10
    ENUM[11] = :NONE ; NUME[:NONE] = 11
end

class GeneralRefType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :ARTIFACT ; NUME[:ARTIFACT] = 0
    ENUM[1] = :IS_ARTIFACT ; NUME[:IS_ARTIFACT] = 1
    ENUM[2] = :NEMESIS ; NUME[:NEMESIS] = 2
    ENUM[3] = :IS_NEMESIS ; NUME[:IS_NEMESIS] = 3
    ENUM[4] = :ITEM ; NUME[:ITEM] = 4
    ENUM[5] = :ITEM_TYPE ; NUME[:ITEM_TYPE] = 5
    ENUM[6] = :COINBATCH ; NUME[:COINBATCH] = 6
    ENUM[7] = :MAPSQUARE ; NUME[:MAPSQUARE] = 7
    ENUM[8] = :ENTITY_ART_IMAGE ; NUME[:ENTITY_ART_IMAGE] = 8
    ENUM[9] = :CONTAINS_UNIT ; NUME[:CONTAINS_UNIT] = 9
    ENUM[10] = :CONTAINS_ITEM ; NUME[:CONTAINS_ITEM] = 10
    ENUM[11] = :CONTAINED_IN_ITEM ; NUME[:CONTAINED_IN_ITEM] = 11
    ENUM[12] = :PROJECTILE ; NUME[:PROJECTILE] = 12
    ENUM[13] = :UNIT ; NUME[:UNIT] = 13
    ENUM[14] = :UNIT_MILKEE ; NUME[:UNIT_MILKEE] = 14
    ENUM[15] = :UNIT_TRAINEE ; NUME[:UNIT_TRAINEE] = 15
    ENUM[16] = :UNIT_ITEMOWNER ; NUME[:UNIT_ITEMOWNER] = 16
    ENUM[17] = :UNIT_TRADEBRINGER ; NUME[:UNIT_TRADEBRINGER] = 17
    ENUM[18] = :UNIT_HOLDER ; NUME[:UNIT_HOLDER] = 18
    ENUM[19] = :UNIT_WORKER ; NUME[:UNIT_WORKER] = 19
    ENUM[20] = :UNIT_CAGEE ; NUME[:UNIT_CAGEE] = 20
    ENUM[21] = :UNIT_BEATEE ; NUME[:UNIT_BEATEE] = 21
    ENUM[22] = :UNIT_FOODRECEIVER ; NUME[:UNIT_FOODRECEIVER] = 22
    ENUM[23] = :UNIT_KIDNAPEE ; NUME[:UNIT_KIDNAPEE] = 23
    ENUM[24] = :UNIT_PATIENT ; NUME[:UNIT_PATIENT] = 24
    ENUM[25] = :UNIT_INFANT ; NUME[:UNIT_INFANT] = 25
    ENUM[26] = :UNIT_SLAUGHTEREE ; NUME[:UNIT_SLAUGHTEREE] = 26
    ENUM[27] = :UNIT_SHEAREE ; NUME[:UNIT_SHEAREE] = 27
    ENUM[28] = :UNIT_SUCKEE ; NUME[:UNIT_SUCKEE] = 28
    ENUM[29] = :UNIT_REPORTEE ; NUME[:UNIT_REPORTEE] = 29
    ENUM[30] = :BUILDING ; NUME[:BUILDING] = 30
    ENUM[31] = :BUILDING_CIVZONE_ASSIGNED ; NUME[:BUILDING_CIVZONE_ASSIGNED] = 31
    ENUM[32] = :BUILDING_TRIGGER ; NUME[:BUILDING_TRIGGER] = 32
    ENUM[33] = :BUILDING_TRIGGERTARGET ; NUME[:BUILDING_TRIGGERTARGET] = 33
    ENUM[34] = :BUILDING_CHAIN ; NUME[:BUILDING_CHAIN] = 34
    ENUM[35] = :BUILDING_CAGED ; NUME[:BUILDING_CAGED] = 35
    ENUM[36] = :BUILDING_HOLDER ; NUME[:BUILDING_HOLDER] = 36
    ENUM[37] = :BUILDING_WELL_TAG ; NUME[:BUILDING_WELL_TAG] = 37
    ENUM[38] = :BUILDING_USE_TARGET_1 ; NUME[:BUILDING_USE_TARGET_1] = 38
    ENUM[39] = :BUILDING_USE_TARGET_2 ; NUME[:BUILDING_USE_TARGET_2] = 39
    ENUM[40] = :BUILDING_DESTINATION ; NUME[:BUILDING_DESTINATION] = 40
    ENUM[41] = :BUILDING_NEST_BOX ; NUME[:BUILDING_NEST_BOX] = 41
    ENUM[42] = :ENTITY ; NUME[:ENTITY] = 42
    ENUM[43] = :ENTITY_STOLEN ; NUME[:ENTITY_STOLEN] = 43
    ENUM[44] = :ENTITY_OFFERED ; NUME[:ENTITY_OFFERED] = 44
    ENUM[45] = :ENTITY_ITEMOWNER ; NUME[:ENTITY_ITEMOWNER] = 45
    ENUM[46] = :LOCATION ; NUME[:LOCATION] = 46
    ENUM[47] = :INTERACTION ; NUME[:INTERACTION] = 47
    ENUM[48] = :ABSTRACT_BUILDING ; NUME[:ABSTRACT_BUILDING] = 48
    ENUM[49] = :HISTORICAL_EVENT ; NUME[:HISTORICAL_EVENT] = 49
    ENUM[50] = :SPHERE ; NUME[:SPHERE] = 50
    ENUM[51] = :SITE ; NUME[:SITE] = 51
    ENUM[52] = :SUBREGION ; NUME[:SUBREGION] = 52
    ENUM[53] = :FEATURE_LAYER ; NUME[:FEATURE_LAYER] = 53
    ENUM[54] = :HISTORICAL_FIGURE ; NUME[:HISTORICAL_FIGURE] = 54
    ENUM[55] = :ENTITY_POP ; NUME[:ENTITY_POP] = 55
    ENUM[56] = :CREATURE ; NUME[:CREATURE] = 56
    ENUM[57] = :UNIT_RIDER ; NUME[:UNIT_RIDER] = 57
end

class GeoLayerType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Flag = Hash.new
    ENUM[0] = :SOIL ; NUME[:SOIL] = 0
    ENUM[1] = :SEDIMENTARY ; NUME[:SEDIMENTARY] = 1
    ENUM[2] = :METAMORPHIC ; NUME[:METAMORPHIC] = 2
    ENUM[3] = :IGNEOUS_EXTRUSIVE ; NUME[:IGNEOUS_EXTRUSIVE] = 3
    ENUM[4] = :IGNEOUS_INTRUSIVE ; NUME[:IGNEOUS_INTRUSIVE] = 4
    ENUM[5] = :SOIL_OCEAN ; NUME[:SOIL_OCEAN] = 5
    ENUM[6] = :SOIL_SAND ; NUME[:SOIL_SAND] = 6
    ENUM[7] = :SEDIMENTARY_OCEAN_SHALLOW ; NUME[:SEDIMENTARY_OCEAN_SHALLOW] = 7
    ENUM[8] = :SEDIMENTARY_OCEAN_DEEP ; NUME[:SEDIMENTARY_OCEAN_DEEP] = 8
end

class GhostGoal < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :None ; NUME[:None] = -1
    ENUM[0] = :ScareToDeath ; NUME[:ScareToDeath] = 0
    ENUM[1] = :Stun ; NUME[:Stun] = 1
    ENUM[2] = :Batter ; NUME[:Batter] = 2
    ENUM[3] = :Possess ; NUME[:Possess] = 3
    ENUM[4] = :MisplaceItem ; NUME[:MisplaceItem] = 4
    ENUM[5] = :Haunt ; NUME[:Haunt] = 5
    ENUM[6] = :Torment ; NUME[:Torment] = 6
    ENUM[7] = :ToppleBuilding ; NUME[:ToppleBuilding] = 7
end

class GhostType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :MurderousGhost ; NUME[:MurderousGhost] = 0
    ENUM[1] = :SadisticGhost ; NUME[:SadisticGhost] = 1
    ENUM[2] = :SecretivePoltergeist ; NUME[:SecretivePoltergeist] = 2
    ENUM[3] = :EnergeticPoltergeist ; NUME[:EnergeticPoltergeist] = 3
    ENUM[4] = :AngryGhost ; NUME[:AngryGhost] = 4
    ENUM[5] = :ViolentGhost ; NUME[:ViolentGhost] = 5
    ENUM[6] = :MoaningSpirit ; NUME[:MoaningSpirit] = 6
    ENUM[7] = :HowlingSpirit ; NUME[:HowlingSpirit] = 7
    ENUM[8] = :TroublesomePoltergeist ; NUME[:TroublesomePoltergeist] = 8
    ENUM[9] = :RestlessHaunt ; NUME[:RestlessHaunt] = 9
    ENUM[10] = :ForlornHaunt ; NUME[:ForlornHaunt] = 10
end

class GlovesFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :METAL_ARMOR_LEVELS ; NUME[:METAL_ARMOR_LEVELS] = 0
end

class GoalType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :STAY_ALIVE ; NUME[:STAY_ALIVE] = 0
    ENUM[1] = :MAINTAIN_ENTITY_STATUS ; NUME[:MAINTAIN_ENTITY_STATUS] = 1
    ENUM[2] = :START_A_FAMILY ; NUME[:START_A_FAMILY] = 2
    ENUM[3] = :RULE_THE_WORLD ; NUME[:RULE_THE_WORLD] = 3
    ENUM[4] = :CREATE_A_GREAT_WORK_OF_ART ; NUME[:CREATE_A_GREAT_WORK_OF_ART] = 4
    ENUM[5] = :CRAFT_A_MASTERWORK ; NUME[:CRAFT_A_MASTERWORK] = 5
    ENUM[6] = :BRING_PEACE_TO_THE_WORLD ; NUME[:BRING_PEACE_TO_THE_WORLD] = 6
    ENUM[7] = :BECOME_A_LEGENDARY_WARRIOR ; NUME[:BECOME_A_LEGENDARY_WARRIOR] = 7
    ENUM[8] = :MASTER_A_SKILL ; NUME[:MASTER_A_SKILL] = 8
    ENUM[9] = :FALL_IN_LOVE ; NUME[:FALL_IN_LOVE] = 9
    ENUM[10] = :SEE_THE_GREAT_NATURAL_SITES ; NUME[:SEE_THE_GREAT_NATURAL_SITES] = 10
    ENUM[11] = :IMMORTALITY ; NUME[:IMMORTALITY] = 11
end

class GuildId < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :None ; NUME[:None] = -1
    ENUM[0] = :Miners ; NUME[:Miners] = 0
    ENUM[1] = :Carpenters ; NUME[:Carpenters] = 1
    ENUM[2] = :Masons ; NUME[:Masons] = 2
    ENUM[3] = :Metalsmiths ; NUME[:Metalsmiths] = 3
    ENUM[4] = :Jewelers ; NUME[:Jewelers] = 4
    ENUM[5] = :Craftsmen ; NUME[:Craftsmen] = 5
end

class HaulerType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Any ; NUME[:Any] = 0
    ENUM[1] = :Stone ; NUME[:Stone] = 1
    ENUM[2] = :Wood ; NUME[:Wood] = 2
    ENUM[3] = :Item ; NUME[:Item] = 3
    ENUM[4] = :Bin ; NUME[:Bin] = 4
    ENUM[5] = :Body ; NUME[:Body] = 5
    ENUM[6] = :Food ; NUME[:Food] = 6
    ENUM[7] = :Refuse ; NUME[:Refuse] = 7
    ENUM[8] = :Furniture ; NUME[:Furniture] = 8
    ENUM[9] = :Animal ; NUME[:Animal] = 9
end

class HelmFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :METAL_ARMOR_LEVELS ; NUME[:METAL_ARMOR_LEVELS] = 0
end

class HillockHouseType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[1] = :CivicMound ; NUME[:CivicMound] = 1
    ENUM[2] = :CastleMound ; NUME[:CastleMound] = 2
    ENUM[3] = :DrinkingMound ; NUME[:DrinkingMound] = 3
end

class HistfigBodyState < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Active ; NUME[:Active] = 0
    ENUM[1] = :BuriedAtSite ; NUME[:BuriedAtSite] = 1
    ENUM[2] = :UnburiedAtBattlefield ; NUME[:UnburiedAtBattlefield] = 2
    ENUM[3] = :UnburiedAtSubregion ; NUME[:UnburiedAtSubregion] = 3
    ENUM[4] = :UnburiedAtFeatureLayer ; NUME[:UnburiedAtFeatureLayer] = 4
    ENUM[5] = :EntombedAtSite ; NUME[:EntombedAtSite] = 5
    ENUM[6] = :UnburiedAtSite ; NUME[:UnburiedAtSite] = 6
end

class HistfigEntityLinkType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :MEMBER ; NUME[:MEMBER] = 0
    ENUM[1] = :FORMER_MEMBER ; NUME[:FORMER_MEMBER] = 1
    ENUM[2] = :MERCENARY ; NUME[:MERCENARY] = 2
    ENUM[3] = :FORMER_MERCENARY ; NUME[:FORMER_MERCENARY] = 3
    ENUM[4] = :SLAVE ; NUME[:SLAVE] = 4
    ENUM[5] = :FORMER_SLAVE ; NUME[:FORMER_SLAVE] = 5
    ENUM[6] = :PRISONER ; NUME[:PRISONER] = 6
    ENUM[7] = :FORMER_PRISONER ; NUME[:FORMER_PRISONER] = 7
    ENUM[8] = :ENEMY ; NUME[:ENEMY] = 8
    ENUM[9] = :CRIMINAL ; NUME[:CRIMINAL] = 9
    ENUM[10] = :POSITION ; NUME[:POSITION] = 10
    ENUM[11] = :FORMER_POSITION ; NUME[:FORMER_POSITION] = 11
    ENUM[12] = :POSITION_CLAIM ; NUME[:POSITION_CLAIM] = 12
    ENUM[13] = :SQUAD ; NUME[:SQUAD] = 13
    ENUM[14] = :FORMER_SQUAD ; NUME[:FORMER_SQUAD] = 14
end

class HistfigFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[2] = :Deity ; NUME[:Deity] = 2
    ENUM[3] = :Force ; NUME[:Force] = 3
    ENUM[7] = :Ghost ; NUME[:Ghost] = 7
end

class HistfigHfLinkType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :MOTHER ; NUME[:MOTHER] = 0
    ENUM[1] = :FATHER ; NUME[:FATHER] = 1
    ENUM[2] = :SPOUSE ; NUME[:SPOUSE] = 2
    ENUM[3] = :CHILD ; NUME[:CHILD] = 3
    ENUM[4] = :DEITY ; NUME[:DEITY] = 4
    ENUM[5] = :LOVER ; NUME[:LOVER] = 5
    ENUM[6] = :PRISONER ; NUME[:PRISONER] = 6
    ENUM[7] = :IMPRISONER ; NUME[:IMPRISONER] = 7
    ENUM[8] = :MASTER ; NUME[:MASTER] = 8
    ENUM[9] = :APPRENTICE ; NUME[:APPRENTICE] = 9
    ENUM[10] = :COMPANION ; NUME[:COMPANION] = 10
end

class HistfigRelationshipType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Mother ; NUME[:Mother] = 0
    ENUM[1] = :Father ; NUME[:Father] = 1
    ENUM[2] = :Parent ; NUME[:Parent] = 2
    ENUM[3] = :Husband ; NUME[:Husband] = 3
    ENUM[4] = :Wife ; NUME[:Wife] = 4
    ENUM[5] = :Spouse ; NUME[:Spouse] = 5
    ENUM[6] = :SonEldest ; NUME[:SonEldest] = 6
    ENUM[7] = :SonEldest2 ; NUME[:SonEldest2] = 7
    ENUM[8] = :SonEldest3 ; NUME[:SonEldest3] = 8
    ENUM[9] = :SonEldest4 ; NUME[:SonEldest4] = 9
    ENUM[10] = :SonEldest5 ; NUME[:SonEldest5] = 10
    ENUM[11] = :SonEldest6 ; NUME[:SonEldest6] = 11
    ENUM[12] = :SonEldest7 ; NUME[:SonEldest7] = 12
    ENUM[13] = :SonEldest8 ; NUME[:SonEldest8] = 13
    ENUM[14] = :SonEldest9 ; NUME[:SonEldest9] = 14
    ENUM[15] = :SonEldest10 ; NUME[:SonEldest10] = 15
    ENUM[16] = :Son ; NUME[:Son] = 16
    ENUM[17] = :SonYoungest ; NUME[:SonYoungest] = 17
    ENUM[18] = :SonOnly ; NUME[:SonOnly] = 18
    ENUM[19] = :DaughterEldest ; NUME[:DaughterEldest] = 19
    ENUM[20] = :DaughterEldest2 ; NUME[:DaughterEldest2] = 20
    ENUM[21] = :DaughterEldest3 ; NUME[:DaughterEldest3] = 21
    ENUM[22] = :DaughterEldest4 ; NUME[:DaughterEldest4] = 22
    ENUM[23] = :DaughterEldest5 ; NUME[:DaughterEldest5] = 23
    ENUM[24] = :DaughterEldest6 ; NUME[:DaughterEldest6] = 24
    ENUM[25] = :DaughterEldest7 ; NUME[:DaughterEldest7] = 25
    ENUM[26] = :DaughterEldest8 ; NUME[:DaughterEldest8] = 26
    ENUM[27] = :DaughterEldest9 ; NUME[:DaughterEldest9] = 27
    ENUM[28] = :DaughterEldest10 ; NUME[:DaughterEldest10] = 28
    ENUM[29] = :Daughter ; NUME[:Daughter] = 29
    ENUM[30] = :DaughterOnly ; NUME[:DaughterOnly] = 30
    ENUM[31] = :DaughterYoungest ; NUME[:DaughterYoungest] = 31
    ENUM[32] = :ChildEldest ; NUME[:ChildEldest] = 32
    ENUM[33] = :ChildEldest2 ; NUME[:ChildEldest2] = 33
    ENUM[34] = :ChildEldest3 ; NUME[:ChildEldest3] = 34
    ENUM[35] = :ChildEldest4 ; NUME[:ChildEldest4] = 35
    ENUM[36] = :ChildEldest5 ; NUME[:ChildEldest5] = 36
    ENUM[37] = :ChildEldest6 ; NUME[:ChildEldest6] = 37
    ENUM[38] = :ChildEldest7 ; NUME[:ChildEldest7] = 38
    ENUM[39] = :ChildEldest8 ; NUME[:ChildEldest8] = 39
    ENUM[40] = :ChildEldest9 ; NUME[:ChildEldest9] = 40
    ENUM[41] = :ChildEldest10 ; NUME[:ChildEldest10] = 41
    ENUM[42] = :Child ; NUME[:Child] = 42
    ENUM[43] = :ChildYoungest ; NUME[:ChildYoungest] = 43
    ENUM[44] = :ChildOnly ; NUME[:ChildOnly] = 44
    ENUM[45] = :PaternalGrandmother ; NUME[:PaternalGrandmother] = 45
    ENUM[46] = :PaternalGrandfather ; NUME[:PaternalGrandfather] = 46
    ENUM[47] = :MaternalGrandmother ; NUME[:MaternalGrandmother] = 47
    ENUM[48] = :MaternalGrandfather ; NUME[:MaternalGrandfather] = 48
    ENUM[49] = :Grandmother ; NUME[:Grandmother] = 49
    ENUM[50] = :Grandfather ; NUME[:Grandfather] = 50
    ENUM[51] = :Grandparent ; NUME[:Grandparent] = 51
    ENUM[52] = :OlderBrother ; NUME[:OlderBrother] = 52
    ENUM[53] = :OlderSister ; NUME[:OlderSister] = 53
    ENUM[54] = :OlderSibling ; NUME[:OlderSibling] = 54
    ENUM[55] = :YoungerBrother ; NUME[:YoungerBrother] = 55
    ENUM[56] = :YoungerSister ; NUME[:YoungerSister] = 56
    ENUM[57] = :YoungerSibling ; NUME[:YoungerSibling] = 57
    ENUM[58] = :Cousin ; NUME[:Cousin] = 58
    ENUM[59] = :Aunt ; NUME[:Aunt] = 59
    ENUM[60] = :Uncle ; NUME[:Uncle] = 60
    ENUM[61] = :Niece ; NUME[:Niece] = 61
    ENUM[62] = :Nephew ; NUME[:Nephew] = 62
    ENUM[63] = :Sibling ; NUME[:Sibling] = 63
    ENUM[64] = :Grandchild ; NUME[:Grandchild] = 64
end

class HistfigSiteLinkType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :SEAT_OF_POWER ; NUME[:SEAT_OF_POWER] = 0
    ENUM[1] = :HANGOUT ; NUME[:HANGOUT] = 1
    ENUM[2] = :HOME_SITE_ABSTRACT_BUILDING ; NUME[:HOME_SITE_ABSTRACT_BUILDING] = 2
    ENUM[3] = :HOME_SITE_REALIZATION_BUILDING ; NUME[:HOME_SITE_REALIZATION_BUILDING] = 3
    ENUM[4] = :LAIR ; NUME[:LAIR] = 4
    ENUM[5] = :HOME_SITE_REALIZATION_SUL ; NUME[:HOME_SITE_REALIZATION_SUL] = 5
end

class HistoricalEntityType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Civilization ; NUME[:Civilization] = 0
    ENUM[1] = :SiteGovernment ; NUME[:SiteGovernment] = 1
    ENUM[2] = :VesselCrew ; NUME[:VesselCrew] = 2
    ENUM[3] = :MigratingGroup ; NUME[:MigratingGroup] = 3
    ENUM[4] = :NomadicGroup ; NUME[:NomadicGroup] = 4
    ENUM[5] = :Religion ; NUME[:Religion] = 5
    ENUM[6] = :MilitaryUnit ; NUME[:MilitaryUnit] = 6
    ENUM[7] = :Outcast ; NUME[:Outcast] = 7
end

class HistoryEventCollectionType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :WAR ; NUME[:WAR] = 0
    ENUM[1] = :BATTLE ; NUME[:BATTLE] = 1
    ENUM[2] = :DUEL ; NUME[:DUEL] = 2
    ENUM[3] = :SITE_CONQUERED ; NUME[:SITE_CONQUERED] = 3
    ENUM[4] = :ABDUCTION ; NUME[:ABDUCTION] = 4
    ENUM[5] = :THEFT ; NUME[:THEFT] = 5
    ENUM[6] = :BEAST_ATTACK ; NUME[:BEAST_ATTACK] = 6
    ENUM[7] = :JOURNEY ; NUME[:JOURNEY] = 7
    ENUM[8] = :INSURRECTION ; NUME[:INSURRECTION] = 8
end

class HistoryEventSimpleBattleSubtype < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :SCUFFLE ; NUME[:SCUFFLE] = 0
    ENUM[1] = :ATTACK ; NUME[:ATTACK] = 1
    ENUM[2] = :SURPRISE ; NUME[:SURPRISE] = 2
    ENUM[3] = :AMBUSH ; NUME[:AMBUSH] = 3
    ENUM[4] = :HAPPEN_UPON ; NUME[:HAPPEN_UPON] = 4
    ENUM[5] = :CORNER ; NUME[:CORNER] = 5
    ENUM[6] = :CONFRONT ; NUME[:CONFRONT] = 6
    ENUM[7] = :LOSE_AFTER_RECEIVE_WOUND ; NUME[:LOSE_AFTER_RECEIVE_WOUND] = 7
    ENUM[8] = :LOSE_AFTER_INFLICT_WOUND ; NUME[:LOSE_AFTER_INFLICT_WOUND] = 8
    ENUM[9] = :LOSE_AFTER_EXCHANGE_WOUND ; NUME[:LOSE_AFTER_EXCHANGE_WOUND] = 9
end

class HistoryEventType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :WAR_ATTACKED_SITE ; NUME[:WAR_ATTACKED_SITE] = 0
    ENUM[1] = :WAR_DESTROYED_SITE ; NUME[:WAR_DESTROYED_SITE] = 1
    ENUM[2] = :CREATED_SITE ; NUME[:CREATED_SITE] = 2
    ENUM[3] = :HIST_FIGURE_DIED ; NUME[:HIST_FIGURE_DIED] = 3
    ENUM[4] = :ADD_HF_ENTITY_LINK ; NUME[:ADD_HF_ENTITY_LINK] = 4
    ENUM[5] = :REMOVE_HF_ENTITY_LINK ; NUME[:REMOVE_HF_ENTITY_LINK] = 5
    ENUM[6] = :FIRST_CONTACT ; NUME[:FIRST_CONTACT] = 6
    ENUM[7] = :FIRST_CONTACT_FAILED ; NUME[:FIRST_CONTACT_FAILED] = 7
    ENUM[8] = :TOPICAGREEMENT_CONCLUDED ; NUME[:TOPICAGREEMENT_CONCLUDED] = 8
    ENUM[9] = :TOPICAGREEMENT_REJECTED ; NUME[:TOPICAGREEMENT_REJECTED] = 9
    ENUM[10] = :TOPICAGREEMENT_MADE ; NUME[:TOPICAGREEMENT_MADE] = 10
    ENUM[11] = :WAR_PEACE_ACCEPTED ; NUME[:WAR_PEACE_ACCEPTED] = 11
    ENUM[12] = :WAR_PEACE_REJECTED ; NUME[:WAR_PEACE_REJECTED] = 12
    ENUM[13] = :DIPLOMAT_LOST ; NUME[:DIPLOMAT_LOST] = 13
    ENUM[14] = :AGREEMENTS_VOIDED ; NUME[:AGREEMENTS_VOIDED] = 14
    ENUM[15] = :MERCHANT ; NUME[:MERCHANT] = 15
    ENUM[16] = :ARTIFACT_HIDDEN ; NUME[:ARTIFACT_HIDDEN] = 16
    ENUM[17] = :ARTIFACT_POSSESSED ; NUME[:ARTIFACT_POSSESSED] = 17
    ENUM[18] = :ARTIFACT_CREATED ; NUME[:ARTIFACT_CREATED] = 18
    ENUM[19] = :ARTIFACT_LOST ; NUME[:ARTIFACT_LOST] = 19
    ENUM[20] = :ARTIFACT_FOUND ; NUME[:ARTIFACT_FOUND] = 20
    ENUM[21] = :ARTIFACT_RECOVERED ; NUME[:ARTIFACT_RECOVERED] = 21
    ENUM[22] = :ARTIFACT_DROPPED ; NUME[:ARTIFACT_DROPPED] = 22
    ENUM[23] = :RECLAIM_SITE ; NUME[:RECLAIM_SITE] = 23
    ENUM[24] = :HF_DESTROYED_SITE ; NUME[:HF_DESTROYED_SITE] = 24
    ENUM[25] = :SITE_DIED ; NUME[:SITE_DIED] = 25
    ENUM[26] = :SITE_RETIRED ; NUME[:SITE_RETIRED] = 26
    ENUM[27] = :ENTITY_CREATED ; NUME[:ENTITY_CREATED] = 27
    ENUM[28] = :ENTITY_ACTION ; NUME[:ENTITY_ACTION] = 28
    ENUM[29] = :ENTITY_INCORPORATED ; NUME[:ENTITY_INCORPORATED] = 29
    ENUM[30] = :CREATED_BUILDING ; NUME[:CREATED_BUILDING] = 30
    ENUM[31] = :REPLACED_BUILDING ; NUME[:REPLACED_BUILDING] = 31
    ENUM[32] = :ADD_HF_SITE_LINK ; NUME[:ADD_HF_SITE_LINK] = 32
    ENUM[33] = :REMOVE_HF_SITE_LINK ; NUME[:REMOVE_HF_SITE_LINK] = 33
    ENUM[34] = :ADD_HF_HF_LINK ; NUME[:ADD_HF_HF_LINK] = 34
    ENUM[35] = :REMOVE_HF_HF_LINK ; NUME[:REMOVE_HF_HF_LINK] = 35
    ENUM[36] = :ENTITY_RAZED_BUILDING ; NUME[:ENTITY_RAZED_BUILDING] = 36
    ENUM[37] = :MASTERPIECE_CREATED_ARCH_DESIGN ; NUME[:MASTERPIECE_CREATED_ARCH_DESIGN] = 37
    ENUM[38] = :MASTERPIECE_CREATED_ARCH_CONSTRUCT ; NUME[:MASTERPIECE_CREATED_ARCH_CONSTRUCT] = 38
    ENUM[39] = :MASTERPIECE_CREATED_ITEM ; NUME[:MASTERPIECE_CREATED_ITEM] = 39
    ENUM[40] = :MASTERPIECE_CREATED_DYE_ITEM ; NUME[:MASTERPIECE_CREATED_DYE_ITEM] = 40
    ENUM[41] = :MASTERPIECE_CREATED_ITEM_IMPROVEMENT ; NUME[:MASTERPIECE_CREATED_ITEM_IMPROVEMENT] = 41
    ENUM[42] = :MASTERPIECE_CREATED_FOOD ; NUME[:MASTERPIECE_CREATED_FOOD] = 42
    ENUM[43] = :MASTERPIECE_CREATED_ENGRAVING ; NUME[:MASTERPIECE_CREATED_ENGRAVING] = 43
    ENUM[44] = :MASTERPIECE_LOST ; NUME[:MASTERPIECE_LOST] = 44
    ENUM[45] = :CHANGE_HF_STATE ; NUME[:CHANGE_HF_STATE] = 45
    ENUM[46] = :CHANGE_HF_JOB ; NUME[:CHANGE_HF_JOB] = 46
    ENUM[47] = :WAR_FIELD_BATTLE ; NUME[:WAR_FIELD_BATTLE] = 47
    ENUM[48] = :WAR_PLUNDERED_SITE ; NUME[:WAR_PLUNDERED_SITE] = 48
    ENUM[49] = :WAR_SITE_NEW_LEADER ; NUME[:WAR_SITE_NEW_LEADER] = 49
    ENUM[50] = :WAR_SITE_TRIBUTE_FORCED ; NUME[:WAR_SITE_TRIBUTE_FORCED] = 50
    ENUM[51] = :WAR_SITE_TAKEN_OVER ; NUME[:WAR_SITE_TAKEN_OVER] = 51
    ENUM[52] = :BODY_ABUSED ; NUME[:BODY_ABUSED] = 52
    ENUM[53] = :HIST_FIGURE_ABDUCTED ; NUME[:HIST_FIGURE_ABDUCTED] = 53
    ENUM[54] = :ITEM_STOLEN ; NUME[:ITEM_STOLEN] = 54
    ENUM[55] = :HF_RAZED_BUILDING ; NUME[:HF_RAZED_BUILDING] = 55
    ENUM[56] = :CREATURE_DEVOURED ; NUME[:CREATURE_DEVOURED] = 56
    ENUM[57] = :HIST_FIGURE_WOUNDED ; NUME[:HIST_FIGURE_WOUNDED] = 57
    ENUM[58] = :HIST_FIGURE_SIMPLE_BATTLE_EVENT ; NUME[:HIST_FIGURE_SIMPLE_BATTLE_EVENT] = 58
    ENUM[59] = :CREATED_WORLD_CONSTRUCTION ; NUME[:CREATED_WORLD_CONSTRUCTION] = 59
    ENUM[60] = :HIST_FIGURE_REUNION ; NUME[:HIST_FIGURE_REUNION] = 60
    ENUM[61] = :HIST_FIGURE_REACH_SUMMIT ; NUME[:HIST_FIGURE_REACH_SUMMIT] = 61
    ENUM[62] = :HIST_FIGURE_TRAVEL ; NUME[:HIST_FIGURE_TRAVEL] = 62
    ENUM[63] = :HIST_FIGURE_NEW_PET ; NUME[:HIST_FIGURE_NEW_PET] = 63
    ENUM[64] = :ASSUME_IDENTITY ; NUME[:ASSUME_IDENTITY] = 64
    ENUM[65] = :CREATE_ENTITY_POSITION ; NUME[:CREATE_ENTITY_POSITION] = 65
    ENUM[66] = :CHANGE_CREATURE_TYPE ; NUME[:CHANGE_CREATURE_TYPE] = 66
    ENUM[67] = :HIST_FIGURE_REVIVED ; NUME[:HIST_FIGURE_REVIVED] = 67
    ENUM[68] = :HF_LEARNS_SECRET ; NUME[:HF_LEARNS_SECRET] = 68
    ENUM[69] = :CHANGE_HF_BODY_STATE ; NUME[:CHANGE_HF_BODY_STATE] = 69
    ENUM[70] = :HF_ACT_ON_BUILDING ; NUME[:HF_ACT_ON_BUILDING] = 70
    ENUM[71] = :HF_DOES_INTERACTION ; NUME[:HF_DOES_INTERACTION] = 71
    ENUM[72] = :HF_CONFRONTED ; NUME[:HF_CONFRONTED] = 72
    ENUM[73] = :ENTITY_LAW ; NUME[:ENTITY_LAW] = 73
    ENUM[74] = :HF_GAINS_SECRET_GOAL ; NUME[:HF_GAINS_SECRET_GOAL] = 74
    ENUM[75] = :ARTIFACT_STORED ; NUME[:ARTIFACT_STORED] = 75
    ENUM[76] = :AGREEMENT_FORMED ; NUME[:AGREEMENT_FORMED] = 76
    ENUM[77] = :SITE_DISPUTE ; NUME[:SITE_DISPUTE] = 77
    ENUM[78] = :AGREEMENT_CONCLUDED ; NUME[:AGREEMENT_CONCLUDED] = 78
    ENUM[79] = :INSURRECTION_STARTED ; NUME[:INSURRECTION_STARTED] = 79
    ENUM[80] = :INSURRECTION_ENDED ; NUME[:INSURRECTION_ENDED] = 80
    ENUM[81] = :HF_ATTACKED_SITE ; NUME[:HF_ATTACKED_SITE] = 81
end

class ImprovementType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :ART_IMAGE ; NUME[:ART_IMAGE] = 0
    ENUM[1] = :COVERED ; NUME[:COVERED] = 1
    ENUM[2] = :RINGS_HANGING ; NUME[:RINGS_HANGING] = 2
    ENUM[3] = :BANDS ; NUME[:BANDS] = 3
    ENUM[4] = :SPIKES ; NUME[:SPIKES] = 4
    ENUM[5] = :ITEMSPECIFIC ; NUME[:ITEMSPECIFIC] = 5
    ENUM[6] = :THREAD ; NUME[:THREAD] = 6
    ENUM[7] = :CLOTH ; NUME[:CLOTH] = 7
    ENUM[8] = :SEWN_IMAGE ; NUME[:SEWN_IMAGE] = 8
    ENUM[9] = :PAGES ; NUME[:PAGES] = 9
    ENUM[10] = :ILLUSTRATION ; NUME[:ILLUSTRATION] = 10
end

class InclusionType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[1] = :VEIN ; NUME[:VEIN] = 1
    ENUM[2] = :CLUSTER ; NUME[:CLUSTER] = 2
    ENUM[3] = :CLUSTER_SMALL ; NUME[:CLUSTER_SMALL] = 3
    ENUM[4] = :CLUSTER_ONE ; NUME[:CLUSTER_ONE] = 4
end

class InitDisplayFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :USE_GRAPHICS ; NUME[:USE_GRAPHICS] = 0
    ENUM[1] = :BLACK_SPACE ; NUME[:BLACK_SPACE] = 1
    ENUM[2] = :PARTIAL_PRINT ; NUME[:PARTIAL_PRINT] = 2
    ENUM[3] = :FRAME_BUFFER ; NUME[:FRAME_BUFFER] = 3
    ENUM[4] = :SINGLE_BUFFER ; NUME[:SINGLE_BUFFER] = 4
    ENUM[5] = :ACCUM_BUFFER ; NUME[:ACCUM_BUFFER] = 5
    ENUM[6] = :VBO ; NUME[:VBO] = 6
    ENUM[7] = :RENDER_2D ; NUME[:RENDER_2D] = 7
    ENUM[8] = :RENDER_2DHW ; NUME[:RENDER_2DHW] = 8
    ENUM[9] = :RENDER_2DASYNC ; NUME[:RENDER_2DASYNC] = 9
    ENUM[10] = :UNUSED_01_08 ; NUME[:UNUSED_01_08] = 10
    ENUM[11] = :TEXT ; NUME[:TEXT] = 11
    ENUM[12] = :SHADER ; NUME[:SHADER] = 12
    ENUM[13] = :NOT_RESIZABLE ; NUME[:NOT_RESIZABLE] = 13
    ENUM[14] = :ARB_SYNC ; NUME[:ARB_SYNC] = 14
end

class InitInputFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :MOUSE_OFF ; NUME[:MOUSE_OFF] = 0
    ENUM[1] = :MOUSE_PICTURE ; NUME[:MOUSE_PICTURE] = 1
end

class InitMediaFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :SOUND_OFF ; NUME[:SOUND_OFF] = 0
    ENUM[1] = :INTRO_OFF ; NUME[:INTRO_OFF] = 1
    ENUM[2] = :COMPRESS_SAVES ; NUME[:COMPRESS_SAVES] = 2
end

class InitWindowFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :TOPMOST ; NUME[:TOPMOST] = 0
    ENUM[1] = :VSYNC_ON ; NUME[:VSYNC_ON] = 1
    ENUM[2] = :VSYNC_OFF ; NUME[:VSYNC_OFF] = 2
    ENUM[3] = :TEXTURE_LINEAR ; NUME[:TEXTURE_LINEAR] = 3
end

class InorganicFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :LAVA ; NUME[:LAVA] = 0
    ENUM[1] = :GENERATED ; NUME[:GENERATED] = 1
    ENUM[2] = :ENVIRONMENT_NON_SOIL_OCEAN ; NUME[:ENVIRONMENT_NON_SOIL_OCEAN] = 2
    ENUM[3] = :SEDIMENTARY ; NUME[:SEDIMENTARY] = 3
    ENUM[4] = :SEDIMENTARY_OCEAN_SHALLOW ; NUME[:SEDIMENTARY_OCEAN_SHALLOW] = 4
    ENUM[5] = :IGNEOUS_INTRUSIVE ; NUME[:IGNEOUS_INTRUSIVE] = 5
    ENUM[6] = :IGNEOUS_EXTRUSIVE ; NUME[:IGNEOUS_EXTRUSIVE] = 6
    ENUM[7] = :METAMORPHIC ; NUME[:METAMORPHIC] = 7
    ENUM[8] = :DEEP_SURFACE ; NUME[:DEEP_SURFACE] = 8
    ENUM[9] = :METAL_ORE ; NUME[:METAL_ORE] = 9
    ENUM[10] = :AQUIFER ; NUME[:AQUIFER] = 10
    ENUM[11] = :SOIL_ANY ; NUME[:SOIL_ANY] = 11
    ENUM[12] = :SOIL_OCEAN ; NUME[:SOIL_OCEAN] = 12
    ENUM[13] = :SOIL_SAND ; NUME[:SOIL_SAND] = 13
    ENUM[14] = :SEDIMENTARY_OCEAN_DEEP ; NUME[:SEDIMENTARY_OCEAN_DEEP] = 14
    ENUM[15] = :THREAD_METAL ; NUME[:THREAD_METAL] = 15
    ENUM[16] = :SPECIAL ; NUME[:SPECIAL] = 16
    ENUM[17] = :SOIL ; NUME[:SOIL] = 17
    ENUM[18] = :DEEP_SPECIAL ; NUME[:DEEP_SPECIAL] = 18
    ENUM[19] = :DIVINE ; NUME[:DIVINE] = 19
    ENUM[25] = :WAFERS ; NUME[:WAFERS] = 25
end

class InstrumentFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :HARD_MAT ; NUME[:HARD_MAT] = 0
end

class InsurrectionOutcome < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :LeadershipOverthrown ; NUME[:LeadershipOverthrown] = 0
    ENUM[1] = :PopulationGone ; NUME[:PopulationGone] = 1
    ENUM[2] = :Crushed ; NUME[:Crushed] = 2
end

class InteractionEffectLocationHint < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :IN_WATER ; NUME[:IN_WATER] = 0
    ENUM[1] = :IN_MAGMA ; NUME[:IN_MAGMA] = 1
    ENUM[2] = :NO_WATER ; NUME[:NO_WATER] = 2
    ENUM[3] = :NO_MAGMA ; NUME[:NO_MAGMA] = 3
end

class InteractionEffectType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :ANIMATE ; NUME[:ANIMATE] = 0
    ENUM[1] = :ADD_SYNDROME ; NUME[:ADD_SYNDROME] = 1
    ENUM[2] = :RESURRECT ; NUME[:RESURRECT] = 2
    ENUM[3] = :CLEAN ; NUME[:CLEAN] = 3
    ENUM[4] = :CONTACT ; NUME[:CONTACT] = 4
    ENUM[5] = :MATERIAL_EMISSION ; NUME[:MATERIAL_EMISSION] = 5
    ENUM[6] = :HIDE ; NUME[:HIDE] = 6
end

class InteractionSourceType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :REGION ; NUME[:REGION] = 0
    ENUM[1] = :SECRET ; NUME[:SECRET] = 1
    ENUM[2] = :DISTURBANCE ; NUME[:DISTURBANCE] = 2
    ENUM[3] = :DEITY ; NUME[:DEITY] = 3
    ENUM[4] = :ATTACK ; NUME[:ATTACK] = 4
    ENUM[5] = :INGESTION ; NUME[:INGESTION] = 5
    ENUM[6] = :CREATURE_ACTION ; NUME[:CREATURE_ACTION] = 6
    ENUM[7] = :UNDERGROUND_SPECIAL ; NUME[:UNDERGROUND_SPECIAL] = 7
end

class InteractionSourceUsageHint < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :MAJOR_CURSE ; NUME[:MAJOR_CURSE] = 0
    ENUM[1] = :GREETING ; NUME[:GREETING] = 1
    ENUM[2] = :CLEAN_SELF ; NUME[:CLEAN_SELF] = 2
    ENUM[3] = :CLEAN_FRIEND ; NUME[:CLEAN_FRIEND] = 3
    ENUM[4] = :ATTACK ; NUME[:ATTACK] = 4
    ENUM[5] = :FLEEING ; NUME[:FLEEING] = 5
    ENUM[6] = :NEGATIVE_SOCIAL_RESPONSE ; NUME[:NEGATIVE_SOCIAL_RESPONSE] = 6
    ENUM[7] = :TORMENT ; NUME[:TORMENT] = 7
end

class InteractionTargetLocationType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :CONTEXT_NONE ; NUME[:CONTEXT_NONE] = -1
    ENUM[0] = :CONTEXT_REGION ; NUME[:CONTEXT_REGION] = 0
    ENUM[1] = :CONTEXT_CREATURE ; NUME[:CONTEXT_CREATURE] = 1
    ENUM[2] = :CONTEXT_ITEM ; NUME[:CONTEXT_ITEM] = 2
    ENUM[3] = :CONTEXT_BP ; NUME[:CONTEXT_BP] = 3
    ENUM[4] = :CONTEXT_LOCATION ; NUME[:CONTEXT_LOCATION] = 4
    ENUM[5] = :CONTEXT_CREATURE_OR_LOCATION ; NUME[:CONTEXT_CREATURE_OR_LOCATION] = 5
end

class InteractionTargetType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :CORPSE ; NUME[:CORPSE] = 0
    ENUM[1] = :CREATURE ; NUME[:CREATURE] = 1
    ENUM[2] = :MATERIAL ; NUME[:MATERIAL] = 2
    ENUM[3] = :LOCATION ; NUME[:LOCATION] = 3
end

class InterfaceBreakdownTypes < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :NONE ; NUME[:NONE] = 0
    ENUM[1] = :QUIT ; NUME[:QUIT] = 1
    ENUM[2] = :STOPSCREEN ; NUME[:STOPSCREEN] = 2
    ENUM[3] = :TOFIRST ; NUME[:TOFIRST] = 3
end

class InterfaceKey < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :NONE ; NUME[:NONE] = 0
    ENUM[1] = :SELECT ; NUME[:SELECT] = 1
    ENUM[2] = :SEC_SELECT ; NUME[:SEC_SELECT] = 2
    ENUM[3] = :DESELECT ; NUME[:DESELECT] = 3
    ENUM[4] = :SELECT_ALL ; NUME[:SELECT_ALL] = 4
    ENUM[5] = :DESELECT_ALL ; NUME[:DESELECT_ALL] = 5
    ENUM[6] = :LEAVESCREEN ; NUME[:LEAVESCREEN] = 6
    ENUM[7] = :LEAVESCREEN_ALL ; NUME[:LEAVESCREEN_ALL] = 7
    ENUM[8] = :CLOSE_MEGA_ANNOUNCEMENT ; NUME[:CLOSE_MEGA_ANNOUNCEMENT] = 8
    ENUM[9] = :OPTIONS ; NUME[:OPTIONS] = 9
    ENUM[10] = :OPTION_EXPORT ; NUME[:OPTION_EXPORT] = 10
    ENUM[11] = :HELP ; NUME[:HELP] = 11
    ENUM[12] = :TOGGLE_FULLSCREEN ; NUME[:TOGGLE_FULLSCREEN] = 12
    ENUM[13] = :MOVIES ; NUME[:MOVIES] = 13
    ENUM[14] = :ZOOM_IN ; NUME[:ZOOM_IN] = 14
    ENUM[15] = :ZOOM_OUT ; NUME[:ZOOM_OUT] = 15
    ENUM[16] = :ZOOM_TOGGLE ; NUME[:ZOOM_TOGGLE] = 16
    ENUM[17] = :ZOOM_RESET ; NUME[:ZOOM_RESET] = 17
    ENUM[18] = :MOVIE_RECORD ; NUME[:MOVIE_RECORD] = 18
    ENUM[19] = :MOVIE_PLAY ; NUME[:MOVIE_PLAY] = 19
    ENUM[20] = :MOVIE_SAVE ; NUME[:MOVIE_SAVE] = 20
    ENUM[21] = :MOVIE_LOAD ; NUME[:MOVIE_LOAD] = 21
    ENUM[22] = :TOGGLE_TTF ; NUME[:TOGGLE_TTF] = 22
    ENUM[23] = :FPS_UP ; NUME[:FPS_UP] = 23
    ENUM[24] = :FPS_DOWN ; NUME[:FPS_DOWN] = 24
    ENUM[25] = :CHANGETAB ; NUME[:CHANGETAB] = 25
    ENUM[26] = :SEC_CHANGETAB ; NUME[:SEC_CHANGETAB] = 26
    ENUM[27] = :STANDARDSCROLL_UP ; NUME[:STANDARDSCROLL_UP] = 27
    ENUM[28] = :STANDARDSCROLL_DOWN ; NUME[:STANDARDSCROLL_DOWN] = 28
    ENUM[29] = :STANDARDSCROLL_LEFT ; NUME[:STANDARDSCROLL_LEFT] = 29
    ENUM[30] = :STANDARDSCROLL_RIGHT ; NUME[:STANDARDSCROLL_RIGHT] = 30
    ENUM[31] = :STANDARDSCROLL_PAGEUP ; NUME[:STANDARDSCROLL_PAGEUP] = 31
    ENUM[32] = :STANDARDSCROLL_PAGEDOWN ; NUME[:STANDARDSCROLL_PAGEDOWN] = 32
    ENUM[33] = :SECONDSCROLL_UP ; NUME[:SECONDSCROLL_UP] = 33
    ENUM[34] = :SECONDSCROLL_DOWN ; NUME[:SECONDSCROLL_DOWN] = 34
    ENUM[35] = :SECONDSCROLL_PAGEUP ; NUME[:SECONDSCROLL_PAGEUP] = 35
    ENUM[36] = :SECONDSCROLL_PAGEDOWN ; NUME[:SECONDSCROLL_PAGEDOWN] = 36
    ENUM[37] = :CURSOR_UP ; NUME[:CURSOR_UP] = 37
    ENUM[38] = :CURSOR_DOWN ; NUME[:CURSOR_DOWN] = 38
    ENUM[39] = :CURSOR_LEFT ; NUME[:CURSOR_LEFT] = 39
    ENUM[40] = :CURSOR_RIGHT ; NUME[:CURSOR_RIGHT] = 40
    ENUM[41] = :CURSOR_UPLEFT ; NUME[:CURSOR_UPLEFT] = 41
    ENUM[42] = :CURSOR_UPRIGHT ; NUME[:CURSOR_UPRIGHT] = 42
    ENUM[43] = :CURSOR_DOWNLEFT ; NUME[:CURSOR_DOWNLEFT] = 43
    ENUM[44] = :CURSOR_DOWNRIGHT ; NUME[:CURSOR_DOWNRIGHT] = 44
    ENUM[45] = :CURSOR_UP_FAST ; NUME[:CURSOR_UP_FAST] = 45
    ENUM[46] = :CURSOR_DOWN_FAST ; NUME[:CURSOR_DOWN_FAST] = 46
    ENUM[47] = :CURSOR_LEFT_FAST ; NUME[:CURSOR_LEFT_FAST] = 47
    ENUM[48] = :CURSOR_RIGHT_FAST ; NUME[:CURSOR_RIGHT_FAST] = 48
    ENUM[49] = :CURSOR_UPLEFT_FAST ; NUME[:CURSOR_UPLEFT_FAST] = 49
    ENUM[50] = :CURSOR_UPRIGHT_FAST ; NUME[:CURSOR_UPRIGHT_FAST] = 50
    ENUM[51] = :CURSOR_DOWNLEFT_FAST ; NUME[:CURSOR_DOWNLEFT_FAST] = 51
    ENUM[52] = :CURSOR_DOWNRIGHT_FAST ; NUME[:CURSOR_DOWNRIGHT_FAST] = 52
    ENUM[53] = :CURSOR_UP_Z ; NUME[:CURSOR_UP_Z] = 53
    ENUM[54] = :CURSOR_DOWN_Z ; NUME[:CURSOR_DOWN_Z] = 54
    ENUM[55] = :CURSOR_UP_Z_AUX ; NUME[:CURSOR_UP_Z_AUX] = 55
    ENUM[56] = :CURSOR_DOWN_Z_AUX ; NUME[:CURSOR_DOWN_Z_AUX] = 56
    ENUM[57] = :MENU_CONFIRM ; NUME[:MENU_CONFIRM] = 57
    ENUM[58] = :SAVE_BINDINGS ; NUME[:SAVE_BINDINGS] = 58
    ENUM[59] = :LOAD_BINDINGS ; NUME[:LOAD_BINDINGS] = 59
    ENUM[60] = :MACRO_BREAK ; NUME[:MACRO_BREAK] = 60
    ENUM[61] = :RECORD_MACRO ; NUME[:RECORD_MACRO] = 61
    ENUM[62] = :PLAY_MACRO ; NUME[:PLAY_MACRO] = 62
    ENUM[63] = :SAVE_MACRO ; NUME[:SAVE_MACRO] = 63
    ENUM[64] = :LOAD_MACRO ; NUME[:LOAD_MACRO] = 64
    ENUM[65] = :PREFIX ; NUME[:PREFIX] = 65
    ENUM[66] = :OPTION1 ; NUME[:OPTION1] = 66
    ENUM[67] = :OPTION2 ; NUME[:OPTION2] = 67
    ENUM[68] = :OPTION3 ; NUME[:OPTION3] = 68
    ENUM[69] = :OPTION4 ; NUME[:OPTION4] = 69
    ENUM[70] = :OPTION5 ; NUME[:OPTION5] = 70
    ENUM[71] = :OPTION6 ; NUME[:OPTION6] = 71
    ENUM[72] = :OPTION7 ; NUME[:OPTION7] = 72
    ENUM[73] = :OPTION8 ; NUME[:OPTION8] = 73
    ENUM[74] = :OPTION9 ; NUME[:OPTION9] = 74
    ENUM[75] = :OPTION10 ; NUME[:OPTION10] = 75
    ENUM[76] = :OPTION11 ; NUME[:OPTION11] = 76
    ENUM[77] = :OPTION12 ; NUME[:OPTION12] = 77
    ENUM[78] = :OPTION13 ; NUME[:OPTION13] = 78
    ENUM[79] = :OPTION14 ; NUME[:OPTION14] = 79
    ENUM[80] = :OPTION15 ; NUME[:OPTION15] = 80
    ENUM[81] = :OPTION16 ; NUME[:OPTION16] = 81
    ENUM[82] = :OPTION17 ; NUME[:OPTION17] = 82
    ENUM[83] = :OPTION18 ; NUME[:OPTION18] = 83
    ENUM[84] = :OPTION19 ; NUME[:OPTION19] = 84
    ENUM[85] = :OPTION20 ; NUME[:OPTION20] = 85
    ENUM[86] = :SEC_OPTION1 ; NUME[:SEC_OPTION1] = 86
    ENUM[87] = :SEC_OPTION2 ; NUME[:SEC_OPTION2] = 87
    ENUM[88] = :SEC_OPTION3 ; NUME[:SEC_OPTION3] = 88
    ENUM[89] = :SEC_OPTION4 ; NUME[:SEC_OPTION4] = 89
    ENUM[90] = :SEC_OPTION5 ; NUME[:SEC_OPTION5] = 90
    ENUM[91] = :SEC_OPTION6 ; NUME[:SEC_OPTION6] = 91
    ENUM[92] = :SEC_OPTION7 ; NUME[:SEC_OPTION7] = 92
    ENUM[93] = :SEC_OPTION8 ; NUME[:SEC_OPTION8] = 93
    ENUM[94] = :SEC_OPTION9 ; NUME[:SEC_OPTION9] = 94
    ENUM[95] = :SEC_OPTION10 ; NUME[:SEC_OPTION10] = 95
    ENUM[96] = :SEC_OPTION11 ; NUME[:SEC_OPTION11] = 96
    ENUM[97] = :SEC_OPTION12 ; NUME[:SEC_OPTION12] = 97
    ENUM[98] = :SEC_OPTION13 ; NUME[:SEC_OPTION13] = 98
    ENUM[99] = :SEC_OPTION14 ; NUME[:SEC_OPTION14] = 99
    ENUM[100] = :SEC_OPTION15 ; NUME[:SEC_OPTION15] = 100
    ENUM[101] = :SEC_OPTION16 ; NUME[:SEC_OPTION16] = 101
    ENUM[102] = :SEC_OPTION17 ; NUME[:SEC_OPTION17] = 102
    ENUM[103] = :SEC_OPTION18 ; NUME[:SEC_OPTION18] = 103
    ENUM[104] = :SEC_OPTION19 ; NUME[:SEC_OPTION19] = 104
    ENUM[105] = :SEC_OPTION20 ; NUME[:SEC_OPTION20] = 105
    ENUM[106] = :CUSTOM_A ; NUME[:CUSTOM_A] = 106
    ENUM[107] = :CUSTOM_B ; NUME[:CUSTOM_B] = 107
    ENUM[108] = :CUSTOM_C ; NUME[:CUSTOM_C] = 108
    ENUM[109] = :CUSTOM_D ; NUME[:CUSTOM_D] = 109
    ENUM[110] = :CUSTOM_E ; NUME[:CUSTOM_E] = 110
    ENUM[111] = :CUSTOM_F ; NUME[:CUSTOM_F] = 111
    ENUM[112] = :CUSTOM_G ; NUME[:CUSTOM_G] = 112
    ENUM[113] = :CUSTOM_H ; NUME[:CUSTOM_H] = 113
    ENUM[114] = :CUSTOM_I ; NUME[:CUSTOM_I] = 114
    ENUM[115] = :CUSTOM_J ; NUME[:CUSTOM_J] = 115
    ENUM[116] = :CUSTOM_K ; NUME[:CUSTOM_K] = 116
    ENUM[117] = :CUSTOM_L ; NUME[:CUSTOM_L] = 117
    ENUM[118] = :CUSTOM_M ; NUME[:CUSTOM_M] = 118
    ENUM[119] = :CUSTOM_N ; NUME[:CUSTOM_N] = 119
    ENUM[120] = :CUSTOM_O ; NUME[:CUSTOM_O] = 120
    ENUM[121] = :CUSTOM_P ; NUME[:CUSTOM_P] = 121
    ENUM[122] = :CUSTOM_Q ; NUME[:CUSTOM_Q] = 122
    ENUM[123] = :CUSTOM_R ; NUME[:CUSTOM_R] = 123
    ENUM[124] = :CUSTOM_S ; NUME[:CUSTOM_S] = 124
    ENUM[125] = :CUSTOM_T ; NUME[:CUSTOM_T] = 125
    ENUM[126] = :CUSTOM_U ; NUME[:CUSTOM_U] = 126
    ENUM[127] = :CUSTOM_V ; NUME[:CUSTOM_V] = 127
    ENUM[128] = :CUSTOM_W ; NUME[:CUSTOM_W] = 128
    ENUM[129] = :CUSTOM_X ; NUME[:CUSTOM_X] = 129
    ENUM[130] = :CUSTOM_Y ; NUME[:CUSTOM_Y] = 130
    ENUM[131] = :CUSTOM_Z ; NUME[:CUSTOM_Z] = 131
    ENUM[132] = :CUSTOM_SHIFT_A ; NUME[:CUSTOM_SHIFT_A] = 132
    ENUM[133] = :CUSTOM_SHIFT_B ; NUME[:CUSTOM_SHIFT_B] = 133
    ENUM[134] = :CUSTOM_SHIFT_C ; NUME[:CUSTOM_SHIFT_C] = 134
    ENUM[135] = :CUSTOM_SHIFT_D ; NUME[:CUSTOM_SHIFT_D] = 135
    ENUM[136] = :CUSTOM_SHIFT_E ; NUME[:CUSTOM_SHIFT_E] = 136
    ENUM[137] = :CUSTOM_SHIFT_F ; NUME[:CUSTOM_SHIFT_F] = 137
    ENUM[138] = :CUSTOM_SHIFT_G ; NUME[:CUSTOM_SHIFT_G] = 138
    ENUM[139] = :CUSTOM_SHIFT_H ; NUME[:CUSTOM_SHIFT_H] = 139
    ENUM[140] = :CUSTOM_SHIFT_I ; NUME[:CUSTOM_SHIFT_I] = 140
    ENUM[141] = :CUSTOM_SHIFT_J ; NUME[:CUSTOM_SHIFT_J] = 141
    ENUM[142] = :CUSTOM_SHIFT_K ; NUME[:CUSTOM_SHIFT_K] = 142
    ENUM[143] = :CUSTOM_SHIFT_L ; NUME[:CUSTOM_SHIFT_L] = 143
    ENUM[144] = :CUSTOM_SHIFT_M ; NUME[:CUSTOM_SHIFT_M] = 144
    ENUM[145] = :CUSTOM_SHIFT_N ; NUME[:CUSTOM_SHIFT_N] = 145
    ENUM[146] = :CUSTOM_SHIFT_O ; NUME[:CUSTOM_SHIFT_O] = 146
    ENUM[147] = :CUSTOM_SHIFT_P ; NUME[:CUSTOM_SHIFT_P] = 147
    ENUM[148] = :CUSTOM_SHIFT_Q ; NUME[:CUSTOM_SHIFT_Q] = 148
    ENUM[149] = :CUSTOM_SHIFT_R ; NUME[:CUSTOM_SHIFT_R] = 149
    ENUM[150] = :CUSTOM_SHIFT_S ; NUME[:CUSTOM_SHIFT_S] = 150
    ENUM[151] = :CUSTOM_SHIFT_T ; NUME[:CUSTOM_SHIFT_T] = 151
    ENUM[152] = :CUSTOM_SHIFT_U ; NUME[:CUSTOM_SHIFT_U] = 152
    ENUM[153] = :CUSTOM_SHIFT_V ; NUME[:CUSTOM_SHIFT_V] = 153
    ENUM[154] = :CUSTOM_SHIFT_W ; NUME[:CUSTOM_SHIFT_W] = 154
    ENUM[155] = :CUSTOM_SHIFT_X ; NUME[:CUSTOM_SHIFT_X] = 155
    ENUM[156] = :CUSTOM_SHIFT_Y ; NUME[:CUSTOM_SHIFT_Y] = 156
    ENUM[157] = :CUSTOM_SHIFT_Z ; NUME[:CUSTOM_SHIFT_Z] = 157
    ENUM[158] = :CUSTOM_CTRL_A ; NUME[:CUSTOM_CTRL_A] = 158
    ENUM[159] = :CUSTOM_CTRL_B ; NUME[:CUSTOM_CTRL_B] = 159
    ENUM[160] = :CUSTOM_CTRL_C ; NUME[:CUSTOM_CTRL_C] = 160
    ENUM[161] = :CUSTOM_CTRL_D ; NUME[:CUSTOM_CTRL_D] = 161
    ENUM[162] = :CUSTOM_CTRL_E ; NUME[:CUSTOM_CTRL_E] = 162
    ENUM[163] = :CUSTOM_CTRL_F ; NUME[:CUSTOM_CTRL_F] = 163
    ENUM[164] = :CUSTOM_CTRL_G ; NUME[:CUSTOM_CTRL_G] = 164
    ENUM[165] = :CUSTOM_CTRL_H ; NUME[:CUSTOM_CTRL_H] = 165
    ENUM[166] = :CUSTOM_CTRL_I ; NUME[:CUSTOM_CTRL_I] = 166
    ENUM[167] = :CUSTOM_CTRL_J ; NUME[:CUSTOM_CTRL_J] = 167
    ENUM[168] = :CUSTOM_CTRL_K ; NUME[:CUSTOM_CTRL_K] = 168
    ENUM[169] = :CUSTOM_CTRL_L ; NUME[:CUSTOM_CTRL_L] = 169
    ENUM[170] = :CUSTOM_CTRL_M ; NUME[:CUSTOM_CTRL_M] = 170
    ENUM[171] = :CUSTOM_CTRL_N ; NUME[:CUSTOM_CTRL_N] = 171
    ENUM[172] = :CUSTOM_CTRL_O ; NUME[:CUSTOM_CTRL_O] = 172
    ENUM[173] = :CUSTOM_CTRL_P ; NUME[:CUSTOM_CTRL_P] = 173
    ENUM[174] = :CUSTOM_CTRL_Q ; NUME[:CUSTOM_CTRL_Q] = 174
    ENUM[175] = :CUSTOM_CTRL_R ; NUME[:CUSTOM_CTRL_R] = 175
    ENUM[176] = :CUSTOM_CTRL_S ; NUME[:CUSTOM_CTRL_S] = 176
    ENUM[177] = :CUSTOM_CTRL_T ; NUME[:CUSTOM_CTRL_T] = 177
    ENUM[178] = :CUSTOM_CTRL_U ; NUME[:CUSTOM_CTRL_U] = 178
    ENUM[179] = :CUSTOM_CTRL_V ; NUME[:CUSTOM_CTRL_V] = 179
    ENUM[180] = :CUSTOM_CTRL_W ; NUME[:CUSTOM_CTRL_W] = 180
    ENUM[181] = :CUSTOM_CTRL_X ; NUME[:CUSTOM_CTRL_X] = 181
    ENUM[182] = :CUSTOM_CTRL_Y ; NUME[:CUSTOM_CTRL_Y] = 182
    ENUM[183] = :CUSTOM_CTRL_Z ; NUME[:CUSTOM_CTRL_Z] = 183
    ENUM[184] = :CUSTOM_ALT_A ; NUME[:CUSTOM_ALT_A] = 184
    ENUM[185] = :CUSTOM_ALT_B ; NUME[:CUSTOM_ALT_B] = 185
    ENUM[186] = :CUSTOM_ALT_C ; NUME[:CUSTOM_ALT_C] = 186
    ENUM[187] = :CUSTOM_ALT_D ; NUME[:CUSTOM_ALT_D] = 187
    ENUM[188] = :CUSTOM_ALT_E ; NUME[:CUSTOM_ALT_E] = 188
    ENUM[189] = :CUSTOM_ALT_F ; NUME[:CUSTOM_ALT_F] = 189
    ENUM[190] = :CUSTOM_ALT_G ; NUME[:CUSTOM_ALT_G] = 190
    ENUM[191] = :CUSTOM_ALT_H ; NUME[:CUSTOM_ALT_H] = 191
    ENUM[192] = :CUSTOM_ALT_I ; NUME[:CUSTOM_ALT_I] = 192
    ENUM[193] = :CUSTOM_ALT_J ; NUME[:CUSTOM_ALT_J] = 193
    ENUM[194] = :CUSTOM_ALT_K ; NUME[:CUSTOM_ALT_K] = 194
    ENUM[195] = :CUSTOM_ALT_L ; NUME[:CUSTOM_ALT_L] = 195
    ENUM[196] = :CUSTOM_ALT_M ; NUME[:CUSTOM_ALT_M] = 196
    ENUM[197] = :CUSTOM_ALT_N ; NUME[:CUSTOM_ALT_N] = 197
    ENUM[198] = :CUSTOM_ALT_O ; NUME[:CUSTOM_ALT_O] = 198
    ENUM[199] = :CUSTOM_ALT_P ; NUME[:CUSTOM_ALT_P] = 199
    ENUM[200] = :CUSTOM_ALT_Q ; NUME[:CUSTOM_ALT_Q] = 200
    ENUM[201] = :CUSTOM_ALT_R ; NUME[:CUSTOM_ALT_R] = 201
    ENUM[202] = :CUSTOM_ALT_S ; NUME[:CUSTOM_ALT_S] = 202
    ENUM[203] = :CUSTOM_ALT_T ; NUME[:CUSTOM_ALT_T] = 203
    ENUM[204] = :CUSTOM_ALT_U ; NUME[:CUSTOM_ALT_U] = 204
    ENUM[205] = :CUSTOM_ALT_V ; NUME[:CUSTOM_ALT_V] = 205
    ENUM[206] = :CUSTOM_ALT_W ; NUME[:CUSTOM_ALT_W] = 206
    ENUM[207] = :CUSTOM_ALT_X ; NUME[:CUSTOM_ALT_X] = 207
    ENUM[208] = :CUSTOM_ALT_Y ; NUME[:CUSTOM_ALT_Y] = 208
    ENUM[209] = :CUSTOM_ALT_Z ; NUME[:CUSTOM_ALT_Z] = 209
    ENUM[210] = :WORLD_PARAM_TITLE ; NUME[:WORLD_PARAM_TITLE] = 210
    ENUM[211] = :WORLD_PARAM_ADD ; NUME[:WORLD_PARAM_ADD] = 211
    ENUM[212] = :WORLD_PARAM_COPY ; NUME[:WORLD_PARAM_COPY] = 212
    ENUM[213] = :WORLD_PARAM_DELETE ; NUME[:WORLD_PARAM_DELETE] = 213
    ENUM[214] = :WORLD_PARAM_NAME_RANDOM ; NUME[:WORLD_PARAM_NAME_RANDOM] = 214
    ENUM[215] = :WORLD_PARAM_NAME_ENTER ; NUME[:WORLD_PARAM_NAME_ENTER] = 215
    ENUM[216] = :WORLD_PARAM_SEED_RANDOM ; NUME[:WORLD_PARAM_SEED_RANDOM] = 216
    ENUM[217] = :WORLD_PARAM_SEED_ENTER ; NUME[:WORLD_PARAM_SEED_ENTER] = 217
    ENUM[218] = :WORLD_PARAM_LOAD ; NUME[:WORLD_PARAM_LOAD] = 218
    ENUM[219] = :WORLD_PARAM_SAVE ; NUME[:WORLD_PARAM_SAVE] = 219
    ENUM[220] = :WORLD_PARAM_DIM_X_UP ; NUME[:WORLD_PARAM_DIM_X_UP] = 220
    ENUM[221] = :WORLD_PARAM_DIM_X_DOWN ; NUME[:WORLD_PARAM_DIM_X_DOWN] = 221
    ENUM[222] = :WORLD_PARAM_DIM_Y_UP ; NUME[:WORLD_PARAM_DIM_Y_UP] = 222
    ENUM[223] = :WORLD_PARAM_DIM_Y_DOWN ; NUME[:WORLD_PARAM_DIM_Y_DOWN] = 223
    ENUM[224] = :WORLD_PARAM_SET ; NUME[:WORLD_PARAM_SET] = 224
    ENUM[225] = :WORLD_PARAM_INCREASE ; NUME[:WORLD_PARAM_INCREASE] = 225
    ENUM[226] = :WORLD_PARAM_DECREASE ; NUME[:WORLD_PARAM_DECREASE] = 226
    ENUM[227] = :WORLD_PARAM_ENTER_VALUE ; NUME[:WORLD_PARAM_ENTER_VALUE] = 227
    ENUM[228] = :WORLD_PARAM_NULLIFY ; NUME[:WORLD_PARAM_NULLIFY] = 228
    ENUM[229] = :WORLD_PARAM_PRESET ; NUME[:WORLD_PARAM_PRESET] = 229
    ENUM[230] = :WORLD_PARAM_REJECT_CONTINUE ; NUME[:WORLD_PARAM_REJECT_CONTINUE] = 230
    ENUM[231] = :WORLD_PARAM_REJECT_ABORT ; NUME[:WORLD_PARAM_REJECT_ABORT] = 231
    ENUM[232] = :WORLD_PARAM_REJECT_ALLOW_THIS ; NUME[:WORLD_PARAM_REJECT_ALLOW_THIS] = 232
    ENUM[233] = :WORLD_PARAM_REJECT_ALLOW_ALL ; NUME[:WORLD_PARAM_REJECT_ALLOW_ALL] = 233
    ENUM[234] = :WORLD_GEN_CONTINUE ; NUME[:WORLD_GEN_CONTINUE] = 234
    ENUM[235] = :WORLD_GEN_USE ; NUME[:WORLD_GEN_USE] = 235
    ENUM[236] = :WORLD_GEN_ABORT ; NUME[:WORLD_GEN_ABORT] = 236
    ENUM[237] = :WORLDGEN_EXPORT_MAP ; NUME[:WORLDGEN_EXPORT_MAP] = 237
    ENUM[238] = :LEGENDS_EXPORT_MAP ; NUME[:LEGENDS_EXPORT_MAP] = 238
    ENUM[239] = :LEGENDS_EXPORT_XML ; NUME[:LEGENDS_EXPORT_XML] = 239
    ENUM[240] = :LEGENDS_EXPORT_DETAILED_MAP ; NUME[:LEGENDS_EXPORT_DETAILED_MAP] = 240
    ENUM[241] = :LEGENDS_TOGGLE_CIVSITE ; NUME[:LEGENDS_TOGGLE_CIVSITE] = 241
    ENUM[242] = :LEGENDS_STRING_FILTER ; NUME[:LEGENDS_STRING_FILTER] = 242
    ENUM[243] = :A_RETURN_TO_ARENA ; NUME[:A_RETURN_TO_ARENA] = 243
    ENUM[244] = :A_MOVE_N ; NUME[:A_MOVE_N] = 244
    ENUM[245] = :A_MOVE_S ; NUME[:A_MOVE_S] = 245
    ENUM[246] = :A_MOVE_E ; NUME[:A_MOVE_E] = 246
    ENUM[247] = :A_MOVE_W ; NUME[:A_MOVE_W] = 247
    ENUM[248] = :A_MOVE_NW ; NUME[:A_MOVE_NW] = 248
    ENUM[249] = :A_MOVE_NE ; NUME[:A_MOVE_NE] = 249
    ENUM[250] = :A_MOVE_SW ; NUME[:A_MOVE_SW] = 250
    ENUM[251] = :A_MOVE_SE ; NUME[:A_MOVE_SE] = 251
    ENUM[252] = :A_MOVE_SAME_SQUARE ; NUME[:A_MOVE_SAME_SQUARE] = 252
    ENUM[253] = :A_CARE_MOVE_N ; NUME[:A_CARE_MOVE_N] = 253
    ENUM[254] = :A_CARE_MOVE_S ; NUME[:A_CARE_MOVE_S] = 254
    ENUM[255] = :A_CARE_MOVE_E ; NUME[:A_CARE_MOVE_E] = 255
    ENUM[256] = :A_CARE_MOVE_W ; NUME[:A_CARE_MOVE_W] = 256
    ENUM[257] = :A_CARE_MOVE_NW ; NUME[:A_CARE_MOVE_NW] = 257
    ENUM[258] = :A_CARE_MOVE_NE ; NUME[:A_CARE_MOVE_NE] = 258
    ENUM[259] = :A_CARE_MOVE_SW ; NUME[:A_CARE_MOVE_SW] = 259
    ENUM[260] = :A_CARE_MOVE_SE ; NUME[:A_CARE_MOVE_SE] = 260
    ENUM[261] = :A_CARE_MOVE_UPDOWN ; NUME[:A_CARE_MOVE_UPDOWN] = 261
    ENUM[262] = :A_MOVE_N_UP ; NUME[:A_MOVE_N_UP] = 262
    ENUM[263] = :A_MOVE_S_UP ; NUME[:A_MOVE_S_UP] = 263
    ENUM[264] = :A_MOVE_E_UP ; NUME[:A_MOVE_E_UP] = 264
    ENUM[265] = :A_MOVE_W_UP ; NUME[:A_MOVE_W_UP] = 265
    ENUM[266] = :A_MOVE_NW_UP ; NUME[:A_MOVE_NW_UP] = 266
    ENUM[267] = :A_MOVE_NE_UP ; NUME[:A_MOVE_NE_UP] = 267
    ENUM[268] = :A_MOVE_SW_UP ; NUME[:A_MOVE_SW_UP] = 268
    ENUM[269] = :A_MOVE_SE_UP ; NUME[:A_MOVE_SE_UP] = 269
    ENUM[270] = :A_MOVE_UP ; NUME[:A_MOVE_UP] = 270
    ENUM[271] = :A_MOVE_N_DOWN ; NUME[:A_MOVE_N_DOWN] = 271
    ENUM[272] = :A_MOVE_S_DOWN ; NUME[:A_MOVE_S_DOWN] = 272
    ENUM[273] = :A_MOVE_E_DOWN ; NUME[:A_MOVE_E_DOWN] = 273
    ENUM[274] = :A_MOVE_W_DOWN ; NUME[:A_MOVE_W_DOWN] = 274
    ENUM[275] = :A_MOVE_NW_DOWN ; NUME[:A_MOVE_NW_DOWN] = 275
    ENUM[276] = :A_MOVE_NE_DOWN ; NUME[:A_MOVE_NE_DOWN] = 276
    ENUM[277] = :A_MOVE_SW_DOWN ; NUME[:A_MOVE_SW_DOWN] = 277
    ENUM[278] = :A_MOVE_SE_DOWN ; NUME[:A_MOVE_SE_DOWN] = 278
    ENUM[279] = :A_MOVE_DOWN ; NUME[:A_MOVE_DOWN] = 279
    ENUM[280] = :A_MOVE_UP_AUX ; NUME[:A_MOVE_UP_AUX] = 280
    ENUM[281] = :A_MOVE_DOWN_AUX ; NUME[:A_MOVE_DOWN_AUX] = 281
    ENUM[282] = :A_COMBAT_ATTACK ; NUME[:A_COMBAT_ATTACK] = 282
    ENUM[283] = :A_COMBAT_DODGE ; NUME[:A_COMBAT_DODGE] = 283
    ENUM[284] = :A_COMBAT_CHARGEDEF ; NUME[:A_COMBAT_CHARGEDEF] = 284
    ENUM[285] = :A_STATUS ; NUME[:A_STATUS] = 285
    ENUM[286] = :A_STATUS_WRESTLE ; NUME[:A_STATUS_WRESTLE] = 286
    ENUM[287] = :A_STATUS_CUSTOMIZE ; NUME[:A_STATUS_CUSTOMIZE] = 287
    ENUM[288] = :A_STATUS_KILLS ; NUME[:A_STATUS_KILLS] = 288
    ENUM[289] = :A_STATUS_HEALTH ; NUME[:A_STATUS_HEALTH] = 289
    ENUM[290] = :A_STATUS_ATT_SKILL ; NUME[:A_STATUS_ATT_SKILL] = 290
    ENUM[291] = :A_STATUS_DESC ; NUME[:A_STATUS_DESC] = 291
    ENUM[292] = :A_CLEAR_ANNOUNCEMENTS ; NUME[:A_CLEAR_ANNOUNCEMENTS] = 292
    ENUM[293] = :A_SLEEP ; NUME[:A_SLEEP] = 293
    ENUM[294] = :A_SLEEP_SLEEP ; NUME[:A_SLEEP_SLEEP] = 294
    ENUM[295] = :A_SLEEP_WAIT ; NUME[:A_SLEEP_WAIT] = 295
    ENUM[296] = :A_SLEEP_DAWN ; NUME[:A_SLEEP_DAWN] = 296
    ENUM[297] = :A_WAIT ; NUME[:A_WAIT] = 297
    ENUM[298] = :A_SHORT_WAIT ; NUME[:A_SHORT_WAIT] = 298
    ENUM[299] = :A_ATTACK ; NUME[:A_ATTACK] = 299
    ENUM[300] = :A_ATTACK_CONFIRM ; NUME[:A_ATTACK_CONFIRM] = 300
    ENUM[301] = :QUICK_ATTACK ; NUME[:QUICK_ATTACK] = 301
    ENUM[302] = :HEAVY_ATTACK ; NUME[:HEAVY_ATTACK] = 302
    ENUM[303] = :WILD_ATTACK ; NUME[:WILD_ATTACK] = 303
    ENUM[304] = :PRECISE_ATTACK ; NUME[:PRECISE_ATTACK] = 304
    ENUM[305] = :CHARGE_ATTACK ; NUME[:CHARGE_ATTACK] = 305
    ENUM[306] = :MULTI_ATTACK ; NUME[:MULTI_ATTACK] = 306
    ENUM[307] = :A_LOOK ; NUME[:A_LOOK] = 307
    ENUM[308] = :A_SEARCH ; NUME[:A_SEARCH] = 308
    ENUM[309] = :A_ODOR ; NUME[:A_ODOR] = 309
    ENUM[310] = :A_DISPLAY_ODOR ; NUME[:A_DISPLAY_ODOR] = 310
    ENUM[311] = :A_YIELD ; NUME[:A_YIELD] = 311
    ENUM[312] = :A_DISPLAY_TRACKS ; NUME[:A_DISPLAY_TRACKS] = 312
    ENUM[313] = :A_FRESHEST_TRACK ; NUME[:A_FRESHEST_TRACK] = 313
    ENUM[314] = :A_INV_DRAW_WEAPON ; NUME[:A_INV_DRAW_WEAPON] = 314
    ENUM[315] = :A_JUMP ; NUME[:A_JUMP] = 315
    ENUM[316] = :A_HOLD ; NUME[:A_HOLD] = 316
    ENUM[317] = :A_TALK ; NUME[:A_TALK] = 317
    ENUM[318] = :A_INTERACT ; NUME[:A_INTERACT] = 318
    ENUM[319] = :A_ACTION ; NUME[:A_ACTION] = 319
    ENUM[320] = :A_ACTION_CREATE ; NUME[:A_ACTION_CREATE] = 320
    ENUM[321] = :A_ACTION_BUTCHER ; NUME[:A_ACTION_BUTCHER] = 321
    ENUM[322] = :A_ACTION_ABILITY ; NUME[:A_ACTION_ABILITY] = 322
    ENUM[323] = :A_ACTION_POWER ; NUME[:A_ACTION_POWER] = 323
    ENUM[324] = :A_INV_LOOK ; NUME[:A_INV_LOOK] = 324
    ENUM[325] = :A_INV_REMOVE ; NUME[:A_INV_REMOVE] = 325
    ENUM[326] = :A_INV_WEAR ; NUME[:A_INV_WEAR] = 326
    ENUM[327] = :A_INV_EATDRINK ; NUME[:A_INV_EATDRINK] = 327
    ENUM[328] = :A_INV_PUTIN ; NUME[:A_INV_PUTIN] = 328
    ENUM[329] = :A_INV_DROP ; NUME[:A_INV_DROP] = 329
    ENUM[330] = :A_GROUND ; NUME[:A_GROUND] = 330
    ENUM[331] = :A_THROW ; NUME[:A_THROW] = 331
    ENUM[332] = :A_SHOOT ; NUME[:A_SHOOT] = 332
    ENUM[333] = :A_ANNOUNCEMENTS ; NUME[:A_ANNOUNCEMENTS] = 333
    ENUM[334] = :A_COMBAT ; NUME[:A_COMBAT] = 334
    ENUM[335] = :A_MOVEMENT ; NUME[:A_MOVEMENT] = 335
    ENUM[336] = :A_MOVEMENT_SWIM ; NUME[:A_MOVEMENT_SWIM] = 336
    ENUM[337] = :A_SNEAK ; NUME[:A_SNEAK] = 337
    ENUM[338] = :A_SPEED_SNEAK ; NUME[:A_SPEED_SNEAK] = 338
    ENUM[339] = :A_CENTER ; NUME[:A_CENTER] = 339
    ENUM[340] = :A_COMPANIONS ; NUME[:A_COMPANIONS] = 340
    ENUM[341] = :A_BUILDING ; NUME[:A_BUILDING] = 341
    ENUM[342] = :A_TRAVEL ; NUME[:A_TRAVEL] = 342
    ENUM[343] = :A_TRAVEL_SLEEP ; NUME[:A_TRAVEL_SLEEP] = 343
    ENUM[344] = :A_TRAVEL_MAP ; NUME[:A_TRAVEL_MAP] = 344
    ENUM[345] = :A_TRAVEL_HIDE_INSTRUCTIONS ; NUME[:A_TRAVEL_HIDE_INSTRUCTIONS] = 345
    ENUM[346] = :A_DATE ; NUME[:A_DATE] = 346
    ENUM[347] = :A_WEATHER ; NUME[:A_WEATHER] = 347
    ENUM[348] = :A_TEMPERATURE ; NUME[:A_TEMPERATURE] = 348
    ENUM[349] = :A_STANCE ; NUME[:A_STANCE] = 349
    ENUM[350] = :A_ENTER_NAME ; NUME[:A_ENTER_NAME] = 350
    ENUM[351] = :A_CUST_NAME ; NUME[:A_CUST_NAME] = 351
    ENUM[352] = :A_RANDOM_NAME ; NUME[:A_RANDOM_NAME] = 352
    ENUM[353] = :A_CHANGE_GENDER ; NUME[:A_CHANGE_GENDER] = 353
    ENUM[354] = :A_END_TRAVEL ; NUME[:A_END_TRAVEL] = 354
    ENUM[355] = :A_TRAVEL_CLOUDS ; NUME[:A_TRAVEL_CLOUDS] = 355
    ENUM[356] = :A_LOG ; NUME[:A_LOG] = 356
    ENUM[357] = :A_TRAVEL_LOG ; NUME[:A_TRAVEL_LOG] = 357
    ENUM[358] = :A_LOG_TASKS ; NUME[:A_LOG_TASKS] = 358
    ENUM[359] = :A_LOG_ENTITIES ; NUME[:A_LOG_ENTITIES] = 359
    ENUM[360] = :A_LOG_SITES ; NUME[:A_LOG_SITES] = 360
    ENUM[361] = :A_LOG_SUBREGIONS ; NUME[:A_LOG_SUBREGIONS] = 361
    ENUM[362] = :A_LOG_FEATURE_LAYERS ; NUME[:A_LOG_FEATURE_LAYERS] = 362
    ENUM[363] = :A_LOG_PEOPLE ; NUME[:A_LOG_PEOPLE] = 363
    ENUM[364] = :A_LOG_AGREEMENTS ; NUME[:A_LOG_AGREEMENTS] = 364
    ENUM[365] = :A_LOG_EVENTS ; NUME[:A_LOG_EVENTS] = 365
    ENUM[366] = :A_LOG_BESTIARY ; NUME[:A_LOG_BESTIARY] = 366
    ENUM[367] = :A_LOG_FILTER ; NUME[:A_LOG_FILTER] = 367
    ENUM[368] = :A_LOG_ZOOM_CURRENT_LOCATION ; NUME[:A_LOG_ZOOM_CURRENT_LOCATION] = 368
    ENUM[369] = :A_LOG_ZOOM_SELECTED ; NUME[:A_LOG_ZOOM_SELECTED] = 369
    ENUM[370] = :A_LOG_LINE ; NUME[:A_LOG_LINE] = 370
    ENUM[371] = :A_LOG_MAP ; NUME[:A_LOG_MAP] = 371
    ENUM[372] = :A_BARTER_VIEW ; NUME[:A_BARTER_VIEW] = 372
    ENUM[373] = :A_BARTER_CURRENCY_1 ; NUME[:A_BARTER_CURRENCY_1] = 373
    ENUM[374] = :A_BARTER_CURRENCY_2 ; NUME[:A_BARTER_CURRENCY_2] = 374
    ENUM[375] = :A_BARTER_TRADE ; NUME[:A_BARTER_TRADE] = 375
    ENUM[376] = :SETUP_EMBARK ; NUME[:SETUP_EMBARK] = 376
    ENUM[377] = :SETUP_NAME_FORT ; NUME[:SETUP_NAME_FORT] = 377
    ENUM[378] = :SETUP_NAME_GROUP ; NUME[:SETUP_NAME_GROUP] = 378
    ENUM[379] = :SETUP_RECLAIM ; NUME[:SETUP_RECLAIM] = 379
    ENUM[380] = :SETUP_FIND ; NUME[:SETUP_FIND] = 380
    ENUM[381] = :SETUP_NOTES ; NUME[:SETUP_NOTES] = 381
    ENUM[382] = :SETUP_NOTES_TAKE_NOTES ; NUME[:SETUP_NOTES_TAKE_NOTES] = 382
    ENUM[383] = :SETUP_NOTES_DELETE_NOTE ; NUME[:SETUP_NOTES_DELETE_NOTE] = 383
    ENUM[384] = :SETUP_NOTES_CHANGE_SYMBOL_SELECTION ; NUME[:SETUP_NOTES_CHANGE_SYMBOL_SELECTION] = 384
    ENUM[385] = :SETUP_NOTES_ADOPT_SYMBOL ; NUME[:SETUP_NOTES_ADOPT_SYMBOL] = 385
    ENUM[386] = :SETUP_LOCAL_Y_UP ; NUME[:SETUP_LOCAL_Y_UP] = 386
    ENUM[387] = :SETUP_LOCAL_Y_DOWN ; NUME[:SETUP_LOCAL_Y_DOWN] = 387
    ENUM[388] = :SETUP_LOCAL_X_UP ; NUME[:SETUP_LOCAL_X_UP] = 388
    ENUM[389] = :SETUP_LOCAL_X_DOWN ; NUME[:SETUP_LOCAL_X_DOWN] = 389
    ENUM[390] = :SETUP_LOCAL_Y_MUP ; NUME[:SETUP_LOCAL_Y_MUP] = 390
    ENUM[391] = :SETUP_LOCAL_Y_MDOWN ; NUME[:SETUP_LOCAL_Y_MDOWN] = 391
    ENUM[392] = :SETUP_LOCAL_X_MUP ; NUME[:SETUP_LOCAL_X_MUP] = 392
    ENUM[393] = :SETUP_LOCAL_X_MDOWN ; NUME[:SETUP_LOCAL_X_MDOWN] = 393
    ENUM[394] = :SETUP_BIOME_1 ; NUME[:SETUP_BIOME_1] = 394
    ENUM[395] = :SETUP_BIOME_2 ; NUME[:SETUP_BIOME_2] = 395
    ENUM[396] = :SETUP_BIOME_3 ; NUME[:SETUP_BIOME_3] = 396
    ENUM[397] = :SETUP_BIOME_4 ; NUME[:SETUP_BIOME_4] = 397
    ENUM[398] = :SETUP_BIOME_5 ; NUME[:SETUP_BIOME_5] = 398
    ENUM[399] = :SETUP_BIOME_6 ; NUME[:SETUP_BIOME_6] = 399
    ENUM[400] = :SETUP_BIOME_7 ; NUME[:SETUP_BIOME_7] = 400
    ENUM[401] = :SETUP_BIOME_8 ; NUME[:SETUP_BIOME_8] = 401
    ENUM[402] = :SETUP_BIOME_9 ; NUME[:SETUP_BIOME_9] = 402
    ENUM[403] = :CHOOSE_NAME_RANDOM ; NUME[:CHOOSE_NAME_RANDOM] = 403
    ENUM[404] = :CHOOSE_NAME_CLEAR ; NUME[:CHOOSE_NAME_CLEAR] = 404
    ENUM[405] = :CHOOSE_NAME_TYPE ; NUME[:CHOOSE_NAME_TYPE] = 405
    ENUM[406] = :SETUPGAME_NEW ; NUME[:SETUPGAME_NEW] = 406
    ENUM[407] = :SETUPGAME_VIEW ; NUME[:SETUPGAME_VIEW] = 407
    ENUM[408] = :SETUPGAME_CUSTOMIZE_UNIT ; NUME[:SETUPGAME_CUSTOMIZE_UNIT] = 408
    ENUM[409] = :SETUPGAME_SAVE_PROFILE ; NUME[:SETUPGAME_SAVE_PROFILE] = 409
    ENUM[410] = :SETUPGAME_SAVE_PROFILE_ABORT ; NUME[:SETUPGAME_SAVE_PROFILE_ABORT] = 410
    ENUM[411] = :SETUPGAME_SAVE_PROFILE_GO ; NUME[:SETUPGAME_SAVE_PROFILE_GO] = 411
    ENUM[412] = :SETUPGAME_VIEW_PROFILE_PROBLEMS ; NUME[:SETUPGAME_VIEW_PROFILE_PROBLEMS] = 412
    ENUM[413] = :BUILDJOB_ADD ; NUME[:BUILDJOB_ADD] = 413
    ENUM[414] = :BUILDJOB_CANCEL ; NUME[:BUILDJOB_CANCEL] = 414
    ENUM[415] = :BUILDJOB_PROMOTE ; NUME[:BUILDJOB_PROMOTE] = 415
    ENUM[416] = :BUILDJOB_NOW ; NUME[:BUILDJOB_NOW] = 416
    ENUM[417] = :BUILDJOB_REPEAT ; NUME[:BUILDJOB_REPEAT] = 417
    ENUM[418] = :BUILDJOB_SUSPEND ; NUME[:BUILDJOB_SUSPEND] = 418
    ENUM[419] = :BUILDJOB_WORKSHOP_PROFILE ; NUME[:BUILDJOB_WORKSHOP_PROFILE] = 419
    ENUM[420] = :BUILDJOB_WELL_FREE ; NUME[:BUILDJOB_WELL_FREE] = 420
    ENUM[421] = :BUILDJOB_WELL_SIZE ; NUME[:BUILDJOB_WELL_SIZE] = 421
    ENUM[422] = :BUILDJOB_TARGET_FREE ; NUME[:BUILDJOB_TARGET_FREE] = 422
    ENUM[423] = :BUILDJOB_TARGET_SIZE ; NUME[:BUILDJOB_TARGET_SIZE] = 423
    ENUM[424] = :BUILDJOB_TARGET_DOWN ; NUME[:BUILDJOB_TARGET_DOWN] = 424
    ENUM[425] = :BUILDJOB_TARGET_UP ; NUME[:BUILDJOB_TARGET_UP] = 425
    ENUM[426] = :BUILDJOB_TARGET_RIGHT ; NUME[:BUILDJOB_TARGET_RIGHT] = 426
    ENUM[427] = :BUILDJOB_TARGET_LEFT ; NUME[:BUILDJOB_TARGET_LEFT] = 427
    ENUM[428] = :BUILDJOB_STATUE_ASSIGN ; NUME[:BUILDJOB_STATUE_ASSIGN] = 428
    ENUM[429] = :BUILDJOB_STATUE_FREE ; NUME[:BUILDJOB_STATUE_FREE] = 429
    ENUM[430] = :BUILDJOB_STATUE_SIZE ; NUME[:BUILDJOB_STATUE_SIZE] = 430
    ENUM[431] = :BUILDJOB_CAGE_JUSTICE ; NUME[:BUILDJOB_CAGE_JUSTICE] = 431
    ENUM[432] = :BUILDJOB_CAGE_FREE ; NUME[:BUILDJOB_CAGE_FREE] = 432
    ENUM[433] = :BUILDJOB_CAGE_SIZE ; NUME[:BUILDJOB_CAGE_SIZE] = 433
    ENUM[434] = :BUILDJOB_CAGE_ASSIGN_OCC ; NUME[:BUILDJOB_CAGE_ASSIGN_OCC] = 434
    ENUM[435] = :BUILDJOB_CAGE_WATER ; NUME[:BUILDJOB_CAGE_WATER] = 435
    ENUM[436] = :BUILDJOB_CAGE_ASSIGN ; NUME[:BUILDJOB_CAGE_ASSIGN] = 436
    ENUM[437] = :BUILDJOB_CHAIN_ASSIGN_OCC ; NUME[:BUILDJOB_CHAIN_ASSIGN_OCC] = 437
    ENUM[438] = :BUILDJOB_CHAIN_JUSTICE ; NUME[:BUILDJOB_CHAIN_JUSTICE] = 438
    ENUM[439] = :BUILDJOB_CHAIN_ASSIGN ; NUME[:BUILDJOB_CHAIN_ASSIGN] = 439
    ENUM[440] = :BUILDJOB_CHAIN_FREE ; NUME[:BUILDJOB_CHAIN_FREE] = 440
    ENUM[441] = :BUILDJOB_CHAIN_SIZE ; NUME[:BUILDJOB_CHAIN_SIZE] = 441
    ENUM[442] = :BUILDJOB_SIEGE_FIRING ; NUME[:BUILDJOB_SIEGE_FIRING] = 442
    ENUM[443] = :BUILDJOB_SIEGE_ORIENT ; NUME[:BUILDJOB_SIEGE_ORIENT] = 443
    ENUM[444] = :BUILDJOB_DOOR_INTERNAL ; NUME[:BUILDJOB_DOOR_INTERNAL] = 444
    ENUM[445] = :BUILDJOB_DOOR_LOCK ; NUME[:BUILDJOB_DOOR_LOCK] = 445
    ENUM[446] = :BUILDJOB_DOOR_AJAR ; NUME[:BUILDJOB_DOOR_AJAR] = 446
    ENUM[447] = :BUILDJOB_COFFIN_ASSIGN ; NUME[:BUILDJOB_COFFIN_ASSIGN] = 447
    ENUM[448] = :BUILDJOB_COFFIN_FREE ; NUME[:BUILDJOB_COFFIN_FREE] = 448
    ENUM[449] = :BUILDJOB_COFFIN_SIZE ; NUME[:BUILDJOB_COFFIN_SIZE] = 449
    ENUM[450] = :BUILDJOB_COFFIN_BURIAL ; NUME[:BUILDJOB_COFFIN_BURIAL] = 450
    ENUM[451] = :BUILDJOB_COFFIN_CIV ; NUME[:BUILDJOB_COFFIN_CIV] = 451
    ENUM[452] = :BUILDJOB_COFFIN_PET ; NUME[:BUILDJOB_COFFIN_PET] = 452
    ENUM[453] = :BUILDJOB_CHAIR_ASSIGN ; NUME[:BUILDJOB_CHAIR_ASSIGN] = 453
    ENUM[454] = :BUILDJOB_CHAIR_FREE ; NUME[:BUILDJOB_CHAIR_FREE] = 454
    ENUM[455] = :BUILDJOB_CHAIR_SIZE ; NUME[:BUILDJOB_CHAIR_SIZE] = 455
    ENUM[456] = :BUILDJOB_TABLE_ASSIGN ; NUME[:BUILDJOB_TABLE_ASSIGN] = 456
    ENUM[457] = :BUILDJOB_TABLE_HALL ; NUME[:BUILDJOB_TABLE_HALL] = 457
    ENUM[458] = :BUILDJOB_TABLE_FREE ; NUME[:BUILDJOB_TABLE_FREE] = 458
    ENUM[459] = :BUILDJOB_TABLE_SIZE ; NUME[:BUILDJOB_TABLE_SIZE] = 459
    ENUM[460] = :BUILDJOB_BED_ASSIGN ; NUME[:BUILDJOB_BED_ASSIGN] = 460
    ENUM[461] = :BUILDJOB_BED_FREE ; NUME[:BUILDJOB_BED_FREE] = 461
    ENUM[462] = :BUILDJOB_BED_BARRACKS ; NUME[:BUILDJOB_BED_BARRACKS] = 462
    ENUM[463] = :BUILDJOB_BED_DORMITORY ; NUME[:BUILDJOB_BED_DORMITORY] = 463
    ENUM[464] = :BUILDJOB_BED_RENT ; NUME[:BUILDJOB_BED_RENT] = 464
    ENUM[465] = :BUILDJOB_BED_SIZE ; NUME[:BUILDJOB_BED_SIZE] = 465
    ENUM[466] = :BUILDJOB_BED_NAME ; NUME[:BUILDJOB_BED_NAME] = 466
    ENUM[467] = :BUILDJOB_BED_SLEEP ; NUME[:BUILDJOB_BED_SLEEP] = 467
    ENUM[468] = :BUILDJOB_BED_TRAIN ; NUME[:BUILDJOB_BED_TRAIN] = 468
    ENUM[469] = :BUILDJOB_BED_INDIV_EQ ; NUME[:BUILDJOB_BED_INDIV_EQ] = 469
    ENUM[470] = :BUILDJOB_BED_SQUAD_EQ ; NUME[:BUILDJOB_BED_SQUAD_EQ] = 470
    ENUM[471] = :BUILDJOB_BED_POSITION ; NUME[:BUILDJOB_BED_POSITION] = 471
    ENUM[472] = :BUILDJOB_DEPOT_BRING ; NUME[:BUILDJOB_DEPOT_BRING] = 472
    ENUM[473] = :BUILDJOB_DEPOT_TRADE ; NUME[:BUILDJOB_DEPOT_TRADE] = 473
    ENUM[474] = :BUILDJOB_DEPOT_REQUEST_TRADER ; NUME[:BUILDJOB_DEPOT_REQUEST_TRADER] = 474
    ENUM[475] = :BUILDJOB_DEPOT_BROKER_ONLY ; NUME[:BUILDJOB_DEPOT_BROKER_ONLY] = 475
    ENUM[476] = :BUILDJOB_ANIMALTRAP_BAIT_NONE ; NUME[:BUILDJOB_ANIMALTRAP_BAIT_NONE] = 476
    ENUM[477] = :BUILDJOB_ANIMALTRAP_BAIT_MEAT ; NUME[:BUILDJOB_ANIMALTRAP_BAIT_MEAT] = 477
    ENUM[478] = :BUILDJOB_ANIMALTRAP_BAIT_FISH ; NUME[:BUILDJOB_ANIMALTRAP_BAIT_FISH] = 478
    ENUM[479] = :BUILDJOB_ANIMALTRAP_BAIT_GEM ; NUME[:BUILDJOB_ANIMALTRAP_BAIT_GEM] = 479
    ENUM[480] = :BUILDJOB_FARM_FALLOW ; NUME[:BUILDJOB_FARM_FALLOW] = 480
    ENUM[481] = :BUILDJOB_FARM_FERTILIZE ; NUME[:BUILDJOB_FARM_FERTILIZE] = 481
    ENUM[482] = :BUILDJOB_FARM_SEASFERT ; NUME[:BUILDJOB_FARM_SEASFERT] = 482
    ENUM[483] = :BUILDJOB_FARM_SPRING ; NUME[:BUILDJOB_FARM_SPRING] = 483
    ENUM[484] = :BUILDJOB_FARM_SUMMER ; NUME[:BUILDJOB_FARM_SUMMER] = 484
    ENUM[485] = :BUILDJOB_FARM_AUTUMN ; NUME[:BUILDJOB_FARM_AUTUMN] = 485
    ENUM[486] = :BUILDJOB_FARM_WINTER ; NUME[:BUILDJOB_FARM_WINTER] = 486
    ENUM[487] = :BUILDJOB_RACK_MAT_BONE ; NUME[:BUILDJOB_RACK_MAT_BONE] = 487
    ENUM[488] = :BUILDJOB_RACK_MAT_BRONZE ; NUME[:BUILDJOB_RACK_MAT_BRONZE] = 488
    ENUM[489] = :BUILDJOB_RACK_MAT_COPPER ; NUME[:BUILDJOB_RACK_MAT_COPPER] = 489
    ENUM[490] = :BUILDJOB_RACK_MAT_IRON ; NUME[:BUILDJOB_RACK_MAT_IRON] = 490
    ENUM[491] = :BUILDJOB_RACK_MAT_STEEL ; NUME[:BUILDJOB_RACK_MAT_STEEL] = 491
    ENUM[492] = :BUILDJOB_RACK_MAT_WOOD ; NUME[:BUILDJOB_RACK_MAT_WOOD] = 492
    ENUM[493] = :BUILDJOB_RACK_MAT_METAL ; NUME[:BUILDJOB_RACK_MAT_METAL] = 493
    ENUM[494] = :BUILDJOB_STAND_MAT_BONE ; NUME[:BUILDJOB_STAND_MAT_BONE] = 494
    ENUM[495] = :BUILDJOB_STAND_MAT_LEATHER ; NUME[:BUILDJOB_STAND_MAT_LEATHER] = 495
    ENUM[496] = :BUILDJOB_STAND_MAT_COPPER ; NUME[:BUILDJOB_STAND_MAT_COPPER] = 496
    ENUM[497] = :BUILDJOB_STAND_MAT_BRONZE ; NUME[:BUILDJOB_STAND_MAT_BRONZE] = 497
    ENUM[498] = :BUILDJOB_STAND_MAT_STEEL ; NUME[:BUILDJOB_STAND_MAT_STEEL] = 498
    ENUM[499] = :BUILDJOB_STAND_MAT_IRON ; NUME[:BUILDJOB_STAND_MAT_IRON] = 499
    ENUM[500] = :BUILDJOB_STAND_MAT_WOOD ; NUME[:BUILDJOB_STAND_MAT_WOOD] = 500
    ENUM[501] = :BUILDJOB_STAND_MAT_METAL ; NUME[:BUILDJOB_STAND_MAT_METAL] = 501
    ENUM[502] = :BUILDJOB_RACKSTAND_ASSIGN ; NUME[:BUILDJOB_RACKSTAND_ASSIGN] = 502
    ENUM[503] = :BUILDJOB_RACKSTAND_FREE ; NUME[:BUILDJOB_RACKSTAND_FREE] = 503
    ENUM[504] = :BUILDJOB_RACKSTAND_SIZE ; NUME[:BUILDJOB_RACKSTAND_SIZE] = 504
    ENUM[505] = :BUILDJOB_RACKSTAND_ITEM ; NUME[:BUILDJOB_RACKSTAND_ITEM] = 505
    ENUM[506] = :BUILDJOB_RACKSTAND_MAT ; NUME[:BUILDJOB_RACKSTAND_MAT] = 506
    ENUM[507] = :BUILDJOB_RACKSTAND_DEFAULTS1 ; NUME[:BUILDJOB_RACKSTAND_DEFAULTS1] = 507
    ENUM[508] = :BUILDJOB_RACKSTAND_KILL1 ; NUME[:BUILDJOB_RACKSTAND_KILL1] = 508
    ENUM[509] = :BUILDJOB_RACKSTAND_DEFAULTS2 ; NUME[:BUILDJOB_RACKSTAND_DEFAULTS2] = 509
    ENUM[510] = :BUILDJOB_RACKSTAND_KILL2 ; NUME[:BUILDJOB_RACKSTAND_KILL2] = 510
    ENUM[511] = :HOTKEY_BUILDING_ARMORSTAND ; NUME[:HOTKEY_BUILDING_ARMORSTAND] = 511
    ENUM[512] = :HOTKEY_BUILDING_BED ; NUME[:HOTKEY_BUILDING_BED] = 512
    ENUM[513] = :HOTKEY_BUILDING_CHAIR ; NUME[:HOTKEY_BUILDING_CHAIR] = 513
    ENUM[514] = :HOTKEY_BUILDING_COFFIN ; NUME[:HOTKEY_BUILDING_COFFIN] = 514
    ENUM[515] = :HOTKEY_BUILDING_DOOR ; NUME[:HOTKEY_BUILDING_DOOR] = 515
    ENUM[516] = :HOTKEY_BUILDING_FLOODGATE ; NUME[:HOTKEY_BUILDING_FLOODGATE] = 516
    ENUM[517] = :HOTKEY_BUILDING_HATCH ; NUME[:HOTKEY_BUILDING_HATCH] = 517
    ENUM[518] = :HOTKEY_BUILDING_GRATE_WALL ; NUME[:HOTKEY_BUILDING_GRATE_WALL] = 518
    ENUM[519] = :HOTKEY_BUILDING_GRATE_FLOOR ; NUME[:HOTKEY_BUILDING_GRATE_FLOOR] = 519
    ENUM[520] = :HOTKEY_BUILDING_BARS_VERTICAL ; NUME[:HOTKEY_BUILDING_BARS_VERTICAL] = 520
    ENUM[521] = :HOTKEY_BUILDING_BARS_FLOOR ; NUME[:HOTKEY_BUILDING_BARS_FLOOR] = 521
    ENUM[522] = :HOTKEY_BUILDING_CABINET ; NUME[:HOTKEY_BUILDING_CABINET] = 522
    ENUM[523] = :HOTKEY_BUILDING_BOX ; NUME[:HOTKEY_BUILDING_BOX] = 523
    ENUM[524] = :HOTKEY_BUILDING_KENNEL ; NUME[:HOTKEY_BUILDING_KENNEL] = 524
    ENUM[525] = :HOTKEY_BUILDING_FARMPLOT ; NUME[:HOTKEY_BUILDING_FARMPLOT] = 525
    ENUM[526] = :HOTKEY_BUILDING_WEAPONRACK ; NUME[:HOTKEY_BUILDING_WEAPONRACK] = 526
    ENUM[527] = :HOTKEY_BUILDING_STATUE ; NUME[:HOTKEY_BUILDING_STATUE] = 527
    ENUM[528] = :HOTKEY_BUILDING_TABLE ; NUME[:HOTKEY_BUILDING_TABLE] = 528
    ENUM[529] = :HOTKEY_BUILDING_ROAD_DIRT ; NUME[:HOTKEY_BUILDING_ROAD_DIRT] = 529
    ENUM[530] = :HOTKEY_BUILDING_ROAD_PAVED ; NUME[:HOTKEY_BUILDING_ROAD_PAVED] = 530
    ENUM[531] = :HOTKEY_BUILDING_BRIDGE ; NUME[:HOTKEY_BUILDING_BRIDGE] = 531
    ENUM[532] = :HOTKEY_BUILDING_WELL ; NUME[:HOTKEY_BUILDING_WELL] = 532
    ENUM[533] = :HOTKEY_BUILDING_SIEGEENGINE ; NUME[:HOTKEY_BUILDING_SIEGEENGINE] = 533
    ENUM[534] = :HOTKEY_BUILDING_WORKSHOP ; NUME[:HOTKEY_BUILDING_WORKSHOP] = 534
    ENUM[535] = :HOTKEY_BUILDING_FURNACE ; NUME[:HOTKEY_BUILDING_FURNACE] = 535
    ENUM[536] = :HOTKEY_BUILDING_WINDOW_GLASS ; NUME[:HOTKEY_BUILDING_WINDOW_GLASS] = 536
    ENUM[537] = :HOTKEY_BUILDING_WINDOW_GEM ; NUME[:HOTKEY_BUILDING_WINDOW_GEM] = 537
    ENUM[538] = :HOTKEY_BUILDING_SHOP ; NUME[:HOTKEY_BUILDING_SHOP] = 538
    ENUM[539] = :HOTKEY_BUILDING_ANIMALTRAP ; NUME[:HOTKEY_BUILDING_ANIMALTRAP] = 539
    ENUM[540] = :HOTKEY_BUILDING_CHAIN ; NUME[:HOTKEY_BUILDING_CHAIN] = 540
    ENUM[541] = :HOTKEY_BUILDING_CAGE ; NUME[:HOTKEY_BUILDING_CAGE] = 541
    ENUM[542] = :HOTKEY_BUILDING_TRADEDEPOT ; NUME[:HOTKEY_BUILDING_TRADEDEPOT] = 542
    ENUM[543] = :HOTKEY_BUILDING_TRAP ; NUME[:HOTKEY_BUILDING_TRAP] = 543
    ENUM[544] = :HOTKEY_BUILDING_MACHINE ; NUME[:HOTKEY_BUILDING_MACHINE] = 544
    ENUM[545] = :HOTKEY_BUILDING_SUPPORT ; NUME[:HOTKEY_BUILDING_SUPPORT] = 545
    ENUM[546] = :HOTKEY_BUILDING_ARCHERYTARGET ; NUME[:HOTKEY_BUILDING_ARCHERYTARGET] = 546
    ENUM[547] = :HOTKEY_BUILDING_TRACTION_BENCH ; NUME[:HOTKEY_BUILDING_TRACTION_BENCH] = 547
    ENUM[548] = :HOTKEY_BUILDING_SLAB ; NUME[:HOTKEY_BUILDING_SLAB] = 548
    ENUM[549] = :HOTKEY_BUILDING_NEST_BOX ; NUME[:HOTKEY_BUILDING_NEST_BOX] = 549
    ENUM[550] = :HOTKEY_BUILDING_HIVE ; NUME[:HOTKEY_BUILDING_HIVE] = 550
    ENUM[551] = :HOTKEY_BUILDING_MACHINE_SCREW_PUMP ; NUME[:HOTKEY_BUILDING_MACHINE_SCREW_PUMP] = 551
    ENUM[552] = :HOTKEY_BUILDING_MACHINE_WATER_WHEEL ; NUME[:HOTKEY_BUILDING_MACHINE_WATER_WHEEL] = 552
    ENUM[553] = :HOTKEY_BUILDING_MACHINE_WINDMILL ; NUME[:HOTKEY_BUILDING_MACHINE_WINDMILL] = 553
    ENUM[554] = :HOTKEY_BUILDING_MACHINE_GEAR_ASSEMBLY ; NUME[:HOTKEY_BUILDING_MACHINE_GEAR_ASSEMBLY] = 554
    ENUM[555] = :HOTKEY_BUILDING_MACHINE_AXLE_VERTICAL ; NUME[:HOTKEY_BUILDING_MACHINE_AXLE_VERTICAL] = 555
    ENUM[556] = :HOTKEY_BUILDING_MACHINE_AXLE_HORIZONTAL ; NUME[:HOTKEY_BUILDING_MACHINE_AXLE_HORIZONTAL] = 556
    ENUM[557] = :HOTKEY_BUILDING_MACHINE_ROLLERS ; NUME[:HOTKEY_BUILDING_MACHINE_ROLLERS] = 557
    ENUM[558] = :HOTKEY_BUILDING_SIEGEENGINE_BALLISTA ; NUME[:HOTKEY_BUILDING_SIEGEENGINE_BALLISTA] = 558
    ENUM[559] = :HOTKEY_BUILDING_SIEGEENGINE_CATAPULT ; NUME[:HOTKEY_BUILDING_SIEGEENGINE_CATAPULT] = 559
    ENUM[560] = :HOTKEY_BUILDING_TRAP_STONE ; NUME[:HOTKEY_BUILDING_TRAP_STONE] = 560
    ENUM[561] = :HOTKEY_BUILDING_TRAP_WEAPON ; NUME[:HOTKEY_BUILDING_TRAP_WEAPON] = 561
    ENUM[562] = :HOTKEY_BUILDING_TRAP_LEVER ; NUME[:HOTKEY_BUILDING_TRAP_LEVER] = 562
    ENUM[563] = :HOTKEY_BUILDING_TRAP_TRIGGER ; NUME[:HOTKEY_BUILDING_TRAP_TRIGGER] = 563
    ENUM[564] = :HOTKEY_BUILDING_TRAP_CAGE ; NUME[:HOTKEY_BUILDING_TRAP_CAGE] = 564
    ENUM[565] = :HOTKEY_BUILDING_TRAP_SPIKE ; NUME[:HOTKEY_BUILDING_TRAP_SPIKE] = 565
    ENUM[566] = :HOTKEY_BUILDING_CONSTRUCTION ; NUME[:HOTKEY_BUILDING_CONSTRUCTION] = 566
    ENUM[567] = :HOTKEY_BUILDING_CONSTRUCTION_WALL ; NUME[:HOTKEY_BUILDING_CONSTRUCTION_WALL] = 567
    ENUM[568] = :HOTKEY_BUILDING_CONSTRUCTION_FLOOR ; NUME[:HOTKEY_BUILDING_CONSTRUCTION_FLOOR] = 568
    ENUM[569] = :HOTKEY_BUILDING_CONSTRUCTION_RAMP ; NUME[:HOTKEY_BUILDING_CONSTRUCTION_RAMP] = 569
    ENUM[570] = :HOTKEY_BUILDING_CONSTRUCTION_STAIR_UP ; NUME[:HOTKEY_BUILDING_CONSTRUCTION_STAIR_UP] = 570
    ENUM[571] = :HOTKEY_BUILDING_CONSTRUCTION_STAIR_DOWN ; NUME[:HOTKEY_BUILDING_CONSTRUCTION_STAIR_DOWN] = 571
    ENUM[572] = :HOTKEY_BUILDING_CONSTRUCTION_STAIR_UPDOWN ; NUME[:HOTKEY_BUILDING_CONSTRUCTION_STAIR_UPDOWN] = 572
    ENUM[573] = :HOTKEY_BUILDING_CONSTRUCTION_FORTIFICATION ; NUME[:HOTKEY_BUILDING_CONSTRUCTION_FORTIFICATION] = 573
    ENUM[574] = :HOTKEY_BUILDING_CONSTRUCTION_TRACK ; NUME[:HOTKEY_BUILDING_CONSTRUCTION_TRACK] = 574
    ENUM[575] = :HOTKEY_BUILDING_CONSTRUCTION_TRACK_STOP ; NUME[:HOTKEY_BUILDING_CONSTRUCTION_TRACK_STOP] = 575
    ENUM[576] = :HOTKEY_BUILDING_WORKSHOP_LEATHER ; NUME[:HOTKEY_BUILDING_WORKSHOP_LEATHER] = 576
    ENUM[577] = :HOTKEY_BUILDING_WORKSHOP_QUERN ; NUME[:HOTKEY_BUILDING_WORKSHOP_QUERN] = 577
    ENUM[578] = :HOTKEY_BUILDING_WORKSHOP_MILLSTONE ; NUME[:HOTKEY_BUILDING_WORKSHOP_MILLSTONE] = 578
    ENUM[579] = :HOTKEY_BUILDING_WORKSHOP_LOOM ; NUME[:HOTKEY_BUILDING_WORKSHOP_LOOM] = 579
    ENUM[580] = :HOTKEY_BUILDING_WORKSHOP_CLOTHES ; NUME[:HOTKEY_BUILDING_WORKSHOP_CLOTHES] = 580
    ENUM[581] = :HOTKEY_BUILDING_WORKSHOP_BOWYER ; NUME[:HOTKEY_BUILDING_WORKSHOP_BOWYER] = 581
    ENUM[582] = :HOTKEY_BUILDING_WORKSHOP_CARPENTER ; NUME[:HOTKEY_BUILDING_WORKSHOP_CARPENTER] = 582
    ENUM[583] = :HOTKEY_BUILDING_WORKSHOP_METALSMITH ; NUME[:HOTKEY_BUILDING_WORKSHOP_METALSMITH] = 583
    ENUM[584] = :HOTKEY_BUILDING_WORKSHOP_LAVAMILL ; NUME[:HOTKEY_BUILDING_WORKSHOP_LAVAMILL] = 584
    ENUM[585] = :HOTKEY_BUILDING_WORKSHOP_JEWELER ; NUME[:HOTKEY_BUILDING_WORKSHOP_JEWELER] = 585
    ENUM[586] = :HOTKEY_BUILDING_WORKSHOP_MASON ; NUME[:HOTKEY_BUILDING_WORKSHOP_MASON] = 586
    ENUM[587] = :HOTKEY_BUILDING_WORKSHOP_BUTCHER ; NUME[:HOTKEY_BUILDING_WORKSHOP_BUTCHER] = 587
    ENUM[588] = :HOTKEY_BUILDING_WORKSHOP_TANNER ; NUME[:HOTKEY_BUILDING_WORKSHOP_TANNER] = 588
    ENUM[589] = :HOTKEY_BUILDING_WORKSHOP_DYER ; NUME[:HOTKEY_BUILDING_WORKSHOP_DYER] = 589
    ENUM[590] = :HOTKEY_BUILDING_WORKSHOP_CRAFTSMAN ; NUME[:HOTKEY_BUILDING_WORKSHOP_CRAFTSMAN] = 590
    ENUM[591] = :HOTKEY_BUILDING_WORKSHOP_SIEGE ; NUME[:HOTKEY_BUILDING_WORKSHOP_SIEGE] = 591
    ENUM[592] = :HOTKEY_BUILDING_WORKSHOP_MECHANIC ; NUME[:HOTKEY_BUILDING_WORKSHOP_MECHANIC] = 592
    ENUM[593] = :HOTKEY_BUILDING_WORKSHOP_STILL ; NUME[:HOTKEY_BUILDING_WORKSHOP_STILL] = 593
    ENUM[594] = :HOTKEY_BUILDING_WORKSHOP_FARMER ; NUME[:HOTKEY_BUILDING_WORKSHOP_FARMER] = 594
    ENUM[595] = :HOTKEY_BUILDING_WORKSHOP_KITCHEN ; NUME[:HOTKEY_BUILDING_WORKSHOP_KITCHEN] = 595
    ENUM[596] = :HOTKEY_BUILDING_WORKSHOP_FISHERY ; NUME[:HOTKEY_BUILDING_WORKSHOP_FISHERY] = 596
    ENUM[597] = :HOTKEY_BUILDING_WORKSHOP_ASHERY ; NUME[:HOTKEY_BUILDING_WORKSHOP_ASHERY] = 597
    ENUM[598] = :HOTKEY_BUILDING_FURNACE_WOOD ; NUME[:HOTKEY_BUILDING_FURNACE_WOOD] = 598
    ENUM[599] = :HOTKEY_BUILDING_FURNACE_SMELTER ; NUME[:HOTKEY_BUILDING_FURNACE_SMELTER] = 599
    ENUM[600] = :HOTKEY_BUILDING_FURNACE_GLASS ; NUME[:HOTKEY_BUILDING_FURNACE_GLASS] = 600
    ENUM[601] = :HOTKEY_BUILDING_FURNACE_KILN ; NUME[:HOTKEY_BUILDING_FURNACE_KILN] = 601
    ENUM[602] = :HOTKEY_BUILDING_FURNACE_SMELTER_LAVA ; NUME[:HOTKEY_BUILDING_FURNACE_SMELTER_LAVA] = 602
    ENUM[603] = :HOTKEY_BUILDING_FURNACE_GLASS_LAVA ; NUME[:HOTKEY_BUILDING_FURNACE_GLASS_LAVA] = 603
    ENUM[604] = :HOTKEY_BUILDING_FURNACE_KILN_LAVA ; NUME[:HOTKEY_BUILDING_FURNACE_KILN_LAVA] = 604
    ENUM[605] = :HIVE_INSTALL_COLONY ; NUME[:HIVE_INSTALL_COLONY] = 605
    ENUM[606] = :HIVE_GATHER_PRODUCTS ; NUME[:HIVE_GATHER_PRODUCTS] = 606
    ENUM[607] = :BUILDING_DIM_Y_UP ; NUME[:BUILDING_DIM_Y_UP] = 607
    ENUM[608] = :BUILDING_DIM_Y_DOWN ; NUME[:BUILDING_DIM_Y_DOWN] = 608
    ENUM[609] = :BUILDING_DIM_X_UP ; NUME[:BUILDING_DIM_X_UP] = 609
    ENUM[610] = :BUILDING_DIM_X_DOWN ; NUME[:BUILDING_DIM_X_DOWN] = 610
    ENUM[611] = :BUILDING_ORIENT_UP ; NUME[:BUILDING_ORIENT_UP] = 611
    ENUM[612] = :BUILDING_ORIENT_LEFT ; NUME[:BUILDING_ORIENT_LEFT] = 612
    ENUM[613] = :BUILDING_ORIENT_RIGHT ; NUME[:BUILDING_ORIENT_RIGHT] = 613
    ENUM[614] = :BUILDING_ORIENT_DOWN ; NUME[:BUILDING_ORIENT_DOWN] = 614
    ENUM[615] = :BUILDING_ORIENT_NONE ; NUME[:BUILDING_ORIENT_NONE] = 615
    ENUM[616] = :BUILDING_VIEW_ITEM ; NUME[:BUILDING_VIEW_ITEM] = 616
    ENUM[617] = :BUILDING_ADVANCE_STAGE ; NUME[:BUILDING_ADVANCE_STAGE] = 617
    ENUM[618] = :BUILDING_EXPAND_CONTRACT ; NUME[:BUILDING_EXPAND_CONTRACT] = 618
    ENUM[619] = :BUILDING_TRIGGER_ENABLE_WATER ; NUME[:BUILDING_TRIGGER_ENABLE_WATER] = 619
    ENUM[620] = :BUILDING_TRIGGER_MIN_WATER_UP ; NUME[:BUILDING_TRIGGER_MIN_WATER_UP] = 620
    ENUM[621] = :BUILDING_TRIGGER_MIN_WATER_DOWN ; NUME[:BUILDING_TRIGGER_MIN_WATER_DOWN] = 621
    ENUM[622] = :BUILDING_TRIGGER_MAX_WATER_UP ; NUME[:BUILDING_TRIGGER_MAX_WATER_UP] = 622
    ENUM[623] = :BUILDING_TRIGGER_MAX_WATER_DOWN ; NUME[:BUILDING_TRIGGER_MAX_WATER_DOWN] = 623
    ENUM[624] = :BUILDING_TRIGGER_ENABLE_MAGMA ; NUME[:BUILDING_TRIGGER_ENABLE_MAGMA] = 624
    ENUM[625] = :BUILDING_TRIGGER_MIN_MAGMA_UP ; NUME[:BUILDING_TRIGGER_MIN_MAGMA_UP] = 625
    ENUM[626] = :BUILDING_TRIGGER_MIN_MAGMA_DOWN ; NUME[:BUILDING_TRIGGER_MIN_MAGMA_DOWN] = 626
    ENUM[627] = :BUILDING_TRIGGER_MAX_MAGMA_UP ; NUME[:BUILDING_TRIGGER_MAX_MAGMA_UP] = 627
    ENUM[628] = :BUILDING_TRIGGER_MAX_MAGMA_DOWN ; NUME[:BUILDING_TRIGGER_MAX_MAGMA_DOWN] = 628
    ENUM[629] = :BUILDING_TRIGGER_ENABLE_TRACK_CART ; NUME[:BUILDING_TRIGGER_ENABLE_TRACK_CART] = 629
    ENUM[630] = :BUILDING_TRIGGER_MIN_TRACK_CART_DOWN ; NUME[:BUILDING_TRIGGER_MIN_TRACK_CART_DOWN] = 630
    ENUM[631] = :BUILDING_TRIGGER_MIN_TRACK_CART_UP ; NUME[:BUILDING_TRIGGER_MIN_TRACK_CART_UP] = 631
    ENUM[632] = :BUILDING_TRIGGER_MAX_TRACK_CART_DOWN ; NUME[:BUILDING_TRIGGER_MAX_TRACK_CART_DOWN] = 632
    ENUM[633] = :BUILDING_TRIGGER_MAX_TRACK_CART_UP ; NUME[:BUILDING_TRIGGER_MAX_TRACK_CART_UP] = 633
    ENUM[634] = :BUILDING_TRIGGER_ENABLE_CREATURE ; NUME[:BUILDING_TRIGGER_ENABLE_CREATURE] = 634
    ENUM[635] = :BUILDING_TRIGGER_ENABLE_LOCALS ; NUME[:BUILDING_TRIGGER_ENABLE_LOCALS] = 635
    ENUM[636] = :BUILDING_TRIGGER_RESETS ; NUME[:BUILDING_TRIGGER_RESETS] = 636
    ENUM[637] = :BUILDING_TRIGGER_MIN_SIZE_UP ; NUME[:BUILDING_TRIGGER_MIN_SIZE_UP] = 637
    ENUM[638] = :BUILDING_TRIGGER_MIN_SIZE_DOWN ; NUME[:BUILDING_TRIGGER_MIN_SIZE_DOWN] = 638
    ENUM[639] = :BUILDING_TRIGGER_MAX_SIZE_UP ; NUME[:BUILDING_TRIGGER_MAX_SIZE_UP] = 639
    ENUM[640] = :BUILDING_TRIGGER_MAX_SIZE_DOWN ; NUME[:BUILDING_TRIGGER_MAX_SIZE_DOWN] = 640
    ENUM[641] = :BUILDING_TRIGGER_MIN_SIZE_UP_PLUS ; NUME[:BUILDING_TRIGGER_MIN_SIZE_UP_PLUS] = 641
    ENUM[642] = :BUILDING_TRIGGER_MIN_SIZE_DOWN_PLUS ; NUME[:BUILDING_TRIGGER_MIN_SIZE_DOWN_PLUS] = 642
    ENUM[643] = :BUILDING_TRIGGER_MAX_SIZE_UP_PLUS ; NUME[:BUILDING_TRIGGER_MAX_SIZE_UP_PLUS] = 643
    ENUM[644] = :BUILDING_TRIGGER_MAX_SIZE_DOWN_PLUS ; NUME[:BUILDING_TRIGGER_MAX_SIZE_DOWN_PLUS] = 644
    ENUM[645] = :BUILDING_ROLLERS_SPEED_UP ; NUME[:BUILDING_ROLLERS_SPEED_UP] = 645
    ENUM[646] = :BUILDING_ROLLERS_SPEED_DOWN ; NUME[:BUILDING_ROLLERS_SPEED_DOWN] = 646
    ENUM[647] = :BUILDING_TRACK_STOP_FRICTION_UP ; NUME[:BUILDING_TRACK_STOP_FRICTION_UP] = 647
    ENUM[648] = :BUILDING_TRACK_STOP_FRICTION_DOWN ; NUME[:BUILDING_TRACK_STOP_FRICTION_DOWN] = 648
    ENUM[649] = :BUILDING_TRACK_STOP_DUMP ; NUME[:BUILDING_TRACK_STOP_DUMP] = 649
    ENUM[650] = :DESTROYBUILDING ; NUME[:DESTROYBUILDING] = 650
    ENUM[651] = :SUSPENDBUILDING ; NUME[:SUSPENDBUILDING] = 651
    ENUM[652] = :BUILDINGLIST_ZOOM_T ; NUME[:BUILDINGLIST_ZOOM_T] = 652
    ENUM[653] = :BUILDINGLIST_ZOOM_Q ; NUME[:BUILDINGLIST_ZOOM_Q] = 653
    ENUM[654] = :RECENTER_ON_LEVER ; NUME[:RECENTER_ON_LEVER] = 654
    ENUM[655] = :HOTKEY_MAKE_ASH ; NUME[:HOTKEY_MAKE_ASH] = 655
    ENUM[656] = :HOTKEY_MAKE_CHARCOAL ; NUME[:HOTKEY_MAKE_CHARCOAL] = 656
    ENUM[657] = :HOTKEY_MELT_OBJECT ; NUME[:HOTKEY_MELT_OBJECT] = 657
    ENUM[658] = :HOTKEY_GLASS_GREEN ; NUME[:HOTKEY_GLASS_GREEN] = 658
    ENUM[659] = :HOTKEY_GLASS_CLEAR ; NUME[:HOTKEY_GLASS_CLEAR] = 659
    ENUM[660] = :HOTKEY_GLASS_CRYSTAL ; NUME[:HOTKEY_GLASS_CRYSTAL] = 660
    ENUM[661] = :HOTKEY_COLLECT_SAND ; NUME[:HOTKEY_COLLECT_SAND] = 661
    ENUM[662] = :HOTKEY_COLLECT_CLAY ; NUME[:HOTKEY_COLLECT_CLAY] = 662
    ENUM[663] = :HOTKEY_GLASS_ROUGH ; NUME[:HOTKEY_GLASS_ROUGH] = 663
    ENUM[664] = :HOTKEY_GLASS_ARMORSTAND ; NUME[:HOTKEY_GLASS_ARMORSTAND] = 664
    ENUM[665] = :HOTKEY_GLASS_BOX ; NUME[:HOTKEY_GLASS_BOX] = 665
    ENUM[666] = :HOTKEY_GLASS_CABINET ; NUME[:HOTKEY_GLASS_CABINET] = 666
    ENUM[667] = :HOTKEY_GLASS_COFFIN ; NUME[:HOTKEY_GLASS_COFFIN] = 667
    ENUM[668] = :HOTKEY_GLASS_FLOODGATE ; NUME[:HOTKEY_GLASS_FLOODGATE] = 668
    ENUM[669] = :HOTKEY_GLASS_HATCH_COVER ; NUME[:HOTKEY_GLASS_HATCH_COVER] = 669
    ENUM[670] = :HOTKEY_GLASS_GRATE ; NUME[:HOTKEY_GLASS_GRATE] = 670
    ENUM[671] = :HOTKEY_GLASS_GOBLET ; NUME[:HOTKEY_GLASS_GOBLET] = 671
    ENUM[672] = :HOTKEY_GLASS_TOY ; NUME[:HOTKEY_GLASS_TOY] = 672
    ENUM[673] = :HOTKEY_GLASS_INSTRUMENT ; NUME[:HOTKEY_GLASS_INSTRUMENT] = 673
    ENUM[674] = :HOTKEY_GLASS_DOOR ; NUME[:HOTKEY_GLASS_DOOR] = 674
    ENUM[675] = :HOTKEY_GLASS_STATUE ; NUME[:HOTKEY_GLASS_STATUE] = 675
    ENUM[676] = :HOTKEY_GLASS_TABLE ; NUME[:HOTKEY_GLASS_TABLE] = 676
    ENUM[677] = :HOTKEY_GLASS_CAGE ; NUME[:HOTKEY_GLASS_CAGE] = 677
    ENUM[678] = :HOTKEY_GLASS_CHAIR ; NUME[:HOTKEY_GLASS_CHAIR] = 678
    ENUM[679] = :HOTKEY_GLASS_BLOCKS ; NUME[:HOTKEY_GLASS_BLOCKS] = 679
    ENUM[680] = :HOTKEY_GLASS_FLASK ; NUME[:HOTKEY_GLASS_FLASK] = 680
    ENUM[681] = :HOTKEY_GLASS_WEAPONRACK ; NUME[:HOTKEY_GLASS_WEAPONRACK] = 681
    ENUM[682] = :HOTKEY_GLASS_WINDOW ; NUME[:HOTKEY_GLASS_WINDOW] = 682
    ENUM[683] = :HOTKEY_ASHERY_LYE ; NUME[:HOTKEY_ASHERY_LYE] = 683
    ENUM[684] = :HOTKEY_ASHERY_POTASH ; NUME[:HOTKEY_ASHERY_POTASH] = 684
    ENUM[685] = :HOTKEY_ASHERY_POTASH_DIRECT ; NUME[:HOTKEY_ASHERY_POTASH_DIRECT] = 685
    ENUM[686] = :HOTKEY_CARPENTER_BARREL ; NUME[:HOTKEY_CARPENTER_BARREL] = 686
    ENUM[687] = :HOTKEY_CARPENTER_BLOCKS ; NUME[:HOTKEY_CARPENTER_BLOCKS] = 687
    ENUM[688] = :HOTKEY_CARPENTER_BUCKET ; NUME[:HOTKEY_CARPENTER_BUCKET] = 688
    ENUM[689] = :HOTKEY_CARPENTER_TRAP_ANIMAL ; NUME[:HOTKEY_CARPENTER_TRAP_ANIMAL] = 689
    ENUM[690] = :HOTKEY_CARPENTER_CAGE ; NUME[:HOTKEY_CARPENTER_CAGE] = 690
    ENUM[691] = :HOTKEY_CARPENTER_ARMORSTAND ; NUME[:HOTKEY_CARPENTER_ARMORSTAND] = 691
    ENUM[692] = :HOTKEY_CARPENTER_BED ; NUME[:HOTKEY_CARPENTER_BED] = 692
    ENUM[693] = :HOTKEY_CARPENTER_CHAIR ; NUME[:HOTKEY_CARPENTER_CHAIR] = 693
    ENUM[694] = :HOTKEY_CARPENTER_COFFIN ; NUME[:HOTKEY_CARPENTER_COFFIN] = 694
    ENUM[695] = :HOTKEY_CARPENTER_DOOR ; NUME[:HOTKEY_CARPENTER_DOOR] = 695
    ENUM[696] = :HOTKEY_CARPENTER_FLOODGATE ; NUME[:HOTKEY_CARPENTER_FLOODGATE] = 696
    ENUM[697] = :HOTKEY_CARPENTER_HATCH_COVER ; NUME[:HOTKEY_CARPENTER_HATCH_COVER] = 697
    ENUM[698] = :HOTKEY_CARPENTER_GRATE ; NUME[:HOTKEY_CARPENTER_GRATE] = 698
    ENUM[699] = :HOTKEY_CARPENTER_CABINET ; NUME[:HOTKEY_CARPENTER_CABINET] = 699
    ENUM[700] = :HOTKEY_CARPENTER_BIN ; NUME[:HOTKEY_CARPENTER_BIN] = 700
    ENUM[701] = :HOTKEY_CARPENTER_BOX ; NUME[:HOTKEY_CARPENTER_BOX] = 701
    ENUM[702] = :HOTKEY_CARPENTER_WEAPONRACK ; NUME[:HOTKEY_CARPENTER_WEAPONRACK] = 702
    ENUM[703] = :HOTKEY_CARPENTER_TABLE ; NUME[:HOTKEY_CARPENTER_TABLE] = 703
    ENUM[704] = :HOTKEY_SIEGE_BALLISTA ; NUME[:HOTKEY_SIEGE_BALLISTA] = 704
    ENUM[705] = :HOTKEY_SIEGE_CATAPULT ; NUME[:HOTKEY_SIEGE_CATAPULT] = 705
    ENUM[706] = :HOTKEY_LEATHER_BOX ; NUME[:HOTKEY_LEATHER_BOX] = 706
    ENUM[707] = :HOTKEY_LEATHER_FLASK ; NUME[:HOTKEY_LEATHER_FLASK] = 707
    ENUM[708] = :HOTKEY_LEATHER_SHIRT ; NUME[:HOTKEY_LEATHER_SHIRT] = 708
    ENUM[709] = :HOTKEY_LEATHER_CLOAK ; NUME[:HOTKEY_LEATHER_CLOAK] = 709
    ENUM[710] = :HOTKEY_LEATHER_BACKPACK ; NUME[:HOTKEY_LEATHER_BACKPACK] = 710
    ENUM[711] = :HOTKEY_LEATHER_QUIVER ; NUME[:HOTKEY_LEATHER_QUIVER] = 711
    ENUM[712] = :HOTKEY_LEATHER_IMAGE ; NUME[:HOTKEY_LEATHER_IMAGE] = 712
    ENUM[713] = :HOTKEY_CLOTHES_MAT_PLANT ; NUME[:HOTKEY_CLOTHES_MAT_PLANT] = 713
    ENUM[714] = :HOTKEY_CLOTHES_MAT_SILK ; NUME[:HOTKEY_CLOTHES_MAT_SILK] = 714
    ENUM[715] = :HOTKEY_CLOTHES_MAT_YARN ; NUME[:HOTKEY_CLOTHES_MAT_YARN] = 715
    ENUM[716] = :HOTKEY_CLOTHES_SHIRT ; NUME[:HOTKEY_CLOTHES_SHIRT] = 716
    ENUM[717] = :HOTKEY_CLOTHES_CLOAK ; NUME[:HOTKEY_CLOTHES_CLOAK] = 717
    ENUM[718] = :HOTKEY_CLOTHES_BOX ; NUME[:HOTKEY_CLOTHES_BOX] = 718
    ENUM[719] = :HOTKEY_CLOTHES_CHAIN ; NUME[:HOTKEY_CLOTHES_CHAIN] = 719
    ENUM[720] = :HOTKEY_CLOTHES_IMAGE ; NUME[:HOTKEY_CLOTHES_IMAGE] = 720
    ENUM[721] = :HOTKEY_CRAFTS_MAT_STONE ; NUME[:HOTKEY_CRAFTS_MAT_STONE] = 721
    ENUM[722] = :HOTKEY_CRAFTS_MAT_WOOD ; NUME[:HOTKEY_CRAFTS_MAT_WOOD] = 722
    ENUM[723] = :HOTKEY_CRAFTS_DEC_BONE ; NUME[:HOTKEY_CRAFTS_DEC_BONE] = 723
    ENUM[724] = :HOTKEY_CRAFTS_DEC_SHELL ; NUME[:HOTKEY_CRAFTS_DEC_SHELL] = 724
    ENUM[725] = :HOTKEY_CRAFTS_DEC_TOOTH ; NUME[:HOTKEY_CRAFTS_DEC_TOOTH] = 725
    ENUM[726] = :HOTKEY_CRAFTS_DEC_HORN ; NUME[:HOTKEY_CRAFTS_DEC_HORN] = 726
    ENUM[727] = :HOTKEY_CRAFTS_DEC_PEARL ; NUME[:HOTKEY_CRAFTS_DEC_PEARL] = 727
    ENUM[728] = :HOTKEY_CRAFTS_TOTEM ; NUME[:HOTKEY_CRAFTS_TOTEM] = 728
    ENUM[729] = :HOTKEY_CRAFTS_CLOTH ; NUME[:HOTKEY_CRAFTS_CLOTH] = 729
    ENUM[730] = :HOTKEY_CRAFTS_SILK ; NUME[:HOTKEY_CRAFTS_SILK] = 730
    ENUM[731] = :HOTKEY_CRAFTS_YARN ; NUME[:HOTKEY_CRAFTS_YARN] = 731
    ENUM[732] = :HOTKEY_CRAFTS_SEL_WOOD ; NUME[:HOTKEY_CRAFTS_SEL_WOOD] = 732
    ENUM[733] = :HOTKEY_CRAFTS_SEL_BONE ; NUME[:HOTKEY_CRAFTS_SEL_BONE] = 733
    ENUM[734] = :HOTKEY_CRAFTS_SEL_SHELL ; NUME[:HOTKEY_CRAFTS_SEL_SHELL] = 734
    ENUM[735] = :HOTKEY_CRAFTS_SHELL ; NUME[:HOTKEY_CRAFTS_SHELL] = 735
    ENUM[736] = :HOTKEY_CRAFTS_TOOTH ; NUME[:HOTKEY_CRAFTS_TOOTH] = 736
    ENUM[737] = :HOTKEY_CRAFTS_HORN ; NUME[:HOTKEY_CRAFTS_HORN] = 737
    ENUM[738] = :HOTKEY_CRAFTS_PEARL ; NUME[:HOTKEY_CRAFTS_PEARL] = 738
    ENUM[739] = :HOTKEY_CRAFTS_BONE ; NUME[:HOTKEY_CRAFTS_BONE] = 739
    ENUM[740] = :HOTKEY_CRAFTS_LEATHER ; NUME[:HOTKEY_CRAFTS_LEATHER] = 740
    ENUM[741] = :HOTKEY_CRAFTS_SLAB ; NUME[:HOTKEY_CRAFTS_SLAB] = 741
    ENUM[742] = :HOTKEY_CRAFTS_MAT_CRAFTS ; NUME[:HOTKEY_CRAFTS_MAT_CRAFTS] = 742
    ENUM[743] = :HOTKEY_CRAFTS_MAT_GOBLET ; NUME[:HOTKEY_CRAFTS_MAT_GOBLET] = 743
    ENUM[744] = :HOTKEY_CRAFTS_MAT_INSTRUMENT ; NUME[:HOTKEY_CRAFTS_MAT_INSTRUMENT] = 744
    ENUM[745] = :HOTKEY_CRAFTS_MAT_TOY ; NUME[:HOTKEY_CRAFTS_MAT_TOY] = 745
    ENUM[746] = :HOTKEY_SMITH_WEAPON ; NUME[:HOTKEY_SMITH_WEAPON] = 746
    ENUM[747] = :HOTKEY_SMITH_ARMOR ; NUME[:HOTKEY_SMITH_ARMOR] = 747
    ENUM[748] = :HOTKEY_SMITH_FURNITURE ; NUME[:HOTKEY_SMITH_FURNITURE] = 748
    ENUM[749] = :HOTKEY_SMITH_SIEGE ; NUME[:HOTKEY_SMITH_SIEGE] = 749
    ENUM[750] = :HOTKEY_SMITH_TRAP ; NUME[:HOTKEY_SMITH_TRAP] = 750
    ENUM[751] = :HOTKEY_SMITH_OTHER ; NUME[:HOTKEY_SMITH_OTHER] = 751
    ENUM[752] = :HOTKEY_SMITH_METAL ; NUME[:HOTKEY_SMITH_METAL] = 752
    ENUM[753] = :HOTKEY_ALCHEMIST_SOAP ; NUME[:HOTKEY_ALCHEMIST_SOAP] = 753
    ENUM[754] = :HOTKEY_STILL_BREW ; NUME[:HOTKEY_STILL_BREW] = 754
    ENUM[755] = :HOTKEY_STILL_EXTRACT ; NUME[:HOTKEY_STILL_EXTRACT] = 755
    ENUM[756] = :HOTKEY_LOOM_COLLECT_SILK ; NUME[:HOTKEY_LOOM_COLLECT_SILK] = 756
    ENUM[757] = :HOTKEY_LOOM_WEAVE_CLOTH ; NUME[:HOTKEY_LOOM_WEAVE_CLOTH] = 757
    ENUM[758] = :HOTKEY_LOOM_WEAVE_SILK ; NUME[:HOTKEY_LOOM_WEAVE_SILK] = 758
    ENUM[759] = :HOTKEY_LOOM_WEAVE_YARN ; NUME[:HOTKEY_LOOM_WEAVE_YARN] = 759
    ENUM[760] = :HOTKEY_LOOM_WEAVE_METAL ; NUME[:HOTKEY_LOOM_WEAVE_METAL] = 760
    ENUM[761] = :HOTKEY_KITCHEN_COOK_2 ; NUME[:HOTKEY_KITCHEN_COOK_2] = 761
    ENUM[762] = :HOTKEY_KITCHEN_COOK_3 ; NUME[:HOTKEY_KITCHEN_COOK_3] = 762
    ENUM[763] = :HOTKEY_KITCHEN_COOK_4 ; NUME[:HOTKEY_KITCHEN_COOK_4] = 763
    ENUM[764] = :HOTKEY_KITCHEN_RENDER_FAT ; NUME[:HOTKEY_KITCHEN_RENDER_FAT] = 764
    ENUM[765] = :HOTKEY_FARMER_PROCESS ; NUME[:HOTKEY_FARMER_PROCESS] = 765
    ENUM[766] = :HOTKEY_FARMER_PROCESS_VIAL ; NUME[:HOTKEY_FARMER_PROCESS_VIAL] = 766
    ENUM[767] = :HOTKEY_FARMER_PROCESS_BAG ; NUME[:HOTKEY_FARMER_PROCESS_BAG] = 767
    ENUM[768] = :HOTKEY_FARMER_PROCESS_BARREL ; NUME[:HOTKEY_FARMER_PROCESS_BARREL] = 768
    ENUM[769] = :HOTKEY_FARMER_CHEESE ; NUME[:HOTKEY_FARMER_CHEESE] = 769
    ENUM[770] = :HOTKEY_FARMER_MILK ; NUME[:HOTKEY_FARMER_MILK] = 770
    ENUM[771] = :HOTKEY_FARMER_SHEAR_CREATURE ; NUME[:HOTKEY_FARMER_SHEAR_CREATURE] = 771
    ENUM[772] = :HOTKEY_FARMER_SPIN_THREAD ; NUME[:HOTKEY_FARMER_SPIN_THREAD] = 772
    ENUM[773] = :HOTKEY_MILL_MILL ; NUME[:HOTKEY_MILL_MILL] = 773
    ENUM[774] = :HOTKEY_KENNEL_CATCH_VERMIN ; NUME[:HOTKEY_KENNEL_CATCH_VERMIN] = 774
    ENUM[775] = :HOTKEY_KENNEL_TAME_VERMIN ; NUME[:HOTKEY_KENNEL_TAME_VERMIN] = 775
    ENUM[776] = :HOTKEY_FISHERY_PROCESS ; NUME[:HOTKEY_FISHERY_PROCESS] = 776
    ENUM[777] = :HOTKEY_FISHERY_EXTRACT ; NUME[:HOTKEY_FISHERY_EXTRACT] = 777
    ENUM[778] = :HOTKEY_FISHERY_CATCH ; NUME[:HOTKEY_FISHERY_CATCH] = 778
    ENUM[779] = :HOTKEY_BUTCHER_BUTCHER ; NUME[:HOTKEY_BUTCHER_BUTCHER] = 779
    ENUM[780] = :HOTKEY_BUTCHER_EXTRACT ; NUME[:HOTKEY_BUTCHER_EXTRACT] = 780
    ENUM[781] = :HOTKEY_BUTCHER_CATCH ; NUME[:HOTKEY_BUTCHER_CATCH] = 781
    ENUM[782] = :HOTKEY_TANNER_TAN ; NUME[:HOTKEY_TANNER_TAN] = 782
    ENUM[783] = :HOTKEY_DYER_THREAD ; NUME[:HOTKEY_DYER_THREAD] = 783
    ENUM[784] = :HOTKEY_DYER_CLOTH ; NUME[:HOTKEY_DYER_CLOTH] = 784
    ENUM[785] = :HOTKEY_JEWELER_FURNITURE ; NUME[:HOTKEY_JEWELER_FURNITURE] = 785
    ENUM[786] = :HOTKEY_JEWELER_FINISHED ; NUME[:HOTKEY_JEWELER_FINISHED] = 786
    ENUM[787] = :HOTKEY_JEWELER_AMMO ; NUME[:HOTKEY_JEWELER_AMMO] = 787
    ENUM[788] = :HOTKEY_JEWELER_CUT ; NUME[:HOTKEY_JEWELER_CUT] = 788
    ENUM[789] = :HOTKEY_JEWELER_ENCRUST ; NUME[:HOTKEY_JEWELER_ENCRUST] = 789
    ENUM[790] = :HOTKEY_MECHANIC_PARTS ; NUME[:HOTKEY_MECHANIC_PARTS] = 790
    ENUM[791] = :HOTKEY_MECHANIC_TRACTION_BENCH ; NUME[:HOTKEY_MECHANIC_TRACTION_BENCH] = 791
    ENUM[792] = :HOTKEY_MASON_ARMORSTAND ; NUME[:HOTKEY_MASON_ARMORSTAND] = 792
    ENUM[793] = :HOTKEY_MASON_BLOCKS ; NUME[:HOTKEY_MASON_BLOCKS] = 793
    ENUM[794] = :HOTKEY_MASON_CHAIR ; NUME[:HOTKEY_MASON_CHAIR] = 794
    ENUM[795] = :HOTKEY_MASON_COFFIN ; NUME[:HOTKEY_MASON_COFFIN] = 795
    ENUM[796] = :HOTKEY_MASON_DOOR ; NUME[:HOTKEY_MASON_DOOR] = 796
    ENUM[797] = :HOTKEY_MASON_FLOODGATE ; NUME[:HOTKEY_MASON_FLOODGATE] = 797
    ENUM[798] = :HOTKEY_MASON_HATCH_COVER ; NUME[:HOTKEY_MASON_HATCH_COVER] = 798
    ENUM[799] = :HOTKEY_MASON_GRATE ; NUME[:HOTKEY_MASON_GRATE] = 799
    ENUM[800] = :HOTKEY_MASON_CABINET ; NUME[:HOTKEY_MASON_CABINET] = 800
    ENUM[801] = :HOTKEY_MASON_BOX ; NUME[:HOTKEY_MASON_BOX] = 801
    ENUM[802] = :HOTKEY_MASON_STATUE ; NUME[:HOTKEY_MASON_STATUE] = 802
    ENUM[803] = :HOTKEY_MASON_TABLE ; NUME[:HOTKEY_MASON_TABLE] = 803
    ENUM[804] = :HOTKEY_MASON_WEAPONRACK ; NUME[:HOTKEY_MASON_WEAPONRACK] = 804
    ENUM[805] = :HOTKEY_MASON_QUERN ; NUME[:HOTKEY_MASON_QUERN] = 805
    ENUM[806] = :HOTKEY_MASON_MILLSTONE ; NUME[:HOTKEY_MASON_MILLSTONE] = 806
    ENUM[807] = :HOTKEY_MASON_SLAB ; NUME[:HOTKEY_MASON_SLAB] = 807
    ENUM[808] = :HOTKEY_TRAP_BRIDGE ; NUME[:HOTKEY_TRAP_BRIDGE] = 808
    ENUM[809] = :HOTKEY_TRAP_DOOR ; NUME[:HOTKEY_TRAP_DOOR] = 809
    ENUM[810] = :HOTKEY_TRAP_FLOODGATE ; NUME[:HOTKEY_TRAP_FLOODGATE] = 810
    ENUM[811] = :HOTKEY_TRAP_SPIKE ; NUME[:HOTKEY_TRAP_SPIKE] = 811
    ENUM[812] = :HOTKEY_TRAP_HATCH ; NUME[:HOTKEY_TRAP_HATCH] = 812
    ENUM[813] = :HOTKEY_TRAP_GRATE_WALL ; NUME[:HOTKEY_TRAP_GRATE_WALL] = 813
    ENUM[814] = :HOTKEY_TRAP_GRATE_FLOOR ; NUME[:HOTKEY_TRAP_GRATE_FLOOR] = 814
    ENUM[815] = :HOTKEY_TRAP_BARS_VERTICAL ; NUME[:HOTKEY_TRAP_BARS_VERTICAL] = 815
    ENUM[816] = :HOTKEY_TRAP_BARS_FLOOR ; NUME[:HOTKEY_TRAP_BARS_FLOOR] = 816
    ENUM[817] = :HOTKEY_TRAP_SUPPORT ; NUME[:HOTKEY_TRAP_SUPPORT] = 817
    ENUM[818] = :HOTKEY_TRAP_CHAIN ; NUME[:HOTKEY_TRAP_CHAIN] = 818
    ENUM[819] = :HOTKEY_TRAP_CAGE ; NUME[:HOTKEY_TRAP_CAGE] = 819
    ENUM[820] = :HOTKEY_TRAP_GEAR_ASSEMBLY ; NUME[:HOTKEY_TRAP_GEAR_ASSEMBLY] = 820
    ENUM[821] = :HOTKEY_TRAP_TRACK_STOP ; NUME[:HOTKEY_TRAP_TRACK_STOP] = 821
    ENUM[822] = :HOTKEY_TRAP_PULL_LEVER ; NUME[:HOTKEY_TRAP_PULL_LEVER] = 822
    ENUM[823] = :BUILDJOB_STOCKPILE_MASTER ; NUME[:BUILDJOB_STOCKPILE_MASTER] = 823
    ENUM[824] = :BUILDJOB_STOCKPILE_LINK_ANYWHERE ; NUME[:BUILDJOB_STOCKPILE_LINK_ANYWHERE] = 824
    ENUM[825] = :BUILDJOB_STOCKPILE_GIVE_TO ; NUME[:BUILDJOB_STOCKPILE_GIVE_TO] = 825
    ENUM[826] = :BUILDJOB_STOCKPILE_DELETE_CHILD ; NUME[:BUILDJOB_STOCKPILE_DELETE_CHILD] = 826
    ENUM[827] = :BUILDJOB_STOCKPILE_SETTINGS ; NUME[:BUILDJOB_STOCKPILE_SETTINGS] = 827
    ENUM[828] = :BUILDJOB_STOCKPILE_BARREL_UP ; NUME[:BUILDJOB_STOCKPILE_BARREL_UP] = 828
    ENUM[829] = :BUILDJOB_STOCKPILE_BARREL_DOWN ; NUME[:BUILDJOB_STOCKPILE_BARREL_DOWN] = 829
    ENUM[830] = :BUILDJOB_STOCKPILE_BARREL_ZERO ; NUME[:BUILDJOB_STOCKPILE_BARREL_ZERO] = 830
    ENUM[831] = :BUILDJOB_STOCKPILE_BARREL_MAX ; NUME[:BUILDJOB_STOCKPILE_BARREL_MAX] = 831
    ENUM[832] = :BUILDJOB_STOCKPILE_BIN_UP ; NUME[:BUILDJOB_STOCKPILE_BIN_UP] = 832
    ENUM[833] = :BUILDJOB_STOCKPILE_BIN_DOWN ; NUME[:BUILDJOB_STOCKPILE_BIN_DOWN] = 833
    ENUM[834] = :BUILDJOB_STOCKPILE_BIN_ZERO ; NUME[:BUILDJOB_STOCKPILE_BIN_ZERO] = 834
    ENUM[835] = :BUILDJOB_STOCKPILE_BIN_MAX ; NUME[:BUILDJOB_STOCKPILE_BIN_MAX] = 835
    ENUM[836] = :BUILDJOB_STOCKPILE_WHEELBARROW ; NUME[:BUILDJOB_STOCKPILE_WHEELBARROW] = 836
    ENUM[837] = :STOCKPILE_ANIMAL ; NUME[:STOCKPILE_ANIMAL] = 837
    ENUM[838] = :STOCKPILE_FOOD ; NUME[:STOCKPILE_FOOD] = 838
    ENUM[839] = :STOCKPILE_WEAPON ; NUME[:STOCKPILE_WEAPON] = 839
    ENUM[840] = :STOCKPILE_ARMOR ; NUME[:STOCKPILE_ARMOR] = 840
    ENUM[841] = :STOCKPILE_CUSTOM ; NUME[:STOCKPILE_CUSTOM] = 841
    ENUM[842] = :STOCKPILE_CUSTOM_SETTINGS ; NUME[:STOCKPILE_CUSTOM_SETTINGS] = 842
    ENUM[843] = :STOCKPILE_FURNITURE ; NUME[:STOCKPILE_FURNITURE] = 843
    ENUM[844] = :STOCKPILE_GRAVEYARD ; NUME[:STOCKPILE_GRAVEYARD] = 844
    ENUM[845] = :STOCKPILE_REFUSE ; NUME[:STOCKPILE_REFUSE] = 845
    ENUM[846] = :STOCKPILE_WOOD ; NUME[:STOCKPILE_WOOD] = 846
    ENUM[847] = :STOCKPILE_STONE ; NUME[:STOCKPILE_STONE] = 847
    ENUM[848] = :STOCKPILE_GEM ; NUME[:STOCKPILE_GEM] = 848
    ENUM[849] = :STOCKPILE_BARBLOCK ; NUME[:STOCKPILE_BARBLOCK] = 849
    ENUM[850] = :STOCKPILE_CLOTH ; NUME[:STOCKPILE_CLOTH] = 850
    ENUM[851] = :STOCKPILE_LEATHER ; NUME[:STOCKPILE_LEATHER] = 851
    ENUM[852] = :STOCKPILE_AMMO ; NUME[:STOCKPILE_AMMO] = 852
    ENUM[853] = :STOCKPILE_COINS ; NUME[:STOCKPILE_COINS] = 853
    ENUM[854] = :STOCKPILE_FINISHED ; NUME[:STOCKPILE_FINISHED] = 854
    ENUM[855] = :STOCKPILE_NONE ; NUME[:STOCKPILE_NONE] = 855
    ENUM[856] = :STOCKPILE_SETTINGS_ENABLE ; NUME[:STOCKPILE_SETTINGS_ENABLE] = 856
    ENUM[857] = :STOCKPILE_SETTINGS_DISABLE ; NUME[:STOCKPILE_SETTINGS_DISABLE] = 857
    ENUM[858] = :STOCKPILE_SETTINGS_PERMIT_ALL ; NUME[:STOCKPILE_SETTINGS_PERMIT_ALL] = 858
    ENUM[859] = :STOCKPILE_SETTINGS_FORBID_ALL ; NUME[:STOCKPILE_SETTINGS_FORBID_ALL] = 859
    ENUM[860] = :STOCKPILE_SETTINGS_PERMIT_SUB ; NUME[:STOCKPILE_SETTINGS_PERMIT_SUB] = 860
    ENUM[861] = :STOCKPILE_SETTINGS_FORBID_SUB ; NUME[:STOCKPILE_SETTINGS_FORBID_SUB] = 861
    ENUM[862] = :STOCKPILE_SETTINGS_SPECIFIC1 ; NUME[:STOCKPILE_SETTINGS_SPECIFIC1] = 862
    ENUM[863] = :STOCKPILE_SETTINGS_SPECIFIC2 ; NUME[:STOCKPILE_SETTINGS_SPECIFIC2] = 863
    ENUM[864] = :CIVZONE_REMOVE ; NUME[:CIVZONE_REMOVE] = 864
    ENUM[865] = :CIVZONE_REMOVE_ZONE ; NUME[:CIVZONE_REMOVE_ZONE] = 865
    ENUM[866] = :CIVZONE_SHAPE ; NUME[:CIVZONE_SHAPE] = 866
    ENUM[867] = :CIVZONE_NEXT ; NUME[:CIVZONE_NEXT] = 867
    ENUM[868] = :CIVZONE_WATER_SOURCE ; NUME[:CIVZONE_WATER_SOURCE] = 868
    ENUM[869] = :CIVZONE_FISH ; NUME[:CIVZONE_FISH] = 869
    ENUM[870] = :CIVZONE_GATHER ; NUME[:CIVZONE_GATHER] = 870
    ENUM[871] = :CIVZONE_DUMP ; NUME[:CIVZONE_DUMP] = 871
    ENUM[872] = :CIVZONE_POND ; NUME[:CIVZONE_POND] = 872
    ENUM[873] = :CIVZONE_HOSPITAL ; NUME[:CIVZONE_HOSPITAL] = 873
    ENUM[874] = :CIVZONE_SAND_COLLECT ; NUME[:CIVZONE_SAND_COLLECT] = 874
    ENUM[875] = :CIVZONE_CLAY_COLLECT ; NUME[:CIVZONE_CLAY_COLLECT] = 875
    ENUM[876] = :CIVZONE_ACTIVE ; NUME[:CIVZONE_ACTIVE] = 876
    ENUM[877] = :CIVZONE_MEETING ; NUME[:CIVZONE_MEETING] = 877
    ENUM[878] = :CIVZONE_ANIMAL_TRAINING ; NUME[:CIVZONE_ANIMAL_TRAINING] = 878
    ENUM[879] = :CIVZONE_PEN ; NUME[:CIVZONE_PEN] = 879
    ENUM[880] = :CIVZONE_PEN_OPTIONS ; NUME[:CIVZONE_PEN_OPTIONS] = 880
    ENUM[881] = :CIVZONE_POND_OPTIONS ; NUME[:CIVZONE_POND_OPTIONS] = 881
    ENUM[882] = :CIVZONE_POND_WATER ; NUME[:CIVZONE_POND_WATER] = 882
    ENUM[883] = :CIVZONE_HOSPITAL_OPTIONS ; NUME[:CIVZONE_HOSPITAL_OPTIONS] = 883
    ENUM[884] = :CIVZONE_GATHER_OPTIONS ; NUME[:CIVZONE_GATHER_OPTIONS] = 884
    ENUM[885] = :CIVZONE_GATHER_OPTIONS_PICK_TREES ; NUME[:CIVZONE_GATHER_OPTIONS_PICK_TREES] = 885
    ENUM[886] = :CIVZONE_GATHER_OPTIONS_PICK_SHRUBS ; NUME[:CIVZONE_GATHER_OPTIONS_PICK_SHRUBS] = 886
    ENUM[887] = :CIVZONE_GATHER_OPTIONS_GATHER_FALLEN ; NUME[:CIVZONE_GATHER_OPTIONS_GATHER_FALLEN] = 887
    ENUM[888] = :STORES_VIEW ; NUME[:STORES_VIEW] = 888
    ENUM[889] = :STORES_ZOOM ; NUME[:STORES_ZOOM] = 889
    ENUM[890] = :STORES_FORBID ; NUME[:STORES_FORBID] = 890
    ENUM[891] = :STORES_MELT ; NUME[:STORES_MELT] = 891
    ENUM[892] = :STORES_DUMP ; NUME[:STORES_DUMP] = 892
    ENUM[893] = :STORES_HIDE ; NUME[:STORES_HIDE] = 893
    ENUM[894] = :PET_BUTCHER ; NUME[:PET_BUTCHER] = 894
    ENUM[895] = :PET_GELD ; NUME[:PET_GELD] = 895
    ENUM[896] = :ANIMAL_SELECT_TRAINER ; NUME[:ANIMAL_SELECT_TRAINER] = 896
    ENUM[897] = :ANIMAL_WAR_TRAINING ; NUME[:ANIMAL_WAR_TRAINING] = 897
    ENUM[898] = :ANIMAL_HUNTING_TRAINING ; NUME[:ANIMAL_HUNTING_TRAINING] = 898
    ENUM[899] = :KITCHEN_COOK ; NUME[:KITCHEN_COOK] = 899
    ENUM[900] = :KITCHEN_BREW ; NUME[:KITCHEN_BREW] = 900
    ENUM[901] = :ORDERS_AUTOFORBID ; NUME[:ORDERS_AUTOFORBID] = 901
    ENUM[902] = :ORDERS_FORBID_PROJECTILE ; NUME[:ORDERS_FORBID_PROJECTILE] = 902
    ENUM[903] = :ORDERS_FORBID_YOUR_CORPSE ; NUME[:ORDERS_FORBID_YOUR_CORPSE] = 903
    ENUM[904] = :ORDERS_FORBID_YOUR_ITEMS ; NUME[:ORDERS_FORBID_YOUR_ITEMS] = 904
    ENUM[905] = :ORDERS_FORBID_OTHER_CORPSE ; NUME[:ORDERS_FORBID_OTHER_CORPSE] = 905
    ENUM[906] = :ORDERS_FORBID_OTHER_ITEMS ; NUME[:ORDERS_FORBID_OTHER_ITEMS] = 906
    ENUM[907] = :ORDERS_REFUSE_GATHER ; NUME[:ORDERS_REFUSE_GATHER] = 907
    ENUM[908] = :ORDERS_REFUSE_OUTSIDE ; NUME[:ORDERS_REFUSE_OUTSIDE] = 908
    ENUM[909] = :ORDERS_REFUSE_OUTSIDE_VERMIN ; NUME[:ORDERS_REFUSE_OUTSIDE_VERMIN] = 909
    ENUM[910] = :ORDERS_REFUSE_DUMP_CORPSE ; NUME[:ORDERS_REFUSE_DUMP_CORPSE] = 910
    ENUM[911] = :ORDERS_REFUSE_DUMP_SKULL ; NUME[:ORDERS_REFUSE_DUMP_SKULL] = 911
    ENUM[912] = :ORDERS_REFUSE_DUMP_BONE ; NUME[:ORDERS_REFUSE_DUMP_BONE] = 912
    ENUM[913] = :ORDERS_REFUSE_DUMP_SHELL ; NUME[:ORDERS_REFUSE_DUMP_SHELL] = 913
    ENUM[914] = :ORDERS_REFUSE_DUMP_SKIN ; NUME[:ORDERS_REFUSE_DUMP_SKIN] = 914
    ENUM[915] = :ORDERS_REFUSE_DUMP_OTHER ; NUME[:ORDERS_REFUSE_DUMP_OTHER] = 915
    ENUM[916] = :ORDERS_REFUSE_DUMP_STRAND_TISSUE ; NUME[:ORDERS_REFUSE_DUMP_STRAND_TISSUE] = 916
    ENUM[917] = :ORDERS_GATHER_FURNITURE ; NUME[:ORDERS_GATHER_FURNITURE] = 917
    ENUM[918] = :ORDERS_GATHER_ANIMALS ; NUME[:ORDERS_GATHER_ANIMALS] = 918
    ENUM[919] = :ORDERS_GATHER_FOOD ; NUME[:ORDERS_GATHER_FOOD] = 919
    ENUM[920] = :ORDERS_GATHER_BODIES ; NUME[:ORDERS_GATHER_BODIES] = 920
    ENUM[921] = :ORDERS_REFUSE ; NUME[:ORDERS_REFUSE] = 921
    ENUM[922] = :ORDERS_GATHER_STONE ; NUME[:ORDERS_GATHER_STONE] = 922
    ENUM[923] = :ORDERS_GATHER_WOOD ; NUME[:ORDERS_GATHER_WOOD] = 923
    ENUM[924] = :ORDERS_ALL_HARVEST ; NUME[:ORDERS_ALL_HARVEST] = 924
    ENUM[925] = :ORDERS_SAMEPILE ; NUME[:ORDERS_SAMEPILE] = 925
    ENUM[926] = :ORDERS_MIXFOODS ; NUME[:ORDERS_MIXFOODS] = 926
    ENUM[927] = :ORDERS_LOOM ; NUME[:ORDERS_LOOM] = 927
    ENUM[928] = :ORDERS_DYED_CLOTH ; NUME[:ORDERS_DYED_CLOTH] = 928
    ENUM[929] = :ORDERS_EXCEPTIONS ; NUME[:ORDERS_EXCEPTIONS] = 929
    ENUM[930] = :ORDERS_WORKSHOP ; NUME[:ORDERS_WORKSHOP] = 930
    ENUM[931] = :ORDERS_COLLECT_WEB ; NUME[:ORDERS_COLLECT_WEB] = 931
    ENUM[932] = :ORDERS_SLAUGHTER ; NUME[:ORDERS_SLAUGHTER] = 932
    ENUM[933] = :ORDERS_BUTCHER ; NUME[:ORDERS_BUTCHER] = 933
    ENUM[934] = :ORDERS_TAN ; NUME[:ORDERS_TAN] = 934
    ENUM[935] = :ORDERS_AUTO_FISHERY ; NUME[:ORDERS_AUTO_FISHERY] = 935
    ENUM[936] = :ORDERS_AUTO_KITCHEN ; NUME[:ORDERS_AUTO_KITCHEN] = 936
    ENUM[937] = :ORDERS_AUTO_KILN ; NUME[:ORDERS_AUTO_KILN] = 937
    ENUM[938] = :ORDERS_AUTO_SMELTER ; NUME[:ORDERS_AUTO_SMELTER] = 938
    ENUM[939] = :ORDERS_AUTO_OTHER ; NUME[:ORDERS_AUTO_OTHER] = 939
    ENUM[940] = :ORDERS_ZONE ; NUME[:ORDERS_ZONE] = 940
    ENUM[941] = :ORDERS_ZONE_DRINKING ; NUME[:ORDERS_ZONE_DRINKING] = 941
    ENUM[942] = :ORDERS_ZONE_FISHING ; NUME[:ORDERS_ZONE_FISHING] = 942
    ENUM[943] = :D_ONESTEP ; NUME[:D_ONESTEP] = 943
    ENUM[944] = :D_PAUSE ; NUME[:D_PAUSE] = 944
    ENUM[945] = :D_DEPOT ; NUME[:D_DEPOT] = 945
    ENUM[946] = :D_HOT_KEYS ; NUME[:D_HOT_KEYS] = 946
    ENUM[947] = :D_HOTKEY1 ; NUME[:D_HOTKEY1] = 947
    ENUM[948] = :D_HOTKEY2 ; NUME[:D_HOTKEY2] = 948
    ENUM[949] = :D_HOTKEY3 ; NUME[:D_HOTKEY3] = 949
    ENUM[950] = :D_HOTKEY4 ; NUME[:D_HOTKEY4] = 950
    ENUM[951] = :D_HOTKEY5 ; NUME[:D_HOTKEY5] = 951
    ENUM[952] = :D_HOTKEY6 ; NUME[:D_HOTKEY6] = 952
    ENUM[953] = :D_HOTKEY7 ; NUME[:D_HOTKEY7] = 953
    ENUM[954] = :D_HOTKEY8 ; NUME[:D_HOTKEY8] = 954
    ENUM[955] = :D_HOTKEY9 ; NUME[:D_HOTKEY9] = 955
    ENUM[956] = :D_HOTKEY10 ; NUME[:D_HOTKEY10] = 956
    ENUM[957] = :D_HOTKEY11 ; NUME[:D_HOTKEY11] = 957
    ENUM[958] = :D_HOTKEY12 ; NUME[:D_HOTKEY12] = 958
    ENUM[959] = :D_HOTKEY13 ; NUME[:D_HOTKEY13] = 959
    ENUM[960] = :D_HOTKEY14 ; NUME[:D_HOTKEY14] = 960
    ENUM[961] = :D_HOTKEY15 ; NUME[:D_HOTKEY15] = 961
    ENUM[962] = :D_HOTKEY16 ; NUME[:D_HOTKEY16] = 962
    ENUM[963] = :D_HOTKEY_CHANGE_NAME ; NUME[:D_HOTKEY_CHANGE_NAME] = 963
    ENUM[964] = :D_HOTKEY_ZOOM ; NUME[:D_HOTKEY_ZOOM] = 964
    ENUM[965] = :D_ANNOUNCE ; NUME[:D_ANNOUNCE] = 965
    ENUM[966] = :D_REPORTS ; NUME[:D_REPORTS] = 966
    ENUM[967] = :D_BUILDING ; NUME[:D_BUILDING] = 967
    ENUM[968] = :D_CIVLIST ; NUME[:D_CIVLIST] = 968
    ENUM[969] = :D_DESIGNATE ; NUME[:D_DESIGNATE] = 969
    ENUM[970] = :D_ARTLIST ; NUME[:D_ARTLIST] = 970
    ENUM[971] = :D_NOBLES ; NUME[:D_NOBLES] = 971
    ENUM[972] = :D_ORDERS ; NUME[:D_ORDERS] = 972
    ENUM[973] = :D_MILITARY ; NUME[:D_MILITARY] = 973
    ENUM[974] = :D_ROOMS ; NUME[:D_ROOMS] = 974
    ENUM[975] = :D_SQUADS ; NUME[:D_SQUADS] = 975
    ENUM[976] = :D_STOCKPILES ; NUME[:D_STOCKPILES] = 976
    ENUM[977] = :D_CIVZONE ; NUME[:D_CIVZONE] = 977
    ENUM[978] = :D_VIEWUNIT ; NUME[:D_VIEWUNIT] = 978
    ENUM[979] = :D_JOBLIST ; NUME[:D_JOBLIST] = 979
    ENUM[980] = :D_UNITLIST ; NUME[:D_UNITLIST] = 980
    ENUM[981] = :D_LOOK ; NUME[:D_LOOK] = 981
    ENUM[982] = :D_HAULING ; NUME[:D_HAULING] = 982
    ENUM[983] = :D_HAULING_NEW_ROUTE ; NUME[:D_HAULING_NEW_ROUTE] = 983
    ENUM[984] = :D_HAULING_NEW_STOP ; NUME[:D_HAULING_NEW_STOP] = 984
    ENUM[985] = :D_HAULING_REMOVE ; NUME[:D_HAULING_REMOVE] = 985
    ENUM[986] = :D_HAULING_PROMOTE ; NUME[:D_HAULING_PROMOTE] = 986
    ENUM[987] = :D_HAULING_VEHICLE ; NUME[:D_HAULING_VEHICLE] = 987
    ENUM[988] = :D_HAULING_NICKNAME ; NUME[:D_HAULING_NICKNAME] = 988
    ENUM[989] = :D_HAULING_STOP_NEW_DEPART ; NUME[:D_HAULING_STOP_NEW_DEPART] = 989
    ENUM[990] = :D_HAULING_STOP_NEW_LINK ; NUME[:D_HAULING_STOP_NEW_LINK] = 990
    ENUM[991] = :D_HAULING_STOP_REMOVE ; NUME[:D_HAULING_STOP_REMOVE] = 991
    ENUM[992] = :D_HAULING_STOP_SL_SELECT_PILE ; NUME[:D_HAULING_STOP_SL_SELECT_PILE] = 992
    ENUM[993] = :D_HAULING_STOP_SL_TAKE_GIVE ; NUME[:D_HAULING_STOP_SL_TAKE_GIVE] = 993
    ENUM[994] = :D_HAULING_STOP_LC_DIR ; NUME[:D_HAULING_STOP_LC_DIR] = 994
    ENUM[995] = :D_HAULING_STOP_LC_MODE ; NUME[:D_HAULING_STOP_LC_MODE] = 995
    ENUM[996] = :D_HAULING_STOP_LC_TIMER_UP ; NUME[:D_HAULING_STOP_LC_TIMER_UP] = 996
    ENUM[997] = :D_HAULING_STOP_LC_TIMER_DOWN ; NUME[:D_HAULING_STOP_LC_TIMER_DOWN] = 997
    ENUM[998] = :D_HAULING_STOP_LC_FULLNESS_UP ; NUME[:D_HAULING_STOP_LC_FULLNESS_UP] = 998
    ENUM[999] = :D_HAULING_STOP_LC_FULLNESS_DOWN ; NUME[:D_HAULING_STOP_LC_FULLNESS_DOWN] = 999
    ENUM[1000] = :D_HAULING_STOP_LC_MORE_LESS ; NUME[:D_HAULING_STOP_LC_MORE_LESS] = 1000
    ENUM[1001] = :D_HAULING_STOP_LC_DESIRED_TOTAL ; NUME[:D_HAULING_STOP_LC_DESIRED_TOTAL] = 1001
    ENUM[1002] = :D_HAULING_STOP_LC_CHANGE ; NUME[:D_HAULING_STOP_LC_CHANGE] = 1002
    ENUM[1003] = :D_HAULING_STOP_LC_ADVANCED ; NUME[:D_HAULING_STOP_LC_ADVANCED] = 1003
    ENUM[1004] = :D_BURROWS ; NUME[:D_BURROWS] = 1004
    ENUM[1005] = :D_BURROWS_ADD ; NUME[:D_BURROWS_ADD] = 1005
    ENUM[1006] = :D_BURROWS_DELETE ; NUME[:D_BURROWS_DELETE] = 1006
    ENUM[1007] = :D_BURROWS_DEFINE ; NUME[:D_BURROWS_DEFINE] = 1007
    ENUM[1008] = :D_BURROWS_ADD_UNIT ; NUME[:D_BURROWS_ADD_UNIT] = 1008
    ENUM[1009] = :D_BURROWS_WORKSHOP_LIMIT ; NUME[:D_BURROWS_WORKSHOP_LIMIT] = 1009
    ENUM[1010] = :D_BURROWS_CENTER ; NUME[:D_BURROWS_CENTER] = 1010
    ENUM[1011] = :D_BURROWS_NAME ; NUME[:D_BURROWS_NAME] = 1011
    ENUM[1012] = :D_BURROWS_CHANGE_SELECTION ; NUME[:D_BURROWS_CHANGE_SELECTION] = 1012
    ENUM[1013] = :D_BURROWS_BRUSH ; NUME[:D_BURROWS_BRUSH] = 1013
    ENUM[1014] = :D_BURROWS_REMOVE ; NUME[:D_BURROWS_REMOVE] = 1014
    ENUM[1015] = :D_NOTE ; NUME[:D_NOTE] = 1015
    ENUM[1016] = :D_NOTE_PLACE ; NUME[:D_NOTE_PLACE] = 1016
    ENUM[1017] = :D_NOTE_DELETE ; NUME[:D_NOTE_DELETE] = 1017
    ENUM[1018] = :D_NOTE_NAME ; NUME[:D_NOTE_NAME] = 1018
    ENUM[1019] = :D_NOTE_ENTER ; NUME[:D_NOTE_ENTER] = 1019
    ENUM[1020] = :D_NOTE_ADOPT_SYMBOL ; NUME[:D_NOTE_ADOPT_SYMBOL] = 1020
    ENUM[1021] = :D_NOTE_CHANGE_SELECTION ; NUME[:D_NOTE_CHANGE_SELECTION] = 1021
    ENUM[1022] = :D_NOTE_POINTS ; NUME[:D_NOTE_POINTS] = 1022
    ENUM[1023] = :D_NOTE_ROUTE ; NUME[:D_NOTE_ROUTE] = 1023
    ENUM[1024] = :D_NOTE_ROUTE_ADD ; NUME[:D_NOTE_ROUTE_ADD] = 1024
    ENUM[1025] = :D_NOTE_ROUTE_EDIT ; NUME[:D_NOTE_ROUTE_EDIT] = 1025
    ENUM[1026] = :D_NOTE_ROUTE_DELETE ; NUME[:D_NOTE_ROUTE_DELETE] = 1026
    ENUM[1027] = :D_NOTE_ROUTE_CENTER ; NUME[:D_NOTE_ROUTE_CENTER] = 1027
    ENUM[1028] = :D_NOTE_ROUTE_NAME ; NUME[:D_NOTE_ROUTE_NAME] = 1028
    ENUM[1029] = :D_BUILDJOB ; NUME[:D_BUILDJOB] = 1029
    ENUM[1030] = :D_STATUS ; NUME[:D_STATUS] = 1030
    ENUM[1031] = :D_STATUS_OVERALL_HEALTH_RECENTER ; NUME[:D_STATUS_OVERALL_HEALTH_RECENTER] = 1031
    ENUM[1032] = :D_BUILDITEM ; NUME[:D_BUILDITEM] = 1032
    ENUM[1033] = :D_BITEM_FORBID ; NUME[:D_BITEM_FORBID] = 1033
    ENUM[1034] = :D_BITEM_DUMP ; NUME[:D_BITEM_DUMP] = 1034
    ENUM[1035] = :D_BITEM_MELT ; NUME[:D_BITEM_MELT] = 1035
    ENUM[1036] = :D_BITEM_HIDE ; NUME[:D_BITEM_HIDE] = 1036
    ENUM[1037] = :D_LOOK_FORBID ; NUME[:D_LOOK_FORBID] = 1037
    ENUM[1038] = :D_LOOK_DUMP ; NUME[:D_LOOK_DUMP] = 1038
    ENUM[1039] = :D_LOOK_MELT ; NUME[:D_LOOK_MELT] = 1039
    ENUM[1040] = :D_LOOK_HIDE ; NUME[:D_LOOK_HIDE] = 1040
    ENUM[1041] = :D_LOOK_FOLLOW ; NUME[:D_LOOK_FOLLOW] = 1041
    ENUM[1042] = :D_LOOK_ARENA_CREATURE ; NUME[:D_LOOK_ARENA_CREATURE] = 1042
    ENUM[1043] = :D_LOOK_ARENA_ADV_MODE ; NUME[:D_LOOK_ARENA_ADV_MODE] = 1043
    ENUM[1044] = :D_LOOK_ARENA_WATER ; NUME[:D_LOOK_ARENA_WATER] = 1044
    ENUM[1045] = :D_LOOK_ARENA_MAGMA ; NUME[:D_LOOK_ARENA_MAGMA] = 1045
    ENUM[1046] = :ARENA_CREATURE_SIDE_DOWN ; NUME[:ARENA_CREATURE_SIDE_DOWN] = 1046
    ENUM[1047] = :ARENA_CREATURE_SIDE_UP ; NUME[:ARENA_CREATURE_SIDE_UP] = 1047
    ENUM[1048] = :ARENA_CREATURE_NEW_ITEM ; NUME[:ARENA_CREATURE_NEW_ITEM] = 1048
    ENUM[1049] = :ARENA_CREATURE_BLANK_LIST ; NUME[:ARENA_CREATURE_BLANK_LIST] = 1049
    ENUM[1050] = :ARENA_CREATURE_REMOVE_ITEM ; NUME[:ARENA_CREATURE_REMOVE_ITEM] = 1050
    ENUM[1051] = :ARENA_CREATURE_UNDEAD ; NUME[:ARENA_CREATURE_UNDEAD] = 1051
    ENUM[1052] = :ARENA_CREATURE_STRING ; NUME[:ARENA_CREATURE_STRING] = 1052
    ENUM[1053] = :ARENA_CONFLICT_STATE_1 ; NUME[:ARENA_CONFLICT_STATE_1] = 1053
    ENUM[1054] = :ARENA_CONFLICT_STATE_2 ; NUME[:ARENA_CONFLICT_STATE_2] = 1054
    ENUM[1055] = :ARENA_MORALE ; NUME[:ARENA_MORALE] = 1055
    ENUM[1056] = :ARENA_WEATHER ; NUME[:ARENA_WEATHER] = 1056
    ENUM[1057] = :ARENA_WEATHER_SNOW ; NUME[:ARENA_WEATHER_SNOW] = 1057
    ENUM[1058] = :ARENA_WEATHER_MUD ; NUME[:ARENA_WEATHER_MUD] = 1058
    ENUM[1059] = :ARENA_WEATHER_CLEAR_SPATTER ; NUME[:ARENA_WEATHER_CLEAR_SPATTER] = 1059
    ENUM[1060] = :D_LOOK_ARENA_TREE ; NUME[:D_LOOK_ARENA_TREE] = 1060
    ENUM[1061] = :ARENA_TREE_FILTER ; NUME[:ARENA_TREE_FILTER] = 1061
    ENUM[1062] = :ARENA_TREE_AGE ; NUME[:ARENA_TREE_AGE] = 1062
    ENUM[1063] = :D_LOOK_ARENA_MOUNT ; NUME[:D_LOOK_ARENA_MOUNT] = 1063
    ENUM[1064] = :ASSIGNTRADE_VIEW ; NUME[:ASSIGNTRADE_VIEW] = 1064
    ENUM[1065] = :ASSIGNTRADE_STRING ; NUME[:ASSIGNTRADE_STRING] = 1065
    ENUM[1066] = :ASSIGNTRADE_EXCLUDE_PROHIBITED ; NUME[:ASSIGNTRADE_EXCLUDE_PROHIBITED] = 1066
    ENUM[1067] = :ASSIGNTRADE_PENDING ; NUME[:ASSIGNTRADE_PENDING] = 1067
    ENUM[1068] = :ASSIGNTRADE_SORT ; NUME[:ASSIGNTRADE_SORT] = 1068
    ENUM[1069] = :NOBLELIST_REPLACE ; NUME[:NOBLELIST_REPLACE] = 1069
    ENUM[1070] = :NOBLELIST_SETTINGS ; NUME[:NOBLELIST_SETTINGS] = 1070
    ENUM[1071] = :NOBLELIST_CAPITAL ; NUME[:NOBLELIST_CAPITAL] = 1071
    ENUM[1072] = :NOBLELIST_VIEW_CANDIDATE ; NUME[:NOBLELIST_VIEW_CANDIDATE] = 1072
    ENUM[1073] = :TRADE_VIEW ; NUME[:TRADE_VIEW] = 1073
    ENUM[1074] = :TRADE_TRADE ; NUME[:TRADE_TRADE] = 1074
    ENUM[1075] = :TRADE_OFFER ; NUME[:TRADE_OFFER] = 1075
    ENUM[1076] = :TRADE_SEIZE ; NUME[:TRADE_SEIZE] = 1076
    ENUM[1077] = :MILITARY_ACTIVATE ; NUME[:MILITARY_ACTIVATE] = 1077
    ENUM[1078] = :MILITARY_VIEW ; NUME[:MILITARY_VIEW] = 1078
    ENUM[1079] = :MILITARY_WEAPON ; NUME[:MILITARY_WEAPON] = 1079
    ENUM[1080] = :MILITARY_ZOOM ; NUME[:MILITARY_ZOOM] = 1080
    ENUM[1081] = :ANNOUNCE_ZOOM ; NUME[:ANNOUNCE_ZOOM] = 1081
    ENUM[1082] = :UNITJOB_REMOVE_CRE ; NUME[:UNITJOB_REMOVE_CRE] = 1082
    ENUM[1083] = :UNITJOB_ZOOM_CRE ; NUME[:UNITJOB_ZOOM_CRE] = 1083
    ENUM[1084] = :UNITJOB_ZOOM_BUILD ; NUME[:UNITJOB_ZOOM_BUILD] = 1084
    ENUM[1085] = :UNITJOB_VIEW ; NUME[:UNITJOB_VIEW] = 1085
    ENUM[1086] = :UNITJOB_MANAGER ; NUME[:UNITJOB_MANAGER] = 1086
    ENUM[1087] = :MANAGER_NEW_ORDER ; NUME[:MANAGER_NEW_ORDER] = 1087
    ENUM[1088] = :MANAGER_REMOVE ; NUME[:MANAGER_REMOVE] = 1088
    ENUM[1089] = :MANAGER_PROMOTE ; NUME[:MANAGER_PROMOTE] = 1089
    ENUM[1090] = :MANAGER_MAX ; NUME[:MANAGER_MAX] = 1090
    ENUM[1091] = :MANAGER_WAGES ; NUME[:MANAGER_WAGES] = 1091
    ENUM[1092] = :DESIGNATE_BITEM ; NUME[:DESIGNATE_BITEM] = 1092
    ENUM[1093] = :DESIGNATE_CLAIM ; NUME[:DESIGNATE_CLAIM] = 1093
    ENUM[1094] = :DESIGNATE_UNCLAIM ; NUME[:DESIGNATE_UNCLAIM] = 1094
    ENUM[1095] = :DESIGNATE_MELT ; NUME[:DESIGNATE_MELT] = 1095
    ENUM[1096] = :DESIGNATE_NO_MELT ; NUME[:DESIGNATE_NO_MELT] = 1096
    ENUM[1097] = :DESIGNATE_DUMP ; NUME[:DESIGNATE_DUMP] = 1097
    ENUM[1098] = :DESIGNATE_NO_DUMP ; NUME[:DESIGNATE_NO_DUMP] = 1098
    ENUM[1099] = :DESIGNATE_HIDE ; NUME[:DESIGNATE_HIDE] = 1099
    ENUM[1100] = :DESIGNATE_NO_HIDE ; NUME[:DESIGNATE_NO_HIDE] = 1100
    ENUM[1101] = :DESIGNATE_DIG ; NUME[:DESIGNATE_DIG] = 1101
    ENUM[1102] = :DESIGNATE_DIG_REMOVE_STAIRS_RAMPS ; NUME[:DESIGNATE_DIG_REMOVE_STAIRS_RAMPS] = 1102
    ENUM[1103] = :DESIGNATE_TRAFFIC ; NUME[:DESIGNATE_TRAFFIC] = 1103
    ENUM[1104] = :DESIGNATE_TRAFFIC_HIGH ; NUME[:DESIGNATE_TRAFFIC_HIGH] = 1104
    ENUM[1105] = :DESIGNATE_TRAFFIC_NORMAL ; NUME[:DESIGNATE_TRAFFIC_NORMAL] = 1105
    ENUM[1106] = :DESIGNATE_TRAFFIC_LOW ; NUME[:DESIGNATE_TRAFFIC_LOW] = 1106
    ENUM[1107] = :DESIGNATE_TRAFFIC_RESTRICTED ; NUME[:DESIGNATE_TRAFFIC_RESTRICTED] = 1107
    ENUM[1108] = :DESIGNATE_TRAFFIC_INCREASE_WEIGHT ; NUME[:DESIGNATE_TRAFFIC_INCREASE_WEIGHT] = 1108
    ENUM[1109] = :DESIGNATE_TRAFFIC_DECREASE_WEIGHT ; NUME[:DESIGNATE_TRAFFIC_DECREASE_WEIGHT] = 1109
    ENUM[1110] = :DESIGNATE_TRAFFIC_INCREASE_WEIGHT_MORE ; NUME[:DESIGNATE_TRAFFIC_INCREASE_WEIGHT_MORE] = 1110
    ENUM[1111] = :DESIGNATE_TRAFFIC_DECREASE_WEIGHT_MORE ; NUME[:DESIGNATE_TRAFFIC_DECREASE_WEIGHT_MORE] = 1111
    ENUM[1112] = :DESIGNATE_STAIR_UP ; NUME[:DESIGNATE_STAIR_UP] = 1112
    ENUM[1113] = :DESIGNATE_STAIR_DOWN ; NUME[:DESIGNATE_STAIR_DOWN] = 1113
    ENUM[1114] = :DESIGNATE_STAIR_UPDOWN ; NUME[:DESIGNATE_STAIR_UPDOWN] = 1114
    ENUM[1115] = :DESIGNATE_RAMP ; NUME[:DESIGNATE_RAMP] = 1115
    ENUM[1116] = :DESIGNATE_CHANNEL ; NUME[:DESIGNATE_CHANNEL] = 1116
    ENUM[1117] = :DESIGNATE_CHOP ; NUME[:DESIGNATE_CHOP] = 1117
    ENUM[1118] = :DESIGNATE_PLANTS ; NUME[:DESIGNATE_PLANTS] = 1118
    ENUM[1119] = :DESIGNATE_SMOOTH ; NUME[:DESIGNATE_SMOOTH] = 1119
    ENUM[1120] = :DESIGNATE_ENGRAVE ; NUME[:DESIGNATE_ENGRAVE] = 1120
    ENUM[1121] = :DESIGNATE_FORTIFY ; NUME[:DESIGNATE_FORTIFY] = 1121
    ENUM[1122] = :DESIGNATE_TRACK ; NUME[:DESIGNATE_TRACK] = 1122
    ENUM[1123] = :DESIGNATE_TOGGLE_ENGRAVING ; NUME[:DESIGNATE_TOGGLE_ENGRAVING] = 1123
    ENUM[1124] = :DESIGNATE_STANDARD_MARKER ; NUME[:DESIGNATE_STANDARD_MARKER] = 1124
    ENUM[1125] = :DESIGNATE_MINE_MODE ; NUME[:DESIGNATE_MINE_MODE] = 1125
    ENUM[1126] = :DESIGNATE_TOGGLE_MARKER ; NUME[:DESIGNATE_TOGGLE_MARKER] = 1126
    ENUM[1127] = :DESIGNATE_UNDO ; NUME[:DESIGNATE_UNDO] = 1127
    ENUM[1128] = :DESIGNATE_REMOVE_CONSTRUCTION ; NUME[:DESIGNATE_REMOVE_CONSTRUCTION] = 1128
    ENUM[1129] = :ITEM_DESCRIPTION ; NUME[:ITEM_DESCRIPTION] = 1129
    ENUM[1130] = :ITEM_FORBID ; NUME[:ITEM_FORBID] = 1130
    ENUM[1131] = :ITEM_MELT ; NUME[:ITEM_MELT] = 1131
    ENUM[1132] = :ITEM_DUMP ; NUME[:ITEM_DUMP] = 1132
    ENUM[1133] = :ITEM_HIDE ; NUME[:ITEM_HIDE] = 1133
    ENUM[1134] = :UNITVIEW_CUSTOMIZE ; NUME[:UNITVIEW_CUSTOMIZE] = 1134
    ENUM[1135] = :UNITVIEW_HEALTH ; NUME[:UNITVIEW_HEALTH] = 1135
    ENUM[1136] = :UNITVIEW_RELATIONSHIPS ; NUME[:UNITVIEW_RELATIONSHIPS] = 1136
    ENUM[1137] = :UNITVIEW_RELATIONSHIPS_ZOOM ; NUME[:UNITVIEW_RELATIONSHIPS_ZOOM] = 1137
    ENUM[1138] = :UNITVIEW_RELATIONSHIPS_VIEW ; NUME[:UNITVIEW_RELATIONSHIPS_VIEW] = 1138
    ENUM[1139] = :UNITVIEW_KILLS ; NUME[:UNITVIEW_KILLS] = 1139
    ENUM[1140] = :UNITVIEW_GEN ; NUME[:UNITVIEW_GEN] = 1140
    ENUM[1141] = :UNITVIEW_INV ; NUME[:UNITVIEW_INV] = 1141
    ENUM[1142] = :UNITVIEW_PRF ; NUME[:UNITVIEW_PRF] = 1142
    ENUM[1143] = :UNITVIEW_WND ; NUME[:UNITVIEW_WND] = 1143
    ENUM[1144] = :UNITVIEW_FOLLOW ; NUME[:UNITVIEW_FOLLOW] = 1144
    ENUM[1145] = :UNITVIEW_NEXT ; NUME[:UNITVIEW_NEXT] = 1145
    ENUM[1146] = :UNITVIEW_SLAUGHTER ; NUME[:UNITVIEW_SLAUGHTER] = 1146
    ENUM[1147] = :UNITVIEW_GELD ; NUME[:UNITVIEW_GELD] = 1147
    ENUM[1148] = :UNITVIEW_GEN_COMBAT ; NUME[:UNITVIEW_GEN_COMBAT] = 1148
    ENUM[1149] = :UNITVIEW_GEN_LABOR ; NUME[:UNITVIEW_GEN_LABOR] = 1149
    ENUM[1150] = :UNITVIEW_GEN_MISC ; NUME[:UNITVIEW_GEN_MISC] = 1150
    ENUM[1151] = :UNITVIEW_PRF_PROF ; NUME[:UNITVIEW_PRF_PROF] = 1151
    ENUM[1152] = :UNITVIEW_PRF_PET ; NUME[:UNITVIEW_PRF_PET] = 1152
    ENUM[1153] = :UNITVIEW_PRF_VIEW ; NUME[:UNITVIEW_PRF_VIEW] = 1153
    ENUM[1154] = :UNITVIEW_PRF_NEW_SQUAD ; NUME[:UNITVIEW_PRF_NEW_SQUAD] = 1154
    ENUM[1155] = :UNITVIEW_PRF_REMOVE_FROM_SQUAD ; NUME[:UNITVIEW_PRF_REMOVE_FROM_SQUAD] = 1155
    ENUM[1156] = :UNITVIEW_PRF_NAME_CURRENT_SQUAD ; NUME[:UNITVIEW_PRF_NAME_CURRENT_SQUAD] = 1156
    ENUM[1157] = :UNITVIEW_PRF_NAME_SELECTED_SQUAD ; NUME[:UNITVIEW_PRF_NAME_SELECTED_SQUAD] = 1157
    ENUM[1158] = :CUSTOMIZE_UNIT_NICKNAME ; NUME[:CUSTOMIZE_UNIT_NICKNAME] = 1158
    ENUM[1159] = :CUSTOMIZE_UNIT_PROFNAME ; NUME[:CUSTOMIZE_UNIT_PROFNAME] = 1159
    ENUM[1160] = :D_MILITARY_CREATE_SQUAD ; NUME[:D_MILITARY_CREATE_SQUAD] = 1160
    ENUM[1161] = :D_MILITARY_DISBAND_SQUAD ; NUME[:D_MILITARY_DISBAND_SQUAD] = 1161
    ENUM[1162] = :D_MILITARY_CREATE_SUB_SQUAD ; NUME[:D_MILITARY_CREATE_SUB_SQUAD] = 1162
    ENUM[1163] = :D_MILITARY_CANCEL_ORDERS ; NUME[:D_MILITARY_CANCEL_ORDERS] = 1163
    ENUM[1164] = :D_MILITARY_POSITIONS ; NUME[:D_MILITARY_POSITIONS] = 1164
    ENUM[1165] = :D_MILITARY_ALERTS ; NUME[:D_MILITARY_ALERTS] = 1165
    ENUM[1166] = :D_MILITARY_ALERTS_ADD ; NUME[:D_MILITARY_ALERTS_ADD] = 1166
    ENUM[1167] = :D_MILITARY_ALERTS_DELETE ; NUME[:D_MILITARY_ALERTS_DELETE] = 1167
    ENUM[1168] = :D_MILITARY_ALERTS_SET ; NUME[:D_MILITARY_ALERTS_SET] = 1168
    ENUM[1169] = :D_MILITARY_ALERTS_NAME ; NUME[:D_MILITARY_ALERTS_NAME] = 1169
    ENUM[1170] = :D_MILITARY_ALERTS_SET_RETAIN ; NUME[:D_MILITARY_ALERTS_SET_RETAIN] = 1170
    ENUM[1171] = :D_MILITARY_EQUIP ; NUME[:D_MILITARY_EQUIP] = 1171
    ENUM[1172] = :D_MILITARY_EQUIP_CUSTOMIZE ; NUME[:D_MILITARY_EQUIP_CUSTOMIZE] = 1172
    ENUM[1173] = :D_MILITARY_EQUIP_UNIFORM ; NUME[:D_MILITARY_EQUIP_UNIFORM] = 1173
    ENUM[1174] = :D_MILITARY_EQUIP_PRIORITY ; NUME[:D_MILITARY_EQUIP_PRIORITY] = 1174
    ENUM[1175] = :D_MILITARY_UNIFORMS ; NUME[:D_MILITARY_UNIFORMS] = 1175
    ENUM[1176] = :D_MILITARY_SUPPLIES ; NUME[:D_MILITARY_SUPPLIES] = 1176
    ENUM[1177] = :D_MILITARY_SUPPLIES_WATER_DOWN ; NUME[:D_MILITARY_SUPPLIES_WATER_DOWN] = 1177
    ENUM[1178] = :D_MILITARY_SUPPLIES_WATER_UP ; NUME[:D_MILITARY_SUPPLIES_WATER_UP] = 1178
    ENUM[1179] = :D_MILITARY_SUPPLIES_FOOD_DOWN ; NUME[:D_MILITARY_SUPPLIES_FOOD_DOWN] = 1179
    ENUM[1180] = :D_MILITARY_SUPPLIES_FOOD_UP ; NUME[:D_MILITARY_SUPPLIES_FOOD_UP] = 1180
    ENUM[1181] = :D_MILITARY_AMMUNITION ; NUME[:D_MILITARY_AMMUNITION] = 1181
    ENUM[1182] = :D_MILITARY_AMMUNITION_ADD_ITEM ; NUME[:D_MILITARY_AMMUNITION_ADD_ITEM] = 1182
    ENUM[1183] = :D_MILITARY_AMMUNITION_REMOVE_ITEM ; NUME[:D_MILITARY_AMMUNITION_REMOVE_ITEM] = 1183
    ENUM[1184] = :D_MILITARY_AMMUNITION_LOWER_AMOUNT ; NUME[:D_MILITARY_AMMUNITION_LOWER_AMOUNT] = 1184
    ENUM[1185] = :D_MILITARY_AMMUNITION_RAISE_AMOUNT ; NUME[:D_MILITARY_AMMUNITION_RAISE_AMOUNT] = 1185
    ENUM[1186] = :D_MILITARY_AMMUNITION_LOWER_AMOUNT_LOTS ; NUME[:D_MILITARY_AMMUNITION_LOWER_AMOUNT_LOTS] = 1186
    ENUM[1187] = :D_MILITARY_AMMUNITION_RAISE_AMOUNT_LOTS ; NUME[:D_MILITARY_AMMUNITION_RAISE_AMOUNT_LOTS] = 1187
    ENUM[1188] = :D_MILITARY_AMMUNITION_MATERIAL ; NUME[:D_MILITARY_AMMUNITION_MATERIAL] = 1188
    ENUM[1189] = :D_MILITARY_AMMUNITION_COMBAT ; NUME[:D_MILITARY_AMMUNITION_COMBAT] = 1189
    ENUM[1190] = :D_MILITARY_AMMUNITION_TRAINING ; NUME[:D_MILITARY_AMMUNITION_TRAINING] = 1190
    ENUM[1191] = :D_MILITARY_TRAINING ; NUME[:D_MILITARY_TRAINING] = 1191
    ENUM[1192] = :D_MILITARY_SCHEDULE ; NUME[:D_MILITARY_SCHEDULE] = 1192
    ENUM[1193] = :D_MILITARY_ADD_UNIFORM ; NUME[:D_MILITARY_ADD_UNIFORM] = 1193
    ENUM[1194] = :D_MILITARY_DELETE_UNIFORM ; NUME[:D_MILITARY_DELETE_UNIFORM] = 1194
    ENUM[1195] = :D_MILITARY_NAME_UNIFORM ; NUME[:D_MILITARY_NAME_UNIFORM] = 1195
    ENUM[1196] = :D_MILITARY_NAME_SQUAD ; NUME[:D_MILITARY_NAME_SQUAD] = 1196
    ENUM[1197] = :D_MILITARY_ADD_ARMOR ; NUME[:D_MILITARY_ADD_ARMOR] = 1197
    ENUM[1198] = :D_MILITARY_ADD_PANTS ; NUME[:D_MILITARY_ADD_PANTS] = 1198
    ENUM[1199] = :D_MILITARY_ADD_HELM ; NUME[:D_MILITARY_ADD_HELM] = 1199
    ENUM[1200] = :D_MILITARY_ADD_GLOVES ; NUME[:D_MILITARY_ADD_GLOVES] = 1200
    ENUM[1201] = :D_MILITARY_ADD_BOOTS ; NUME[:D_MILITARY_ADD_BOOTS] = 1201
    ENUM[1202] = :D_MILITARY_ADD_SHIELD ; NUME[:D_MILITARY_ADD_SHIELD] = 1202
    ENUM[1203] = :D_MILITARY_ADD_WEAPON ; NUME[:D_MILITARY_ADD_WEAPON] = 1203
    ENUM[1204] = :D_MILITARY_ADD_MATERIAL ; NUME[:D_MILITARY_ADD_MATERIAL] = 1204
    ENUM[1205] = :D_MILITARY_ADD_COLOR ; NUME[:D_MILITARY_ADD_COLOR] = 1205
    ENUM[1206] = :D_MILITARY_REPLACE_CLOTHING ; NUME[:D_MILITARY_REPLACE_CLOTHING] = 1206
    ENUM[1207] = :D_MILITARY_EXACT_MATCH ; NUME[:D_MILITARY_EXACT_MATCH] = 1207
    ENUM[1208] = :D_SQUADS_MOVE ; NUME[:D_SQUADS_MOVE] = 1208
    ENUM[1209] = :D_SQUADS_KILL ; NUME[:D_SQUADS_KILL] = 1209
    ENUM[1210] = :D_SQUADS_KILL_LIST ; NUME[:D_SQUADS_KILL_LIST] = 1210
    ENUM[1211] = :D_SQUADS_KILL_RECT ; NUME[:D_SQUADS_KILL_RECT] = 1211
    ENUM[1212] = :D_SQUADS_SCHEDULE ; NUME[:D_SQUADS_SCHEDULE] = 1212
    ENUM[1213] = :D_SQUADS_CANCEL_ORDER ; NUME[:D_SQUADS_CANCEL_ORDER] = 1213
    ENUM[1214] = :D_SQUADS_ALERT ; NUME[:D_SQUADS_ALERT] = 1214
    ENUM[1215] = :D_SQUADS_SELECT_INDIVIDUALS ; NUME[:D_SQUADS_SELECT_INDIVIDUALS] = 1215
    ENUM[1216] = :D_SQUADS_CENTER ; NUME[:D_SQUADS_CENTER] = 1216
    ENUM[1217] = :D_SQUAD_SCH_SLEEP ; NUME[:D_SQUAD_SCH_SLEEP] = 1217
    ENUM[1218] = :D_SQUAD_SCH_CIVILIAN_UNIFORM ; NUME[:D_SQUAD_SCH_CIVILIAN_UNIFORM] = 1218
    ENUM[1219] = :D_SQUAD_SCH_GIVE_ORDER ; NUME[:D_SQUAD_SCH_GIVE_ORDER] = 1219
    ENUM[1220] = :D_SQUAD_SCH_EDIT_ORDER ; NUME[:D_SQUAD_SCH_EDIT_ORDER] = 1220
    ENUM[1221] = :D_SQUAD_SCH_CANCEL_ORDER ; NUME[:D_SQUAD_SCH_CANCEL_ORDER] = 1221
    ENUM[1222] = :D_SQUAD_SCH_COPY_ORDERS ; NUME[:D_SQUAD_SCH_COPY_ORDERS] = 1222
    ENUM[1223] = :D_SQUAD_SCH_PASTE_ORDERS ; NUME[:D_SQUAD_SCH_PASTE_ORDERS] = 1223
    ENUM[1224] = :D_SQUAD_SCH_MS_NAME ; NUME[:D_SQUAD_SCH_MS_NAME] = 1224
    ENUM[1225] = :STRING_A000 ; NUME[:STRING_A000] = 1225
    ENUM[1226] = :STRING_A001 ; NUME[:STRING_A001] = 1226
    ENUM[1227] = :STRING_A002 ; NUME[:STRING_A002] = 1227
    ENUM[1228] = :STRING_A003 ; NUME[:STRING_A003] = 1228
    ENUM[1229] = :STRING_A004 ; NUME[:STRING_A004] = 1229
    ENUM[1230] = :STRING_A005 ; NUME[:STRING_A005] = 1230
    ENUM[1231] = :STRING_A006 ; NUME[:STRING_A006] = 1231
    ENUM[1232] = :STRING_A007 ; NUME[:STRING_A007] = 1232
    ENUM[1233] = :STRING_A008 ; NUME[:STRING_A008] = 1233
    ENUM[1234] = :STRING_A009 ; NUME[:STRING_A009] = 1234
    ENUM[1235] = :STRING_A010 ; NUME[:STRING_A010] = 1235
    ENUM[1236] = :STRING_A011 ; NUME[:STRING_A011] = 1236
    ENUM[1237] = :STRING_A012 ; NUME[:STRING_A012] = 1237
    ENUM[1238] = :STRING_A013 ; NUME[:STRING_A013] = 1238
    ENUM[1239] = :STRING_A014 ; NUME[:STRING_A014] = 1239
    ENUM[1240] = :STRING_A015 ; NUME[:STRING_A015] = 1240
    ENUM[1241] = :STRING_A016 ; NUME[:STRING_A016] = 1241
    ENUM[1242] = :STRING_A017 ; NUME[:STRING_A017] = 1242
    ENUM[1243] = :STRING_A018 ; NUME[:STRING_A018] = 1243
    ENUM[1244] = :STRING_A019 ; NUME[:STRING_A019] = 1244
    ENUM[1245] = :STRING_A020 ; NUME[:STRING_A020] = 1245
    ENUM[1246] = :STRING_A021 ; NUME[:STRING_A021] = 1246
    ENUM[1247] = :STRING_A022 ; NUME[:STRING_A022] = 1247
    ENUM[1248] = :STRING_A023 ; NUME[:STRING_A023] = 1248
    ENUM[1249] = :STRING_A024 ; NUME[:STRING_A024] = 1249
    ENUM[1250] = :STRING_A025 ; NUME[:STRING_A025] = 1250
    ENUM[1251] = :STRING_A026 ; NUME[:STRING_A026] = 1251
    ENUM[1252] = :STRING_A027 ; NUME[:STRING_A027] = 1252
    ENUM[1253] = :STRING_A028 ; NUME[:STRING_A028] = 1253
    ENUM[1254] = :STRING_A029 ; NUME[:STRING_A029] = 1254
    ENUM[1255] = :STRING_A030 ; NUME[:STRING_A030] = 1255
    ENUM[1256] = :STRING_A031 ; NUME[:STRING_A031] = 1256
    ENUM[1257] = :STRING_A032 ; NUME[:STRING_A032] = 1257
    ENUM[1258] = :STRING_A033 ; NUME[:STRING_A033] = 1258
    ENUM[1259] = :STRING_A034 ; NUME[:STRING_A034] = 1259
    ENUM[1260] = :STRING_A035 ; NUME[:STRING_A035] = 1260
    ENUM[1261] = :STRING_A036 ; NUME[:STRING_A036] = 1261
    ENUM[1262] = :STRING_A037 ; NUME[:STRING_A037] = 1262
    ENUM[1263] = :STRING_A038 ; NUME[:STRING_A038] = 1263
    ENUM[1264] = :STRING_A039 ; NUME[:STRING_A039] = 1264
    ENUM[1265] = :STRING_A040 ; NUME[:STRING_A040] = 1265
    ENUM[1266] = :STRING_A041 ; NUME[:STRING_A041] = 1266
    ENUM[1267] = :STRING_A042 ; NUME[:STRING_A042] = 1267
    ENUM[1268] = :STRING_A043 ; NUME[:STRING_A043] = 1268
    ENUM[1269] = :STRING_A044 ; NUME[:STRING_A044] = 1269
    ENUM[1270] = :STRING_A045 ; NUME[:STRING_A045] = 1270
    ENUM[1271] = :STRING_A046 ; NUME[:STRING_A046] = 1271
    ENUM[1272] = :STRING_A047 ; NUME[:STRING_A047] = 1272
    ENUM[1273] = :STRING_A048 ; NUME[:STRING_A048] = 1273
    ENUM[1274] = :STRING_A049 ; NUME[:STRING_A049] = 1274
    ENUM[1275] = :STRING_A050 ; NUME[:STRING_A050] = 1275
    ENUM[1276] = :STRING_A051 ; NUME[:STRING_A051] = 1276
    ENUM[1277] = :STRING_A052 ; NUME[:STRING_A052] = 1277
    ENUM[1278] = :STRING_A053 ; NUME[:STRING_A053] = 1278
    ENUM[1279] = :STRING_A054 ; NUME[:STRING_A054] = 1279
    ENUM[1280] = :STRING_A055 ; NUME[:STRING_A055] = 1280
    ENUM[1281] = :STRING_A056 ; NUME[:STRING_A056] = 1281
    ENUM[1282] = :STRING_A057 ; NUME[:STRING_A057] = 1282
    ENUM[1283] = :STRING_A058 ; NUME[:STRING_A058] = 1283
    ENUM[1284] = :STRING_A059 ; NUME[:STRING_A059] = 1284
    ENUM[1285] = :STRING_A060 ; NUME[:STRING_A060] = 1285
    ENUM[1286] = :STRING_A061 ; NUME[:STRING_A061] = 1286
    ENUM[1287] = :STRING_A062 ; NUME[:STRING_A062] = 1287
    ENUM[1288] = :STRING_A063 ; NUME[:STRING_A063] = 1288
    ENUM[1289] = :STRING_A064 ; NUME[:STRING_A064] = 1289
    ENUM[1290] = :STRING_A065 ; NUME[:STRING_A065] = 1290
    ENUM[1291] = :STRING_A066 ; NUME[:STRING_A066] = 1291
    ENUM[1292] = :STRING_A067 ; NUME[:STRING_A067] = 1292
    ENUM[1293] = :STRING_A068 ; NUME[:STRING_A068] = 1293
    ENUM[1294] = :STRING_A069 ; NUME[:STRING_A069] = 1294
    ENUM[1295] = :STRING_A070 ; NUME[:STRING_A070] = 1295
    ENUM[1296] = :STRING_A071 ; NUME[:STRING_A071] = 1296
    ENUM[1297] = :STRING_A072 ; NUME[:STRING_A072] = 1297
    ENUM[1298] = :STRING_A073 ; NUME[:STRING_A073] = 1298
    ENUM[1299] = :STRING_A074 ; NUME[:STRING_A074] = 1299
    ENUM[1300] = :STRING_A075 ; NUME[:STRING_A075] = 1300
    ENUM[1301] = :STRING_A076 ; NUME[:STRING_A076] = 1301
    ENUM[1302] = :STRING_A077 ; NUME[:STRING_A077] = 1302
    ENUM[1303] = :STRING_A078 ; NUME[:STRING_A078] = 1303
    ENUM[1304] = :STRING_A079 ; NUME[:STRING_A079] = 1304
    ENUM[1305] = :STRING_A080 ; NUME[:STRING_A080] = 1305
    ENUM[1306] = :STRING_A081 ; NUME[:STRING_A081] = 1306
    ENUM[1307] = :STRING_A082 ; NUME[:STRING_A082] = 1307
    ENUM[1308] = :STRING_A083 ; NUME[:STRING_A083] = 1308
    ENUM[1309] = :STRING_A084 ; NUME[:STRING_A084] = 1309
    ENUM[1310] = :STRING_A085 ; NUME[:STRING_A085] = 1310
    ENUM[1311] = :STRING_A086 ; NUME[:STRING_A086] = 1311
    ENUM[1312] = :STRING_A087 ; NUME[:STRING_A087] = 1312
    ENUM[1313] = :STRING_A088 ; NUME[:STRING_A088] = 1313
    ENUM[1314] = :STRING_A089 ; NUME[:STRING_A089] = 1314
    ENUM[1315] = :STRING_A090 ; NUME[:STRING_A090] = 1315
    ENUM[1316] = :STRING_A091 ; NUME[:STRING_A091] = 1316
    ENUM[1317] = :STRING_A092 ; NUME[:STRING_A092] = 1317
    ENUM[1318] = :STRING_A093 ; NUME[:STRING_A093] = 1318
    ENUM[1319] = :STRING_A094 ; NUME[:STRING_A094] = 1319
    ENUM[1320] = :STRING_A095 ; NUME[:STRING_A095] = 1320
    ENUM[1321] = :STRING_A096 ; NUME[:STRING_A096] = 1321
    ENUM[1322] = :STRING_A097 ; NUME[:STRING_A097] = 1322
    ENUM[1323] = :STRING_A098 ; NUME[:STRING_A098] = 1323
    ENUM[1324] = :STRING_A099 ; NUME[:STRING_A099] = 1324
    ENUM[1325] = :STRING_A100 ; NUME[:STRING_A100] = 1325
    ENUM[1326] = :STRING_A101 ; NUME[:STRING_A101] = 1326
    ENUM[1327] = :STRING_A102 ; NUME[:STRING_A102] = 1327
    ENUM[1328] = :STRING_A103 ; NUME[:STRING_A103] = 1328
    ENUM[1329] = :STRING_A104 ; NUME[:STRING_A104] = 1329
    ENUM[1330] = :STRING_A105 ; NUME[:STRING_A105] = 1330
    ENUM[1331] = :STRING_A106 ; NUME[:STRING_A106] = 1331
    ENUM[1332] = :STRING_A107 ; NUME[:STRING_A107] = 1332
    ENUM[1333] = :STRING_A108 ; NUME[:STRING_A108] = 1333
    ENUM[1334] = :STRING_A109 ; NUME[:STRING_A109] = 1334
    ENUM[1335] = :STRING_A110 ; NUME[:STRING_A110] = 1335
    ENUM[1336] = :STRING_A111 ; NUME[:STRING_A111] = 1336
    ENUM[1337] = :STRING_A112 ; NUME[:STRING_A112] = 1337
    ENUM[1338] = :STRING_A113 ; NUME[:STRING_A113] = 1338
    ENUM[1339] = :STRING_A114 ; NUME[:STRING_A114] = 1339
    ENUM[1340] = :STRING_A115 ; NUME[:STRING_A115] = 1340
    ENUM[1341] = :STRING_A116 ; NUME[:STRING_A116] = 1341
    ENUM[1342] = :STRING_A117 ; NUME[:STRING_A117] = 1342
    ENUM[1343] = :STRING_A118 ; NUME[:STRING_A118] = 1343
    ENUM[1344] = :STRING_A119 ; NUME[:STRING_A119] = 1344
    ENUM[1345] = :STRING_A120 ; NUME[:STRING_A120] = 1345
    ENUM[1346] = :STRING_A121 ; NUME[:STRING_A121] = 1346
    ENUM[1347] = :STRING_A122 ; NUME[:STRING_A122] = 1347
    ENUM[1348] = :STRING_A123 ; NUME[:STRING_A123] = 1348
    ENUM[1349] = :STRING_A124 ; NUME[:STRING_A124] = 1349
    ENUM[1350] = :STRING_A125 ; NUME[:STRING_A125] = 1350
    ENUM[1351] = :STRING_A126 ; NUME[:STRING_A126] = 1351
    ENUM[1352] = :STRING_A128 ; NUME[:STRING_A128] = 1352
    ENUM[1353] = :STRING_A129 ; NUME[:STRING_A129] = 1353
    ENUM[1354] = :STRING_A130 ; NUME[:STRING_A130] = 1354
    ENUM[1355] = :STRING_A131 ; NUME[:STRING_A131] = 1355
    ENUM[1356] = :STRING_A132 ; NUME[:STRING_A132] = 1356
    ENUM[1357] = :STRING_A133 ; NUME[:STRING_A133] = 1357
    ENUM[1358] = :STRING_A134 ; NUME[:STRING_A134] = 1358
    ENUM[1359] = :STRING_A135 ; NUME[:STRING_A135] = 1359
    ENUM[1360] = :STRING_A136 ; NUME[:STRING_A136] = 1360
    ENUM[1361] = :STRING_A137 ; NUME[:STRING_A137] = 1361
    ENUM[1362] = :STRING_A138 ; NUME[:STRING_A138] = 1362
    ENUM[1363] = :STRING_A139 ; NUME[:STRING_A139] = 1363
    ENUM[1364] = :STRING_A140 ; NUME[:STRING_A140] = 1364
    ENUM[1365] = :STRING_A141 ; NUME[:STRING_A141] = 1365
    ENUM[1366] = :STRING_A142 ; NUME[:STRING_A142] = 1366
    ENUM[1367] = :STRING_A143 ; NUME[:STRING_A143] = 1367
    ENUM[1368] = :STRING_A144 ; NUME[:STRING_A144] = 1368
    ENUM[1369] = :STRING_A145 ; NUME[:STRING_A145] = 1369
    ENUM[1370] = :STRING_A146 ; NUME[:STRING_A146] = 1370
    ENUM[1371] = :STRING_A147 ; NUME[:STRING_A147] = 1371
    ENUM[1372] = :STRING_A148 ; NUME[:STRING_A148] = 1372
    ENUM[1373] = :STRING_A149 ; NUME[:STRING_A149] = 1373
    ENUM[1374] = :STRING_A150 ; NUME[:STRING_A150] = 1374
    ENUM[1375] = :STRING_A151 ; NUME[:STRING_A151] = 1375
    ENUM[1376] = :STRING_A152 ; NUME[:STRING_A152] = 1376
    ENUM[1377] = :STRING_A153 ; NUME[:STRING_A153] = 1377
    ENUM[1378] = :STRING_A154 ; NUME[:STRING_A154] = 1378
    ENUM[1379] = :STRING_A155 ; NUME[:STRING_A155] = 1379
    ENUM[1380] = :STRING_A156 ; NUME[:STRING_A156] = 1380
    ENUM[1381] = :STRING_A157 ; NUME[:STRING_A157] = 1381
    ENUM[1382] = :STRING_A158 ; NUME[:STRING_A158] = 1382
    ENUM[1383] = :STRING_A159 ; NUME[:STRING_A159] = 1383
    ENUM[1384] = :STRING_A160 ; NUME[:STRING_A160] = 1384
    ENUM[1385] = :STRING_A161 ; NUME[:STRING_A161] = 1385
    ENUM[1386] = :STRING_A162 ; NUME[:STRING_A162] = 1386
    ENUM[1387] = :STRING_A163 ; NUME[:STRING_A163] = 1387
    ENUM[1388] = :STRING_A164 ; NUME[:STRING_A164] = 1388
    ENUM[1389] = :STRING_A165 ; NUME[:STRING_A165] = 1389
    ENUM[1390] = :STRING_A166 ; NUME[:STRING_A166] = 1390
    ENUM[1391] = :STRING_A167 ; NUME[:STRING_A167] = 1391
    ENUM[1392] = :STRING_A168 ; NUME[:STRING_A168] = 1392
    ENUM[1393] = :STRING_A169 ; NUME[:STRING_A169] = 1393
    ENUM[1394] = :STRING_A170 ; NUME[:STRING_A170] = 1394
    ENUM[1395] = :STRING_A171 ; NUME[:STRING_A171] = 1395
    ENUM[1396] = :STRING_A172 ; NUME[:STRING_A172] = 1396
    ENUM[1397] = :STRING_A173 ; NUME[:STRING_A173] = 1397
    ENUM[1398] = :STRING_A174 ; NUME[:STRING_A174] = 1398
    ENUM[1399] = :STRING_A175 ; NUME[:STRING_A175] = 1399
    ENUM[1400] = :STRING_A176 ; NUME[:STRING_A176] = 1400
    ENUM[1401] = :STRING_A177 ; NUME[:STRING_A177] = 1401
    ENUM[1402] = :STRING_A178 ; NUME[:STRING_A178] = 1402
    ENUM[1403] = :STRING_A179 ; NUME[:STRING_A179] = 1403
    ENUM[1404] = :STRING_A180 ; NUME[:STRING_A180] = 1404
    ENUM[1405] = :STRING_A181 ; NUME[:STRING_A181] = 1405
    ENUM[1406] = :STRING_A182 ; NUME[:STRING_A182] = 1406
    ENUM[1407] = :STRING_A183 ; NUME[:STRING_A183] = 1407
    ENUM[1408] = :STRING_A184 ; NUME[:STRING_A184] = 1408
    ENUM[1409] = :STRING_A185 ; NUME[:STRING_A185] = 1409
    ENUM[1410] = :STRING_A186 ; NUME[:STRING_A186] = 1410
    ENUM[1411] = :STRING_A187 ; NUME[:STRING_A187] = 1411
    ENUM[1412] = :STRING_A188 ; NUME[:STRING_A188] = 1412
    ENUM[1413] = :STRING_A189 ; NUME[:STRING_A189] = 1413
    ENUM[1414] = :STRING_A190 ; NUME[:STRING_A190] = 1414
    ENUM[1415] = :STRING_A191 ; NUME[:STRING_A191] = 1415
    ENUM[1416] = :STRING_A192 ; NUME[:STRING_A192] = 1416
    ENUM[1417] = :STRING_A193 ; NUME[:STRING_A193] = 1417
    ENUM[1418] = :STRING_A194 ; NUME[:STRING_A194] = 1418
    ENUM[1419] = :STRING_A195 ; NUME[:STRING_A195] = 1419
    ENUM[1420] = :STRING_A196 ; NUME[:STRING_A196] = 1420
    ENUM[1421] = :STRING_A197 ; NUME[:STRING_A197] = 1421
    ENUM[1422] = :STRING_A198 ; NUME[:STRING_A198] = 1422
    ENUM[1423] = :STRING_A199 ; NUME[:STRING_A199] = 1423
    ENUM[1424] = :STRING_A200 ; NUME[:STRING_A200] = 1424
    ENUM[1425] = :STRING_A201 ; NUME[:STRING_A201] = 1425
    ENUM[1426] = :STRING_A202 ; NUME[:STRING_A202] = 1426
    ENUM[1427] = :STRING_A203 ; NUME[:STRING_A203] = 1427
    ENUM[1428] = :STRING_A204 ; NUME[:STRING_A204] = 1428
    ENUM[1429] = :STRING_A205 ; NUME[:STRING_A205] = 1429
    ENUM[1430] = :STRING_A206 ; NUME[:STRING_A206] = 1430
    ENUM[1431] = :STRING_A207 ; NUME[:STRING_A207] = 1431
    ENUM[1432] = :STRING_A208 ; NUME[:STRING_A208] = 1432
    ENUM[1433] = :STRING_A209 ; NUME[:STRING_A209] = 1433
    ENUM[1434] = :STRING_A210 ; NUME[:STRING_A210] = 1434
    ENUM[1435] = :STRING_A211 ; NUME[:STRING_A211] = 1435
    ENUM[1436] = :STRING_A212 ; NUME[:STRING_A212] = 1436
    ENUM[1437] = :STRING_A213 ; NUME[:STRING_A213] = 1437
    ENUM[1438] = :STRING_A214 ; NUME[:STRING_A214] = 1438
    ENUM[1439] = :STRING_A215 ; NUME[:STRING_A215] = 1439
    ENUM[1440] = :STRING_A216 ; NUME[:STRING_A216] = 1440
    ENUM[1441] = :STRING_A217 ; NUME[:STRING_A217] = 1441
    ENUM[1442] = :STRING_A218 ; NUME[:STRING_A218] = 1442
    ENUM[1443] = :STRING_A219 ; NUME[:STRING_A219] = 1443
    ENUM[1444] = :STRING_A220 ; NUME[:STRING_A220] = 1444
    ENUM[1445] = :STRING_A221 ; NUME[:STRING_A221] = 1445
    ENUM[1446] = :STRING_A222 ; NUME[:STRING_A222] = 1446
    ENUM[1447] = :STRING_A223 ; NUME[:STRING_A223] = 1447
    ENUM[1448] = :STRING_A224 ; NUME[:STRING_A224] = 1448
    ENUM[1449] = :STRING_A225 ; NUME[:STRING_A225] = 1449
    ENUM[1450] = :STRING_A226 ; NUME[:STRING_A226] = 1450
    ENUM[1451] = :STRING_A227 ; NUME[:STRING_A227] = 1451
    ENUM[1452] = :STRING_A228 ; NUME[:STRING_A228] = 1452
    ENUM[1453] = :STRING_A229 ; NUME[:STRING_A229] = 1453
    ENUM[1454] = :STRING_A230 ; NUME[:STRING_A230] = 1454
    ENUM[1455] = :STRING_A231 ; NUME[:STRING_A231] = 1455
    ENUM[1456] = :STRING_A232 ; NUME[:STRING_A232] = 1456
    ENUM[1457] = :STRING_A233 ; NUME[:STRING_A233] = 1457
    ENUM[1458] = :STRING_A234 ; NUME[:STRING_A234] = 1458
    ENUM[1459] = :STRING_A235 ; NUME[:STRING_A235] = 1459
    ENUM[1460] = :STRING_A236 ; NUME[:STRING_A236] = 1460
    ENUM[1461] = :STRING_A237 ; NUME[:STRING_A237] = 1461
    ENUM[1462] = :STRING_A238 ; NUME[:STRING_A238] = 1462
    ENUM[1463] = :STRING_A239 ; NUME[:STRING_A239] = 1463
    ENUM[1464] = :STRING_A240 ; NUME[:STRING_A240] = 1464
    ENUM[1465] = :STRING_A241 ; NUME[:STRING_A241] = 1465
    ENUM[1466] = :STRING_A242 ; NUME[:STRING_A242] = 1466
    ENUM[1467] = :STRING_A243 ; NUME[:STRING_A243] = 1467
    ENUM[1468] = :STRING_A244 ; NUME[:STRING_A244] = 1468
    ENUM[1469] = :STRING_A245 ; NUME[:STRING_A245] = 1469
    ENUM[1470] = :STRING_A246 ; NUME[:STRING_A246] = 1470
    ENUM[1471] = :STRING_A247 ; NUME[:STRING_A247] = 1471
    ENUM[1472] = :STRING_A248 ; NUME[:STRING_A248] = 1472
    ENUM[1473] = :STRING_A249 ; NUME[:STRING_A249] = 1473
    ENUM[1474] = :STRING_A250 ; NUME[:STRING_A250] = 1474
    ENUM[1475] = :STRING_A251 ; NUME[:STRING_A251] = 1475
    ENUM[1476] = :STRING_A252 ; NUME[:STRING_A252] = 1476
    ENUM[1477] = :STRING_A253 ; NUME[:STRING_A253] = 1477
    ENUM[1478] = :STRING_A254 ; NUME[:STRING_A254] = 1478
    ENUM[1479] = :STRING_A255 ; NUME[:STRING_A255] = 1479
    ENUM[1480] = :KEYBINDING_COMPLETE ; NUME[:KEYBINDING_COMPLETE] = 1480
end

class ItemMagicnessType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Sparkle ; NUME[:Sparkle] = 0
    ENUM[1] = :AirWarped ; NUME[:AirWarped] = 1
    ENUM[2] = :Whistle ; NUME[:Whistle] = 2
    ENUM[3] = :OddlySquare ; NUME[:OddlySquare] = 3
    ENUM[4] = :SmallBumps ; NUME[:SmallBumps] = 4
    ENUM[5] = :EarthSmell ; NUME[:EarthSmell] = 5
    ENUM[6] = :Lightning ; NUME[:Lightning] = 6
    ENUM[7] = :GrayHairs ; NUME[:GrayHairs] = 7
    ENUM[8] = :RustlingLeaves ; NUME[:RustlingLeaves] = 8
end

class ItemQuality < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Ordinary ; NUME[:Ordinary] = 0
    ENUM[1] = :WellCrafted ; NUME[:WellCrafted] = 1
    ENUM[2] = :FinelyCrafted ; NUME[:FinelyCrafted] = 2
    ENUM[3] = :Superior ; NUME[:Superior] = 3
    ENUM[4] = :Exceptional ; NUME[:Exceptional] = 4
    ENUM[5] = :Masterful ; NUME[:Masterful] = 5
    ENUM[6] = :Artifact ; NUME[:Artifact] = 6
end

class ItemType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Caption = Hash.new
    IsRawable = Hash.new
    IsStackable = Hash.new
    IsCasteMat = Hash.new
    Classname = Hash.new
    ENUM[-1] = :NONE ; NUME[:NONE] = -1
    ENUM[0] = :BAR ; NUME[:BAR] = 0 ; Caption[:BAR] = 'bars' ; Classname[:BAR] = 'item_barst'
    ENUM[1] = :SMALLGEM ; NUME[:SMALLGEM] = 1 ; Caption[:SMALLGEM] = 'cut gem' ; Classname[:SMALLGEM] = 'item_smallgemst'
    ENUM[2] = :BLOCKS ; NUME[:BLOCKS] = 2 ; Caption[:BLOCKS] = 'blocks' ; Classname[:BLOCKS] = 'item_blocksst'
    ENUM[3] = :ROUGH ; NUME[:ROUGH] = 3 ; Caption[:ROUGH] = 'rough gem' ; Classname[:ROUGH] = 'item_roughst'
    ENUM[4] = :BOULDER ; NUME[:BOULDER] = 4 ; Caption[:BOULDER] = 'boulder' ; Classname[:BOULDER] = 'item_boulderst'
    ENUM[5] = :WOOD ; NUME[:WOOD] = 5 ; Caption[:WOOD] = 'logs' ; Classname[:WOOD] = 'item_woodst'
    ENUM[6] = :DOOR ; NUME[:DOOR] = 6 ; Caption[:DOOR] = 'door' ; Classname[:DOOR] = 'item_doorst'
    ENUM[7] = :FLOODGATE ; NUME[:FLOODGATE] = 7 ; Caption[:FLOODGATE] = 'floodgate' ; Classname[:FLOODGATE] = 'item_floodgatest'
    ENUM[8] = :BED ; NUME[:BED] = 8 ; Caption[:BED] = 'bed' ; Classname[:BED] = 'item_bedst'
    ENUM[9] = :CHAIR ; NUME[:CHAIR] = 9 ; Caption[:CHAIR] = 'chair' ; Classname[:CHAIR] = 'item_chairst'
    ENUM[10] = :CHAIN ; NUME[:CHAIN] = 10 ; Caption[:CHAIN] = 'chain' ; Classname[:CHAIN] = 'item_chainst'
    ENUM[11] = :FLASK ; NUME[:FLASK] = 11 ; Caption[:FLASK] = 'flask' ; Classname[:FLASK] = 'item_flaskst'
    ENUM[12] = :GOBLET ; NUME[:GOBLET] = 12 ; Caption[:GOBLET] = 'goblet' ; Classname[:GOBLET] = 'item_gobletst'
    ENUM[13] = :INSTRUMENT ; NUME[:INSTRUMENT] = 13 ; Caption[:INSTRUMENT] = 'instrument' ; IsRawable[:INSTRUMENT] = true ; Classname[:INSTRUMENT] = 'item_instrumentst'
    ENUM[14] = :TOY ; NUME[:TOY] = 14 ; Caption[:TOY] = 'toy' ; IsRawable[:TOY] = true ; Classname[:TOY] = 'item_toyst'
    ENUM[15] = :WINDOW ; NUME[:WINDOW] = 15 ; Caption[:WINDOW] = 'window' ; Classname[:WINDOW] = 'item_windowst'
    ENUM[16] = :CAGE ; NUME[:CAGE] = 16 ; Caption[:CAGE] = 'cage' ; Classname[:CAGE] = 'item_cagest'
    ENUM[17] = :BARREL ; NUME[:BARREL] = 17 ; Caption[:BARREL] = 'barrel' ; Classname[:BARREL] = 'item_barrelst'
    ENUM[18] = :BUCKET ; NUME[:BUCKET] = 18 ; Caption[:BUCKET] = 'bucket' ; Classname[:BUCKET] = 'item_bucketst'
    ENUM[19] = :ANIMALTRAP ; NUME[:ANIMALTRAP] = 19 ; Caption[:ANIMALTRAP] = 'animal trap' ; Classname[:ANIMALTRAP] = 'item_animaltrapst'
    ENUM[20] = :TABLE ; NUME[:TABLE] = 20 ; Caption[:TABLE] = 'table' ; Classname[:TABLE] = 'item_tablest'
    ENUM[21] = :COFFIN ; NUME[:COFFIN] = 21 ; Caption[:COFFIN] = 'coffin' ; Classname[:COFFIN] = 'item_coffinst'
    ENUM[22] = :STATUE ; NUME[:STATUE] = 22 ; Caption[:STATUE] = 'statue' ; Classname[:STATUE] = 'item_statuest'
    ENUM[23] = :CORPSE ; NUME[:CORPSE] = 23 ; Caption[:CORPSE] = 'corpse' ; Classname[:CORPSE] = 'item_corpsest'
    ENUM[24] = :WEAPON ; NUME[:WEAPON] = 24 ; Caption[:WEAPON] = 'weapon' ; IsRawable[:WEAPON] = true ; Classname[:WEAPON] = 'item_weaponst'
    ENUM[25] = :ARMOR ; NUME[:ARMOR] = 25 ; Caption[:ARMOR] = 'armor' ; IsRawable[:ARMOR] = true ; Classname[:ARMOR] = 'item_armorst'
    ENUM[26] = :SHOES ; NUME[:SHOES] = 26 ; Caption[:SHOES] = 'footwear' ; IsRawable[:SHOES] = true ; Classname[:SHOES] = 'item_shoesst'
    ENUM[27] = :SHIELD ; NUME[:SHIELD] = 27 ; Caption[:SHIELD] = 'shield' ; IsRawable[:SHIELD] = true ; Classname[:SHIELD] = 'item_shieldst'
    ENUM[28] = :HELM ; NUME[:HELM] = 28 ; Caption[:HELM] = 'headwear' ; IsRawable[:HELM] = true ; Classname[:HELM] = 'item_helmst'
    ENUM[29] = :GLOVES ; NUME[:GLOVES] = 29 ; Caption[:GLOVES] = 'handwear' ; IsRawable[:GLOVES] = true ; Classname[:GLOVES] = 'item_glovesst'
    ENUM[30] = :BOX ; NUME[:BOX] = 30 ; Caption[:BOX] = 'box/bag' ; Classname[:BOX] = 'item_boxst'
    ENUM[31] = :BIN ; NUME[:BIN] = 31 ; Caption[:BIN] = 'bin' ; Classname[:BIN] = 'item_binst'
    ENUM[32] = :ARMORSTAND ; NUME[:ARMORSTAND] = 32 ; Caption[:ARMORSTAND] = 'armor stand' ; Classname[:ARMORSTAND] = 'item_armorstandst'
    ENUM[33] = :WEAPONRACK ; NUME[:WEAPONRACK] = 33 ; Caption[:WEAPONRACK] = 'weapon rack' ; Classname[:WEAPONRACK] = 'item_weaponrackst'
    ENUM[34] = :CABINET ; NUME[:CABINET] = 34 ; Caption[:CABINET] = 'cabinet' ; Classname[:CABINET] = 'item_cabinetst'
    ENUM[35] = :FIGURINE ; NUME[:FIGURINE] = 35 ; Caption[:FIGURINE] = 'figurine' ; Classname[:FIGURINE] = 'item_figurinest'
    ENUM[36] = :AMULET ; NUME[:AMULET] = 36 ; Caption[:AMULET] = 'amulet' ; Classname[:AMULET] = 'item_amuletst'
    ENUM[37] = :SCEPTER ; NUME[:SCEPTER] = 37 ; Caption[:SCEPTER] = 'scepter' ; Classname[:SCEPTER] = 'item_scepterst'
    ENUM[38] = :AMMO ; NUME[:AMMO] = 38 ; Caption[:AMMO] = 'ammo' ; IsRawable[:AMMO] = true ; IsStackable[:AMMO] = true ; Classname[:AMMO] = 'item_ammost'
    ENUM[39] = :CROWN ; NUME[:CROWN] = 39 ; Caption[:CROWN] = 'crown' ; Classname[:CROWN] = 'item_crownst'
    ENUM[40] = :RING ; NUME[:RING] = 40 ; Caption[:RING] = 'ring' ; Classname[:RING] = 'item_ringst'
    ENUM[41] = :EARRING ; NUME[:EARRING] = 41 ; Caption[:EARRING] = 'earring' ; Classname[:EARRING] = 'item_earringst'
    ENUM[42] = :BRACELET ; NUME[:BRACELET] = 42 ; Caption[:BRACELET] = 'bracelet' ; Classname[:BRACELET] = 'item_braceletst'
    ENUM[43] = :GEM ; NUME[:GEM] = 43 ; Caption[:GEM] = 'large gem' ; Classname[:GEM] = 'item_gemst'
    ENUM[44] = :ANVIL ; NUME[:ANVIL] = 44 ; Caption[:ANVIL] = 'anvil' ; Classname[:ANVIL] = 'item_anvilst'
    ENUM[45] = :CORPSEPIECE ; NUME[:CORPSEPIECE] = 45 ; Caption[:CORPSEPIECE] = 'body part' ; Classname[:CORPSEPIECE] = 'item_corpsepiecest'
    ENUM[46] = :REMAINS ; NUME[:REMAINS] = 46 ; Caption[:REMAINS] = 'remains' ; IsCasteMat[:REMAINS] = true ; IsStackable[:REMAINS] = true ; Classname[:REMAINS] = 'item_remainsst'
    ENUM[47] = :MEAT ; NUME[:MEAT] = 47 ; Caption[:MEAT] = 'meat' ; IsStackable[:MEAT] = true ; Classname[:MEAT] = 'item_meatst'
    ENUM[48] = :FISH ; NUME[:FISH] = 48 ; Caption[:FISH] = 'fish' ; IsCasteMat[:FISH] = true ; IsStackable[:FISH] = true ; Classname[:FISH] = 'item_fishst'
    ENUM[49] = :FISH_RAW ; NUME[:FISH_RAW] = 49 ; Caption[:FISH_RAW] = 'raw fish' ; IsCasteMat[:FISH_RAW] = true ; IsStackable[:FISH_RAW] = true ; Classname[:FISH_RAW] = 'item_fish_rawst'
    ENUM[50] = :VERMIN ; NUME[:VERMIN] = 50 ; Caption[:VERMIN] = 'vermin' ; IsCasteMat[:VERMIN] = true ; Classname[:VERMIN] = 'item_verminst'
    ENUM[51] = :PET ; NUME[:PET] = 51 ; Caption[:PET] = 'tame vermin' ; IsCasteMat[:PET] = true ; Classname[:PET] = 'item_petst'
    ENUM[52] = :SEEDS ; NUME[:SEEDS] = 52 ; Caption[:SEEDS] = 'seeds' ; Classname[:SEEDS] = 'item_seedsst'
    ENUM[53] = :PLANT ; NUME[:PLANT] = 53 ; Caption[:PLANT] = 'plant' ; IsStackable[:PLANT] = true ; Classname[:PLANT] = 'item_plantst'
    ENUM[54] = :SKIN_TANNED ; NUME[:SKIN_TANNED] = 54 ; Caption[:SKIN_TANNED] = 'leather' ; Classname[:SKIN_TANNED] = 'item_skin_tannedst'
    ENUM[55] = :PLANT_GROWTH ; NUME[:PLANT_GROWTH] = 55 ; Caption[:PLANT_GROWTH] = 'plant growth' ; IsStackable[:PLANT_GROWTH] = true ; Classname[:PLANT_GROWTH] = 'item_plant_growthst'
    ENUM[56] = :THREAD ; NUME[:THREAD] = 56 ; Caption[:THREAD] = 'thread' ; Classname[:THREAD] = 'item_threadst'
    ENUM[57] = :CLOTH ; NUME[:CLOTH] = 57 ; Caption[:CLOTH] = 'cloth' ; Classname[:CLOTH] = 'item_clothst'
    ENUM[58] = :TOTEM ; NUME[:TOTEM] = 58 ; Caption[:TOTEM] = 'totem' ; Classname[:TOTEM] = 'item_totemst'
    ENUM[59] = :PANTS ; NUME[:PANTS] = 59 ; Caption[:PANTS] = 'legwear' ; IsRawable[:PANTS] = true ; Classname[:PANTS] = 'item_pantsst'
    ENUM[60] = :BACKPACK ; NUME[:BACKPACK] = 60 ; Caption[:BACKPACK] = 'backpack' ; Classname[:BACKPACK] = 'item_backpackst'
    ENUM[61] = :QUIVER ; NUME[:QUIVER] = 61 ; Caption[:QUIVER] = 'quiver' ; Classname[:QUIVER] = 'item_quiverst'
    ENUM[62] = :CATAPULTPARTS ; NUME[:CATAPULTPARTS] = 62 ; Caption[:CATAPULTPARTS] = 'catapult part' ; Classname[:CATAPULTPARTS] = 'item_catapultpartsst'
    ENUM[63] = :BALLISTAPARTS ; NUME[:BALLISTAPARTS] = 63 ; Caption[:BALLISTAPARTS] = 'ballista part' ; Classname[:BALLISTAPARTS] = 'item_ballistapartsst'
    ENUM[64] = :SIEGEAMMO ; NUME[:SIEGEAMMO] = 64 ; Caption[:SIEGEAMMO] = 'siege ammo' ; IsRawable[:SIEGEAMMO] = true ; Classname[:SIEGEAMMO] = 'item_siegeammost'
    ENUM[65] = :BALLISTAARROWHEAD ; NUME[:BALLISTAARROWHEAD] = 65 ; Caption[:BALLISTAARROWHEAD] = 'ballista arrow head' ; Classname[:BALLISTAARROWHEAD] = 'item_ballistaarrowheadst'
    ENUM[66] = :TRAPPARTS ; NUME[:TRAPPARTS] = 66 ; Caption[:TRAPPARTS] = 'mechanism' ; Classname[:TRAPPARTS] = 'item_trappartsst'
    ENUM[67] = :TRAPCOMP ; NUME[:TRAPCOMP] = 67 ; Caption[:TRAPCOMP] = 'trap component' ; IsRawable[:TRAPCOMP] = true ; Classname[:TRAPCOMP] = 'item_trapcompst'
    ENUM[68] = :DRINK ; NUME[:DRINK] = 68 ; Caption[:DRINK] = 'drink' ; IsStackable[:DRINK] = true ; Classname[:DRINK] = 'item_drinkst'
    ENUM[69] = :POWDER_MISC ; NUME[:POWDER_MISC] = 69 ; Caption[:POWDER_MISC] = 'powder' ; IsStackable[:POWDER_MISC] = true ; Classname[:POWDER_MISC] = 'item_powder_miscst'
    ENUM[70] = :CHEESE ; NUME[:CHEESE] = 70 ; Caption[:CHEESE] = 'cheese' ; IsStackable[:CHEESE] = true ; Classname[:CHEESE] = 'item_cheesest'
    ENUM[71] = :FOOD ; NUME[:FOOD] = 71 ; Caption[:FOOD] = 'prepared meal' ; IsStackable[:FOOD] = true ; Classname[:FOOD] = 'item_foodst'
    ENUM[72] = :LIQUID_MISC ; NUME[:LIQUID_MISC] = 72 ; Caption[:LIQUID_MISC] = 'liquid' ; IsStackable[:LIQUID_MISC] = true ; Classname[:LIQUID_MISC] = 'item_liquid_miscst'
    ENUM[73] = :COIN ; NUME[:COIN] = 73 ; Caption[:COIN] = 'coin' ; IsStackable[:COIN] = true ; Classname[:COIN] = 'item_coinst'
    ENUM[74] = :GLOB ; NUME[:GLOB] = 74 ; Caption[:GLOB] = 'glob' ; Classname[:GLOB] = 'item_globst'
    ENUM[75] = :ROCK ; NUME[:ROCK] = 75 ; Caption[:ROCK] = 'small rock' ; Classname[:ROCK] = 'item_rockst'
    ENUM[76] = :PIPE_SECTION ; NUME[:PIPE_SECTION] = 76 ; Caption[:PIPE_SECTION] = 'pipe section' ; Classname[:PIPE_SECTION] = 'item_pipe_sectionst'
    ENUM[77] = :HATCH_COVER ; NUME[:HATCH_COVER] = 77 ; Caption[:HATCH_COVER] = 'hatch cover' ; Classname[:HATCH_COVER] = 'item_hatch_coverst'
    ENUM[78] = :GRATE ; NUME[:GRATE] = 78 ; Caption[:GRATE] = 'grate' ; Classname[:GRATE] = 'item_gratest'
    ENUM[79] = :QUERN ; NUME[:QUERN] = 79 ; Caption[:QUERN] = 'quern' ; Classname[:QUERN] = 'item_quernst'
    ENUM[80] = :MILLSTONE ; NUME[:MILLSTONE] = 80 ; Caption[:MILLSTONE] = 'millstone' ; Classname[:MILLSTONE] = 'item_millstonest'
    ENUM[81] = :SPLINT ; NUME[:SPLINT] = 81 ; Caption[:SPLINT] = 'splint' ; Classname[:SPLINT] = 'item_splintst'
    ENUM[82] = :CRUTCH ; NUME[:CRUTCH] = 82 ; Caption[:CRUTCH] = 'crutch' ; Classname[:CRUTCH] = 'item_crutchst'
    ENUM[83] = :TRACTION_BENCH ; NUME[:TRACTION_BENCH] = 83 ; Caption[:TRACTION_BENCH] = 'traction bench' ; Classname[:TRACTION_BENCH] = 'item_traction_benchst'
    ENUM[84] = :ORTHOPEDIC_CAST ; NUME[:ORTHOPEDIC_CAST] = 84 ; Caption[:ORTHOPEDIC_CAST] = 'orthopedic cast' ; Classname[:ORTHOPEDIC_CAST] = 'item_orthopedic_castst'
    ENUM[85] = :TOOL ; NUME[:TOOL] = 85 ; Caption[:TOOL] = 'tool' ; IsRawable[:TOOL] = true ; Classname[:TOOL] = 'item_toolst'
    ENUM[86] = :SLAB ; NUME[:SLAB] = 86 ; Caption[:SLAB] = 'slab' ; Classname[:SLAB] = 'item_slabst'
    ENUM[87] = :EGG ; NUME[:EGG] = 87 ; Caption[:EGG] = 'egg' ; IsCasteMat[:EGG] = true ; IsStackable[:EGG] = true ; Classname[:EGG] = 'item_eggst'
    ENUM[88] = :BOOK ; NUME[:BOOK] = 88 ; Caption[:BOOK] = 'book' ; Classname[:BOOK] = 'item_bookst'
end

class ItemsOtherId < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Item = Hash.new(:NONE)
    GenericItem = Hash.new { |h, k| h[k] = [] }
    ENUM[-1] = :ANY ; NUME[:ANY] = -1
    ENUM[0] = :IN_PLAY ; NUME[:IN_PLAY] = 0
    ENUM[1] = :ANY_ARTIFACT ; NUME[:ANY_ARTIFACT] = 1
    ENUM[2] = :WEAPON ; NUME[:WEAPON] = 2 ; Item[:WEAPON] = :WEAPON
    ENUM[3] = :ANY_WEAPON ; NUME[:ANY_WEAPON] = 3 ; GenericItem[:ANY_WEAPON] << :WEAPON ; GenericItem[:ANY_WEAPON] << :TRAPCOMP
    ENUM[4] = :ANY_SPIKE ; NUME[:ANY_SPIKE] = 4 ; GenericItem[:ANY_SPIKE] << :WEAPON ; GenericItem[:ANY_SPIKE] << :TRAPCOMP
    ENUM[5] = :ANY_TRUE_ARMOR ; NUME[:ANY_TRUE_ARMOR] = 5 ; GenericItem[:ANY_TRUE_ARMOR] << :ARMOR
    ENUM[6] = :ANY_ARMOR_HELM ; NUME[:ANY_ARMOR_HELM] = 6 ; GenericItem[:ANY_ARMOR_HELM] << :HELM
    ENUM[7] = :ANY_ARMOR_SHOES ; NUME[:ANY_ARMOR_SHOES] = 7 ; GenericItem[:ANY_ARMOR_SHOES] << :SHOES
    ENUM[8] = :SHIELD ; NUME[:SHIELD] = 8 ; Item[:SHIELD] = :SHIELD
    ENUM[9] = :ANY_ARMOR_GLOVES ; NUME[:ANY_ARMOR_GLOVES] = 9 ; GenericItem[:ANY_ARMOR_GLOVES] << :GLOVES
    ENUM[10] = :ANY_ARMOR_PANTS ; NUME[:ANY_ARMOR_PANTS] = 10 ; GenericItem[:ANY_ARMOR_PANTS] << :PANTS
    ENUM[11] = :QUIVER ; NUME[:QUIVER] = 11 ; Item[:QUIVER] = :QUIVER
    ENUM[12] = :SPLINT ; NUME[:SPLINT] = 12 ; Item[:SPLINT] = :SPLINT
    ENUM[13] = :ORTHOPEDIC_CAST ; NUME[:ORTHOPEDIC_CAST] = 13 ; Item[:ORTHOPEDIC_CAST] = :ORTHOPEDIC_CAST
    ENUM[14] = :CRUTCH ; NUME[:CRUTCH] = 14 ; Item[:CRUTCH] = :CRUTCH
    ENUM[15] = :BACKPACK ; NUME[:BACKPACK] = 15 ; Item[:BACKPACK] = :BACKPACK
    ENUM[16] = :AMMO ; NUME[:AMMO] = 16 ; Item[:AMMO] = :AMMO
    ENUM[17] = :WOOD ; NUME[:WOOD] = 17 ; Item[:WOOD] = :WOOD
    ENUM[18] = :BOULDER ; NUME[:BOULDER] = 18 ; Item[:BOULDER] = :BOULDER
    ENUM[19] = :ROCK ; NUME[:ROCK] = 19 ; Item[:ROCK] = :ROCK
    ENUM[20] = :ANY_REFUSE ; NUME[:ANY_REFUSE] = 20 ; GenericItem[:ANY_REFUSE] << :CORPSE ; GenericItem[:ANY_REFUSE] << :ARMOR ; GenericItem[:ANY_REFUSE] << :SHOES ; GenericItem[:ANY_REFUSE] << :HELM ; GenericItem[:ANY_REFUSE] << :GLOVES ; GenericItem[:ANY_REFUSE] << :CORPSEPIECE ; GenericItem[:ANY_REFUSE] << :REMAINS ; GenericItem[:ANY_REFUSE] << :PANTS ; GenericItem[:ANY_REFUSE] << :MEAT ; GenericItem[:ANY_REFUSE] << :FISH ; GenericItem[:ANY_REFUSE] << :FISH_RAW ; GenericItem[:ANY_REFUSE] << :SEEDS ; GenericItem[:ANY_REFUSE] << :PLANT ; GenericItem[:ANY_REFUSE] << :PLANT_GROWTH ; GenericItem[:ANY_REFUSE] << :CHEESE ; GenericItem[:ANY_REFUSE] << :FOOD ; GenericItem[:ANY_REFUSE] << :EGG ; GenericItem[:ANY_REFUSE] << :GLOB
    ENUM[21] = :ANY_GOOD_FOOD ; NUME[:ANY_GOOD_FOOD] = 21 ; GenericItem[:ANY_GOOD_FOOD] << :BOX ; GenericItem[:ANY_GOOD_FOOD] << :MEAT ; GenericItem[:ANY_GOOD_FOOD] << :FISH ; GenericItem[:ANY_GOOD_FOOD] << :FISH_RAW ; GenericItem[:ANY_GOOD_FOOD] << :SEEDS ; GenericItem[:ANY_GOOD_FOOD] << :PLANT ; GenericItem[:ANY_GOOD_FOOD] << :PLANT_GROWTH ; GenericItem[:ANY_GOOD_FOOD] << :CHEESE ; GenericItem[:ANY_GOOD_FOOD] << :FOOD ; GenericItem[:ANY_GOOD_FOOD] << :EGG
    ENUM[22] = :ANY_AUTO_CLEAN ; NUME[:ANY_AUTO_CLEAN] = 22 ; GenericItem[:ANY_AUTO_CLEAN] << :DRINK ; GenericItem[:ANY_AUTO_CLEAN] << :POWDER_MISC ; GenericItem[:ANY_AUTO_CLEAN] << :LIQUID_MISC ; GenericItem[:ANY_AUTO_CLEAN] << :GLOB
    ENUM[23] = :ANY_GENERIC23 ; NUME[:ANY_GENERIC23] = 23 ; GenericItem[:ANY_GENERIC23] << :CAGE ; GenericItem[:ANY_GENERIC23] << :ANIMALTRAP ; GenericItem[:ANY_GENERIC23] << :FISH_RAW ; GenericItem[:ANY_GENERIC23] << :VERMIN ; GenericItem[:ANY_GENERIC23] << :PLANT
    ENUM[24] = :ANY_GENERIC24 ; NUME[:ANY_GENERIC24] = 24 ; GenericItem[:ANY_GENERIC24] << :CAGE ; GenericItem[:ANY_GENERIC24] << :ANIMALTRAP ; GenericItem[:ANY_GENERIC24] << :CORPSE ; GenericItem[:ANY_GENERIC24] << :CORPSEPIECE ; GenericItem[:ANY_GENERIC24] << :VERMIN
    ENUM[25] = :ANY_FURNITURE ; NUME[:ANY_FURNITURE] = 25
    ENUM[26] = :ANY_CAGE_OR_TRAP ; NUME[:ANY_CAGE_OR_TRAP] = 26 ; GenericItem[:ANY_CAGE_OR_TRAP] << :CAGE ; GenericItem[:ANY_CAGE_OR_TRAP] << :ANIMALTRAP
    ENUM[27] = :ANY_EDIBLE_RAW ; NUME[:ANY_EDIBLE_RAW] = 27
    ENUM[28] = :ANY_EDIBLE_CARNIVORE ; NUME[:ANY_EDIBLE_CARNIVORE] = 28
    ENUM[29] = :ANY_EDIBLE_BONECARN ; NUME[:ANY_EDIBLE_BONECARN] = 29
    ENUM[30] = :ANY_EDIBLE_VERMIN ; NUME[:ANY_EDIBLE_VERMIN] = 30
    ENUM[31] = :ANY_EDIBLE_VERMIN_BOX ; NUME[:ANY_EDIBLE_VERMIN_BOX] = 31 ; GenericItem[:ANY_EDIBLE_VERMIN_BOX] << :BARREL ; GenericItem[:ANY_EDIBLE_VERMIN_BOX] << :BOX
    ENUM[32] = :ANY_CAN_ROT ; NUME[:ANY_CAN_ROT] = 32 ; GenericItem[:ANY_CAN_ROT] << :CORPSE ; GenericItem[:ANY_CAN_ROT] << :CORPSEPIECE ; GenericItem[:ANY_CAN_ROT] << :REMAINS ; GenericItem[:ANY_CAN_ROT] << :MEAT ; GenericItem[:ANY_CAN_ROT] << :FISH ; GenericItem[:ANY_CAN_ROT] << :FISH_RAW ; GenericItem[:ANY_CAN_ROT] << :SEEDS ; GenericItem[:ANY_CAN_ROT] << :PLANT ; GenericItem[:ANY_CAN_ROT] << :PLANT_GROWTH ; GenericItem[:ANY_CAN_ROT] << :CHEESE ; GenericItem[:ANY_CAN_ROT] << :FOOD ; GenericItem[:ANY_CAN_ROT] << :EGG
    ENUM[33] = :ANY_MURDERED ; NUME[:ANY_MURDERED] = 33 ; GenericItem[:ANY_MURDERED] << :CORPSE ; GenericItem[:ANY_MURDERED] << :CORPSEPIECE ; GenericItem[:ANY_MURDERED] << :REMAINS
    ENUM[34] = :ANY_DEAD_DWARF ; NUME[:ANY_DEAD_DWARF] = 34
    ENUM[35] = :ANY_GENERIC35 ; NUME[:ANY_GENERIC35] = 35 ; GenericItem[:ANY_GENERIC35] << :BAR ; GenericItem[:ANY_GENERIC35] << :SMALLGEM ; GenericItem[:ANY_GENERIC35] << :BLOCKS ; GenericItem[:ANY_GENERIC35] << :ROUGH ; GenericItem[:ANY_GENERIC35] << :CHAIN ; GenericItem[:ANY_GENERIC35] << :FLASK ; GenericItem[:ANY_GENERIC35] << :GOBLET ; GenericItem[:ANY_GENERIC35] << :INSTRUMENT ; GenericItem[:ANY_GENERIC35] << :TOY ; GenericItem[:ANY_GENERIC35] << :FIGURINE ; GenericItem[:ANY_GENERIC35] << :AMULET ; GenericItem[:ANY_GENERIC35] << :SCEPTER ; GenericItem[:ANY_GENERIC35] << :AMMO ; GenericItem[:ANY_GENERIC35] << :CROWN ; GenericItem[:ANY_GENERIC35] << :RING ; GenericItem[:ANY_GENERIC35] << :EARRING ; GenericItem[:ANY_GENERIC35] << :BRACELET ; GenericItem[:ANY_GENERIC35] << :GEM ; GenericItem[:ANY_GENERIC35] << :SKIN_TANNED ; GenericItem[:ANY_GENERIC35] << :THREAD ; GenericItem[:ANY_GENERIC35] << :CLOTH ; GenericItem[:ANY_GENERIC35] << :TOTEM ; GenericItem[:ANY_GENERIC35] << :BACKPACK ; GenericItem[:ANY_GENERIC35] << :QUIVER ; GenericItem[:ANY_GENERIC35] << :BALLISTAARROWHEAD ; GenericItem[:ANY_GENERIC35] << :COIN ; GenericItem[:ANY_GENERIC35] << :SPLINT ; GenericItem[:ANY_GENERIC35] << :TOOL ; GenericItem[:ANY_GENERIC35] << :BOOK
    ENUM[36] = :ANY_GENERIC36 ; NUME[:ANY_GENERIC36] = 36 ; GenericItem[:ANY_GENERIC36] << :ARMOR ; GenericItem[:ANY_GENERIC36] << :SHOES ; GenericItem[:ANY_GENERIC36] << :HELM ; GenericItem[:ANY_GENERIC36] << :GLOVES ; GenericItem[:ANY_GENERIC36] << :PANTS
    ENUM[37] = :ANY_GENERIC37 ; NUME[:ANY_GENERIC37] = 37 ; GenericItem[:ANY_GENERIC37] << :WEAPON ; GenericItem[:ANY_GENERIC37] << :TRAPCOMP ; GenericItem[:ANY_GENERIC37] << :SIEGEAMMO
    ENUM[38] = :ANY_GENERIC38 ; NUME[:ANY_GENERIC38] = 38 ; GenericItem[:ANY_GENERIC38] << :ARMOR ; GenericItem[:ANY_GENERIC38] << :SHOES ; GenericItem[:ANY_GENERIC38] << :SHIELD ; GenericItem[:ANY_GENERIC38] << :HELM ; GenericItem[:ANY_GENERIC38] << :GLOVES ; GenericItem[:ANY_GENERIC38] << :PANTS
    ENUM[39] = :DOOR ; NUME[:DOOR] = 39 ; Item[:DOOR] = :DOOR
    ENUM[40] = :FLOODGATE ; NUME[:FLOODGATE] = 40 ; Item[:FLOODGATE] = :FLOODGATE
    ENUM[41] = :HATCH_COVER ; NUME[:HATCH_COVER] = 41 ; Item[:HATCH_COVER] = :HATCH_COVER
    ENUM[42] = :GRATE ; NUME[:GRATE] = 42 ; Item[:GRATE] = :GRATE
    ENUM[43] = :CAGE ; NUME[:CAGE] = 43 ; Item[:CAGE] = :CAGE
    ENUM[44] = :FLASK ; NUME[:FLASK] = 44 ; Item[:FLASK] = :FLASK
    ENUM[45] = :WINDOW ; NUME[:WINDOW] = 45 ; Item[:WINDOW] = :WINDOW
    ENUM[46] = :GOBLET ; NUME[:GOBLET] = 46 ; Item[:GOBLET] = :GOBLET
    ENUM[47] = :INSTRUMENT ; NUME[:INSTRUMENT] = 47 ; Item[:INSTRUMENT] = :INSTRUMENT
    ENUM[48] = :TOY ; NUME[:TOY] = 48 ; Item[:TOY] = :TOY
    ENUM[49] = :TOOL ; NUME[:TOOL] = 49 ; Item[:TOOL] = :TOOL
    ENUM[50] = :BUCKET ; NUME[:BUCKET] = 50 ; Item[:BUCKET] = :BUCKET
    ENUM[51] = :BARREL ; NUME[:BARREL] = 51 ; Item[:BARREL] = :BARREL
    ENUM[52] = :CHAIN ; NUME[:CHAIN] = 52 ; Item[:CHAIN] = :CHAIN
    ENUM[53] = :ANIMALTRAP ; NUME[:ANIMALTRAP] = 53 ; Item[:ANIMALTRAP] = :ANIMALTRAP
    ENUM[54] = :BED ; NUME[:BED] = 54 ; Item[:BED] = :BED
    ENUM[55] = :TRACTION_BENCH ; NUME[:TRACTION_BENCH] = 55 ; Item[:TRACTION_BENCH] = :TRACTION_BENCH
    ENUM[56] = :CHAIR ; NUME[:CHAIR] = 56 ; Item[:CHAIR] = :CHAIR
    ENUM[57] = :COFFIN ; NUME[:COFFIN] = 57 ; Item[:COFFIN] = :COFFIN
    ENUM[58] = :TABLE ; NUME[:TABLE] = 58 ; Item[:TABLE] = :TABLE
    ENUM[59] = :STATUE ; NUME[:STATUE] = 59 ; Item[:STATUE] = :STATUE
    ENUM[60] = :SLAB ; NUME[:SLAB] = 60 ; Item[:SLAB] = :SLAB
    ENUM[61] = :QUERN ; NUME[:QUERN] = 61 ; Item[:QUERN] = :QUERN
    ENUM[62] = :MILLSTONE ; NUME[:MILLSTONE] = 62 ; Item[:MILLSTONE] = :MILLSTONE
    ENUM[63] = :BOX ; NUME[:BOX] = 63 ; Item[:BOX] = :BOX
    ENUM[64] = :BIN ; NUME[:BIN] = 64 ; Item[:BIN] = :BIN
    ENUM[65] = :ARMORSTAND ; NUME[:ARMORSTAND] = 65 ; Item[:ARMORSTAND] = :ARMORSTAND
    ENUM[66] = :WEAPONRACK ; NUME[:WEAPONRACK] = 66 ; Item[:WEAPONRACK] = :WEAPONRACK
    ENUM[67] = :CABINET ; NUME[:CABINET] = 67 ; Item[:CABINET] = :CABINET
    ENUM[68] = :ANVIL ; NUME[:ANVIL] = 68 ; Item[:ANVIL] = :ANVIL
    ENUM[69] = :CATAPULTPARTS ; NUME[:CATAPULTPARTS] = 69 ; Item[:CATAPULTPARTS] = :CATAPULTPARTS
    ENUM[70] = :BALLISTAPARTS ; NUME[:BALLISTAPARTS] = 70 ; Item[:BALLISTAPARTS] = :BALLISTAPARTS
    ENUM[71] = :SIEGEAMMO ; NUME[:SIEGEAMMO] = 71 ; Item[:SIEGEAMMO] = :SIEGEAMMO
    ENUM[72] = :TRAPPARTS ; NUME[:TRAPPARTS] = 72 ; Item[:TRAPPARTS] = :TRAPPARTS
    ENUM[73] = :ANY_WEBS ; NUME[:ANY_WEBS] = 73 ; GenericItem[:ANY_WEBS] << :THREAD
    ENUM[74] = :PIPE_SECTION ; NUME[:PIPE_SECTION] = 74 ; Item[:PIPE_SECTION] = :PIPE_SECTION
    ENUM[75] = :ANY_ENCASED ; NUME[:ANY_ENCASED] = 75
    ENUM[76] = :ANY_IN_CONSTRUCTION ; NUME[:ANY_IN_CONSTRUCTION] = 76
    ENUM[77] = :DRINK ; NUME[:DRINK] = 77 ; Item[:DRINK] = :DRINK
    ENUM[78] = :ANY_DRINK ; NUME[:ANY_DRINK] = 78 ; GenericItem[:ANY_DRINK] << :DRINK
    ENUM[79] = :LIQUID_MISC ; NUME[:LIQUID_MISC] = 79 ; Item[:LIQUID_MISC] = :LIQUID_MISC
    ENUM[80] = :POWDER_MISC ; NUME[:POWDER_MISC] = 80 ; Item[:POWDER_MISC] = :POWDER_MISC
    ENUM[81] = :ANY_COOKABLE ; NUME[:ANY_COOKABLE] = 81 ; GenericItem[:ANY_COOKABLE] << :FLASK ; GenericItem[:ANY_COOKABLE] << :CAGE ; GenericItem[:ANY_COOKABLE] << :BARREL ; GenericItem[:ANY_COOKABLE] << :BUCKET ; GenericItem[:ANY_COOKABLE] << :ANIMALTRAP ; GenericItem[:ANY_COOKABLE] << :BOX ; GenericItem[:ANY_COOKABLE] << :MEAT ; GenericItem[:ANY_COOKABLE] << :FISH ; GenericItem[:ANY_COOKABLE] << :FISH_RAW ; GenericItem[:ANY_COOKABLE] << :VERMIN ; GenericItem[:ANY_COOKABLE] << :SEEDS ; GenericItem[:ANY_COOKABLE] << :PLANT ; GenericItem[:ANY_COOKABLE] << :PLANT_GROWTH ; GenericItem[:ANY_COOKABLE] << :DRINK ; GenericItem[:ANY_COOKABLE] << :POWDER_MISC ; GenericItem[:ANY_COOKABLE] << :CHEESE ; GenericItem[:ANY_COOKABLE] << :LIQUID_MISC ; GenericItem[:ANY_COOKABLE] << :GLOB ; GenericItem[:ANY_COOKABLE] << :TOOL ; GenericItem[:ANY_COOKABLE] << :EGG
    ENUM[82] = :ANY_GENERIC82 ; NUME[:ANY_GENERIC82] = 82 ; GenericItem[:ANY_GENERIC82] << :BOX
    ENUM[83] = :VERMIN ; NUME[:VERMIN] = 83 ; GenericItem[:VERMIN] << :VERMIN
    ENUM[84] = :PET ; NUME[:PET] = 84 ; GenericItem[:PET] << :PET
    ENUM[85] = :ANY_CRITTER ; NUME[:ANY_CRITTER] = 85 ; GenericItem[:ANY_CRITTER] << :VERMIN ; GenericItem[:ANY_CRITTER] << :PET
    ENUM[86] = :COIN ; NUME[:COIN] = 86 ; Item[:COIN] = :COIN
    ENUM[87] = :GLOB ; NUME[:GLOB] = 87 ; Item[:GLOB] = :GLOB
    ENUM[88] = :TRAPCOMP ; NUME[:TRAPCOMP] = 88 ; Item[:TRAPCOMP] = :TRAPCOMP
    ENUM[89] = :BAR ; NUME[:BAR] = 89 ; Item[:BAR] = :BAR
    ENUM[90] = :SMALLGEM ; NUME[:SMALLGEM] = 90 ; Item[:SMALLGEM] = :SMALLGEM
    ENUM[91] = :BLOCKS ; NUME[:BLOCKS] = 91 ; Item[:BLOCKS] = :BLOCKS
    ENUM[92] = :ROUGH ; NUME[:ROUGH] = 92 ; Item[:ROUGH] = :ROUGH
    ENUM[93] = :ANY_CORPSE ; NUME[:ANY_CORPSE] = 93 ; GenericItem[:ANY_CORPSE] << :CORPSE ; GenericItem[:ANY_CORPSE] << :CORPSEPIECE
    ENUM[94] = :CORPSE ; NUME[:CORPSE] = 94 ; Item[:CORPSE] = :CORPSE
    ENUM[95] = :BOOK ; NUME[:BOOK] = 95 ; Item[:BOOK] = :BOOK
    ENUM[96] = :FIGURINE ; NUME[:FIGURINE] = 96 ; Item[:FIGURINE] = :FIGURINE
    ENUM[97] = :AMULET ; NUME[:AMULET] = 97 ; Item[:AMULET] = :AMULET
    ENUM[98] = :SCEPTER ; NUME[:SCEPTER] = 98 ; Item[:SCEPTER] = :SCEPTER
    ENUM[99] = :CROWN ; NUME[:CROWN] = 99 ; Item[:CROWN] = :CROWN
    ENUM[100] = :RING ; NUME[:RING] = 100 ; Item[:RING] = :RING
    ENUM[101] = :EARRING ; NUME[:EARRING] = 101 ; Item[:EARRING] = :EARRING
    ENUM[102] = :BRACELET ; NUME[:BRACELET] = 102 ; Item[:BRACELET] = :BRACELET
    ENUM[103] = :GEM ; NUME[:GEM] = 103 ; Item[:GEM] = :GEM
    ENUM[104] = :CORPSEPIECE ; NUME[:CORPSEPIECE] = 104 ; Item[:CORPSEPIECE] = :CORPSEPIECE
    ENUM[105] = :REMAINS ; NUME[:REMAINS] = 105 ; Item[:REMAINS] = :REMAINS
    ENUM[106] = :MEAT ; NUME[:MEAT] = 106 ; Item[:MEAT] = :MEAT
    ENUM[107] = :FISH ; NUME[:FISH] = 107 ; Item[:FISH] = :FISH
    ENUM[108] = :FISH_RAW ; NUME[:FISH_RAW] = 108 ; Item[:FISH_RAW] = :FISH_RAW
    ENUM[109] = :EGG ; NUME[:EGG] = 109 ; Item[:EGG] = :EGG
    ENUM[110] = :SEEDS ; NUME[:SEEDS] = 110 ; Item[:SEEDS] = :SEEDS
    ENUM[111] = :PLANT ; NUME[:PLANT] = 111 ; Item[:PLANT] = :PLANT
    ENUM[112] = :SKIN_TANNED ; NUME[:SKIN_TANNED] = 112 ; Item[:SKIN_TANNED] = :SKIN_TANNED
    ENUM[113] = :PLANT_GROWTH ; NUME[:PLANT_GROWTH] = 113 ; Item[:PLANT_GROWTH] = :PLANT_GROWTH
    ENUM[114] = :THREAD ; NUME[:THREAD] = 114 ; Item[:THREAD] = :THREAD
    ENUM[115] = :CLOTH ; NUME[:CLOTH] = 115 ; Item[:CLOTH] = :CLOTH
    ENUM[116] = :TOTEM ; NUME[:TOTEM] = 116 ; Item[:TOTEM] = :TOTEM
    ENUM[117] = :PANTS ; NUME[:PANTS] = 117 ; Item[:PANTS] = :PANTS
    ENUM[118] = :CHEESE ; NUME[:CHEESE] = 118 ; Item[:CHEESE] = :CHEESE
    ENUM[119] = :FOOD ; NUME[:FOOD] = 119 ; Item[:FOOD] = :FOOD
    ENUM[120] = :BALLISTAARROWHEAD ; NUME[:BALLISTAARROWHEAD] = 120 ; Item[:BALLISTAARROWHEAD] = :BALLISTAARROWHEAD
    ENUM[121] = :ARMOR ; NUME[:ARMOR] = 121 ; Item[:ARMOR] = :ARMOR
    ENUM[122] = :SHOES ; NUME[:SHOES] = 122 ; Item[:SHOES] = :SHOES
    ENUM[123] = :HELM ; NUME[:HELM] = 123 ; Item[:HELM] = :HELM
    ENUM[124] = :GLOVES ; NUME[:GLOVES] = 124 ; Item[:GLOVES] = :GLOVES
    ENUM[125] = :ANY_GENERIC123 ; NUME[:ANY_GENERIC123] = 125 ; GenericItem[:ANY_GENERIC123] << :FLASK ; GenericItem[:ANY_GENERIC123] << :GOBLET ; GenericItem[:ANY_GENERIC123] << :CAGE ; GenericItem[:ANY_GENERIC123] << :BARREL ; GenericItem[:ANY_GENERIC123] << :BUCKET ; GenericItem[:ANY_GENERIC123] << :ANIMALTRAP ; GenericItem[:ANY_GENERIC123] << :COFFIN ; GenericItem[:ANY_GENERIC123] << :BOX ; GenericItem[:ANY_GENERIC123] << :BIN ; GenericItem[:ANY_GENERIC123] << :ARMORSTAND ; GenericItem[:ANY_GENERIC123] << :WEAPONRACK ; GenericItem[:ANY_GENERIC123] << :CABINET ; GenericItem[:ANY_GENERIC123] << :BACKPACK ; GenericItem[:ANY_GENERIC123] << :QUIVER ; GenericItem[:ANY_GENERIC123] << :TOOL
    ENUM[126] = :FOOD_STORAGE ; NUME[:FOOD_STORAGE] = 126 ; GenericItem[:FOOD_STORAGE] << :BARREL ; GenericItem[:FOOD_STORAGE] << :TOOL
    ENUM[127] = :ANY_RECENTLY_DROPPED ; NUME[:ANY_RECENTLY_DROPPED] = 127
    ENUM[128] = :ANY_MELT_DESIGNATED ; NUME[:ANY_MELT_DESIGNATED] = 128
    ENUM[129] = :BAD ; NUME[:BAD] = 129
end

class JobItemVectorId < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Other = Hash.new(:ANY)
    ENUM[0] = :ANY ; NUME[:ANY] = 0
    ENUM[1] = :IN_PLAY ; NUME[:IN_PLAY] = 1
    ENUM[2] = :ANY_ARTIFACT ; NUME[:ANY_ARTIFACT] = 2
    ENUM[3] = :WEAPON ; NUME[:WEAPON] = 3
    ENUM[4] = :ANY_WEAPON ; NUME[:ANY_WEAPON] = 4
    ENUM[5] = :ANY_SPIKE ; NUME[:ANY_SPIKE] = 5
    ENUM[6] = :ANY_TRUE_ARMOR ; NUME[:ANY_TRUE_ARMOR] = 6
    ENUM[7] = :ANY_ARMOR_HELM ; NUME[:ANY_ARMOR_HELM] = 7
    ENUM[8] = :ANY_ARMOR_SHOES ; NUME[:ANY_ARMOR_SHOES] = 8
    ENUM[9] = :SHIELD ; NUME[:SHIELD] = 9
    ENUM[10] = :ANY_ARMOR_GLOVES ; NUME[:ANY_ARMOR_GLOVES] = 10
    ENUM[11] = :ANY_ARMOR_PANTS ; NUME[:ANY_ARMOR_PANTS] = 11
    ENUM[12] = :QUIVER ; NUME[:QUIVER] = 12
    ENUM[13] = :SPLINT ; NUME[:SPLINT] = 13
    ENUM[14] = :ANY_14 ; NUME[:ANY_14] = 14 ; Other[:ANY_14] = :ANY
    ENUM[15] = :CRUTCH ; NUME[:CRUTCH] = 15
    ENUM[16] = :BACKPACK ; NUME[:BACKPACK] = 16
    ENUM[17] = :AMMO ; NUME[:AMMO] = 17
    ENUM[18] = :WOOD ; NUME[:WOOD] = 18
    ENUM[19] = :BOULDER ; NUME[:BOULDER] = 19
    ENUM[20] = :ROCK ; NUME[:ROCK] = 20
    ENUM[21] = :ANY_REFUSE ; NUME[:ANY_REFUSE] = 21
    ENUM[22] = :ANY_GOOD_FOOD ; NUME[:ANY_GOOD_FOOD] = 22
    ENUM[23] = :ANY_AUTO_CLEAN ; NUME[:ANY_AUTO_CLEAN] = 23
    ENUM[24] = :ANY_GENERIC23 ; NUME[:ANY_GENERIC23] = 24
    ENUM[25] = :ANY_GENERIC24 ; NUME[:ANY_GENERIC24] = 25
    ENUM[26] = :ANY_FURNITURE ; NUME[:ANY_FURNITURE] = 26
    ENUM[27] = :ANY_CAGE_OR_TRAP ; NUME[:ANY_CAGE_OR_TRAP] = 27
    ENUM[28] = :ANY_EDIBLE_RAW ; NUME[:ANY_EDIBLE_RAW] = 28
    ENUM[29] = :ANY_EDIBLE_CARNIVORE ; NUME[:ANY_EDIBLE_CARNIVORE] = 29
    ENUM[30] = :ANY_EDIBLE_BONECARN ; NUME[:ANY_EDIBLE_BONECARN] = 30
    ENUM[31] = :ANY_EDIBLE_VERMIN ; NUME[:ANY_EDIBLE_VERMIN] = 31
    ENUM[32] = :ANY_EDIBLE_VERMIN_BOX ; NUME[:ANY_EDIBLE_VERMIN_BOX] = 32
    ENUM[33] = :ANY_CAN_ROT ; NUME[:ANY_CAN_ROT] = 33
    ENUM[34] = :ANY_MURDERED ; NUME[:ANY_MURDERED] = 34
    ENUM[35] = :ANY_DEAD_DWARF ; NUME[:ANY_DEAD_DWARF] = 35
    ENUM[36] = :ANY_GENERIC35 ; NUME[:ANY_GENERIC35] = 36
    ENUM[37] = :ANY_GENERIC36 ; NUME[:ANY_GENERIC36] = 37
    ENUM[38] = :ANY_GENERIC37 ; NUME[:ANY_GENERIC37] = 38
    ENUM[39] = :ANY_GENERIC38 ; NUME[:ANY_GENERIC38] = 39
    ENUM[40] = :DOOR ; NUME[:DOOR] = 40
    ENUM[41] = :FLOODGATE ; NUME[:FLOODGATE] = 41
    ENUM[42] = :HATCH_COVER ; NUME[:HATCH_COVER] = 42
    ENUM[43] = :GRATE ; NUME[:GRATE] = 43
    ENUM[44] = :CAGE ; NUME[:CAGE] = 44
    ENUM[45] = :FLASK ; NUME[:FLASK] = 45
    ENUM[46] = :WINDOW ; NUME[:WINDOW] = 46
    ENUM[47] = :GOBLET ; NUME[:GOBLET] = 47
    ENUM[48] = :INSTRUMENT ; NUME[:INSTRUMENT] = 48
    ENUM[49] = :TOY ; NUME[:TOY] = 49
    ENUM[50] = :BUCKET ; NUME[:BUCKET] = 50
    ENUM[51] = :BARREL ; NUME[:BARREL] = 51
    ENUM[52] = :CHAIN ; NUME[:CHAIN] = 52
    ENUM[53] = :ANIMALTRAP ; NUME[:ANIMALTRAP] = 53
    ENUM[54] = :BED ; NUME[:BED] = 54
    ENUM[55] = :TRACTION_BENCH ; NUME[:TRACTION_BENCH] = 55
    ENUM[56] = :CHAIR ; NUME[:CHAIR] = 56
    ENUM[57] = :COFFIN ; NUME[:COFFIN] = 57
    ENUM[58] = :TABLE ; NUME[:TABLE] = 58
    ENUM[59] = :STATUE ; NUME[:STATUE] = 59
    ENUM[60] = :QUERN ; NUME[:QUERN] = 60
    ENUM[61] = :MILLSTONE ; NUME[:MILLSTONE] = 61
    ENUM[62] = :BOX ; NUME[:BOX] = 62
    ENUM[63] = :BIN ; NUME[:BIN] = 63
    ENUM[64] = :ARMORSTAND ; NUME[:ARMORSTAND] = 64
    ENUM[65] = :WEAPONRACK ; NUME[:WEAPONRACK] = 65
    ENUM[66] = :CABINET ; NUME[:CABINET] = 66
    ENUM[67] = :ANVIL ; NUME[:ANVIL] = 67
    ENUM[68] = :CATAPULTPARTS ; NUME[:CATAPULTPARTS] = 68
    ENUM[69] = :BALLISTAPARTS ; NUME[:BALLISTAPARTS] = 69
    ENUM[70] = :SIEGEAMMO ; NUME[:SIEGEAMMO] = 70
    ENUM[71] = :TRAPPARTS ; NUME[:TRAPPARTS] = 71
    ENUM[72] = :ANY_WEBS ; NUME[:ANY_WEBS] = 72
    ENUM[73] = :PIPE_SECTION ; NUME[:PIPE_SECTION] = 73
    ENUM[74] = :ANY_ENCASED ; NUME[:ANY_ENCASED] = 74
    ENUM[75] = :ANY_IN_CONSTRUCTION ; NUME[:ANY_IN_CONSTRUCTION] = 75
    ENUM[76] = :DRINK ; NUME[:DRINK] = 76
    ENUM[77] = :ANY_DRINK ; NUME[:ANY_DRINK] = 77
    ENUM[78] = :LIQUID_MISC ; NUME[:LIQUID_MISC] = 78
    ENUM[79] = :POWDER_MISC ; NUME[:POWDER_MISC] = 79
    ENUM[80] = :ANY_COOKABLE ; NUME[:ANY_COOKABLE] = 80
    ENUM[81] = :ANY_GENERIC82 ; NUME[:ANY_GENERIC82] = 81
    ENUM[82] = :VERMIN ; NUME[:VERMIN] = 82
    ENUM[83] = :PET ; NUME[:PET] = 83
    ENUM[84] = :ANY_CRITTER ; NUME[:ANY_CRITTER] = 84
    ENUM[85] = :COIN ; NUME[:COIN] = 85
    ENUM[86] = :GLOB ; NUME[:GLOB] = 86
    ENUM[87] = :ANY_RECENTLY_DROPPED ; NUME[:ANY_RECENTLY_DROPPED] = 87
    ENUM[88] = :ANY_MELT_DESIGNATED ; NUME[:ANY_MELT_DESIGNATED] = 88
    ENUM[89] = :BAD ; NUME[:BAD] = 89
    ENUM[90] = :TRAPCOMP ; NUME[:TRAPCOMP] = 90
    ENUM[91] = :BAR ; NUME[:BAR] = 91
    ENUM[92] = :SMALLGEM ; NUME[:SMALLGEM] = 92
    ENUM[93] = :BLOCKS ; NUME[:BLOCKS] = 93
    ENUM[94] = :ROUGH ; NUME[:ROUGH] = 94
    ENUM[95] = :CORPSE ; NUME[:CORPSE] = 95
    ENUM[96] = :FIGURINE ; NUME[:FIGURINE] = 96
    ENUM[97] = :AMULET ; NUME[:AMULET] = 97
    ENUM[98] = :SCEPTER ; NUME[:SCEPTER] = 98
    ENUM[99] = :CROWN ; NUME[:CROWN] = 99
    ENUM[100] = :RING ; NUME[:RING] = 100
    ENUM[101] = :EARRING ; NUME[:EARRING] = 101
    ENUM[102] = :BRACELET ; NUME[:BRACELET] = 102
    ENUM[103] = :GEM ; NUME[:GEM] = 103
    ENUM[104] = :CORPSEPIECE ; NUME[:CORPSEPIECE] = 104
    ENUM[105] = :REMAINS ; NUME[:REMAINS] = 105
    ENUM[106] = :MEAT ; NUME[:MEAT] = 106
    ENUM[107] = :FISH ; NUME[:FISH] = 107
    ENUM[108] = :FISH_RAW ; NUME[:FISH_RAW] = 108
    ENUM[109] = :SEEDS ; NUME[:SEEDS] = 109
    ENUM[110] = :PLANT ; NUME[:PLANT] = 110
    ENUM[111] = :SKIN_TANNED ; NUME[:SKIN_TANNED] = 111
    ENUM[112] = :PLANT_GROWTH ; NUME[:PLANT_GROWTH] = 112
    ENUM[113] = :THREAD ; NUME[:THREAD] = 113
    ENUM[114] = :CLOTH ; NUME[:CLOTH] = 114
    ENUM[115] = :TOTEM ; NUME[:TOTEM] = 115
    ENUM[116] = :PANTS ; NUME[:PANTS] = 116
    ENUM[117] = :CHEESE ; NUME[:CHEESE] = 117
    ENUM[118] = :FOOD ; NUME[:FOOD] = 118
    ENUM[119] = :BALLISTAARROWHEAD ; NUME[:BALLISTAARROWHEAD] = 119
    ENUM[120] = :ARMOR ; NUME[:ARMOR] = 120
    ENUM[121] = :SHOES ; NUME[:SHOES] = 121
    ENUM[122] = :HELM ; NUME[:HELM] = 122
    ENUM[123] = :GLOVES ; NUME[:GLOVES] = 123
    ENUM[124] = :ANY_124 ; NUME[:ANY_124] = 124 ; Other[:ANY_124] = :ANY
    ENUM[125] = :ANY_125 ; NUME[:ANY_125] = 125 ; Other[:ANY_125] = :ANY
    ENUM[126] = :EGG ; NUME[:EGG] = 126
    ENUM[127] = :ANY_127 ; NUME[:ANY_127] = 127 ; Other[:ANY_127] = :ANY
    ENUM[128] = :ANY_CORPSE ; NUME[:ANY_CORPSE] = 128
    ENUM[129] = :BOOK ; NUME[:BOOK] = 129
end

class JobSkill < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Caption = Hash.new
    CaptionNoun = Hash.new
    Profession = Hash.new(:NONE)
    Labor = Hash.new(:NONE)
    Type = Hash.new(:Normal)
    ENUM[-1] = :NONE ; NUME[:NONE] = -1
    ENUM[0] = :MINING ; NUME[:MINING] = 0 ; Caption[:MINING] = 'Mining' ; CaptionNoun[:MINING] = 'Miner' ; Profession[:MINING] = :MINER ; Labor[:MINING] = :MINE
    ENUM[1] = :WOODCUTTING ; NUME[:WOODCUTTING] = 1 ; Caption[:WOODCUTTING] = 'Wood Cutting' ; CaptionNoun[:WOODCUTTING] = 'Wood Cutter' ; Profession[:WOODCUTTING] = :WOODCUTTER ; Labor[:WOODCUTTING] = :CUTWOOD
    ENUM[2] = :CARPENTRY ; NUME[:CARPENTRY] = 2 ; Caption[:CARPENTRY] = 'Carpentry' ; CaptionNoun[:CARPENTRY] = 'Carpenter' ; Profession[:CARPENTRY] = :CARPENTER ; Labor[:CARPENTRY] = :CARPENTER
    ENUM[3] = :DETAILSTONE ; NUME[:DETAILSTONE] = 3 ; Caption[:DETAILSTONE] = 'Engraving' ; CaptionNoun[:DETAILSTONE] = 'Engraver' ; Profession[:DETAILSTONE] = :ENGRAVER ; Labor[:DETAILSTONE] = :DETAIL
    ENUM[4] = :MASONRY ; NUME[:MASONRY] = 4 ; Caption[:MASONRY] = 'Masonry' ; CaptionNoun[:MASONRY] = 'Mason' ; Profession[:MASONRY] = :MASON ; Labor[:MASONRY] = :MASON
    ENUM[5] = :ANIMALTRAIN ; NUME[:ANIMALTRAIN] = 5 ; Caption[:ANIMALTRAIN] = 'Animal Training' ; CaptionNoun[:ANIMALTRAIN] = 'Animal Trainer' ; Profession[:ANIMALTRAIN] = :ANIMAL_TRAINER ; Labor[:ANIMALTRAIN] = :ANIMALTRAIN
    ENUM[6] = :ANIMALCARE ; NUME[:ANIMALCARE] = 6 ; Caption[:ANIMALCARE] = 'Animal Caretaking' ; CaptionNoun[:ANIMALCARE] = 'Animal Caretaker' ; Profession[:ANIMALCARE] = :ANIMAL_CARETAKER ; Labor[:ANIMALCARE] = :ANIMALCARE
    ENUM[7] = :DISSECT_FISH ; NUME[:DISSECT_FISH] = 7 ; Caption[:DISSECT_FISH] = 'Fish Dissection' ; CaptionNoun[:DISSECT_FISH] = 'Fish Dissector' ; Profession[:DISSECT_FISH] = :FISH_DISSECTOR ; Labor[:DISSECT_FISH] = :DISSECT_FISH
    ENUM[8] = :DISSECT_VERMIN ; NUME[:DISSECT_VERMIN] = 8 ; Caption[:DISSECT_VERMIN] = 'Animal Dissection' ; CaptionNoun[:DISSECT_VERMIN] = 'Animal Dissector' ; Profession[:DISSECT_VERMIN] = :ANIMAL_DISSECTOR ; Labor[:DISSECT_VERMIN] = :DISSECT_VERMIN
    ENUM[9] = :PROCESSFISH ; NUME[:PROCESSFISH] = 9 ; Caption[:PROCESSFISH] = 'Fish Cleaning' ; CaptionNoun[:PROCESSFISH] = 'Fish Cleaner' ; Profession[:PROCESSFISH] = :FISH_CLEANER ; Labor[:PROCESSFISH] = :CLEAN_FISH
    ENUM[10] = :BUTCHER ; NUME[:BUTCHER] = 10 ; Caption[:BUTCHER] = 'Butchery' ; CaptionNoun[:BUTCHER] = 'Butcher' ; Profession[:BUTCHER] = :BUTCHER ; Labor[:BUTCHER] = :BUTCHER
    ENUM[11] = :TRAPPING ; NUME[:TRAPPING] = 11 ; Caption[:TRAPPING] = 'Trapping' ; CaptionNoun[:TRAPPING] = 'Trapper' ; Profession[:TRAPPING] = :TRAPPER ; Labor[:TRAPPING] = :TRAPPER
    ENUM[12] = :TANNER ; NUME[:TANNER] = 12 ; Caption[:TANNER] = 'Tanning' ; CaptionNoun[:TANNER] = 'Tanner' ; Profession[:TANNER] = :TANNER ; Labor[:TANNER] = :TANNER
    ENUM[13] = :WEAVING ; NUME[:WEAVING] = 13 ; Caption[:WEAVING] = 'Weaving' ; CaptionNoun[:WEAVING] = 'Weaver' ; Profession[:WEAVING] = :WEAVER ; Labor[:WEAVING] = :WEAVER
    ENUM[14] = :BREWING ; NUME[:BREWING] = 14 ; Caption[:BREWING] = 'Brewing' ; CaptionNoun[:BREWING] = 'Brewer' ; Profession[:BREWING] = :BREWER ; Labor[:BREWING] = :BREWER
    ENUM[15] = :ALCHEMY ; NUME[:ALCHEMY] = 15 ; Caption[:ALCHEMY] = 'Alchemy' ; CaptionNoun[:ALCHEMY] = 'Alchemist' ; Profession[:ALCHEMY] = :ALCHEMIST ; Labor[:ALCHEMY] = :ALCHEMIST
    ENUM[16] = :CLOTHESMAKING ; NUME[:CLOTHESMAKING] = 16 ; Caption[:CLOTHESMAKING] = 'Clothes Making' ; CaptionNoun[:CLOTHESMAKING] = 'Clothier' ; Profession[:CLOTHESMAKING] = :CLOTHIER ; Labor[:CLOTHESMAKING] = :CLOTHESMAKER
    ENUM[17] = :MILLING ; NUME[:MILLING] = 17 ; Caption[:MILLING] = 'Milling' ; CaptionNoun[:MILLING] = 'Miller' ; Profession[:MILLING] = :MILLER ; Labor[:MILLING] = :MILLER
    ENUM[18] = :PROCESSPLANTS ; NUME[:PROCESSPLANTS] = 18 ; Caption[:PROCESSPLANTS] = 'Threshing' ; CaptionNoun[:PROCESSPLANTS] = 'Thresher' ; Profession[:PROCESSPLANTS] = :THRESHER ; Labor[:PROCESSPLANTS] = :PROCESS_PLANT
    ENUM[19] = :CHEESEMAKING ; NUME[:CHEESEMAKING] = 19 ; Caption[:CHEESEMAKING] = 'Cheese Making' ; CaptionNoun[:CHEESEMAKING] = 'Cheese Maker' ; Profession[:CHEESEMAKING] = :CHEESE_MAKER ; Labor[:CHEESEMAKING] = :MAKE_CHEESE
    ENUM[20] = :MILK ; NUME[:MILK] = 20 ; Caption[:MILK] = 'Milking' ; CaptionNoun[:MILK] = 'Milker' ; Profession[:MILK] = :MILKER ; Labor[:MILK] = :MILK
    ENUM[21] = :COOK ; NUME[:COOK] = 21 ; Caption[:COOK] = 'Cooking' ; CaptionNoun[:COOK] = 'Cook' ; Profession[:COOK] = :COOK ; Labor[:COOK] = :COOK
    ENUM[22] = :PLANT ; NUME[:PLANT] = 22 ; Caption[:PLANT] = 'Growing' ; CaptionNoun[:PLANT] = 'Grower' ; Profession[:PLANT] = :PLANTER ; Labor[:PLANT] = :PLANT
    ENUM[23] = :HERBALISM ; NUME[:HERBALISM] = 23 ; Caption[:HERBALISM] = 'Herbalism' ; CaptionNoun[:HERBALISM] = 'Herbalist' ; Profession[:HERBALISM] = :HERBALIST ; Labor[:HERBALISM] = :HERBALIST
    ENUM[24] = :FISH ; NUME[:FISH] = 24 ; Caption[:FISH] = 'Fishing' ; CaptionNoun[:FISH] = 'Fisherman' ; Profession[:FISH] = :FISHERMAN ; Labor[:FISH] = :FISH
    ENUM[25] = :SMELT ; NUME[:SMELT] = 25 ; Caption[:SMELT] = 'Furnace Operation' ; CaptionNoun[:SMELT] = 'Furnace Operator' ; Profession[:SMELT] = :FURNACE_OPERATOR ; Labor[:SMELT] = :SMELT
    ENUM[26] = :EXTRACT_STRAND ; NUME[:EXTRACT_STRAND] = 26 ; Caption[:EXTRACT_STRAND] = 'Strand Extraction' ; CaptionNoun[:EXTRACT_STRAND] = 'Strand Extractor' ; Profession[:EXTRACT_STRAND] = :STRAND_EXTRACTOR ; Labor[:EXTRACT_STRAND] = :EXTRACT_STRAND
    ENUM[27] = :FORGE_WEAPON ; NUME[:FORGE_WEAPON] = 27 ; Caption[:FORGE_WEAPON] = 'Weaponsmithing' ; CaptionNoun[:FORGE_WEAPON] = 'Weaponsmith' ; Profession[:FORGE_WEAPON] = :WEAPONSMITH ; Labor[:FORGE_WEAPON] = :FORGE_WEAPON
    ENUM[28] = :FORGE_ARMOR ; NUME[:FORGE_ARMOR] = 28 ; Caption[:FORGE_ARMOR] = 'Armorsmithing' ; CaptionNoun[:FORGE_ARMOR] = 'Armorsmith' ; Profession[:FORGE_ARMOR] = :ARMORER ; Labor[:FORGE_ARMOR] = :FORGE_ARMOR
    ENUM[29] = :FORGE_FURNITURE ; NUME[:FORGE_FURNITURE] = 29 ; Caption[:FORGE_FURNITURE] = 'Metalsmithing' ; CaptionNoun[:FORGE_FURNITURE] = 'Metalsmith' ; Profession[:FORGE_FURNITURE] = :BLACKSMITH ; Labor[:FORGE_FURNITURE] = :FORGE_FURNITURE
    ENUM[30] = :CUTGEM ; NUME[:CUTGEM] = 30 ; Caption[:CUTGEM] = 'Gem Cutting' ; CaptionNoun[:CUTGEM] = 'Gem Cutter' ; Profession[:CUTGEM] = :GEM_CUTTER ; Labor[:CUTGEM] = :CUT_GEM
    ENUM[31] = :ENCRUSTGEM ; NUME[:ENCRUSTGEM] = 31 ; Caption[:ENCRUSTGEM] = 'Gem Setting' ; CaptionNoun[:ENCRUSTGEM] = 'Gem Setter' ; Profession[:ENCRUSTGEM] = :GEM_SETTER ; Labor[:ENCRUSTGEM] = :ENCRUST_GEM
    ENUM[32] = :WOODCRAFT ; NUME[:WOODCRAFT] = 32 ; Caption[:WOODCRAFT] = 'Wood Crafting' ; CaptionNoun[:WOODCRAFT] = 'Wood Crafter' ; Profession[:WOODCRAFT] = :WOODCRAFTER ; Labor[:WOODCRAFT] = :WOOD_CRAFT
    ENUM[33] = :STONECRAFT ; NUME[:STONECRAFT] = 33 ; Caption[:STONECRAFT] = 'Stone Crafting' ; CaptionNoun[:STONECRAFT] = 'Stone Crafter' ; Profession[:STONECRAFT] = :STONECRAFTER ; Labor[:STONECRAFT] = :STONE_CRAFT
    ENUM[34] = :METALCRAFT ; NUME[:METALCRAFT] = 34 ; Caption[:METALCRAFT] = 'Metal Crafting' ; CaptionNoun[:METALCRAFT] = 'Metal Crafter' ; Profession[:METALCRAFT] = :METALCRAFTER ; Labor[:METALCRAFT] = :METAL_CRAFT
    ENUM[35] = :GLASSMAKER ; NUME[:GLASSMAKER] = 35 ; Caption[:GLASSMAKER] = 'Glassmaking' ; CaptionNoun[:GLASSMAKER] = 'Glassmaker' ; Profession[:GLASSMAKER] = :GLASSMAKER ; Labor[:GLASSMAKER] = :GLASSMAKER
    ENUM[36] = :LEATHERWORK ; NUME[:LEATHERWORK] = 36 ; Caption[:LEATHERWORK] = 'Leatherworkering' ; CaptionNoun[:LEATHERWORK] = 'Leatherworker' ; Profession[:LEATHERWORK] = :LEATHERWORKER ; Labor[:LEATHERWORK] = :LEATHER
    ENUM[37] = :BONECARVE ; NUME[:BONECARVE] = 37 ; Caption[:BONECARVE] = 'Bone Carving' ; CaptionNoun[:BONECARVE] = 'Bone Carver' ; Profession[:BONECARVE] = :BONE_CARVER ; Labor[:BONECARVE] = :BONE_CARVE
    ENUM[38] = :AXE ; NUME[:AXE] = 38 ; Caption[:AXE] = 'Axe' ; CaptionNoun[:AXE] = 'Axeman' ; Profession[:AXE] = :AXEMAN ; Type[:AXE] = :MilitaryWeapon
    ENUM[39] = :SWORD ; NUME[:SWORD] = 39 ; Caption[:SWORD] = 'Sword' ; CaptionNoun[:SWORD] = 'Swordsman' ; Profession[:SWORD] = :SWORDSMAN ; Type[:SWORD] = :MilitaryWeapon
    ENUM[40] = :DAGGER ; NUME[:DAGGER] = 40 ; Caption[:DAGGER] = 'Knife' ; CaptionNoun[:DAGGER] = 'Knife User' ; Type[:DAGGER] = :MilitaryWeapon
    ENUM[41] = :MACE ; NUME[:MACE] = 41 ; Caption[:MACE] = 'Mace' ; CaptionNoun[:MACE] = 'Maceman' ; Profession[:MACE] = :MACEMAN ; Type[:MACE] = :MilitaryWeapon
    ENUM[42] = :HAMMER ; NUME[:HAMMER] = 42 ; Caption[:HAMMER] = 'Hammer' ; CaptionNoun[:HAMMER] = 'Hammerman' ; Profession[:HAMMER] = :HAMMERMAN ; Type[:HAMMER] = :MilitaryWeapon
    ENUM[43] = :SPEAR ; NUME[:SPEAR] = 43 ; Caption[:SPEAR] = 'Spear' ; CaptionNoun[:SPEAR] = 'Spearman' ; Profession[:SPEAR] = :SPEARMAN ; Type[:SPEAR] = :MilitaryWeapon
    ENUM[44] = :CROSSBOW ; NUME[:CROSSBOW] = 44 ; Caption[:CROSSBOW] = 'Crossbow' ; CaptionNoun[:CROSSBOW] = 'Crossbowman' ; Profession[:CROSSBOW] = :CROSSBOWMAN ; Type[:CROSSBOW] = :MilitaryWeapon
    ENUM[45] = :SHIELD ; NUME[:SHIELD] = 45 ; Caption[:SHIELD] = 'Shield' ; CaptionNoun[:SHIELD] = 'Shield User' ; Type[:SHIELD] = :MilitaryDefense
    ENUM[46] = :ARMOR ; NUME[:ARMOR] = 46 ; Caption[:ARMOR] = 'Armor' ; CaptionNoun[:ARMOR] = 'Armor User' ; Type[:ARMOR] = :MilitaryDefense
    ENUM[47] = :SIEGECRAFT ; NUME[:SIEGECRAFT] = 47 ; Caption[:SIEGECRAFT] = 'Siege Engineering' ; CaptionNoun[:SIEGECRAFT] = 'Siege Engineer' ; Profession[:SIEGECRAFT] = :SIEGE_ENGINEER ; Labor[:SIEGECRAFT] = :SIEGECRAFT
    ENUM[48] = :SIEGEOPERATE ; NUME[:SIEGEOPERATE] = 48 ; Caption[:SIEGEOPERATE] = 'Siege Operation' ; CaptionNoun[:SIEGEOPERATE] = 'Siege Operator' ; Profession[:SIEGEOPERATE] = :SIEGE_OPERATOR ; Labor[:SIEGEOPERATE] = :SIEGEOPERATE
    ENUM[49] = :BOWYER ; NUME[:BOWYER] = 49 ; Caption[:BOWYER] = 'Bowmaking' ; CaptionNoun[:BOWYER] = 'Bowyer' ; Profession[:BOWYER] = :BOWYER ; Labor[:BOWYER] = :BOWYER
    ENUM[50] = :PIKE ; NUME[:PIKE] = 50 ; Caption[:PIKE] = 'Pike' ; CaptionNoun[:PIKE] = 'Pikeman' ; Profession[:PIKE] = :PIKEMAN ; Type[:PIKE] = :MilitaryWeapon
    ENUM[51] = :WHIP ; NUME[:WHIP] = 51 ; Caption[:WHIP] = 'Lash' ; CaptionNoun[:WHIP] = 'Lasher' ; Profession[:WHIP] = :LASHER ; Type[:WHIP] = :MilitaryWeapon
    ENUM[52] = :BOW ; NUME[:BOW] = 52 ; Caption[:BOW] = 'Bow' ; CaptionNoun[:BOW] = 'Bowman' ; Profession[:BOW] = :BOWMAN ; Type[:BOW] = :MilitaryWeapon
    ENUM[53] = :BLOWGUN ; NUME[:BLOWGUN] = 53 ; Caption[:BLOWGUN] = 'Blowgun' ; CaptionNoun[:BLOWGUN] = 'Blowgunner' ; Profession[:BLOWGUN] = :BLOWGUNMAN ; Type[:BLOWGUN] = :MilitaryWeapon
    ENUM[54] = :THROW ; NUME[:THROW] = 54 ; Caption[:THROW] = 'Throwing' ; CaptionNoun[:THROW] = 'Thrower' ; Type[:THROW] = :MilitaryAttack
    ENUM[55] = :MECHANICS ; NUME[:MECHANICS] = 55 ; Caption[:MECHANICS] = 'Machinery' ; CaptionNoun[:MECHANICS] = 'Mechanic' ; Profession[:MECHANICS] = :MECHANIC ; Labor[:MECHANICS] = :MECHANIC
    ENUM[56] = :MAGIC_NATURE ; NUME[:MAGIC_NATURE] = 56 ; Caption[:MAGIC_NATURE] = 'Nature' ; CaptionNoun[:MAGIC_NATURE] = 'Druid'
    ENUM[57] = :SNEAK ; NUME[:SNEAK] = 57 ; Caption[:SNEAK] = 'Ambush' ; CaptionNoun[:SNEAK] = 'Ambusher' ; Profession[:SNEAK] = :HUNTER ; Labor[:SNEAK] = :HUNT
    ENUM[58] = :DESIGNBUILDING ; NUME[:DESIGNBUILDING] = 58 ; Caption[:DESIGNBUILDING] = 'Building Design' ; CaptionNoun[:DESIGNBUILDING] = 'Building Designer' ; Profession[:DESIGNBUILDING] = :ARCHITECT ; Labor[:DESIGNBUILDING] = :ARCHITECT
    ENUM[59] = :DRESS_WOUNDS ; NUME[:DRESS_WOUNDS] = 59 ; Caption[:DRESS_WOUNDS] = 'Wound Dressing' ; CaptionNoun[:DRESS_WOUNDS] = 'Wound Dresser' ; Labor[:DRESS_WOUNDS] = :DRESSING_WOUNDS ; Type[:DRESS_WOUNDS] = :Medical
    ENUM[60] = :DIAGNOSE ; NUME[:DIAGNOSE] = 60 ; Caption[:DIAGNOSE] = 'Diagnostics' ; CaptionNoun[:DIAGNOSE] = 'Diagnostician' ; Profession[:DIAGNOSE] = :DIAGNOSER ; Labor[:DIAGNOSE] = :DIAGNOSE ; Type[:DIAGNOSE] = :Medical
    ENUM[61] = :SURGERY ; NUME[:SURGERY] = 61 ; Caption[:SURGERY] = 'Surgery' ; CaptionNoun[:SURGERY] = 'Surgeon' ; Profession[:SURGERY] = :SURGEON ; Labor[:SURGERY] = :SURGERY ; Type[:SURGERY] = :Medical
    ENUM[62] = :SET_BONE ; NUME[:SET_BONE] = 62 ; Caption[:SET_BONE] = 'Bone Setting' ; CaptionNoun[:SET_BONE] = 'Bone Doctor' ; Profession[:SET_BONE] = :BONE_SETTER ; Labor[:SET_BONE] = :BONE_SETTING ; Type[:SET_BONE] = :Medical
    ENUM[63] = :SUTURE ; NUME[:SUTURE] = 63 ; Caption[:SUTURE] = 'Suturing' ; CaptionNoun[:SUTURE] = 'Suturer' ; Profession[:SUTURE] = :SUTURER ; Labor[:SUTURE] = :SUTURING ; Type[:SUTURE] = :Medical
    ENUM[64] = :CRUTCH_WALK ; NUME[:CRUTCH_WALK] = 64 ; Caption[:CRUTCH_WALK] = 'Crutch-walking' ; CaptionNoun[:CRUTCH_WALK] = 'Crutch-walker' ; Type[:CRUTCH_WALK] = :Personal
    ENUM[65] = :WOOD_BURNING ; NUME[:WOOD_BURNING] = 65 ; Caption[:WOOD_BURNING] = 'Wood Burning' ; CaptionNoun[:WOOD_BURNING] = 'Wood Burner' ; Profession[:WOOD_BURNING] = :WOOD_BURNER ; Labor[:WOOD_BURNING] = :BURN_WOOD
    ENUM[66] = :LYE_MAKING ; NUME[:LYE_MAKING] = 66 ; Caption[:LYE_MAKING] = 'Lye Making' ; CaptionNoun[:LYE_MAKING] = 'Lye Maker' ; Profession[:LYE_MAKING] = :LYE_MAKER ; Labor[:LYE_MAKING] = :LYE_MAKING
    ENUM[67] = :SOAP_MAKING ; NUME[:SOAP_MAKING] = 67 ; Caption[:SOAP_MAKING] = 'Soap Making' ; CaptionNoun[:SOAP_MAKING] = 'Soaper' ; Profession[:SOAP_MAKING] = :SOAP_MAKER ; Labor[:SOAP_MAKING] = :SOAP_MAKER
    ENUM[68] = :POTASH_MAKING ; NUME[:POTASH_MAKING] = 68 ; Caption[:POTASH_MAKING] = 'Potash Making' ; CaptionNoun[:POTASH_MAKING] = 'Potash Maker' ; Profession[:POTASH_MAKING] = :POTASH_MAKER ; Labor[:POTASH_MAKING] = :POTASH_MAKING
    ENUM[69] = :DYER ; NUME[:DYER] = 69 ; Caption[:DYER] = 'Dyeing' ; CaptionNoun[:DYER] = 'Dyer' ; Profession[:DYER] = :DYER ; Labor[:DYER] = :DYER
    ENUM[70] = :OPERATE_PUMP ; NUME[:OPERATE_PUMP] = 70 ; Caption[:OPERATE_PUMP] = 'Pump Operation' ; CaptionNoun[:OPERATE_PUMP] = 'Pump Operator' ; Profession[:OPERATE_PUMP] = :PUMP_OPERATOR ; Labor[:OPERATE_PUMP] = :OPERATE_PUMP
    ENUM[71] = :SWIMMING ; NUME[:SWIMMING] = 71 ; Caption[:SWIMMING] = 'Swimming' ; CaptionNoun[:SWIMMING] = 'Swimmer' ; Type[:SWIMMING] = :Personal
    ENUM[72] = :PERSUASION ; NUME[:PERSUASION] = 72 ; Caption[:PERSUASION] = 'Persuasion' ; CaptionNoun[:PERSUASION] = 'Persuader' ; Type[:PERSUASION] = :Social
    ENUM[73] = :NEGOTIATION ; NUME[:NEGOTIATION] = 73 ; Caption[:NEGOTIATION] = 'Negotiation' ; CaptionNoun[:NEGOTIATION] = 'Negotiator' ; Type[:NEGOTIATION] = :Social
    ENUM[74] = :JUDGING_INTENT ; NUME[:JUDGING_INTENT] = 74 ; Caption[:JUDGING_INTENT] = 'Judging Intent' ; CaptionNoun[:JUDGING_INTENT] = 'Judge of Intent' ; Type[:JUDGING_INTENT] = :Social
    ENUM[75] = :APPRAISAL ; NUME[:APPRAISAL] = 75 ; Caption[:APPRAISAL] = 'Appraisal' ; CaptionNoun[:APPRAISAL] = 'Appraiser' ; Profession[:APPRAISAL] = :TRADER
    ENUM[76] = :ORGANIZATION ; NUME[:ORGANIZATION] = 76 ; Caption[:ORGANIZATION] = 'Organization' ; CaptionNoun[:ORGANIZATION] = 'Organizer' ; Profession[:ORGANIZATION] = :ADMINISTRATOR
    ENUM[77] = :RECORD_KEEPING ; NUME[:RECORD_KEEPING] = 77 ; Caption[:RECORD_KEEPING] = 'Record Keeping' ; CaptionNoun[:RECORD_KEEPING] = 'Record Keeper' ; Profession[:RECORD_KEEPING] = :CLERK
    ENUM[78] = :LYING ; NUME[:LYING] = 78 ; Caption[:LYING] = 'Lying' ; CaptionNoun[:LYING] = 'Liar' ; Type[:LYING] = :Social
    ENUM[79] = :INTIMIDATION ; NUME[:INTIMIDATION] = 79 ; Caption[:INTIMIDATION] = 'Intimidation' ; CaptionNoun[:INTIMIDATION] = 'Intimidator' ; Type[:INTIMIDATION] = :Social
    ENUM[80] = :CONVERSATION ; NUME[:CONVERSATION] = 80 ; Caption[:CONVERSATION] = 'Conversation' ; CaptionNoun[:CONVERSATION] = 'Conversationalist' ; Type[:CONVERSATION] = :Social
    ENUM[81] = :COMEDY ; NUME[:COMEDY] = 81 ; Caption[:COMEDY] = 'Comedy' ; CaptionNoun[:COMEDY] = 'Comedian' ; Type[:COMEDY] = :Social
    ENUM[82] = :FLATTERY ; NUME[:FLATTERY] = 82 ; Caption[:FLATTERY] = 'Flattery' ; CaptionNoun[:FLATTERY] = 'Flatterer' ; Type[:FLATTERY] = :Social
    ENUM[83] = :CONSOLE ; NUME[:CONSOLE] = 83 ; Caption[:CONSOLE] = 'Consoling' ; CaptionNoun[:CONSOLE] = 'Consoler' ; Type[:CONSOLE] = :Social
    ENUM[84] = :PACIFY ; NUME[:PACIFY] = 84 ; Caption[:PACIFY] = 'Pacification' ; CaptionNoun[:PACIFY] = 'Pacifier' ; Type[:PACIFY] = :Social
    ENUM[85] = :TRACKING ; NUME[:TRACKING] = 85 ; Caption[:TRACKING] = 'Tracking' ; CaptionNoun[:TRACKING] = 'Tracker' ; Type[:TRACKING] = :Personal
    ENUM[86] = :KNOWLEDGE_ACQUISITION ; NUME[:KNOWLEDGE_ACQUISITION] = 86 ; Caption[:KNOWLEDGE_ACQUISITION] = 'Studying' ; CaptionNoun[:KNOWLEDGE_ACQUISITION] = 'Student' ; Type[:KNOWLEDGE_ACQUISITION] = :Social
    ENUM[87] = :CONCENTRATION ; NUME[:CONCENTRATION] = 87 ; Caption[:CONCENTRATION] = 'Concentration' ; CaptionNoun[:CONCENTRATION] = 'Concentration' ; Type[:CONCENTRATION] = :Personal
    ENUM[88] = :DISCIPLINE ; NUME[:DISCIPLINE] = 88 ; Caption[:DISCIPLINE] = 'Discipline' ; CaptionNoun[:DISCIPLINE] = 'Discipline' ; Type[:DISCIPLINE] = :Personal
    ENUM[89] = :SITUATIONAL_AWARENESS ; NUME[:SITUATIONAL_AWARENESS] = 89 ; Caption[:SITUATIONAL_AWARENESS] = 'Observation' ; CaptionNoun[:SITUATIONAL_AWARENESS] = 'Observer' ; Type[:SITUATIONAL_AWARENESS] = :Personal
    ENUM[90] = :WRITING ; NUME[:WRITING] = 90 ; Caption[:WRITING] = 'Writing' ; CaptionNoun[:WRITING] = 'Wordsmith' ; Type[:WRITING] = :Cultural
    ENUM[91] = :PROSE ; NUME[:PROSE] = 91 ; Caption[:PROSE] = 'Prose' ; CaptionNoun[:PROSE] = 'Writer' ; Type[:PROSE] = :Cultural
    ENUM[92] = :POETRY ; NUME[:POETRY] = 92 ; Caption[:POETRY] = 'Poetry' ; CaptionNoun[:POETRY] = 'Poet' ; Type[:POETRY] = :Cultural
    ENUM[93] = :READING ; NUME[:READING] = 93 ; Caption[:READING] = 'Reading' ; CaptionNoun[:READING] = 'Reader' ; Type[:READING] = :Cultural
    ENUM[94] = :SPEAKING ; NUME[:SPEAKING] = 94 ; Caption[:SPEAKING] = 'Speaking' ; CaptionNoun[:SPEAKING] = 'Speaker' ; Type[:SPEAKING] = :Cultural
    ENUM[95] = :COORDINATION ; NUME[:COORDINATION] = 95 ; Caption[:COORDINATION] = 'Coordination' ; CaptionNoun[:COORDINATION] = 'Coordination' ; Type[:COORDINATION] = :Personal
    ENUM[96] = :BALANCE ; NUME[:BALANCE] = 96 ; Caption[:BALANCE] = 'Balance' ; CaptionNoun[:BALANCE] = 'Balance' ; Type[:BALANCE] = :Personal
    ENUM[97] = :LEADERSHIP ; NUME[:LEADERSHIP] = 97 ; Caption[:LEADERSHIP] = 'Leadership' ; CaptionNoun[:LEADERSHIP] = 'Leader' ; Type[:LEADERSHIP] = :Social
    ENUM[98] = :TEACHING ; NUME[:TEACHING] = 98 ; Caption[:TEACHING] = 'Teaching' ; CaptionNoun[:TEACHING] = 'Teacher' ; Type[:TEACHING] = :Social
    ENUM[99] = :MELEE_COMBAT ; NUME[:MELEE_COMBAT] = 99 ; Caption[:MELEE_COMBAT] = 'Fighting' ; CaptionNoun[:MELEE_COMBAT] = 'Fighter' ; Type[:MELEE_COMBAT] = :MilitaryAttack
    ENUM[100] = :RANGED_COMBAT ; NUME[:RANGED_COMBAT] = 100 ; Caption[:RANGED_COMBAT] = 'Archery' ; CaptionNoun[:RANGED_COMBAT] = 'Archer' ; Type[:RANGED_COMBAT] = :MilitaryAttack
    ENUM[101] = :WRESTLING ; NUME[:WRESTLING] = 101 ; Caption[:WRESTLING] = 'Wrestling' ; CaptionNoun[:WRESTLING] = 'Wrestler' ; Profession[:WRESTLING] = :WRESTLER ; Type[:WRESTLING] = :MilitaryUnarmed
    ENUM[102] = :BITE ; NUME[:BITE] = 102 ; Caption[:BITE] = 'Biting' ; CaptionNoun[:BITE] = 'Biter' ; Type[:BITE] = :MilitaryUnarmed
    ENUM[103] = :GRASP_STRIKE ; NUME[:GRASP_STRIKE] = 103 ; Caption[:GRASP_STRIKE] = 'Striking' ; CaptionNoun[:GRASP_STRIKE] = 'Striker' ; Type[:GRASP_STRIKE] = :MilitaryUnarmed
    ENUM[104] = :STANCE_STRIKE ; NUME[:STANCE_STRIKE] = 104 ; Caption[:STANCE_STRIKE] = 'Kicking' ; CaptionNoun[:STANCE_STRIKE] = 'Kicker' ; Type[:STANCE_STRIKE] = :MilitaryUnarmed
    ENUM[105] = :DODGING ; NUME[:DODGING] = 105 ; Caption[:DODGING] = 'Dodging' ; CaptionNoun[:DODGING] = 'Dodger' ; Type[:DODGING] = :MilitaryDefense
    ENUM[106] = :MISC_WEAPON ; NUME[:MISC_WEAPON] = 106 ; Caption[:MISC_WEAPON] = 'Misc. Object' ; CaptionNoun[:MISC_WEAPON] = 'Misc. Object User' ; Type[:MISC_WEAPON] = :MilitaryWeapon
    ENUM[107] = :KNAPPING ; NUME[:KNAPPING] = 107 ; Caption[:KNAPPING] = 'Knapping' ; CaptionNoun[:KNAPPING] = 'Knapper' ; Type[:KNAPPING] = :MilitaryMisc
    ENUM[108] = :MILITARY_TACTICS ; NUME[:MILITARY_TACTICS] = 108 ; Caption[:MILITARY_TACTICS] = 'Military Tactics' ; CaptionNoun[:MILITARY_TACTICS] = 'Military Tactics'
    ENUM[109] = :SHEARING ; NUME[:SHEARING] = 109 ; Caption[:SHEARING] = 'Shearing' ; CaptionNoun[:SHEARING] = 'Shearer' ; Profession[:SHEARING] = :SHEARER ; Labor[:SHEARING] = :SHEARER
    ENUM[110] = :SPINNING ; NUME[:SPINNING] = 110 ; Caption[:SPINNING] = 'Spinning' ; CaptionNoun[:SPINNING] = 'Spinner' ; Profession[:SPINNING] = :SPINNER ; Labor[:SPINNING] = :SPINNER
    ENUM[111] = :POTTERY ; NUME[:POTTERY] = 111 ; Caption[:POTTERY] = 'Pottery' ; CaptionNoun[:POTTERY] = 'Potter' ; Profession[:POTTERY] = :POTTER ; Labor[:POTTERY] = :POTTERY
    ENUM[112] = :GLAZING ; NUME[:GLAZING] = 112 ; Caption[:GLAZING] = 'Glazing' ; CaptionNoun[:GLAZING] = 'Glazer' ; Profession[:GLAZING] = :GLAZER ; Labor[:GLAZING] = :GLAZING
    ENUM[113] = :PRESSING ; NUME[:PRESSING] = 113 ; Caption[:PRESSING] = 'Pressing' ; CaptionNoun[:PRESSING] = 'Presser' ; Profession[:PRESSING] = :PRESSER ; Labor[:PRESSING] = :PRESSING
    ENUM[114] = :BEEKEEPING ; NUME[:BEEKEEPING] = 114 ; Caption[:BEEKEEPING] = 'Beekeeping' ; CaptionNoun[:BEEKEEPING] = 'Beekeeper' ; Profession[:BEEKEEPING] = :BEEKEEPER ; Labor[:BEEKEEPING] = :BEEKEEPING
    ENUM[115] = :WAX_WORKING ; NUME[:WAX_WORKING] = 115 ; Caption[:WAX_WORKING] = 'Wax Working' ; CaptionNoun[:WAX_WORKING] = 'Wax Worker' ; Profession[:WAX_WORKING] = :WAX_WORKER ; Labor[:WAX_WORKING] = :WAX_WORKING
    ENUM[116] = :CLIMBING ; NUME[:CLIMBING] = 116 ; Caption[:CLIMBING] = 'Climbing' ; CaptionNoun[:CLIMBING] = 'Climber' ; Type[:CLIMBING] = :Personal
    ENUM[117] = :GELD ; NUME[:GELD] = 117 ; Caption[:GELD] = 'Gelding' ; CaptionNoun[:GELD] = 'Gelder' ; Profession[:GELD] = :GELDER ; Labor[:GELD] = :GELD
end

class JobSkillClass < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Normal ; NUME[:Normal] = 0
    ENUM[1] = :Medical ; NUME[:Medical] = 1
    ENUM[2] = :Personal ; NUME[:Personal] = 2
    ENUM[3] = :Social ; NUME[:Social] = 3
    ENUM[4] = :Cultural ; NUME[:Cultural] = 4
    ENUM[5] = :MilitaryWeapon ; NUME[:MilitaryWeapon] = 5
    ENUM[6] = :MilitaryUnarmed ; NUME[:MilitaryUnarmed] = 6
    ENUM[7] = :MilitaryAttack ; NUME[:MilitaryAttack] = 7
    ENUM[8] = :MilitaryDefense ; NUME[:MilitaryDefense] = 8
    ENUM[9] = :MilitaryMisc ; NUME[:MilitaryMisc] = 9
end

class JobSubtypeSurgery < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Surgery ; NUME[:Surgery] = 0
    ENUM[1] = :StopBleeding ; NUME[:StopBleeding] = 1
    ENUM[2] = :RepairCompoundFracture ; NUME[:RepairCompoundFracture] = 2
    ENUM[3] = :RemoveRottenTissue ; NUME[:RemoveRottenTissue] = 3
end

class JobType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Caption = Hash.new
    Type = Hash.new(:Misc)
    Labor = Hash.new(:NONE)
    Item = Hash.new(:NONE)
    PossibleItem = Hash.new { |h, k| h[k] = [] }
    Material = Hash.new
    Skill = Hash.new(:NONE)
    SkillStone = Hash.new(:NONE)
    SkillWood = Hash.new(:NONE)
    SkillMetal = Hash.new(:NONE)
    ENUM[0] = :CarveFortification ; NUME[:CarveFortification] = 0 ; Caption[:CarveFortification] = 'Carve Fortification' ; Type[:CarveFortification] = :Digging ; Skill[:CarveFortification] = :MINING
    ENUM[1] = :DetailWall ; NUME[:DetailWall] = 1 ; Caption[:DetailWall] = 'Detail Wall' ; Type[:DetailWall] = :Building ; Skill[:DetailWall] = :DETAILSTONE
    ENUM[2] = :DetailFloor ; NUME[:DetailFloor] = 2 ; Caption[:DetailFloor] = 'Detail Floor' ; Type[:DetailFloor] = :Building ; Skill[:DetailFloor] = :DETAILSTONE
    ENUM[3] = :Dig ; NUME[:Dig] = 3 ; Caption[:Dig] = 'Dig' ; Type[:Dig] = :Digging ; Skill[:Dig] = :MINING
    ENUM[4] = :CarveUpwardStaircase ; NUME[:CarveUpwardStaircase] = 4 ; Caption[:CarveUpwardStaircase] = 'Carve Upward Staircase' ; Type[:CarveUpwardStaircase] = :Digging ; Skill[:CarveUpwardStaircase] = :MINING
    ENUM[5] = :CarveDownwardStaircase ; NUME[:CarveDownwardStaircase] = 5 ; Caption[:CarveDownwardStaircase] = 'Carve Downward Staircase' ; Type[:CarveDownwardStaircase] = :Digging ; Skill[:CarveDownwardStaircase] = :MINING
    ENUM[6] = :CarveUpDownStaircase ; NUME[:CarveUpDownStaircase] = 6 ; Caption[:CarveUpDownStaircase] = 'Carve Up/Down Staircase' ; Type[:CarveUpDownStaircase] = :Digging ; Skill[:CarveUpDownStaircase] = :MINING
    ENUM[7] = :CarveRamp ; NUME[:CarveRamp] = 7 ; Caption[:CarveRamp] = 'Carve Ramp' ; Type[:CarveRamp] = :Digging ; Skill[:CarveRamp] = :MINING
    ENUM[8] = :DigChannel ; NUME[:DigChannel] = 8 ; Caption[:DigChannel] = 'Dig Channel' ; Type[:DigChannel] = :Digging ; Skill[:DigChannel] = :MINING
    ENUM[9] = :FellTree ; NUME[:FellTree] = 9 ; Caption[:FellTree] = 'Fell Tree' ; Type[:FellTree] = :Gathering ; Skill[:FellTree] = :WOODCUTTING ; Item[:FellTree] = :WOOD
    ENUM[10] = :GatherPlants ; NUME[:GatherPlants] = 10 ; Caption[:GatherPlants] = 'Gather Plants' ; Type[:GatherPlants] = :Gathering ; Skill[:GatherPlants] = :HERBALISM ; Item[:GatherPlants] = :PLANT
    ENUM[11] = :RemoveConstruction ; NUME[:RemoveConstruction] = 11 ; Caption[:RemoveConstruction] = 'Remove Construction' ; Type[:RemoveConstruction] = :Building ; Labor[:RemoveConstruction] = :REMOVE_CONSTRUCTION
    ENUM[12] = :CollectWebs ; NUME[:CollectWebs] = 12 ; Caption[:CollectWebs] = 'Collect Webs' ; Type[:CollectWebs] = :Gathering ; Skill[:CollectWebs] = :WEAVING ; Item[:CollectWebs] = :THREAD ; Material[:CollectWebs] = 'silk'
    ENUM[13] = :BringItemToDepot ; NUME[:BringItemToDepot] = 13 ; Caption[:BringItemToDepot] = 'Bring Item to Depot' ; Type[:BringItemToDepot] = :Hauling ; Labor[:BringItemToDepot] = :HAUL_TRADE
    ENUM[14] = :BringItemToShop ; NUME[:BringItemToShop] = 14 ; Caption[:BringItemToShop] = 'Bring Item to Shop' ; Type[:BringItemToShop] = :Hauling ; Labor[:BringItemToShop] = :HAUL_ITEM
    ENUM[15] = :Eat ; NUME[:Eat] = 15 ; Caption[:Eat] = 'Eat' ; Type[:Eat] = :LifeSupport
    ENUM[16] = :GetProvisions ; NUME[:GetProvisions] = 16 ; Caption[:GetProvisions] = 'Get Provisions' ; Type[:GetProvisions] = :LifeSupport
    ENUM[17] = :Drink ; NUME[:Drink] = 17 ; Caption[:Drink] = 'Drink' ; Type[:Drink] = :LifeSupport
    ENUM[18] = :Drink2 ; NUME[:Drink2] = 18 ; Caption[:Drink2] = 'Drink' ; Type[:Drink2] = :LifeSupport
    ENUM[19] = :FillWaterskin ; NUME[:FillWaterskin] = 19 ; Caption[:FillWaterskin] = 'Fill Waterskin' ; Type[:FillWaterskin] = :LifeSupport
    ENUM[20] = :FillWaterskin2 ; NUME[:FillWaterskin2] = 20 ; Caption[:FillWaterskin2] = 'Fill Waterskin' ; Type[:FillWaterskin2] = :LifeSupport
    ENUM[21] = :Sleep ; NUME[:Sleep] = 21 ; Caption[:Sleep] = 'Sleep' ; Type[:Sleep] = :LifeSupport
    ENUM[22] = :CollectSand ; NUME[:CollectSand] = 22 ; Caption[:CollectSand] = 'Collect Sand' ; Type[:CollectSand] = :Gathering ; Labor[:CollectSand] = :HAUL_ITEM ; Item[:CollectSand] = :POWDER_MISC ; Material[:CollectSand] = 'sand'
    ENUM[23] = :Fish ; NUME[:Fish] = 23 ; Caption[:Fish] = 'Fish' ; Type[:Fish] = :Gathering ; Skill[:Fish] = :FISH ; Item[:Fish] = :FISH_RAW
    ENUM[24] = :Hunt ; NUME[:Hunt] = 24 ; Caption[:Hunt] = 'Hunt' ; Type[:Hunt] = :Gathering ; Skill[:Hunt] = :SNEAK ; Item[:Hunt] = :CORPSE
    ENUM[25] = :HuntVermin ; NUME[:HuntVermin] = 25 ; Caption[:HuntVermin] = 'Hunt for Small Creature' ; Type[:HuntVermin] = :Gathering ; Skill[:HuntVermin] = :TRAPPING ; Item[:HuntVermin] = :REMAINS
    ENUM[26] = :Kidnap ; NUME[:Kidnap] = 26 ; Caption[:Kidnap] = 'Kidnap' ; Type[:Kidnap] = :Crime
    ENUM[27] = :BeatCriminal ; NUME[:BeatCriminal] = 27 ; Caption[:BeatCriminal] = 'Beat Criminal' ; Type[:BeatCriminal] = :LawEnforcement
    ENUM[28] = :StartingFistFight ; NUME[:StartingFistFight] = 28 ; Caption[:StartingFistFight] = 'Starting Fist Fight' ; Type[:StartingFistFight] = :Crime
    ENUM[29] = :CollectTaxes ; NUME[:CollectTaxes] = 29 ; Caption[:CollectTaxes] = 'Collect Taxes' ; Type[:CollectTaxes] = :LawEnforcement
    ENUM[30] = :GuardTaxCollector ; NUME[:GuardTaxCollector] = 30 ; Caption[:GuardTaxCollector] = 'Guard Tax Collector' ; Type[:GuardTaxCollector] = :LawEnforcement
    ENUM[31] = :CatchLiveLandAnimal ; NUME[:CatchLiveLandAnimal] = 31 ; Caption[:CatchLiveLandAnimal] = 'Catch Live Land Animal' ; Type[:CatchLiveLandAnimal] = :Gathering ; Skill[:CatchLiveLandAnimal] = :TRAPPING ; Item[:CatchLiveLandAnimal] = :VERMIN
    ENUM[32] = :CatchLiveFish ; NUME[:CatchLiveFish] = 32 ; Caption[:CatchLiveFish] = 'Catch Live Fish' ; Type[:CatchLiveFish] = :Gathering ; Skill[:CatchLiveFish] = :FISH ; Item[:CatchLiveFish] = :VERMIN
    ENUM[33] = :ReturnKill ; NUME[:ReturnKill] = 33 ; Caption[:ReturnKill] = 'Return Kill' ; Type[:ReturnKill] = :Hauling
    ENUM[34] = :CheckChest ; NUME[:CheckChest] = 34 ; Caption[:CheckChest] = 'Check Chest' ; Type[:CheckChest] = :TidyUp
    ENUM[35] = :StoreOwnedItem ; NUME[:StoreOwnedItem] = 35 ; Caption[:StoreOwnedItem] = 'Store Owned Item' ; Type[:StoreOwnedItem] = :TidyUp
    ENUM[36] = :PlaceItemInTomb ; NUME[:PlaceItemInTomb] = 36 ; Caption[:PlaceItemInTomb] = 'Place Item in Tomb' ; Type[:PlaceItemInTomb] = :Hauling ; Labor[:PlaceItemInTomb] = :HAUL_BODY
    ENUM[37] = :StoreItemInStockpile ; NUME[:StoreItemInStockpile] = 37 ; Caption[:StoreItemInStockpile] = 'Store Item in Stockpile' ; Type[:StoreItemInStockpile] = :Hauling
    ENUM[38] = :StoreItemInBag ; NUME[:StoreItemInBag] = 38 ; Caption[:StoreItemInBag] = 'Store Item in Bag' ; Type[:StoreItemInBag] = :Hauling
    ENUM[39] = :StoreItemInHospital ; NUME[:StoreItemInHospital] = 39 ; Caption[:StoreItemInHospital] = 'Store Item in Hospital' ; Type[:StoreItemInHospital] = :Hauling
    ENUM[42] = :StoreWeapon ; NUME[:StoreWeapon] = 42 ; Caption[:StoreWeapon] = 'Store Weapon' ; Type[:StoreWeapon] = :Hauling
    ENUM[43] = :StoreArmor ; NUME[:StoreArmor] = 43 ; Caption[:StoreArmor] = 'Store Armor' ; Type[:StoreArmor] = :Hauling
    ENUM[44] = :StoreItemInBarrel ; NUME[:StoreItemInBarrel] = 44 ; Caption[:StoreItemInBarrel] = 'Store Item in Barrel' ; Type[:StoreItemInBarrel] = :Hauling
    ENUM[45] = :StoreItemInBin ; NUME[:StoreItemInBin] = 45 ; Caption[:StoreItemInBin] = 'Store Item in Bin' ; Type[:StoreItemInBin] = :Hauling
    ENUM[46] = :SeekArtifact ; NUME[:SeekArtifact] = 46 ; Caption[:SeekArtifact] = 'Seek Artifact'
    ENUM[47] = :SeekInfant ; NUME[:SeekInfant] = 47 ; Caption[:SeekInfant] = 'Seek Infant' ; Type[:SeekInfant] = :LifeSupport
    ENUM[48] = :AttendParty ; NUME[:AttendParty] = 48 ; Caption[:AttendParty] = 'Attend Party' ; Type[:AttendParty] = :Leisure
    ENUM[49] = :GoShopping ; NUME[:GoShopping] = 49 ; Caption[:GoShopping] = 'Go Shopping' ; Type[:GoShopping] = :LifeSupport
    ENUM[50] = :GoShopping2 ; NUME[:GoShopping2] = 50 ; Caption[:GoShopping2] = 'Go Shopping' ; Type[:GoShopping2] = :LifeSupport
    ENUM[51] = :Clean ; NUME[:Clean] = 51 ; Caption[:Clean] = 'Clean' ; Type[:Clean] = :TidyUp
    ENUM[52] = :Rest ; NUME[:Rest] = 52 ; Caption[:Rest] = 'Rest' ; Type[:Rest] = :Leisure
    ENUM[53] = :PickupEquipment ; NUME[:PickupEquipment] = 53 ; Caption[:PickupEquipment] = 'Pickup Equipment' ; Type[:PickupEquipment] = :LifeSupport
    ENUM[54] = :DumpItem ; NUME[:DumpItem] = 54 ; Caption[:DumpItem] = 'Dump Item' ; Type[:DumpItem] = :Hauling ; Labor[:DumpItem] = :HAUL_REFUSE
    ENUM[55] = :StrangeMoodCrafter ; NUME[:StrangeMoodCrafter] = 55 ; Caption[:StrangeMoodCrafter] = 'Strange Mood (Crafter)' ; Type[:StrangeMoodCrafter] = :StrangeMood
    ENUM[56] = :StrangeMoodJeweller ; NUME[:StrangeMoodJeweller] = 56 ; Caption[:StrangeMoodJeweller] = 'Strange Mood (Jeweller)' ; Type[:StrangeMoodJeweller] = :StrangeMood
    ENUM[57] = :StrangeMoodForge ; NUME[:StrangeMoodForge] = 57 ; Caption[:StrangeMoodForge] = 'Strange Mood (Forge)' ; Type[:StrangeMoodForge] = :StrangeMood
    ENUM[58] = :StrangeMoodMagmaForge ; NUME[:StrangeMoodMagmaForge] = 58 ; Caption[:StrangeMoodMagmaForge] = 'Strange Mood (Magma Forge)' ; Type[:StrangeMoodMagmaForge] = :StrangeMood
    ENUM[59] = :StrangeMoodBrooding ; NUME[:StrangeMoodBrooding] = 59 ; Caption[:StrangeMoodBrooding] = 'Strange Mood (Brooding)' ; Type[:StrangeMoodBrooding] = :StrangeMood
    ENUM[60] = :StrangeMoodFell ; NUME[:StrangeMoodFell] = 60 ; Caption[:StrangeMoodFell] = 'Strange Mood (Fell)' ; Type[:StrangeMoodFell] = :StrangeMood
    ENUM[61] = :StrangeMoodCarpenter ; NUME[:StrangeMoodCarpenter] = 61 ; Caption[:StrangeMoodCarpenter] = 'Strange Mood (Carpenter)' ; Type[:StrangeMoodCarpenter] = :StrangeMood
    ENUM[62] = :StrangeMoodMason ; NUME[:StrangeMoodMason] = 62 ; Caption[:StrangeMoodMason] = 'Strange Mood (Mason)' ; Type[:StrangeMoodMason] = :StrangeMood
    ENUM[63] = :StrangeMoodBowyer ; NUME[:StrangeMoodBowyer] = 63 ; Caption[:StrangeMoodBowyer] = 'Strange Mood (Bowyer)' ; Type[:StrangeMoodBowyer] = :StrangeMood
    ENUM[64] = :StrangeMoodTanner ; NUME[:StrangeMoodTanner] = 64 ; Caption[:StrangeMoodTanner] = 'Strange Mood (Leather)' ; Type[:StrangeMoodTanner] = :StrangeMood
    ENUM[65] = :StrangeMoodWeaver ; NUME[:StrangeMoodWeaver] = 65 ; Caption[:StrangeMoodWeaver] = 'Strange Mood (Clothier)' ; Type[:StrangeMoodWeaver] = :StrangeMood
    ENUM[66] = :StrangeMoodGlassmaker ; NUME[:StrangeMoodGlassmaker] = 66 ; Caption[:StrangeMoodGlassmaker] = 'Strange Mood (Glassmaker)' ; Type[:StrangeMoodGlassmaker] = :StrangeMood
    ENUM[67] = :StrangeMoodMechanics ; NUME[:StrangeMoodMechanics] = 67 ; Caption[:StrangeMoodMechanics] = 'Strange Mood (Mechanics)' ; Type[:StrangeMoodMechanics] = :StrangeMood
    ENUM[68] = :ConstructBuilding ; NUME[:ConstructBuilding] = 68 ; Caption[:ConstructBuilding] = 'Construct Building' ; Type[:ConstructBuilding] = :Building
    ENUM[69] = :ConstructDoor ; NUME[:ConstructDoor] = 69 ; Caption[:ConstructDoor] = 'Construct Door' ; Type[:ConstructDoor] = :Manufacture ; Item[:ConstructDoor] = :DOOR
    ENUM[70] = :ConstructFloodgate ; NUME[:ConstructFloodgate] = 70 ; Caption[:ConstructFloodgate] = 'Construct Floodgate' ; Type[:ConstructFloodgate] = :Manufacture ; Item[:ConstructFloodgate] = :FLOODGATE
    ENUM[71] = :ConstructBed ; NUME[:ConstructBed] = 71 ; Caption[:ConstructBed] = 'Construct Bed' ; Type[:ConstructBed] = :Manufacture ; Item[:ConstructBed] = :BED
    ENUM[72] = :ConstructThrone ; NUME[:ConstructThrone] = 72 ; Caption[:ConstructThrone] = 'Construct Throne' ; Type[:ConstructThrone] = :Manufacture ; Item[:ConstructThrone] = :CHAIR
    ENUM[73] = :ConstructCoffin ; NUME[:ConstructCoffin] = 73 ; Caption[:ConstructCoffin] = 'Construct Coffin' ; Type[:ConstructCoffin] = :Manufacture ; Item[:ConstructCoffin] = :COFFIN
    ENUM[74] = :ConstructTable ; NUME[:ConstructTable] = 74 ; Caption[:ConstructTable] = 'Construct Table' ; Type[:ConstructTable] = :Manufacture ; Item[:ConstructTable] = :TABLE
    ENUM[75] = :ConstructChest ; NUME[:ConstructChest] = 75 ; Caption[:ConstructChest] = 'Construct Chest' ; Type[:ConstructChest] = :Manufacture ; Item[:ConstructChest] = :BOX
    ENUM[76] = :ConstructBin ; NUME[:ConstructBin] = 76 ; Caption[:ConstructBin] = 'Construct Bin' ; Type[:ConstructBin] = :Manufacture ; Item[:ConstructBin] = :BIN
    ENUM[77] = :ConstructArmorStand ; NUME[:ConstructArmorStand] = 77 ; Caption[:ConstructArmorStand] = 'Construct Armor Stand' ; Type[:ConstructArmorStand] = :Manufacture ; Item[:ConstructArmorStand] = :ARMORSTAND
    ENUM[78] = :ConstructWeaponRack ; NUME[:ConstructWeaponRack] = 78 ; Caption[:ConstructWeaponRack] = 'Construct Weapon Rack' ; Type[:ConstructWeaponRack] = :Manufacture ; Item[:ConstructWeaponRack] = :WEAPONRACK
    ENUM[79] = :ConstructCabinet ; NUME[:ConstructCabinet] = 79 ; Caption[:ConstructCabinet] = 'Construct Cabinet' ; Type[:ConstructCabinet] = :Manufacture ; Item[:ConstructCabinet] = :CABINET
    ENUM[80] = :ConstructStatue ; NUME[:ConstructStatue] = 80 ; Caption[:ConstructStatue] = 'Construct Statue' ; Type[:ConstructStatue] = :Manufacture ; Item[:ConstructStatue] = :STATUE
    ENUM[81] = :ConstructBlocks ; NUME[:ConstructBlocks] = 81 ; Caption[:ConstructBlocks] = 'Construct Blocks' ; Type[:ConstructBlocks] = :Manufacture ; Item[:ConstructBlocks] = :BLOCKS
    ENUM[82] = :MakeRawGlass ; NUME[:MakeRawGlass] = 82 ; Caption[:MakeRawGlass] = 'Make Raw Glass' ; Type[:MakeRawGlass] = :Manufacture ; Item[:MakeRawGlass] = :ROUGH ; Skill[:MakeRawGlass] = :GLASSMAKER
    ENUM[83] = :MakeCrafts ; NUME[:MakeCrafts] = 83 ; Caption[:MakeCrafts] = 'Make Crafts' ; Type[:MakeCrafts] = :Manufacture ; SkillWood[:MakeCrafts] = :WOODCRAFT ; SkillStone[:MakeCrafts] = :STONECRAFT ; SkillMetal[:MakeCrafts] = :METALCRAFT ; PossibleItem[:MakeCrafts] << :FIGURINE ; PossibleItem[:MakeCrafts] << :RING ; PossibleItem[:MakeCrafts] << :EARRING ; PossibleItem[:MakeCrafts] << :CROWN ; PossibleItem[:MakeCrafts] << :BRACELET ; PossibleItem[:MakeCrafts] << :SCEPTER
    ENUM[84] = :MintCoins ; NUME[:MintCoins] = 84 ; Caption[:MintCoins] = 'Mint Coins' ; Type[:MintCoins] = :Manufacture ; Item[:MintCoins] = :COIN ; SkillMetal[:MintCoins] = :METALCRAFT
    ENUM[85] = :CutGems ; NUME[:CutGems] = 85 ; Caption[:CutGems] = 'Cut Gems' ; Type[:CutGems] = :Manufacture ; Item[:CutGems] = :SMALLGEM ; Skill[:CutGems] = :CUTGEM
    ENUM[86] = :CutGlass ; NUME[:CutGlass] = 86 ; Caption[:CutGlass] = 'Cut Glass' ; Type[:CutGlass] = :Manufacture ; Item[:CutGlass] = :SMALLGEM ; Skill[:CutGlass] = :CUTGEM
    ENUM[87] = :EncrustWithGems ; NUME[:EncrustWithGems] = 87 ; Caption[:EncrustWithGems] = 'Encrust With Gems' ; Type[:EncrustWithGems] = :Improvement ; Skill[:EncrustWithGems] = :ENCRUSTGEM
    ENUM[88] = :EncrustWithGlass ; NUME[:EncrustWithGlass] = 88 ; Caption[:EncrustWithGlass] = 'Encrust With Glass' ; Type[:EncrustWithGlass] = :Improvement ; Skill[:EncrustWithGlass] = :ENCRUSTGEM
    ENUM[89] = :DestroyBuilding ; NUME[:DestroyBuilding] = 89 ; Caption[:DestroyBuilding] = 'Destroy Building' ; Type[:DestroyBuilding] = :Building
    ENUM[90] = :SmeltOre ; NUME[:SmeltOre] = 90 ; Caption[:SmeltOre] = 'Smelt Ore' ; Type[:SmeltOre] = :Manufacture ; Item[:SmeltOre] = :BAR ; Skill[:SmeltOre] = :SMELT
    ENUM[91] = :MeltMetalObject ; NUME[:MeltMetalObject] = 91 ; Caption[:MeltMetalObject] = 'Melt a Metal Object' ; Type[:MeltMetalObject] = :Manufacture ; Item[:MeltMetalObject] = :BAR ; Material[:MeltMetalObject] = 'metal' ; Skill[:MeltMetalObject] = :SMELT
    ENUM[92] = :ExtractMetalStrands ; NUME[:ExtractMetalStrands] = 92 ; Caption[:ExtractMetalStrands] = 'Extract Metal Strands' ; Type[:ExtractMetalStrands] = :Manufacture ; Item[:ExtractMetalStrands] = :THREAD ; Skill[:ExtractMetalStrands] = :EXTRACT_STRAND
    ENUM[93] = :PlantSeeds ; NUME[:PlantSeeds] = 93 ; Caption[:PlantSeeds] = 'Plant Seeds' ; Type[:PlantSeeds] = :Gathering ; Skill[:PlantSeeds] = :PLANT
    ENUM[94] = :HarvestPlants ; NUME[:HarvestPlants] = 94 ; Caption[:HarvestPlants] = 'Harvest Plants' ; Type[:HarvestPlants] = :Gathering ; Skill[:HarvestPlants] = :PLANT ; Item[:HarvestPlants] = :PLANT
    ENUM[95] = :TrainHuntingAnimal ; NUME[:TrainHuntingAnimal] = 95 ; Caption[:TrainHuntingAnimal] = 'Train Hunting Animal' ; Type[:TrainHuntingAnimal] = :UnitHandling ; Skill[:TrainHuntingAnimal] = :ANIMALTRAIN
    ENUM[96] = :TrainWarAnimal ; NUME[:TrainWarAnimal] = 96 ; Caption[:TrainWarAnimal] = 'Train War Animal' ; Type[:TrainWarAnimal] = :UnitHandling ; Skill[:TrainWarAnimal] = :ANIMALTRAIN
    ENUM[97] = :MakeWeapon ; NUME[:MakeWeapon] = 97 ; Caption[:MakeWeapon] = 'Forge Weapon' ; Type[:MakeWeapon] = :Manufacture ; Item[:MakeWeapon] = :WEAPON ; SkillMetal[:MakeWeapon] = :FORGE_WEAPON
    ENUM[98] = :ForgeAnvil ; NUME[:ForgeAnvil] = 98 ; Caption[:ForgeAnvil] = 'Forge Anvil' ; Type[:ForgeAnvil] = :Manufacture ; Item[:ForgeAnvil] = :ANVIL
    ENUM[99] = :ConstructCatapultParts ; NUME[:ConstructCatapultParts] = 99 ; Caption[:ConstructCatapultParts] = 'Construct Catapult Parts' ; Type[:ConstructCatapultParts] = :Manufacture ; Item[:ConstructCatapultParts] = :CATAPULTPARTS ; Skill[:ConstructCatapultParts] = :SIEGECRAFT
    ENUM[100] = :ConstructBallistaParts ; NUME[:ConstructBallistaParts] = 100 ; Caption[:ConstructBallistaParts] = 'Construct Ballista Parts' ; Type[:ConstructBallistaParts] = :Manufacture ; Item[:ConstructBallistaParts] = :BALLISTAPARTS ; Skill[:ConstructBallistaParts] = :SIEGECRAFT
    ENUM[101] = :MakeArmor ; NUME[:MakeArmor] = 101 ; Caption[:MakeArmor] = 'Make Armor' ; Type[:MakeArmor] = :Manufacture ; Item[:MakeArmor] = :ARMOR ; SkillMetal[:MakeArmor] = :FORGE_ARMOR
    ENUM[102] = :MakeHelm ; NUME[:MakeHelm] = 102 ; Caption[:MakeHelm] = 'Forge Helm' ; Type[:MakeHelm] = :Manufacture ; Item[:MakeHelm] = :HELM ; SkillMetal[:MakeHelm] = :FORGE_ARMOR
    ENUM[103] = :MakePants ; NUME[:MakePants] = 103 ; Caption[:MakePants] = 'Make Pants' ; Type[:MakePants] = :Manufacture ; Item[:MakePants] = :PANTS ; SkillMetal[:MakePants] = :FORGE_ARMOR
    ENUM[104] = :StudWith ; NUME[:StudWith] = 104 ; Caption[:StudWith] = 'Stud With' ; Type[:StudWith] = :Improvement
    ENUM[105] = :ButcherAnimal ; NUME[:ButcherAnimal] = 105 ; Caption[:ButcherAnimal] = 'Butcher an Animal' ; Type[:ButcherAnimal] = :Manufacture ; Skill[:ButcherAnimal] = :BUTCHER ; PossibleItem[:ButcherAnimal] << :MEAT ; PossibleItem[:ButcherAnimal] << :CORPSEPIECE ; PossibleItem[:ButcherAnimal] << :GLOB
    ENUM[106] = :PrepareRawFish ; NUME[:PrepareRawFish] = 106 ; Caption[:PrepareRawFish] = 'Prepare a Raw Fish' ; Type[:PrepareRawFish] = :Manufacture ; Item[:PrepareRawFish] = :FISH ; Skill[:PrepareRawFish] = :PROCESSFISH
    ENUM[107] = :MillPlants ; NUME[:MillPlants] = 107 ; Caption[:MillPlants] = 'Mill Plants' ; Type[:MillPlants] = :Manufacture ; Item[:MillPlants] = :POWDER_MISC ; Skill[:MillPlants] = :MILLING
    ENUM[108] = :BaitTrap ; NUME[:BaitTrap] = 108 ; Caption[:BaitTrap] = 'Bait Trap' ; Type[:BaitTrap] = :Hauling ; Skill[:BaitTrap] = :TRAPPING
    ENUM[109] = :MilkCreature ; NUME[:MilkCreature] = 109 ; Caption[:MilkCreature] = 'Milk Creature' ; Type[:MilkCreature] = :Gathering ; Item[:MilkCreature] = :LIQUID_MISC ; Material[:MilkCreature] = 'milk' ; Skill[:MilkCreature] = :MILK
    ENUM[110] = :MakeCheese ; NUME[:MakeCheese] = 110 ; Caption[:MakeCheese] = 'Make Cheese' ; Type[:MakeCheese] = :Manufacture ; Item[:MakeCheese] = :CHEESE ; Skill[:MakeCheese] = :CHEESEMAKING
    ENUM[111] = :ProcessPlants ; NUME[:ProcessPlants] = 111 ; Caption[:ProcessPlants] = 'Process Plants' ; Type[:ProcessPlants] = :Manufacture ; Item[:ProcessPlants] = :THREAD ; Skill[:ProcessPlants] = :PROCESSPLANTS
    ENUM[113] = :ProcessPlantsVial ; NUME[:ProcessPlantsVial] = 113 ; Caption[:ProcessPlantsVial] = 'Process Plants (Vial)' ; Type[:ProcessPlantsVial] = :Manufacture ; Item[:ProcessPlantsVial] = :LIQUID_MISC ; Skill[:ProcessPlantsVial] = :PROCESSPLANTS
    ENUM[114] = :ProcessPlantsBarrel ; NUME[:ProcessPlantsBarrel] = 114 ; Caption[:ProcessPlantsBarrel] = 'Process Plants (Barrel)' ; Type[:ProcessPlantsBarrel] = :Manufacture ; Item[:ProcessPlantsBarrel] = :LIQUID_MISC ; Skill[:ProcessPlantsBarrel] = :PROCESSPLANTS
    ENUM[115] = :PrepareMeal ; NUME[:PrepareMeal] = 115 ; Caption[:PrepareMeal] = 'Prepare Meal' ; Type[:PrepareMeal] = :Manufacture ; Item[:PrepareMeal] = :FOOD ; Skill[:PrepareMeal] = :COOK
    ENUM[116] = :WeaveCloth ; NUME[:WeaveCloth] = 116 ; Caption[:WeaveCloth] = 'Weave Cloth' ; Type[:WeaveCloth] = :Manufacture ; Item[:WeaveCloth] = :CLOTH ; Skill[:WeaveCloth] = :WEAVING
    ENUM[117] = :MakeGloves ; NUME[:MakeGloves] = 117 ; Caption[:MakeGloves] = 'Make Gloves' ; Type[:MakeGloves] = :Manufacture ; Item[:MakeGloves] = :GLOVES ; SkillMetal[:MakeGloves] = :FORGE_ARMOR
    ENUM[118] = :MakeShoes ; NUME[:MakeShoes] = 118 ; Caption[:MakeShoes] = 'Make Shoes' ; Type[:MakeShoes] = :Manufacture ; Item[:MakeShoes] = :SHOES ; SkillMetal[:MakeShoes] = :FORGE_ARMOR
    ENUM[119] = :MakeShield ; NUME[:MakeShield] = 119 ; Caption[:MakeShield] = 'Make Shield' ; Item[:MakeShield] = :SHIELD ; SkillMetal[:MakeShield] = :FORGE_ARMOR
    ENUM[120] = :MakeCage ; NUME[:MakeCage] = 120 ; Caption[:MakeCage] = 'Make Cage' ; Type[:MakeCage] = :Manufacture ; Item[:MakeCage] = :CAGE
    ENUM[121] = :MakeChain ; NUME[:MakeChain] = 121 ; Caption[:MakeChain] = 'Make Chain' ; Type[:MakeChain] = :Manufacture ; Item[:MakeChain] = :CHAIN ; SkillMetal[:MakeChain] = :METALCRAFT
    ENUM[122] = :MakeFlask ; NUME[:MakeFlask] = 122 ; Caption[:MakeFlask] = 'Make Flask' ; Type[:MakeFlask] = :Manufacture ; Item[:MakeFlask] = :FLASK ; SkillMetal[:MakeFlask] = :METALCRAFT
    ENUM[123] = :MakeGoblet ; NUME[:MakeGoblet] = 123 ; Caption[:MakeGoblet] = 'Make Goblet' ; Type[:MakeGoblet] = :Manufacture ; Item[:MakeGoblet] = :GOBLET ; SkillWood[:MakeGoblet] = :WOODCRAFT ; SkillStone[:MakeGoblet] = :STONECRAFT ; SkillMetal[:MakeGoblet] = :METALCRAFT
    ENUM[124] = :MakeInstrument ; NUME[:MakeInstrument] = 124 ; Caption[:MakeInstrument] = 'Make Instrument' ; Type[:MakeInstrument] = :Manufacture ; Item[:MakeInstrument] = :INSTRUMENT ; SkillWood[:MakeInstrument] = :WOODCRAFT ; SkillStone[:MakeInstrument] = :STONECRAFT ; SkillMetal[:MakeInstrument] = :METALCRAFT
    ENUM[125] = :MakeToy ; NUME[:MakeToy] = 125 ; Caption[:MakeToy] = 'Make Toy' ; Type[:MakeToy] = :Manufacture ; Item[:MakeToy] = :TOY ; SkillWood[:MakeToy] = :WOODCRAFT ; SkillStone[:MakeToy] = :STONECRAFT ; SkillMetal[:MakeToy] = :METALCRAFT
    ENUM[126] = :MakeAnimalTrap ; NUME[:MakeAnimalTrap] = 126 ; Caption[:MakeAnimalTrap] = 'Make Animal Trap' ; Type[:MakeAnimalTrap] = :Manufacture ; Item[:MakeAnimalTrap] = :ANIMALTRAP ; Skill[:MakeAnimalTrap] = :TRAPPING
    ENUM[127] = :MakeBarrel ; NUME[:MakeBarrel] = 127 ; Caption[:MakeBarrel] = 'Make Barrel' ; Type[:MakeBarrel] = :Manufacture ; Item[:MakeBarrel] = :BARREL
    ENUM[128] = :MakeBucket ; NUME[:MakeBucket] = 128 ; Caption[:MakeBucket] = 'Make Bucket' ; Type[:MakeBucket] = :Manufacture ; Item[:MakeBucket] = :BUCKET
    ENUM[129] = :MakeWindow ; NUME[:MakeWindow] = 129 ; Caption[:MakeWindow] = 'Make Window' ; Type[:MakeWindow] = :Manufacture ; Item[:MakeWindow] = :WINDOW
    ENUM[130] = :MakeTotem ; NUME[:MakeTotem] = 130 ; Caption[:MakeTotem] = 'Make Totem' ; Type[:MakeTotem] = :Manufacture ; Skill[:MakeTotem] = :BONECARVE ; Item[:MakeTotem] = :TOTEM
    ENUM[131] = :MakeAmmo ; NUME[:MakeAmmo] = 131 ; Caption[:MakeAmmo] = 'Make Ammo' ; Type[:MakeAmmo] = :Manufacture ; Item[:MakeAmmo] = :AMMO ; SkillWood[:MakeAmmo] = :WOODCRAFT ; SkillStone[:MakeAmmo] = :STONECRAFT ; SkillMetal[:MakeAmmo] = :FORGE_WEAPON
    ENUM[132] = :DecorateWith ; NUME[:DecorateWith] = 132 ; Caption[:DecorateWith] = 'Decorate With' ; Type[:DecorateWith] = :Improvement
    ENUM[133] = :MakeBackpack ; NUME[:MakeBackpack] = 133 ; Caption[:MakeBackpack] = 'Make Backpack' ; Type[:MakeBackpack] = :Manufacture ; Item[:MakeBackpack] = :BACKPACK
    ENUM[134] = :MakeQuiver ; NUME[:MakeQuiver] = 134 ; Caption[:MakeQuiver] = 'Make Quiver' ; Type[:MakeQuiver] = :Manufacture ; Item[:MakeQuiver] = :QUIVER
    ENUM[135] = :MakeBallistaArrowHead ; NUME[:MakeBallistaArrowHead] = 135 ; Caption[:MakeBallistaArrowHead] = 'Make Ballista Arrow Head' ; Type[:MakeBallistaArrowHead] = :Manufacture ; Item[:MakeBallistaArrowHead] = :BALLISTAARROWHEAD ; SkillMetal[:MakeBallistaArrowHead] = :FORGE_WEAPON
    ENUM[136] = :AssembleSiegeAmmo ; NUME[:AssembleSiegeAmmo] = 136 ; Caption[:AssembleSiegeAmmo] = 'Assemble Siege Ammo' ; Type[:AssembleSiegeAmmo] = :Manufacture ; Item[:AssembleSiegeAmmo] = :SIEGEAMMO ; Skill[:AssembleSiegeAmmo] = :SIEGECRAFT
    ENUM[137] = :LoadCatapult ; NUME[:LoadCatapult] = 137 ; Caption[:LoadCatapult] = 'Load Catapult' ; Type[:LoadCatapult] = :SiegeWeapon ; Skill[:LoadCatapult] = :SIEGEOPERATE
    ENUM[138] = :LoadBallista ; NUME[:LoadBallista] = 138 ; Caption[:LoadBallista] = 'Load Ballista' ; Type[:LoadBallista] = :SiegeWeapon ; Skill[:LoadBallista] = :SIEGEOPERATE
    ENUM[139] = :FireCatapult ; NUME[:FireCatapult] = 139 ; Caption[:FireCatapult] = 'Fire Catapult' ; Type[:FireCatapult] = :SiegeWeapon ; Skill[:FireCatapult] = :SIEGEOPERATE
    ENUM[140] = :FireBallista ; NUME[:FireBallista] = 140 ; Caption[:FireBallista] = 'Fire Ballista' ; Type[:FireBallista] = :SiegeWeapon ; Skill[:FireBallista] = :SIEGEOPERATE
    ENUM[141] = :ConstructMechanisms ; NUME[:ConstructMechanisms] = 141 ; Caption[:ConstructMechanisms] = 'Construct Mechanisms' ; Type[:ConstructMechanisms] = :Manufacture ; Item[:ConstructMechanisms] = :TRAPPARTS ; Skill[:ConstructMechanisms] = :MECHANICS
    ENUM[142] = :MakeTrapComponent ; NUME[:MakeTrapComponent] = 142 ; Caption[:MakeTrapComponent] = 'MakeTrapComponent' ; Type[:MakeTrapComponent] = :Manufacture ; Item[:MakeTrapComponent] = :TRAPCOMP ; SkillMetal[:MakeTrapComponent] = :FORGE_WEAPON
    ENUM[143] = :LoadCageTrap ; NUME[:LoadCageTrap] = 143 ; Caption[:LoadCageTrap] = 'Load Cage Trap' ; Type[:LoadCageTrap] = :Hauling ; Skill[:LoadCageTrap] = :MECHANICS
    ENUM[144] = :LoadStoneTrap ; NUME[:LoadStoneTrap] = 144 ; Caption[:LoadStoneTrap] = 'Load Stone Trap' ; Type[:LoadStoneTrap] = :Hauling ; Skill[:LoadStoneTrap] = :MECHANICS
    ENUM[145] = :LoadWeaponTrap ; NUME[:LoadWeaponTrap] = 145 ; Caption[:LoadWeaponTrap] = 'Load Weapon Trap' ; Type[:LoadWeaponTrap] = :Hauling ; Skill[:LoadWeaponTrap] = :MECHANICS
    ENUM[146] = :CleanTrap ; NUME[:CleanTrap] = 146 ; Caption[:CleanTrap] = 'Clean Trap' ; Type[:CleanTrap] = :TidyUp ; Skill[:CleanTrap] = :MECHANICS
    ENUM[147] = :CastSpell ; NUME[:CastSpell] = 147 ; Caption[:CastSpell] = 'Cast Spell'
    ENUM[148] = :LinkBuildingToTrigger ; NUME[:LinkBuildingToTrigger] = 148 ; Caption[:LinkBuildingToTrigger] = 'Link a Building to Trigger' ; Type[:LinkBuildingToTrigger] = :Building ; Skill[:LinkBuildingToTrigger] = :MECHANICS
    ENUM[149] = :PullLever ; NUME[:PullLever] = 149 ; Caption[:PullLever] = 'Pull the Lever' ; Labor[:PullLever] = :PULL_LEVER
    ENUM[151] = :ExtractFromPlants ; NUME[:ExtractFromPlants] = 151 ; Caption[:ExtractFromPlants] = 'Extract from Plants' ; Type[:ExtractFromPlants] = :Manufacture ; Item[:ExtractFromPlants] = :LIQUID_MISC ; Skill[:ExtractFromPlants] = :HERBALISM
    ENUM[152] = :ExtractFromRawFish ; NUME[:ExtractFromRawFish] = 152 ; Caption[:ExtractFromRawFish] = 'Extract from Raw Fish' ; Type[:ExtractFromRawFish] = :Manufacture ; Item[:ExtractFromRawFish] = :LIQUID_MISC ; Skill[:ExtractFromRawFish] = :DISSECT_FISH
    ENUM[153] = :ExtractFromLandAnimal ; NUME[:ExtractFromLandAnimal] = 153 ; Caption[:ExtractFromLandAnimal] = 'Extract from Land Animal' ; Type[:ExtractFromLandAnimal] = :Manufacture ; Item[:ExtractFromLandAnimal] = :LIQUID_MISC ; Skill[:ExtractFromLandAnimal] = :DISSECT_VERMIN
    ENUM[154] = :TameVermin ; NUME[:TameVermin] = 154 ; Caption[:TameVermin] = 'Tame Small Animal' ; Type[:TameVermin] = :UnitHandling ; Skill[:TameVermin] = :ANIMALTRAIN
    ENUM[155] = :TameAnimal ; NUME[:TameAnimal] = 155 ; Caption[:TameAnimal] = 'Tame ?something?' ; Type[:TameAnimal] = :UnitHandling ; Skill[:TameAnimal] = :ANIMALTRAIN
    ENUM[156] = :ChainAnimal ; NUME[:ChainAnimal] = 156 ; Caption[:ChainAnimal] = 'Chain Animal' ; Type[:ChainAnimal] = :UnitHandling
    ENUM[157] = :UnchainAnimal ; NUME[:UnchainAnimal] = 157 ; Caption[:UnchainAnimal] = 'Unchain Animal' ; Type[:UnchainAnimal] = :UnitHandling
    ENUM[158] = :UnchainPet ; NUME[:UnchainPet] = 158 ; Caption[:UnchainPet] = 'Unchain Pet' ; Type[:UnchainPet] = :UnitHandling
    ENUM[159] = :ReleaseLargeCreature ; NUME[:ReleaseLargeCreature] = 159 ; Caption[:ReleaseLargeCreature] = 'Release Large Creature' ; Type[:ReleaseLargeCreature] = :UnitHandling
    ENUM[160] = :ReleasePet ; NUME[:ReleasePet] = 160 ; Caption[:ReleasePet] = 'Release Pet' ; Type[:ReleasePet] = :UnitHandling
    ENUM[161] = :ReleaseSmallCreature ; NUME[:ReleaseSmallCreature] = 161 ; Caption[:ReleaseSmallCreature] = 'Release Small Creature' ; Type[:ReleaseSmallCreature] = :UnitHandling
    ENUM[162] = :HandleSmallCreature ; NUME[:HandleSmallCreature] = 162 ; Caption[:HandleSmallCreature] = 'Handle Small Creature' ; Type[:HandleSmallCreature] = :UnitHandling
    ENUM[163] = :HandleLargeCreature ; NUME[:HandleLargeCreature] = 163 ; Caption[:HandleLargeCreature] = 'Handle Large Creature' ; Type[:HandleLargeCreature] = :UnitHandling
    ENUM[164] = :CageLargeCreature ; NUME[:CageLargeCreature] = 164 ; Caption[:CageLargeCreature] = 'Cage Large Creature' ; Type[:CageLargeCreature] = :UnitHandling
    ENUM[165] = :CageSmallCreature ; NUME[:CageSmallCreature] = 165 ; Caption[:CageSmallCreature] = 'Cage Small Creature' ; Type[:CageSmallCreature] = :UnitHandling
    ENUM[166] = :RecoverWounded ; NUME[:RecoverWounded] = 166 ; Caption[:RecoverWounded] = 'Recover Wounded' ; Type[:RecoverWounded] = :Hauling ; Labor[:RecoverWounded] = :RECOVER_WOUNDED
    ENUM[167] = :DiagnosePatient ; NUME[:DiagnosePatient] = 167 ; Caption[:DiagnosePatient] = 'Diagnose Patient' ; Type[:DiagnosePatient] = :Medicine ; Skill[:DiagnosePatient] = :DIAGNOSE
    ENUM[168] = :ImmobilizeBreak ; NUME[:ImmobilizeBreak] = 168 ; Caption[:ImmobilizeBreak] = 'Immobilize Break' ; Type[:ImmobilizeBreak] = :Medicine ; Skill[:ImmobilizeBreak] = :SET_BONE
    ENUM[169] = :DressWound ; NUME[:DressWound] = 169 ; Caption[:DressWound] = 'Dress Wound' ; Type[:DressWound] = :Medicine ; Skill[:DressWound] = :DRESS_WOUNDS
    ENUM[170] = :CleanPatient ; NUME[:CleanPatient] = 170 ; Caption[:CleanPatient] = 'Clean Patient' ; Type[:CleanPatient] = :Medicine ; Labor[:CleanPatient] = :CLEAN
    ENUM[171] = :Surgery ; NUME[:Surgery] = 171 ; Caption[:Surgery] = 'Surgery' ; Type[:Surgery] = :Medicine ; Skill[:Surgery] = :SURGERY
    ENUM[172] = :Suture ; NUME[:Suture] = 172 ; Caption[:Suture] = 'Suture' ; Type[:Suture] = :Medicine ; Skill[:Suture] = :SUTURE
    ENUM[173] = :SetBone ; NUME[:SetBone] = 173 ; Caption[:SetBone] = 'Set Bone' ; Type[:SetBone] = :Medicine ; Skill[:SetBone] = :SET_BONE
    ENUM[174] = :PlaceInTraction ; NUME[:PlaceInTraction] = 174 ; Caption[:PlaceInTraction] = 'Place In Traction' ; Type[:PlaceInTraction] = :Medicine ; Skill[:PlaceInTraction] = :SET_BONE
    ENUM[175] = :DrainAquarium ; NUME[:DrainAquarium] = 175 ; Caption[:DrainAquarium] = 'Drain Aquarium' ; Type[:DrainAquarium] = :Hauling ; Labor[:DrainAquarium] = :HAUL_WATER
    ENUM[176] = :FillAquarium ; NUME[:FillAquarium] = 176 ; Caption[:FillAquarium] = 'Fill Aquarium' ; Type[:FillAquarium] = :Hauling ; Labor[:FillAquarium] = :HAUL_WATER
    ENUM[177] = :FillPond ; NUME[:FillPond] = 177 ; Caption[:FillPond] = 'Fill Pond' ; Type[:FillPond] = :Hauling ; Labor[:FillPond] = :HAUL_WATER
    ENUM[178] = :GiveWater ; NUME[:GiveWater] = 178 ; Caption[:GiveWater] = 'Give Water' ; Type[:GiveWater] = :LifeSupport ; Labor[:GiveWater] = :FEED_WATER_CIVILIANS
    ENUM[179] = :GiveFood ; NUME[:GiveFood] = 179 ; Caption[:GiveFood] = 'Give Food' ; Type[:GiveFood] = :LifeSupport ; Labor[:GiveFood] = :FEED_WATER_CIVILIANS
    ENUM[180] = :GiveWater2 ; NUME[:GiveWater2] = 180 ; Caption[:GiveWater2] = 'Give Water' ; Type[:GiveWater2] = :LifeSupport ; Labor[:GiveWater2] = :FEED_WATER_CIVILIANS
    ENUM[181] = :GiveFood2 ; NUME[:GiveFood2] = 181 ; Caption[:GiveFood2] = 'Give Food' ; Type[:GiveFood2] = :LifeSupport ; Labor[:GiveFood2] = :FEED_WATER_CIVILIANS
    ENUM[182] = :RecoverPet ; NUME[:RecoverPet] = 182 ; Caption[:RecoverPet] = 'Recover Pet' ; Type[:RecoverPet] = :UnitHandling
    ENUM[183] = :PitLargeAnimal ; NUME[:PitLargeAnimal] = 183 ; Caption[:PitLargeAnimal] = 'Pit/Pond Large Animal' ; Type[:PitLargeAnimal] = :UnitHandling
    ENUM[184] = :PitSmallAnimal ; NUME[:PitSmallAnimal] = 184 ; Caption[:PitSmallAnimal] = 'Pit/Pond Small Animal' ; Type[:PitSmallAnimal] = :UnitHandling
    ENUM[185] = :SlaughterAnimal ; NUME[:SlaughterAnimal] = 185 ; Caption[:SlaughterAnimal] = 'Slaughter Animal' ; Type[:SlaughterAnimal] = :Gathering ; Skill[:SlaughterAnimal] = :BUTCHER ; PossibleItem[:SlaughterAnimal] << :MEAT ; PossibleItem[:SlaughterAnimal] << :CORPSEPIECE ; PossibleItem[:SlaughterAnimal] << :GLOB
    ENUM[186] = :MakeCharcoal ; NUME[:MakeCharcoal] = 186 ; Caption[:MakeCharcoal] = 'Make Charcoal' ; Type[:MakeCharcoal] = :Manufacture ; Item[:MakeCharcoal] = :BAR ; Material[:MakeCharcoal] = 'COAL' ; Skill[:MakeCharcoal] = :WOOD_BURNING
    ENUM[187] = :MakeAsh ; NUME[:MakeAsh] = 187 ; Caption[:MakeAsh] = 'Make Ash' ; Type[:MakeAsh] = :Manufacture ; Item[:MakeAsh] = :BAR ; Material[:MakeAsh] = 'ASH' ; Skill[:MakeAsh] = :WOOD_BURNING
    ENUM[188] = :MakeLye ; NUME[:MakeLye] = 188 ; Caption[:MakeLye] = 'Make Lye' ; Type[:MakeLye] = :Manufacture ; Item[:MakeLye] = :LIQUID_MISC ; Material[:MakeLye] = 'LYE' ; Skill[:MakeLye] = :LYE_MAKING
    ENUM[189] = :MakePotashFromLye ; NUME[:MakePotashFromLye] = 189 ; Caption[:MakePotashFromLye] = 'Make Potash From Lye' ; Type[:MakePotashFromLye] = :Manufacture ; Item[:MakePotashFromLye] = :BAR ; Material[:MakePotashFromLye] = 'POTASH' ; Skill[:MakePotashFromLye] = :POTASH_MAKING
    ENUM[190] = :FertilizeField ; NUME[:FertilizeField] = 190 ; Caption[:FertilizeField] = 'Fertilize Field'
    ENUM[191] = :MakePotashFromAsh ; NUME[:MakePotashFromAsh] = 191 ; Caption[:MakePotashFromAsh] = 'Make Potash From Ash' ; Type[:MakePotashFromAsh] = :Manufacture ; Item[:MakePotashFromAsh] = :BAR ; Material[:MakePotashFromAsh] = 'POTASH' ; Skill[:MakePotashFromAsh] = :POTASH_MAKING
    ENUM[192] = :DyeThread ; NUME[:DyeThread] = 192 ; Caption[:DyeThread] = 'Dye Thread' ; Type[:DyeThread] = :Improvement ; Skill[:DyeThread] = :DYER
    ENUM[193] = :DyeCloth ; NUME[:DyeCloth] = 193 ; Caption[:DyeCloth] = 'Dye Cloth' ; Type[:DyeCloth] = :Improvement ; Skill[:DyeCloth] = :DYER
    ENUM[194] = :SewImage ; NUME[:SewImage] = 194 ; Caption[:SewImage] = 'Sew Image' ; Type[:SewImage] = :Improvement
    ENUM[195] = :MakePipeSection ; NUME[:MakePipeSection] = 195 ; Caption[:MakePipeSection] = 'Make Pipe Section' ; Type[:MakePipeSection] = :Manufacture ; Item[:MakePipeSection] = :PIPE_SECTION
    ENUM[196] = :OperatePump ; NUME[:OperatePump] = 196 ; Caption[:OperatePump] = 'Operate Pump' ; Skill[:OperatePump] = :OPERATE_PUMP
    ENUM[197] = :ManageWorkOrders ; NUME[:ManageWorkOrders] = 197 ; Caption[:ManageWorkOrders] = 'Manage Work Orders' ; Skill[:ManageWorkOrders] = :ORGANIZATION
    ENUM[198] = :UpdateStockpileRecords ; NUME[:UpdateStockpileRecords] = 198 ; Caption[:UpdateStockpileRecords] = 'Update Stockpile Records' ; Skill[:UpdateStockpileRecords] = :RECORD_KEEPING
    ENUM[199] = :TradeAtDepot ; NUME[:TradeAtDepot] = 199 ; Caption[:TradeAtDepot] = 'Trade at Depot' ; Skill[:TradeAtDepot] = :APPRAISAL
    ENUM[200] = :ConstructHatchCover ; NUME[:ConstructHatchCover] = 200 ; Caption[:ConstructHatchCover] = 'Construct Hatch Cover' ; Type[:ConstructHatchCover] = :Manufacture ; Item[:ConstructHatchCover] = :HATCH_COVER
    ENUM[201] = :ConstructGrate ; NUME[:ConstructGrate] = 201 ; Caption[:ConstructGrate] = 'Construct Grate' ; Type[:ConstructGrate] = :Manufacture ; Item[:ConstructGrate] = :GRATE
    ENUM[202] = :RemoveStairs ; NUME[:RemoveStairs] = 202 ; Caption[:RemoveStairs] = 'Remove Stairs/Ramps' ; Type[:RemoveStairs] = :Digging ; Skill[:RemoveStairs] = :MINING
    ENUM[203] = :ConstructQuern ; NUME[:ConstructQuern] = 203 ; Caption[:ConstructQuern] = 'Construct Quern' ; Type[:ConstructQuern] = :Manufacture ; Item[:ConstructQuern] = :QUERN
    ENUM[204] = :ConstructMillstone ; NUME[:ConstructMillstone] = 204 ; Caption[:ConstructMillstone] = 'Construct Millstone' ; Type[:ConstructMillstone] = :Manufacture ; Item[:ConstructMillstone] = :MILLSTONE
    ENUM[205] = :ConstructSplint ; NUME[:ConstructSplint] = 205 ; Caption[:ConstructSplint] = 'Construct Splint' ; Type[:ConstructSplint] = :Manufacture ; Item[:ConstructSplint] = :SPLINT
    ENUM[206] = :ConstructCrutch ; NUME[:ConstructCrutch] = 206 ; Caption[:ConstructCrutch] = 'Construct Crutch' ; Type[:ConstructCrutch] = :Manufacture ; Item[:ConstructCrutch] = :CRUTCH
    ENUM[207] = :ConstructTractionBench ; NUME[:ConstructTractionBench] = 207 ; Caption[:ConstructTractionBench] = 'Construct Traction Bench' ; Type[:ConstructTractionBench] = :Manufacture ; Item[:ConstructTractionBench] = :TRACTION_BENCH ; Skill[:ConstructTractionBench] = :MECHANICS
    ENUM[208] = :CleanSelf ; NUME[:CleanSelf] = 208 ; Caption[:CleanSelf] = 'Clean Self' ; Type[:CleanSelf] = :TidyUp
    ENUM[209] = :BringCrutch ; NUME[:BringCrutch] = 209 ; Caption[:BringCrutch] = 'Bring Crutch' ; Type[:BringCrutch] = :Medicine
    ENUM[210] = :ApplyCast ; NUME[:ApplyCast] = 210 ; Caption[:ApplyCast] = 'Apply Cast' ; Type[:ApplyCast] = :Medicine ; Skill[:ApplyCast] = :SET_BONE
    ENUM[211] = :CustomReaction ; NUME[:CustomReaction] = 211 ; Caption[:CustomReaction] = 'Custom Reaction'
    ENUM[212] = :ConstructSlab ; NUME[:ConstructSlab] = 212 ; Caption[:ConstructSlab] = 'Construct Slab' ; Type[:ConstructSlab] = :Manufacture ; Item[:ConstructSlab] = :SLAB
    ENUM[213] = :EngraveSlab ; NUME[:EngraveSlab] = 213 ; Caption[:EngraveSlab] = 'Engrave Memorial Slab' ; Type[:EngraveSlab] = :Improvement
    ENUM[214] = :ShearCreature ; NUME[:ShearCreature] = 214 ; Caption[:ShearCreature] = 'Shear Creature' ; Type[:ShearCreature] = :Gathering ; Item[:ShearCreature] = :CORPSEPIECE ; Material[:ShearCreature] = 'yarn' ; Skill[:ShearCreature] = :SHEARING
    ENUM[215] = :SpinThread ; NUME[:SpinThread] = 215 ; Caption[:SpinThread] = 'Spin Thread'
    ENUM[216] = :PenLargeAnimal ; NUME[:PenLargeAnimal] = 216 ; Caption[:PenLargeAnimal] = 'Pen/Pasture Large Animal' ; Type[:PenLargeAnimal] = :UnitHandling
    ENUM[217] = :PenSmallAnimal ; NUME[:PenSmallAnimal] = 217 ; Caption[:PenSmallAnimal] = 'Pen/Pasture Small Animal' ; Type[:PenSmallAnimal] = :UnitHandling
    ENUM[218] = :MakeTool ; NUME[:MakeTool] = 218 ; Caption[:MakeTool] = 'Make Tool' ; Type[:MakeTool] = :Manufacture ; Item[:MakeTool] = :TOOL ; SkillWood[:MakeTool] = :WOODCRAFT ; SkillStone[:MakeTool] = :STONECRAFT
    ENUM[219] = :CollectClay ; NUME[:CollectClay] = 219 ; Caption[:CollectClay] = 'Collect Clay' ; Type[:CollectClay] = :Gathering ; Item[:CollectClay] = :BOULDER ; Material[:CollectClay] = 'clay'
    ENUM[220] = :InstallColonyInHive ; NUME[:InstallColonyInHive] = 220 ; Caption[:InstallColonyInHive] = 'Install Colony In Hive'
    ENUM[221] = :CollectHiveProducts ; NUME[:CollectHiveProducts] = 221 ; Caption[:CollectHiveProducts] = 'Collect Hive Products' ; Type[:CollectHiveProducts] = :Gathering
    ENUM[222] = :CauseTrouble ; NUME[:CauseTrouble] = 222 ; Caption[:CauseTrouble] = 'Cause Trouble' ; Type[:CauseTrouble] = :Crime
    ENUM[223] = :DrinkBlood ; NUME[:DrinkBlood] = 223 ; Caption[:DrinkBlood] = 'On Break' ; Type[:DrinkBlood] = :Crime
    ENUM[224] = :ReportCrime ; NUME[:ReportCrime] = 224 ; Caption[:ReportCrime] = 'Report Crime' ; Type[:ReportCrime] = :LawEnforcement
    ENUM[225] = :ExecuteCriminal ; NUME[:ExecuteCriminal] = 225 ; Caption[:ExecuteCriminal] = 'Execute Criminal' ; Type[:ExecuteCriminal] = :LawEnforcement
    ENUM[226] = :TrainAnimal ; NUME[:TrainAnimal] = 226 ; Caption[:TrainAnimal] = 'Train Animal' ; Type[:TrainAnimal] = :UnitHandling ; Skill[:TrainAnimal] = :ANIMALTRAIN
    ENUM[227] = :CarveTrack ; NUME[:CarveTrack] = 227 ; Caption[:CarveTrack] = 'Carve Track' ; Type[:CarveTrack] = :Building
    ENUM[228] = :PushTrackVehicle ; NUME[:PushTrackVehicle] = 228 ; Caption[:PushTrackVehicle] = 'Push Track Vehicle' ; Type[:PushTrackVehicle] = :Hauling ; Labor[:PushTrackVehicle] = :HANDLE_VEHICLES
    ENUM[229] = :PlaceTrackVehicle ; NUME[:PlaceTrackVehicle] = 229 ; Caption[:PlaceTrackVehicle] = 'Place Track Vehicle' ; Type[:PlaceTrackVehicle] = :Hauling ; Labor[:PlaceTrackVehicle] = :HANDLE_VEHICLES
    ENUM[230] = :StoreItemInVehicle ; NUME[:StoreItemInVehicle] = 230 ; Caption[:StoreItemInVehicle] = 'Store Item in Vehicle' ; Type[:StoreItemInVehicle] = :Hauling
    ENUM[231] = :GeldAnimal ; NUME[:GeldAnimal] = 231 ; Caption[:GeldAnimal] = 'Geld ?something?' ; Type[:GeldAnimal] = :UnitHandling ; Skill[:GeldAnimal] = :GELD
end

class JobTypeClass < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Misc ; NUME[:Misc] = 0
    ENUM[1] = :Digging ; NUME[:Digging] = 1
    ENUM[2] = :Building ; NUME[:Building] = 2
    ENUM[3] = :Hauling ; NUME[:Hauling] = 3
    ENUM[4] = :LifeSupport ; NUME[:LifeSupport] = 4
    ENUM[5] = :TidyUp ; NUME[:TidyUp] = 5
    ENUM[6] = :Leisure ; NUME[:Leisure] = 6
    ENUM[7] = :Gathering ; NUME[:Gathering] = 7
    ENUM[8] = :Manufacture ; NUME[:Manufacture] = 8
    ENUM[9] = :Improvement ; NUME[:Improvement] = 9
    ENUM[10] = :Crime ; NUME[:Crime] = 10
    ENUM[11] = :LawEnforcement ; NUME[:LawEnforcement] = 11
    ENUM[12] = :StrangeMood ; NUME[:StrangeMood] = 12
    ENUM[13] = :UnitHandling ; NUME[:UnitHandling] = 13
    ENUM[14] = :SiegeWeapon ; NUME[:SiegeWeapon] = 14
    ENUM[15] = :Medicine ; NUME[:Medicine] = 15
end

class MachineType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Standard ; NUME[:Standard] = 0
end

class MasterpieceLossType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :MELT ; NUME[:MELT] = 0
    ENUM[1] = :MAGMA ; NUME[:MAGMA] = 1
    ENUM[2] = :FORTIFICATION ; NUME[:FORTIFICATION] = 2
    ENUM[3] = :MINING ; NUME[:MINING] = 3
    ENUM[4] = :CAVEIN ; NUME[:CAVEIN] = 4
    ENUM[5] = :VEGETATION ; NUME[:VEGETATION] = 5
end

class MaterialFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Type = Hash.new(:None)
    ENUM[0] = :BONE ; NUME[:BONE] = 0 ; Type[:BONE] = :Bone
    ENUM[1] = :MEAT ; NUME[:MEAT] = 1
    ENUM[2] = :EDIBLE_VERMIN ; NUME[:EDIBLE_VERMIN] = 2
    ENUM[3] = :EDIBLE_RAW ; NUME[:EDIBLE_RAW] = 3
    ENUM[4] = :EDIBLE_COOKED ; NUME[:EDIBLE_COOKED] = 4
    ENUM[5] = :ALCOHOL ; NUME[:ALCOHOL] = 5
    ENUM[6] = :ITEMS_METAL ; NUME[:ITEMS_METAL] = 6
    ENUM[7] = :ITEMS_BARRED ; NUME[:ITEMS_BARRED] = 7
    ENUM[8] = :ITEMS_SCALED ; NUME[:ITEMS_SCALED] = 8
    ENUM[9] = :ITEMS_LEATHER ; NUME[:ITEMS_LEATHER] = 9
    ENUM[10] = :ITEMS_SOFT ; NUME[:ITEMS_SOFT] = 10
    ENUM[11] = :ITEMS_HARD ; NUME[:ITEMS_HARD] = 11
    ENUM[12] = :IMPLIES_ANIMAL_KILL ; NUME[:IMPLIES_ANIMAL_KILL] = 12
    ENUM[13] = :ALCOHOL_PLANT ; NUME[:ALCOHOL_PLANT] = 13
    ENUM[14] = :ALCOHOL_CREATURE ; NUME[:ALCOHOL_CREATURE] = 14
    ENUM[15] = :CHEESE_PLANT ; NUME[:CHEESE_PLANT] = 15
    ENUM[16] = :CHEESE_CREATURE ; NUME[:CHEESE_CREATURE] = 16
    ENUM[17] = :POWDER_MISC_PLANT ; NUME[:POWDER_MISC_PLANT] = 17
    ENUM[18] = :POWDER_MISC_CREATURE ; NUME[:POWDER_MISC_CREATURE] = 18
    ENUM[19] = :STOCKPILE_GLOB ; NUME[:STOCKPILE_GLOB] = 19
    ENUM[20] = :LIQUID_MISC_PLANT ; NUME[:LIQUID_MISC_PLANT] = 20
    ENUM[21] = :LIQUID_MISC_CREATURE ; NUME[:LIQUID_MISC_CREATURE] = 21
    ENUM[22] = :LIQUID_MISC_OTHER ; NUME[:LIQUID_MISC_OTHER] = 22
    ENUM[23] = :WOOD ; NUME[:WOOD] = 23 ; Type[:WOOD] = :Wood
    ENUM[24] = :THREAD_PLANT ; NUME[:THREAD_PLANT] = 24 ; Type[:THREAD_PLANT] = :Cloth
    ENUM[25] = :TOOTH ; NUME[:TOOTH] = 25 ; Type[:TOOTH] = :Ivory
    ENUM[26] = :HORN ; NUME[:HORN] = 26 ; Type[:HORN] = :Horn
    ENUM[27] = :PEARL ; NUME[:PEARL] = 27 ; Type[:PEARL] = :Pearl
    ENUM[28] = :SHELL ; NUME[:SHELL] = 28 ; Type[:SHELL] = :Shell
    ENUM[29] = :LEATHER ; NUME[:LEATHER] = 29 ; Type[:LEATHER] = :Leather
    ENUM[30] = :SILK ; NUME[:SILK] = 30 ; Type[:SILK] = :Cloth
    ENUM[31] = :SOAP ; NUME[:SOAP] = 31
    ENUM[32] = :ROTS ; NUME[:ROTS] = 32
    ENUM[33] = :IS_DYE ; NUME[:IS_DYE] = 33
    ENUM[34] = :POWDER_MISC ; NUME[:POWDER_MISC] = 34
    ENUM[35] = :LIQUID_MISC ; NUME[:LIQUID_MISC] = 35
    ENUM[36] = :STRUCTURAL_PLANT_MAT ; NUME[:STRUCTURAL_PLANT_MAT] = 36
    ENUM[37] = :SEED_MAT ; NUME[:SEED_MAT] = 37
    ENUM[38] = :LEAF_MAT ; NUME[:LEAF_MAT] = 38
    ENUM[39] = :CHEESE ; NUME[:CHEESE] = 39
    ENUM[40] = :ENTERS_BLOOD ; NUME[:ENTERS_BLOOD] = 40
    ENUM[41] = :BLOOD_MAP_DESCRIPTOR ; NUME[:BLOOD_MAP_DESCRIPTOR] = 41
    ENUM[42] = :ICHOR_MAP_DESCRIPTOR ; NUME[:ICHOR_MAP_DESCRIPTOR] = 42
    ENUM[43] = :GOO_MAP_DESCRIPTOR ; NUME[:GOO_MAP_DESCRIPTOR] = 43
    ENUM[44] = :SLIME_MAP_DESCRIPTOR ; NUME[:SLIME_MAP_DESCRIPTOR] = 44
    ENUM[45] = :PUS_MAP_DESCRIPTOR ; NUME[:PUS_MAP_DESCRIPTOR] = 45
    ENUM[46] = :GENERATES_MIASMA ; NUME[:GENERATES_MIASMA] = 46
    ENUM[47] = :IS_METAL ; NUME[:IS_METAL] = 47 ; Type[:IS_METAL] = :Metal
    ENUM[48] = :IS_GEM ; NUME[:IS_GEM] = 48 ; Type[:IS_GEM] = :Gem
    ENUM[49] = :IS_GLASS ; NUME[:IS_GLASS] = 49 ; Type[:IS_GLASS] = :Glass
    ENUM[50] = :CRYSTAL_GLASSABLE ; NUME[:CRYSTAL_GLASSABLE] = 50
    ENUM[51] = :ITEMS_WEAPON ; NUME[:ITEMS_WEAPON] = 51
    ENUM[52] = :ITEMS_WEAPON_RANGED ; NUME[:ITEMS_WEAPON_RANGED] = 52
    ENUM[53] = :ITEMS_ANVIL ; NUME[:ITEMS_ANVIL] = 53
    ENUM[54] = :ITEMS_AMMO ; NUME[:ITEMS_AMMO] = 54
    ENUM[55] = :ITEMS_DIGGER ; NUME[:ITEMS_DIGGER] = 55
    ENUM[56] = :ITEMS_ARMOR ; NUME[:ITEMS_ARMOR] = 56
    ENUM[57] = :ITEMS_DELICATE ; NUME[:ITEMS_DELICATE] = 57
    ENUM[58] = :ITEMS_SIEGE_ENGINE ; NUME[:ITEMS_SIEGE_ENGINE] = 58
    ENUM[59] = :ITEMS_QUERN ; NUME[:ITEMS_QUERN] = 59
    ENUM[60] = :IS_STONE ; NUME[:IS_STONE] = 60 ; Type[:IS_STONE] = :Stone
    ENUM[61] = :UNDIGGABLE ; NUME[:UNDIGGABLE] = 61
    ENUM[62] = :YARN ; NUME[:YARN] = 62 ; Type[:YARN] = :Cloth
    ENUM[63] = :STOCKPILE_GLOB_PASTE ; NUME[:STOCKPILE_GLOB_PASTE] = 63
    ENUM[64] = :STOCKPILE_GLOB_PRESSED ; NUME[:STOCKPILE_GLOB_PRESSED] = 64
    ENUM[65] = :DISPLAY_UNGLAZED ; NUME[:DISPLAY_UNGLAZED] = 65
    ENUM[66] = :DO_NOT_CLEAN_GLOB ; NUME[:DO_NOT_CLEAN_GLOB] = 66
    ENUM[67] = :NO_STONE_STOCKPILE ; NUME[:NO_STONE_STOCKPILE] = 67
    ENUM[68] = :STOCKPILE_THREAD_METAL ; NUME[:STOCKPILE_THREAD_METAL] = 68
    ENUM[69] = :SWEAT_MAP_DESCRIPTOR ; NUME[:SWEAT_MAP_DESCRIPTOR] = 69
    ENUM[70] = :TEARS_MAP_DESCRIPTOR ; NUME[:TEARS_MAP_DESCRIPTOR] = 70
    ENUM[71] = :SPIT_MAP_DESCRIPTOR ; NUME[:SPIT_MAP_DESCRIPTOR] = 71
    ENUM[72] = :EVAPORATES ; NUME[:EVAPORATES] = 72
end

class MatterState < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Solid ; NUME[:Solid] = 0
    ENUM[1] = :Liquid ; NUME[:Liquid] = 1
    ENUM[2] = :Gas ; NUME[:Gas] = 2
    ENUM[3] = :Powder ; NUME[:Powder] = 3
    ENUM[4] = :Paste ; NUME[:Paste] = 4
    ENUM[5] = :Pressed ; NUME[:Pressed] = 5
end

class MeetingEventType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :AcceptAgreement ; NUME[:AcceptAgreement] = 0
    ENUM[1] = :RejectAgreement ; NUME[:RejectAgreement] = 1
    ENUM[2] = :AcceptPeace ; NUME[:AcceptPeace] = 2
    ENUM[3] = :RejectPeace ; NUME[:RejectPeace] = 3
    ENUM[4] = :ExportAgreement ; NUME[:ExportAgreement] = 4
    ENUM[5] = :ImportAgreement ; NUME[:ImportAgreement] = 5
end

class MeetingTopic < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :DiscussCurrent ; NUME[:DiscussCurrent] = 0
    ENUM[1] = :RequestPeace ; NUME[:RequestPeace] = 1
    ENUM[2] = :TreeQuota ; NUME[:TreeQuota] = 2
    ENUM[3] = :BecomeLandHolder ; NUME[:BecomeLandHolder] = 3
    ENUM[4] = :PromoteLandHolder ; NUME[:PromoteLandHolder] = 4
    ENUM[5] = :ExportAgreement ; NUME[:ExportAgreement] = 5
    ENUM[6] = :ImportAgreement ; NUME[:ImportAgreement] = 6
    ENUM[7] = :PleasantPlace ; NUME[:PleasantPlace] = 7
    ENUM[8] = :WorldStatus ; NUME[:WorldStatus] = 8
end

class MentalAttributeType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :ANALYTICAL_ABILITY ; NUME[:ANALYTICAL_ABILITY] = 0
    ENUM[1] = :FOCUS ; NUME[:FOCUS] = 1
    ENUM[2] = :WILLPOWER ; NUME[:WILLPOWER] = 2
    ENUM[3] = :CREATIVITY ; NUME[:CREATIVITY] = 3
    ENUM[4] = :INTUITION ; NUME[:INTUITION] = 4
    ENUM[5] = :PATIENCE ; NUME[:PATIENCE] = 5
    ENUM[6] = :MEMORY ; NUME[:MEMORY] = 6
    ENUM[7] = :LINGUISTIC_ABILITY ; NUME[:LINGUISTIC_ABILITY] = 7
    ENUM[8] = :SPATIAL_SENSE ; NUME[:SPATIAL_SENSE] = 8
    ENUM[9] = :MUSICALITY ; NUME[:MUSICALITY] = 9
    ENUM[10] = :KINESTHETIC_SENSE ; NUME[:KINESTHETIC_SENSE] = 10
    ENUM[11] = :EMPATHY ; NUME[:EMPATHY] = 11
    ENUM[12] = :SOCIAL_AWARENESS ; NUME[:SOCIAL_AWARENESS] = 12
end

class MiscTraitType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Tag = Hash.new
    ENUM[0] = :RequestWaterCooldown ; NUME[:RequestWaterCooldown] = 0
    ENUM[1] = :RequestFoodCooldown ; NUME[:RequestFoodCooldown] = 1
    ENUM[2] = :RequestRescueCooldown ; NUME[:RequestRescueCooldown] = 2
    ENUM[3] = :RequestHealthcareCooldown ; NUME[:RequestHealthcareCooldown] = 3
    ENUM[4] = :GetDrinkCooldown ; NUME[:GetDrinkCooldown] = 4
    ENUM[5] = :GetFoodCooldown ; NUME[:GetFoodCooldown] = 5
    ENUM[6] = :CleanSelfCooldown ; NUME[:CleanSelfCooldown] = 6
    ENUM[7] = :Migrant ; NUME[:Migrant] = 7
    ENUM[8] = :RoomComplaint ; NUME[:RoomComplaint] = 8
    ENUM[9] = :UnnamedResident ; NUME[:UnnamedResident] = 9
    ENUM[10] = :RentBedroomCooldown ; NUME[:RentBedroomCooldown] = 10
    ENUM[11] = :ClaimTrinketCooldown ; NUME[:ClaimTrinketCooldown] = 11
    ENUM[12] = :ClaimClothingCooldown ; NUME[:ClaimClothingCooldown] = 12
    ENUM[13] = :WantsDrink ; NUME[:WantsDrink] = 13 ; Tag[:WantsDrink] = 'ALCOHOLIC'
    ENUM[14] = :LikesOutdoors ; NUME[:LikesOutdoors] = 14 ; Tag[:LikesOutdoors] = 'MOUNTAIN'
    ENUM[15] = :Hardened ; NUME[:Hardened] = 15 ; Tag[:Hardened] = 'COMBATHARDNESS'
    ENUM[16] = :TimeSinceBreak ; NUME[:TimeSinceBreak] = 16 ; Tag[:TimeSinceBreak] = 'TIME_SINCE_BREAK'
    ENUM[17] = :OnBreak ; NUME[:OnBreak] = 17 ; Tag[:OnBreak] = 'ON_BREAK'
    ENUM[18] = :PrepareToDie ; NUME[:PrepareToDie] = 18
    ENUM[19] = :CaveAdapt ; NUME[:CaveAdapt] = 19 ; Tag[:CaveAdapt] = 'CAVE_ADAPT'
    ENUM[24] = :FollowUnitCooldown ; NUME[:FollowUnitCooldown] = 24
    ENUM[28] = :DangerousTerrainCooldown ; NUME[:DangerousTerrainCooldown] = 28
    ENUM[29] = :Beaching ; NUME[:Beaching] = 29
    ENUM[30] = :IdleAreaCooldown ; NUME[:IdleAreaCooldown] = 30
    ENUM[32] = :PartiedOut ; NUME[:PartiedOut] = 32 ; Tag[:PartiedOut] = 'PARTIED_OUT'
    ENUM[33] = :DiagnosePatientCooldown ; NUME[:DiagnosePatientCooldown] = 33
    ENUM[34] = :DressWoundCooldown ; NUME[:DressWoundCooldown] = 34
    ENUM[35] = :CleanPatientCooldown ; NUME[:CleanPatientCooldown] = 35
    ENUM[36] = :SurgeryCooldown ; NUME[:SurgeryCooldown] = 36
    ENUM[37] = :SutureCooldown ; NUME[:SutureCooldown] = 37
    ENUM[38] = :SetBoneCooldown ; NUME[:SetBoneCooldown] = 38
    ENUM[39] = :PlaceInTractionCooldown ; NUME[:PlaceInTractionCooldown] = 39
    ENUM[40] = :ApplyCastCooldown ; NUME[:ApplyCastCooldown] = 40
    ENUM[41] = :ImmobilizeBreakCooldown ; NUME[:ImmobilizeBreakCooldown] = 41
    ENUM[42] = :BringCrutchCooldown ; NUME[:BringCrutchCooldown] = 42
    ENUM[44] = :MilkCounter ; NUME[:MilkCounter] = 44 ; Tag[:MilkCounter] = 'MILK_COUNTER'
    ENUM[45] = :HadDrill ; NUME[:HadDrill] = 45
    ENUM[46] = :CompletedDrill ; NUME[:CompletedDrill] = 46
    ENUM[47] = :EggSpent ; NUME[:EggSpent] = 47 ; Tag[:EggSpent] = 'EGG_SPENT'
    ENUM[48] = :GroundedAnimalAnger ; NUME[:GroundedAnimalAnger] = 48 ; Tag[:GroundedAnimalAnger] = 'GROUNDED_ANIMAL_ANGER'
    ENUM[50] = :TimeSinceSuckedBlood ; NUME[:TimeSinceSuckedBlood] = 50 ; Tag[:TimeSinceSuckedBlood] = 'TIME_SINCE_SUCKED_BLOOD'
    ENUM[51] = :DrinkingBlood ; NUME[:DrinkingBlood] = 51 ; Tag[:DrinkingBlood] = 'DRINKING_BLOOD'
    ENUM[54] = :RevertWildTimer ; NUME[:RevertWildTimer] = 54
    ENUM[56] = :NoPantsAnger ; NUME[:NoPantsAnger] = 56
    ENUM[57] = :NoShirtAnger ; NUME[:NoShirtAnger] = 57
    ENUM[58] = :NoShoesAnger ; NUME[:NoShoesAnger] = 58
end

class MoodType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :None ; NUME[:None] = -1
    ENUM[0] = :Fey ; NUME[:Fey] = 0
    ENUM[1] = :Secretive ; NUME[:Secretive] = 1
    ENUM[2] = :Possessed ; NUME[:Possessed] = 2
    ENUM[3] = :Macabre ; NUME[:Macabre] = 3
    ENUM[4] = :Fell ; NUME[:Fell] = 4
    ENUM[5] = :Melancholy ; NUME[:Melancholy] = 5
    ENUM[6] = :Raving ; NUME[:Raving] = 6
    ENUM[7] = :Berserk ; NUME[:Berserk] = 7
    ENUM[8] = :Baby ; NUME[:Baby] = 8
    ENUM[9] = :Traumatized ; NUME[:Traumatized] = 9
end

class NemesisFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :ACTIVE_ADVENTURER ; NUME[:ACTIVE_ADVENTURER] = 0
    ENUM[1] = :RETIRED_ADVENTURER ; NUME[:RETIRED_ADVENTURER] = 1
    ENUM[2] = :ADVENTURER ; NUME[:ADVENTURER] = 2
end

class OrganicMatCategory < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Meat ; NUME[:Meat] = 0
    ENUM[1] = :Fish ; NUME[:Fish] = 1
    ENUM[2] = :UnpreparedFish ; NUME[:UnpreparedFish] = 2
    ENUM[3] = :Eggs ; NUME[:Eggs] = 3
    ENUM[4] = :Plants ; NUME[:Plants] = 4
    ENUM[5] = :PlantDrink ; NUME[:PlantDrink] = 5
    ENUM[6] = :CreatureDrink ; NUME[:CreatureDrink] = 6
    ENUM[7] = :PlantCheese ; NUME[:PlantCheese] = 7
    ENUM[8] = :CreatureCheese ; NUME[:CreatureCheese] = 8
    ENUM[9] = :Seed ; NUME[:Seed] = 9
    ENUM[10] = :Leaf ; NUME[:Leaf] = 10
    ENUM[11] = :PlantPowder ; NUME[:PlantPowder] = 11
    ENUM[12] = :CreaturePowder ; NUME[:CreaturePowder] = 12
    ENUM[13] = :Glob ; NUME[:Glob] = 13
    ENUM[14] = :PlantLiquid ; NUME[:PlantLiquid] = 14
    ENUM[15] = :CreatureLiquid ; NUME[:CreatureLiquid] = 15
    ENUM[16] = :MiscLiquid ; NUME[:MiscLiquid] = 16
    ENUM[17] = :Leather ; NUME[:Leather] = 17
    ENUM[18] = :Silk ; NUME[:Silk] = 18
    ENUM[19] = :PlantFiber ; NUME[:PlantFiber] = 19
    ENUM[20] = :Bone ; NUME[:Bone] = 20
    ENUM[21] = :Shell ; NUME[:Shell] = 21
    ENUM[22] = :Wood ; NUME[:Wood] = 22
    ENUM[23] = :Horn ; NUME[:Horn] = 23
    ENUM[24] = :Pearl ; NUME[:Pearl] = 24
    ENUM[25] = :Tooth ; NUME[:Tooth] = 25
    ENUM[26] = :EdibleCheese ; NUME[:EdibleCheese] = 26
    ENUM[27] = :AnyDrink ; NUME[:AnyDrink] = 27
    ENUM[28] = :EdiblePlant ; NUME[:EdiblePlant] = 28
    ENUM[29] = :CookableLiquid ; NUME[:CookableLiquid] = 29
    ENUM[30] = :CookablePowder ; NUME[:CookablePowder] = 30
    ENUM[31] = :CookableSeed ; NUME[:CookableSeed] = 31
    ENUM[32] = :CookableLeaf ; NUME[:CookableLeaf] = 32
    ENUM[33] = :Paste ; NUME[:Paste] = 33
    ENUM[34] = :Pressed ; NUME[:Pressed] = 34
    ENUM[35] = :Yarn ; NUME[:Yarn] = 35
    ENUM[36] = :MetalThread ; NUME[:MetalThread] = 36
end

class PantsFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :METAL_ARMOR_LEVELS ; NUME[:METAL_ARMOR_LEVELS] = 0
end

class PartOfSpeech < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Noun ; NUME[:Noun] = 0
    ENUM[1] = :NounPlural ; NUME[:NounPlural] = 1
    ENUM[2] = :Adjective ; NUME[:Adjective] = 2
    ENUM[3] = :Prefix ; NUME[:Prefix] = 3
    ENUM[4] = :Verb ; NUME[:Verb] = 4
    ENUM[5] = :Verb3rdPerson ; NUME[:Verb3rdPerson] = 5
    ENUM[6] = :VerbPast ; NUME[:VerbPast] = 6
    ENUM[7] = :VerbPassive ; NUME[:VerbPassive] = 7
    ENUM[8] = :VerbGerund ; NUME[:VerbGerund] = 8
end

class PatternType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :MONOTONE ; NUME[:MONOTONE] = 0
    ENUM[1] = :STRIPES ; NUME[:STRIPES] = 1
    ENUM[2] = :IRIS_EYE ; NUME[:IRIS_EYE] = 2
    ENUM[3] = :SPOTS ; NUME[:SPOTS] = 3
    ENUM[4] = :PUPIL_EYE ; NUME[:PUPIL_EYE] = 4
    ENUM[5] = :MOTTLED ; NUME[:MOTTLED] = 5
end

class PersonalityFacetType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :LOVE_PROPENSITY ; NUME[:LOVE_PROPENSITY] = 0
    ENUM[1] = :HATE_PROPENSITY ; NUME[:HATE_PROPENSITY] = 1
    ENUM[2] = :ENVY_PROPENSITY ; NUME[:ENVY_PROPENSITY] = 2
    ENUM[3] = :CHEER_PROPENSITY ; NUME[:CHEER_PROPENSITY] = 3
    ENUM[4] = :DEPRESSION_PROPENSITY ; NUME[:DEPRESSION_PROPENSITY] = 4
    ENUM[5] = :ANGER_PROPENSITY ; NUME[:ANGER_PROPENSITY] = 5
    ENUM[6] = :ANXIETY_PROPENSITY ; NUME[:ANXIETY_PROPENSITY] = 6
    ENUM[7] = :LUST_PROPENSITY ; NUME[:LUST_PROPENSITY] = 7
    ENUM[8] = :STRESS_VULNERABILITY ; NUME[:STRESS_VULNERABILITY] = 8
    ENUM[9] = :GREED ; NUME[:GREED] = 9
    ENUM[10] = :IMMODERATION ; NUME[:IMMODERATION] = 10
    ENUM[11] = :VIOLENT ; NUME[:VIOLENT] = 11
    ENUM[12] = :PERSEVERENCE ; NUME[:PERSEVERENCE] = 12
    ENUM[13] = :WASTEFULNESS ; NUME[:WASTEFULNESS] = 13
    ENUM[14] = :DISCORD ; NUME[:DISCORD] = 14
    ENUM[15] = :FRIENDLINESS ; NUME[:FRIENDLINESS] = 15
    ENUM[16] = :POLITENESS ; NUME[:POLITENESS] = 16
    ENUM[17] = :DISDAIN_ADVICE ; NUME[:DISDAIN_ADVICE] = 17
    ENUM[18] = :BRAVERY ; NUME[:BRAVERY] = 18
    ENUM[19] = :CONFIDENCE ; NUME[:CONFIDENCE] = 19
    ENUM[20] = :VANITY ; NUME[:VANITY] = 20
    ENUM[21] = :AMBITION ; NUME[:AMBITION] = 21
    ENUM[22] = :GRATITUDE ; NUME[:GRATITUDE] = 22
    ENUM[23] = :IMMODESTY ; NUME[:IMMODESTY] = 23
    ENUM[24] = :HUMOR ; NUME[:HUMOR] = 24
    ENUM[25] = :VENGEFUL ; NUME[:VENGEFUL] = 25
    ENUM[26] = :PRIDE ; NUME[:PRIDE] = 26
    ENUM[27] = :CRUELTY ; NUME[:CRUELTY] = 27
    ENUM[28] = :SINGLEMINDED ; NUME[:SINGLEMINDED] = 28
    ENUM[29] = :HOPEFUL ; NUME[:HOPEFUL] = 29
    ENUM[30] = :CURIOUS ; NUME[:CURIOUS] = 30
    ENUM[31] = :BASHFUL ; NUME[:BASHFUL] = 31
    ENUM[32] = :PRIVACY ; NUME[:PRIVACY] = 32
    ENUM[33] = :PERFECTIONIST ; NUME[:PERFECTIONIST] = 33
    ENUM[34] = :CLOSEMINDED ; NUME[:CLOSEMINDED] = 34
    ENUM[35] = :TOLERANT ; NUME[:TOLERANT] = 35
    ENUM[36] = :EMOTIONALLY_OBSESSIVE ; NUME[:EMOTIONALLY_OBSESSIVE] = 36
    ENUM[37] = :SWAYED_BY_EMOTIONS ; NUME[:SWAYED_BY_EMOTIONS] = 37
    ENUM[38] = :ALTRUISM ; NUME[:ALTRUISM] = 38
    ENUM[39] = :DUTIFULNESS ; NUME[:DUTIFULNESS] = 39
    ENUM[40] = :THOUGHTLESSNESS ; NUME[:THOUGHTLESSNESS] = 40
    ENUM[41] = :ORDERLINESS ; NUME[:ORDERLINESS] = 41
    ENUM[42] = :TRUST ; NUME[:TRUST] = 42
    ENUM[43] = :GREGARIOUSNESS ; NUME[:GREGARIOUSNESS] = 43
    ENUM[44] = :ASSERTIVENESS ; NUME[:ASSERTIVENESS] = 44
    ENUM[45] = :ACTIVITY_LEVEL ; NUME[:ACTIVITY_LEVEL] = 45
    ENUM[46] = :EXCITEMENT_SEEKING ; NUME[:EXCITEMENT_SEEKING] = 46
    ENUM[47] = :IMAGINATION ; NUME[:IMAGINATION] = 47
    ENUM[48] = :ABSTRACT_INCLINED ; NUME[:ABSTRACT_INCLINED] = 48
    ENUM[49] = :ART_INCLINED ; NUME[:ART_INCLINED] = 49
end

class PhysicalAttributeType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :STRENGTH ; NUME[:STRENGTH] = 0
    ENUM[1] = :AGILITY ; NUME[:AGILITY] = 1
    ENUM[2] = :TOUGHNESS ; NUME[:TOUGHNESS] = 2
    ENUM[3] = :ENDURANCE ; NUME[:ENDURANCE] = 3
    ENUM[4] = :RECUPERATION ; NUME[:RECUPERATION] = 4
    ENUM[5] = :DISEASE_RESISTANCE ; NUME[:DISEASE_RESISTANCE] = 5
end

class PlantRawFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :SPRING ; NUME[:SPRING] = 0
    ENUM[1] = :SUMMER ; NUME[:SUMMER] = 1
    ENUM[2] = :AUTUMN ; NUME[:AUTUMN] = 2
    ENUM[3] = :WINTER ; NUME[:WINTER] = 3
    ENUM[5] = :SEED ; NUME[:SEED] = 5
    ENUM[6] = :TREE_HAS_MUSHROOM_CAP ; NUME[:TREE_HAS_MUSHROOM_CAP] = 6
    ENUM[7] = :DRINK ; NUME[:DRINK] = 7
    ENUM[8] = :EXTRACT_BARREL ; NUME[:EXTRACT_BARREL] = 8
    ENUM[9] = :EXTRACT_VIAL ; NUME[:EXTRACT_VIAL] = 9
    ENUM[10] = :EXTRACT_STILL_VIAL ; NUME[:EXTRACT_STILL_VIAL] = 10
    ENUM[11] = :GENERATED ; NUME[:GENERATED] = 11
    ENUM[12] = :THREAD ; NUME[:THREAD] = 12
    ENUM[13] = :MILL ; NUME[:MILL] = 13
    ENUM[20] = :WET ; NUME[:WET] = 20
    ENUM[21] = :DRY ; NUME[:DRY] = 21
    ENUM[22] = :BIOME_MOUNTAIN ; NUME[:BIOME_MOUNTAIN] = 22
    ENUM[23] = :BIOME_GLACIER ; NUME[:BIOME_GLACIER] = 23
    ENUM[24] = :BIOME_TUNDRA ; NUME[:BIOME_TUNDRA] = 24
    ENUM[25] = :BIOME_SWAMP_TEMPERATE_FRESHWATER ; NUME[:BIOME_SWAMP_TEMPERATE_FRESHWATER] = 25
    ENUM[26] = :BIOME_SWAMP_TEMPERATE_SALTWATER ; NUME[:BIOME_SWAMP_TEMPERATE_SALTWATER] = 26
    ENUM[27] = :BIOME_MARSH_TEMPERATE_FRESHWATER ; NUME[:BIOME_MARSH_TEMPERATE_FRESHWATER] = 27
    ENUM[28] = :BIOME_MARSH_TEMPERATE_SALTWATER ; NUME[:BIOME_MARSH_TEMPERATE_SALTWATER] = 28
    ENUM[29] = :BIOME_SWAMP_TROPICAL_FRESHWATER ; NUME[:BIOME_SWAMP_TROPICAL_FRESHWATER] = 29
    ENUM[30] = :BIOME_SWAMP_TROPICAL_SALTWATER ; NUME[:BIOME_SWAMP_TROPICAL_SALTWATER] = 30
    ENUM[31] = :BIOME_SWAMP_MANGROVE ; NUME[:BIOME_SWAMP_MANGROVE] = 31
    ENUM[32] = :BIOME_MARSH_TROPICAL_FRESHWATER ; NUME[:BIOME_MARSH_TROPICAL_FRESHWATER] = 32
    ENUM[33] = :BIOME_MARSH_TROPICAL_SALTWATER ; NUME[:BIOME_MARSH_TROPICAL_SALTWATER] = 33
    ENUM[34] = :BIOME_FOREST_TAIGA ; NUME[:BIOME_FOREST_TAIGA] = 34
    ENUM[35] = :BIOME_FOREST_TEMPERATE_CONIFER ; NUME[:BIOME_FOREST_TEMPERATE_CONIFER] = 35
    ENUM[36] = :BIOME_FOREST_TEMPERATE_BROADLEAF ; NUME[:BIOME_FOREST_TEMPERATE_BROADLEAF] = 36
    ENUM[37] = :BIOME_FOREST_TROPICAL_CONIFER ; NUME[:BIOME_FOREST_TROPICAL_CONIFER] = 37
    ENUM[38] = :BIOME_FOREST_TROPICAL_DRY_BROADLEAF ; NUME[:BIOME_FOREST_TROPICAL_DRY_BROADLEAF] = 38
    ENUM[39] = :BIOME_FOREST_TROPICAL_MOIST_BROADLEAF ; NUME[:BIOME_FOREST_TROPICAL_MOIST_BROADLEAF] = 39
    ENUM[40] = :BIOME_GRASSLAND_TEMPERATE ; NUME[:BIOME_GRASSLAND_TEMPERATE] = 40
    ENUM[41] = :BIOME_SAVANNA_TEMPERATE ; NUME[:BIOME_SAVANNA_TEMPERATE] = 41
    ENUM[42] = :BIOME_SHRUBLAND_TEMPERATE ; NUME[:BIOME_SHRUBLAND_TEMPERATE] = 42
    ENUM[43] = :BIOME_GRASSLAND_TROPICAL ; NUME[:BIOME_GRASSLAND_TROPICAL] = 43
    ENUM[44] = :BIOME_SAVANNA_TROPICAL ; NUME[:BIOME_SAVANNA_TROPICAL] = 44
    ENUM[45] = :BIOME_SHRUBLAND_TROPICAL ; NUME[:BIOME_SHRUBLAND_TROPICAL] = 45
    ENUM[46] = :BIOME_DESERT_BADLAND ; NUME[:BIOME_DESERT_BADLAND] = 46
    ENUM[47] = :BIOME_DESERT_ROCK ; NUME[:BIOME_DESERT_ROCK] = 47
    ENUM[48] = :BIOME_DESERT_SAND ; NUME[:BIOME_DESERT_SAND] = 48
    ENUM[49] = :BIOME_OCEAN_TROPICAL ; NUME[:BIOME_OCEAN_TROPICAL] = 49
    ENUM[50] = :BIOME_OCEAN_TEMPERATE ; NUME[:BIOME_OCEAN_TEMPERATE] = 50
    ENUM[51] = :BIOME_OCEAN_ARCTIC ; NUME[:BIOME_OCEAN_ARCTIC] = 51
    ENUM[52] = :BIOME_POOL_TEMPERATE_FRESHWATER ; NUME[:BIOME_POOL_TEMPERATE_FRESHWATER] = 52
    ENUM[53] = :BIOME_SUBTERRANEAN_WATER ; NUME[:BIOME_SUBTERRANEAN_WATER] = 53
    ENUM[54] = :BIOME_SUBTERRANEAN_CHASM ; NUME[:BIOME_SUBTERRANEAN_CHASM] = 54
    ENUM[55] = :BIOME_SUBTERRANEAN_LAVA ; NUME[:BIOME_SUBTERRANEAN_LAVA] = 55
    ENUM[56] = :GOOD ; NUME[:GOOD] = 56
    ENUM[57] = :EVIL ; NUME[:EVIL] = 57
    ENUM[58] = :SAVAGE ; NUME[:SAVAGE] = 58
    ENUM[59] = :BIOME_POOL_TEMPERATE_BRACKISHWATER ; NUME[:BIOME_POOL_TEMPERATE_BRACKISHWATER] = 59
    ENUM[60] = :BIOME_POOL_TEMPERATE_SALTWATER ; NUME[:BIOME_POOL_TEMPERATE_SALTWATER] = 60
    ENUM[61] = :BIOME_POOL_TROPICAL_FRESHWATER ; NUME[:BIOME_POOL_TROPICAL_FRESHWATER] = 61
    ENUM[62] = :BIOME_POOL_TROPICAL_BRACKISHWATER ; NUME[:BIOME_POOL_TROPICAL_BRACKISHWATER] = 62
    ENUM[63] = :BIOME_POOL_TROPICAL_SALTWATER ; NUME[:BIOME_POOL_TROPICAL_SALTWATER] = 63
    ENUM[64] = :BIOME_LAKE_TEMPERATE_FRESHWATER ; NUME[:BIOME_LAKE_TEMPERATE_FRESHWATER] = 64
    ENUM[65] = :BIOME_LAKE_TEMPERATE_BRACKISHWATER ; NUME[:BIOME_LAKE_TEMPERATE_BRACKISHWATER] = 65
    ENUM[66] = :BIOME_LAKE_TEMPERATE_SALTWATER ; NUME[:BIOME_LAKE_TEMPERATE_SALTWATER] = 66
    ENUM[67] = :BIOME_LAKE_TROPICAL_FRESHWATER ; NUME[:BIOME_LAKE_TROPICAL_FRESHWATER] = 67
    ENUM[68] = :BIOME_LAKE_TROPICAL_BRACKISHWATER ; NUME[:BIOME_LAKE_TROPICAL_BRACKISHWATER] = 68
    ENUM[69] = :BIOME_LAKE_TROPICAL_SALTWATER ; NUME[:BIOME_LAKE_TROPICAL_SALTWATER] = 69
    ENUM[70] = :BIOME_RIVER_TEMPERATE_FRESHWATER ; NUME[:BIOME_RIVER_TEMPERATE_FRESHWATER] = 70
    ENUM[71] = :BIOME_RIVER_TEMPERATE_BRACKISHWATER ; NUME[:BIOME_RIVER_TEMPERATE_BRACKISHWATER] = 71
    ENUM[72] = :BIOME_RIVER_TEMPERATE_SALTWATER ; NUME[:BIOME_RIVER_TEMPERATE_SALTWATER] = 72
    ENUM[73] = :BIOME_RIVER_TROPICAL_FRESHWATER ; NUME[:BIOME_RIVER_TROPICAL_FRESHWATER] = 73
    ENUM[74] = :BIOME_RIVER_TROPICAL_BRACKISHWATER ; NUME[:BIOME_RIVER_TROPICAL_BRACKISHWATER] = 74
    ENUM[75] = :BIOME_RIVER_TROPICAL_SALTWATER ; NUME[:BIOME_RIVER_TROPICAL_SALTWATER] = 75
    ENUM[76] = :TWIGS_SIDE_BRANCHES ; NUME[:TWIGS_SIDE_BRANCHES] = 76
    ENUM[77] = :SAPLING ; NUME[:SAPLING] = 77
    ENUM[78] = :TREE ; NUME[:TREE] = 78
    ENUM[79] = :GRASS ; NUME[:GRASS] = 79
    ENUM[80] = :TWIGS_ABOVE_BRANCHES ; NUME[:TWIGS_ABOVE_BRANCHES] = 80
    ENUM[81] = :TWIGS_BELOW_BRANCHES ; NUME[:TWIGS_BELOW_BRANCHES] = 81
    ENUM[82] = :TWIGS_SIDE_HEAVY_BRANCHES ; NUME[:TWIGS_SIDE_HEAVY_BRANCHES] = 82
    ENUM[83] = :TWIGS_ABOVE_HEAVY_BRANCHES ; NUME[:TWIGS_ABOVE_HEAVY_BRANCHES] = 83
    ENUM[84] = :TWIGS_BELOW_HEAVY_BRANCHES ; NUME[:TWIGS_BELOW_HEAVY_BRANCHES] = 84
    ENUM[85] = :TWIGS_SIDE_TRUNK ; NUME[:TWIGS_SIDE_TRUNK] = 85
    ENUM[86] = :TWIGS_ABOVE_TRUNK ; NUME[:TWIGS_ABOVE_TRUNK] = 86
    ENUM[87] = :TWIGS_BELOW_TRUNK ; NUME[:TWIGS_BELOW_TRUNK] = 87
end

class Profession < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Caption = Hash.new
    Military = Hash.new(false)
    Parent = Hash.new(:NONE)
    CanAssignLabor = Hash.new(true)
    Color = Hash.new(-1)
    Moodable = Hash.new(false)
    ENUM[-1] = :NONE ; NUME[:NONE] = -1
    ENUM[0] = :MINER ; NUME[:MINER] = 0 ; Caption[:MINER] = 'Miner' ; Color[:MINER] = 7 ; Moodable[:MINER] = true
    ENUM[1] = :WOODWORKER ; NUME[:WOODWORKER] = 1 ; Caption[:WOODWORKER] = 'Woodworker' ; Color[:WOODWORKER] = 14 ; Moodable[:WOODWORKER] = true
    ENUM[2] = :CARPENTER ; NUME[:CARPENTER] = 2 ; Caption[:CARPENTER] = 'Carpenter' ; Parent[:CARPENTER] = :WOODWORKER ; Color[:CARPENTER] = 14 ; Moodable[:CARPENTER] = true
    ENUM[3] = :BOWYER ; NUME[:BOWYER] = 3 ; Caption[:BOWYER] = 'Bowyer' ; Parent[:BOWYER] = :WOODWORKER ; Color[:BOWYER] = 14 ; Moodable[:BOWYER] = true
    ENUM[4] = :WOODCUTTER ; NUME[:WOODCUTTER] = 4 ; Caption[:WOODCUTTER] = 'Woodcutter' ; Parent[:WOODCUTTER] = :WOODWORKER ; Color[:WOODCUTTER] = 14 ; Moodable[:WOODCUTTER] = true
    ENUM[5] = :STONEWORKER ; NUME[:STONEWORKER] = 5 ; Caption[:STONEWORKER] = 'Stoneworker' ; Color[:STONEWORKER] = 15 ; Moodable[:STONEWORKER] = true
    ENUM[6] = :ENGRAVER ; NUME[:ENGRAVER] = 6 ; Caption[:ENGRAVER] = 'Engraver' ; Parent[:ENGRAVER] = :STONEWORKER ; Color[:ENGRAVER] = 15 ; Moodable[:ENGRAVER] = true
    ENUM[7] = :MASON ; NUME[:MASON] = 7 ; Caption[:MASON] = 'Mason' ; Parent[:MASON] = :STONEWORKER ; Color[:MASON] = 15 ; Moodable[:MASON] = true
    ENUM[8] = :RANGER ; NUME[:RANGER] = 8 ; Caption[:RANGER] = 'Ranger' ; Color[:RANGER] = 2 ; Moodable[:RANGER] = true
    ENUM[9] = :ANIMAL_CARETAKER ; NUME[:ANIMAL_CARETAKER] = 9 ; Caption[:ANIMAL_CARETAKER] = 'Animal Caretaker' ; Parent[:ANIMAL_CARETAKER] = :RANGER ; Color[:ANIMAL_CARETAKER] = 2 ; Moodable[:ANIMAL_CARETAKER] = true
    ENUM[10] = :ANIMAL_TRAINER ; NUME[:ANIMAL_TRAINER] = 10 ; Caption[:ANIMAL_TRAINER] = 'Animal Trainer' ; Parent[:ANIMAL_TRAINER] = :RANGER ; Color[:ANIMAL_TRAINER] = 2 ; Moodable[:ANIMAL_TRAINER] = true
    ENUM[11] = :HUNTER ; NUME[:HUNTER] = 11 ; Caption[:HUNTER] = 'Hunter' ; Parent[:HUNTER] = :RANGER ; Color[:HUNTER] = 2 ; Moodable[:HUNTER] = true
    ENUM[12] = :TRAPPER ; NUME[:TRAPPER] = 12 ; Caption[:TRAPPER] = 'Trapper' ; Parent[:TRAPPER] = :RANGER ; Color[:TRAPPER] = 2 ; Moodable[:TRAPPER] = true
    ENUM[13] = :ANIMAL_DISSECTOR ; NUME[:ANIMAL_DISSECTOR] = 13 ; Caption[:ANIMAL_DISSECTOR] = 'Animal Dissector' ; Parent[:ANIMAL_DISSECTOR] = :RANGER ; Color[:ANIMAL_DISSECTOR] = 2 ; Moodable[:ANIMAL_DISSECTOR] = true
    ENUM[14] = :METALSMITH ; NUME[:METALSMITH] = 14 ; Caption[:METALSMITH] = 'Metalsmith' ; Color[:METALSMITH] = 8 ; Moodable[:METALSMITH] = true
    ENUM[15] = :FURNACE_OPERATOR ; NUME[:FURNACE_OPERATOR] = 15 ; Caption[:FURNACE_OPERATOR] = 'Furnace Operator' ; Parent[:FURNACE_OPERATOR] = :METALSMITH ; Color[:FURNACE_OPERATOR] = 8 ; Moodable[:FURNACE_OPERATOR] = true
    ENUM[16] = :WEAPONSMITH ; NUME[:WEAPONSMITH] = 16 ; Caption[:WEAPONSMITH] = 'Weaponsmith' ; Parent[:WEAPONSMITH] = :METALSMITH ; Color[:WEAPONSMITH] = 8 ; Moodable[:WEAPONSMITH] = true
    ENUM[17] = :ARMORER ; NUME[:ARMORER] = 17 ; Caption[:ARMORER] = 'Armorer' ; Parent[:ARMORER] = :METALSMITH ; Color[:ARMORER] = 8 ; Moodable[:ARMORER] = true
    ENUM[18] = :BLACKSMITH ; NUME[:BLACKSMITH] = 18 ; Caption[:BLACKSMITH] = 'Blacksmith' ; Parent[:BLACKSMITH] = :METALSMITH ; Color[:BLACKSMITH] = 8 ; Moodable[:BLACKSMITH] = true
    ENUM[19] = :METALCRAFTER ; NUME[:METALCRAFTER] = 19 ; Caption[:METALCRAFTER] = 'Metalcrafter' ; Parent[:METALCRAFTER] = :METALSMITH ; Color[:METALCRAFTER] = 8 ; Moodable[:METALCRAFTER] = true
    ENUM[20] = :JEWELER ; NUME[:JEWELER] = 20 ; Caption[:JEWELER] = 'Jeweler' ; Color[:JEWELER] = 10 ; Moodable[:JEWELER] = true
    ENUM[21] = :GEM_CUTTER ; NUME[:GEM_CUTTER] = 21 ; Caption[:GEM_CUTTER] = 'Gem Cutter' ; Parent[:GEM_CUTTER] = :JEWELER ; Color[:GEM_CUTTER] = 10 ; Moodable[:GEM_CUTTER] = true
    ENUM[22] = :GEM_SETTER ; NUME[:GEM_SETTER] = 22 ; Caption[:GEM_SETTER] = 'Gem Setter' ; Parent[:GEM_SETTER] = :JEWELER ; Color[:GEM_SETTER] = 10 ; Moodable[:GEM_SETTER] = true
    ENUM[23] = :CRAFTSMAN ; NUME[:CRAFTSMAN] = 23 ; Caption[:CRAFTSMAN] = 'Craftsman' ; Color[:CRAFTSMAN] = 9 ; Moodable[:CRAFTSMAN] = true
    ENUM[24] = :WOODCRAFTER ; NUME[:WOODCRAFTER] = 24 ; Caption[:WOODCRAFTER] = 'Woodcrafter' ; Parent[:WOODCRAFTER] = :CRAFTSMAN ; Color[:WOODCRAFTER] = 9 ; Moodable[:WOODCRAFTER] = true
    ENUM[25] = :STONECRAFTER ; NUME[:STONECRAFTER] = 25 ; Caption[:STONECRAFTER] = 'Stonecrafter' ; Parent[:STONECRAFTER] = :CRAFTSMAN ; Color[:STONECRAFTER] = 9 ; Moodable[:STONECRAFTER] = true
    ENUM[26] = :LEATHERWORKER ; NUME[:LEATHERWORKER] = 26 ; Caption[:LEATHERWORKER] = 'Leatherworker' ; Parent[:LEATHERWORKER] = :CRAFTSMAN ; Color[:LEATHERWORKER] = 9 ; Moodable[:LEATHERWORKER] = true
    ENUM[27] = :BONE_CARVER ; NUME[:BONE_CARVER] = 27 ; Caption[:BONE_CARVER] = 'Bone Carver' ; Parent[:BONE_CARVER] = :CRAFTSMAN ; Color[:BONE_CARVER] = 9 ; Moodable[:BONE_CARVER] = true
    ENUM[28] = :WEAVER ; NUME[:WEAVER] = 28 ; Caption[:WEAVER] = 'Weaver' ; Parent[:WEAVER] = :CRAFTSMAN ; Color[:WEAVER] = 9 ; Moodable[:WEAVER] = true
    ENUM[29] = :CLOTHIER ; NUME[:CLOTHIER] = 29 ; Caption[:CLOTHIER] = 'Clothier' ; Parent[:CLOTHIER] = :CRAFTSMAN ; Color[:CLOTHIER] = 9 ; Moodable[:CLOTHIER] = true
    ENUM[30] = :GLASSMAKER ; NUME[:GLASSMAKER] = 30 ; Caption[:GLASSMAKER] = 'Glassmaker' ; Parent[:GLASSMAKER] = :CRAFTSMAN ; Color[:GLASSMAKER] = 9 ; Moodable[:GLASSMAKER] = true
    ENUM[31] = :POTTER ; NUME[:POTTER] = 31 ; Caption[:POTTER] = 'Potter' ; Parent[:POTTER] = :CRAFTSMAN ; Color[:POTTER] = 9 ; Moodable[:POTTER] = true
    ENUM[32] = :GLAZER ; NUME[:GLAZER] = 32 ; Caption[:GLAZER] = 'Glazer' ; Parent[:GLAZER] = :CRAFTSMAN ; Color[:GLAZER] = 9 ; Moodable[:GLAZER] = true
    ENUM[33] = :WAX_WORKER ; NUME[:WAX_WORKER] = 33 ; Caption[:WAX_WORKER] = 'Wax Worker' ; Parent[:WAX_WORKER] = :CRAFTSMAN ; Color[:WAX_WORKER] = 9 ; Moodable[:WAX_WORKER] = true
    ENUM[34] = :STRAND_EXTRACTOR ; NUME[:STRAND_EXTRACTOR] = 34 ; Caption[:STRAND_EXTRACTOR] = 'Strand Extractor' ; Parent[:STRAND_EXTRACTOR] = :CRAFTSMAN ; Color[:STRAND_EXTRACTOR] = 9 ; Moodable[:STRAND_EXTRACTOR] = true
    ENUM[35] = :FISHERY_WORKER ; NUME[:FISHERY_WORKER] = 35 ; Caption[:FISHERY_WORKER] = 'Fishery Worker' ; Color[:FISHERY_WORKER] = 1 ; Moodable[:FISHERY_WORKER] = true
    ENUM[36] = :FISHERMAN ; NUME[:FISHERMAN] = 36 ; Caption[:FISHERMAN] = 'Fisherman' ; Parent[:FISHERMAN] = :FISHERY_WORKER ; Color[:FISHERMAN] = 1 ; Moodable[:FISHERMAN] = true
    ENUM[37] = :FISH_DISSECTOR ; NUME[:FISH_DISSECTOR] = 37 ; Caption[:FISH_DISSECTOR] = 'Fish Dissector' ; Parent[:FISH_DISSECTOR] = :FISHERY_WORKER ; Color[:FISH_DISSECTOR] = 1 ; Moodable[:FISH_DISSECTOR] = true
    ENUM[38] = :FISH_CLEANER ; NUME[:FISH_CLEANER] = 38 ; Caption[:FISH_CLEANER] = 'Fish Cleaner' ; Parent[:FISH_CLEANER] = :FISHERY_WORKER ; Color[:FISH_CLEANER] = 1 ; Moodable[:FISH_CLEANER] = true
    ENUM[39] = :FARMER ; NUME[:FARMER] = 39 ; Caption[:FARMER] = 'Farmer' ; Color[:FARMER] = 6 ; Moodable[:FARMER] = true
    ENUM[40] = :CHEESE_MAKER ; NUME[:CHEESE_MAKER] = 40 ; Caption[:CHEESE_MAKER] = 'Cheese Maker' ; Parent[:CHEESE_MAKER] = :FARMER ; Color[:CHEESE_MAKER] = 6 ; Moodable[:CHEESE_MAKER] = true
    ENUM[41] = :MILKER ; NUME[:MILKER] = 41 ; Caption[:MILKER] = 'Milker' ; Parent[:MILKER] = :FARMER ; Color[:MILKER] = 6 ; Moodable[:MILKER] = true
    ENUM[42] = :COOK ; NUME[:COOK] = 42 ; Caption[:COOK] = 'Cook' ; Parent[:COOK] = :FARMER ; Color[:COOK] = 6 ; Moodable[:COOK] = true
    ENUM[43] = :THRESHER ; NUME[:THRESHER] = 43 ; Caption[:THRESHER] = 'Thresher' ; Parent[:THRESHER] = :FARMER ; Color[:THRESHER] = 6 ; Moodable[:THRESHER] = true
    ENUM[44] = :MILLER ; NUME[:MILLER] = 44 ; Caption[:MILLER] = 'Miller' ; Parent[:MILLER] = :FARMER ; Color[:MILLER] = 6 ; Moodable[:MILLER] = true
    ENUM[45] = :BUTCHER ; NUME[:BUTCHER] = 45 ; Caption[:BUTCHER] = 'Butcher' ; Parent[:BUTCHER] = :FARMER ; Color[:BUTCHER] = 6 ; Moodable[:BUTCHER] = true
    ENUM[46] = :TANNER ; NUME[:TANNER] = 46 ; Caption[:TANNER] = 'Tanner' ; Parent[:TANNER] = :FARMER ; Color[:TANNER] = 6 ; Moodable[:TANNER] = true
    ENUM[47] = :DYER ; NUME[:DYER] = 47 ; Caption[:DYER] = 'Dyer' ; Parent[:DYER] = :FARMER ; Color[:DYER] = 6 ; Moodable[:DYER] = true
    ENUM[48] = :PLANTER ; NUME[:PLANTER] = 48 ; Caption[:PLANTER] = 'Planter' ; Parent[:PLANTER] = :FARMER ; Color[:PLANTER] = 6 ; Moodable[:PLANTER] = true
    ENUM[49] = :HERBALIST ; NUME[:HERBALIST] = 49 ; Caption[:HERBALIST] = 'Herbalist' ; Parent[:HERBALIST] = :FARMER ; Color[:HERBALIST] = 6 ; Moodable[:HERBALIST] = true
    ENUM[50] = :BREWER ; NUME[:BREWER] = 50 ; Caption[:BREWER] = 'Brewer' ; Parent[:BREWER] = :FARMER ; Color[:BREWER] = 6 ; Moodable[:BREWER] = true
    ENUM[51] = :SOAP_MAKER ; NUME[:SOAP_MAKER] = 51 ; Caption[:SOAP_MAKER] = 'Soap Maker' ; Parent[:SOAP_MAKER] = :FARMER ; Color[:SOAP_MAKER] = 6 ; Moodable[:SOAP_MAKER] = true
    ENUM[52] = :POTASH_MAKER ; NUME[:POTASH_MAKER] = 52 ; Caption[:POTASH_MAKER] = 'Potash Maker' ; Parent[:POTASH_MAKER] = :FARMER ; Color[:POTASH_MAKER] = 6 ; Moodable[:POTASH_MAKER] = true
    ENUM[53] = :LYE_MAKER ; NUME[:LYE_MAKER] = 53 ; Caption[:LYE_MAKER] = 'Lye Maker' ; Parent[:LYE_MAKER] = :FARMER ; Color[:LYE_MAKER] = 6 ; Moodable[:LYE_MAKER] = true
    ENUM[54] = :WOOD_BURNER ; NUME[:WOOD_BURNER] = 54 ; Caption[:WOOD_BURNER] = 'Wood Burner' ; Parent[:WOOD_BURNER] = :FARMER ; Color[:WOOD_BURNER] = 6 ; Moodable[:WOOD_BURNER] = true
    ENUM[55] = :SHEARER ; NUME[:SHEARER] = 55 ; Caption[:SHEARER] = 'Shearer' ; Parent[:SHEARER] = :FARMER ; Color[:SHEARER] = 6 ; Moodable[:SHEARER] = true
    ENUM[56] = :SPINNER ; NUME[:SPINNER] = 56 ; Caption[:SPINNER] = 'Spinner' ; Parent[:SPINNER] = :FARMER ; Color[:SPINNER] = 6 ; Moodable[:SPINNER] = true
    ENUM[57] = :PRESSER ; NUME[:PRESSER] = 57 ; Caption[:PRESSER] = 'Presser' ; Parent[:PRESSER] = :FARMER ; Color[:PRESSER] = 6 ; Moodable[:PRESSER] = true
    ENUM[58] = :BEEKEEPER ; NUME[:BEEKEEPER] = 58 ; Caption[:BEEKEEPER] = 'Bee Keeper' ; Parent[:BEEKEEPER] = :FARMER ; Color[:BEEKEEPER] = 6 ; Moodable[:BEEKEEPER] = true
    ENUM[59] = :ENGINEER ; NUME[:ENGINEER] = 59 ; Caption[:ENGINEER] = 'Engineer' ; Color[:ENGINEER] = 12 ; Moodable[:ENGINEER] = true
    ENUM[60] = :MECHANIC ; NUME[:MECHANIC] = 60 ; Caption[:MECHANIC] = 'Mechanic' ; Parent[:MECHANIC] = :ENGINEER ; Color[:MECHANIC] = 12 ; Moodable[:MECHANIC] = true
    ENUM[61] = :SIEGE_ENGINEER ; NUME[:SIEGE_ENGINEER] = 61 ; Caption[:SIEGE_ENGINEER] = 'Siege Engineer' ; Parent[:SIEGE_ENGINEER] = :ENGINEER ; Color[:SIEGE_ENGINEER] = 12 ; Moodable[:SIEGE_ENGINEER] = true
    ENUM[62] = :SIEGE_OPERATOR ; NUME[:SIEGE_OPERATOR] = 62 ; Caption[:SIEGE_OPERATOR] = 'Siege Operator' ; Parent[:SIEGE_OPERATOR] = :ENGINEER ; Color[:SIEGE_OPERATOR] = 12 ; Moodable[:SIEGE_OPERATOR] = true
    ENUM[63] = :PUMP_OPERATOR ; NUME[:PUMP_OPERATOR] = 63 ; Caption[:PUMP_OPERATOR] = 'Pump Operator' ; Parent[:PUMP_OPERATOR] = :ENGINEER ; Color[:PUMP_OPERATOR] = 12 ; Moodable[:PUMP_OPERATOR] = true
    ENUM[64] = :CLERK ; NUME[:CLERK] = 64 ; Caption[:CLERK] = 'Clerk' ; Parent[:CLERK] = :ADMINISTRATOR ; Color[:CLERK] = 5 ; Moodable[:CLERK] = true
    ENUM[65] = :ADMINISTRATOR ; NUME[:ADMINISTRATOR] = 65 ; Caption[:ADMINISTRATOR] = 'Administrator' ; Color[:ADMINISTRATOR] = 5 ; Moodable[:ADMINISTRATOR] = true
    ENUM[66] = :TRADER ; NUME[:TRADER] = 66 ; Caption[:TRADER] = 'Trader' ; Parent[:TRADER] = :ADMINISTRATOR ; Color[:TRADER] = 5 ; Moodable[:TRADER] = true
    ENUM[67] = :ARCHITECT ; NUME[:ARCHITECT] = 67 ; Caption[:ARCHITECT] = 'Architect' ; Parent[:ARCHITECT] = :ADMINISTRATOR ; Color[:ARCHITECT] = 5 ; Moodable[:ARCHITECT] = true
    ENUM[68] = :ALCHEMIST ; NUME[:ALCHEMIST] = 68 ; Caption[:ALCHEMIST] = 'Alchemist' ; Color[:ALCHEMIST] = 5 ; Moodable[:ALCHEMIST] = true
    ENUM[69] = :DOCTOR ; NUME[:DOCTOR] = 69 ; Caption[:DOCTOR] = 'Doctor' ; Color[:DOCTOR] = 5 ; Moodable[:DOCTOR] = true
    ENUM[70] = :DIAGNOSER ; NUME[:DIAGNOSER] = 70 ; Caption[:DIAGNOSER] = 'Diagnoser' ; Parent[:DIAGNOSER] = :DOCTOR ; Color[:DIAGNOSER] = 5 ; Moodable[:DIAGNOSER] = true
    ENUM[71] = :BONE_SETTER ; NUME[:BONE_SETTER] = 71 ; Caption[:BONE_SETTER] = 'Bone Setter' ; Parent[:BONE_SETTER] = :DOCTOR ; Color[:BONE_SETTER] = 5 ; Moodable[:BONE_SETTER] = true
    ENUM[72] = :SUTURER ; NUME[:SUTURER] = 72 ; Caption[:SUTURER] = 'Suturer' ; Parent[:SUTURER] = :DOCTOR ; Color[:SUTURER] = 5 ; Moodable[:SUTURER] = true
    ENUM[73] = :SURGEON ; NUME[:SURGEON] = 73 ; Caption[:SURGEON] = 'Surgeon' ; Parent[:SURGEON] = :DOCTOR ; Color[:SURGEON] = 5 ; Moodable[:SURGEON] = true
    ENUM[74] = :MERCHANT ; NUME[:MERCHANT] = 74 ; Caption[:MERCHANT] = 'Merchant' ; Color[:MERCHANT] = 7
    ENUM[75] = :HAMMERMAN ; NUME[:HAMMERMAN] = 75 ; Caption[:HAMMERMAN] = 'Hammerman' ; Military[:HAMMERMAN] = true ; Color[:HAMMERMAN] = 5
    ENUM[76] = :MASTER_HAMMERMAN ; NUME[:MASTER_HAMMERMAN] = 76 ; Caption[:MASTER_HAMMERMAN] = 'Hammer Lord' ; Military[:MASTER_HAMMERMAN] = true ; Parent[:MASTER_HAMMERMAN] = :HAMMERMAN ; Color[:MASTER_HAMMERMAN] = 13
    ENUM[77] = :SPEARMAN ; NUME[:SPEARMAN] = 77 ; Caption[:SPEARMAN] = 'Spearman' ; Military[:SPEARMAN] = true ; Color[:SPEARMAN] = 6
    ENUM[78] = :MASTER_SPEARMAN ; NUME[:MASTER_SPEARMAN] = 78 ; Caption[:MASTER_SPEARMAN] = 'Spearmaster' ; Military[:MASTER_SPEARMAN] = true ; Parent[:MASTER_SPEARMAN] = :SPEARMAN ; Color[:MASTER_SPEARMAN] = 14
    ENUM[79] = :CROSSBOWMAN ; NUME[:CROSSBOWMAN] = 79 ; Caption[:CROSSBOWMAN] = 'Crossbowman' ; Military[:CROSSBOWMAN] = true ; Color[:CROSSBOWMAN] = 2
    ENUM[80] = :MASTER_CROSSBOWMAN ; NUME[:MASTER_CROSSBOWMAN] = 80 ; Caption[:MASTER_CROSSBOWMAN] = 'Elite Crossbowman' ; Military[:MASTER_CROSSBOWMAN] = true ; Parent[:MASTER_CROSSBOWMAN] = :CROSSBOWMAN ; Color[:MASTER_CROSSBOWMAN] = 10
    ENUM[81] = :WRESTLER ; NUME[:WRESTLER] = 81 ; Caption[:WRESTLER] = 'Wrestler' ; Military[:WRESTLER] = true ; Color[:WRESTLER] = 7
    ENUM[82] = :MASTER_WRESTLER ; NUME[:MASTER_WRESTLER] = 82 ; Caption[:MASTER_WRESTLER] = 'Elite Wrestler' ; Military[:MASTER_WRESTLER] = true ; Parent[:MASTER_WRESTLER] = :WRESTLER ; Color[:MASTER_WRESTLER] = 15
    ENUM[83] = :AXEMAN ; NUME[:AXEMAN] = 83 ; Caption[:AXEMAN] = 'Axeman' ; Military[:AXEMAN] = true ; Color[:AXEMAN] = 1
    ENUM[84] = :MASTER_AXEMAN ; NUME[:MASTER_AXEMAN] = 84 ; Caption[:MASTER_AXEMAN] = 'Axe Lord' ; Military[:MASTER_AXEMAN] = true ; Parent[:MASTER_AXEMAN] = :AXEMAN ; Color[:MASTER_AXEMAN] = 9
    ENUM[85] = :SWORDSMAN ; NUME[:SWORDSMAN] = 85 ; Caption[:SWORDSMAN] = 'Swordsman' ; Military[:SWORDSMAN] = true ; Color[:SWORDSMAN] = 3
    ENUM[86] = :MASTER_SWORDSMAN ; NUME[:MASTER_SWORDSMAN] = 86 ; Caption[:MASTER_SWORDSMAN] = 'Swordsmaster' ; Military[:MASTER_SWORDSMAN] = true ; Parent[:MASTER_SWORDSMAN] = :SWORDSMAN ; Color[:MASTER_SWORDSMAN] = 11
    ENUM[87] = :MACEMAN ; NUME[:MACEMAN] = 87 ; Caption[:MACEMAN] = 'Maceman' ; Military[:MACEMAN] = true ; Color[:MACEMAN] = 4
    ENUM[88] = :MASTER_MACEMAN ; NUME[:MASTER_MACEMAN] = 88 ; Caption[:MASTER_MACEMAN] = 'Mace Lord' ; Military[:MASTER_MACEMAN] = true ; Parent[:MASTER_MACEMAN] = :MACEMAN ; Color[:MASTER_MACEMAN] = 12
    ENUM[89] = :PIKEMAN ; NUME[:PIKEMAN] = 89 ; Caption[:PIKEMAN] = 'Pikeman' ; Military[:PIKEMAN] = true ; Color[:PIKEMAN] = 6
    ENUM[90] = :MASTER_PIKEMAN ; NUME[:MASTER_PIKEMAN] = 90 ; Caption[:MASTER_PIKEMAN] = 'Pikemaster' ; Military[:MASTER_PIKEMAN] = true ; Parent[:MASTER_PIKEMAN] = :PIKEMAN ; Color[:MASTER_PIKEMAN] = 14
    ENUM[91] = :BOWMAN ; NUME[:BOWMAN] = 91 ; Caption[:BOWMAN] = 'Bowman' ; Military[:BOWMAN] = true ; Color[:BOWMAN] = 2
    ENUM[92] = :MASTER_BOWMAN ; NUME[:MASTER_BOWMAN] = 92 ; Caption[:MASTER_BOWMAN] = 'Elite Bowman' ; Military[:MASTER_BOWMAN] = true ; Parent[:MASTER_BOWMAN] = :BOWMAN ; Color[:MASTER_BOWMAN] = 10
    ENUM[93] = :BLOWGUNMAN ; NUME[:BLOWGUNMAN] = 93 ; Caption[:BLOWGUNMAN] = 'Blowgunner' ; Military[:BLOWGUNMAN] = true ; Color[:BLOWGUNMAN] = 8
    ENUM[94] = :MASTER_BLOWGUNMAN ; NUME[:MASTER_BLOWGUNMAN] = 94 ; Caption[:MASTER_BLOWGUNMAN] = 'Master Blowgunner' ; Military[:MASTER_BLOWGUNMAN] = true ; Parent[:MASTER_BLOWGUNMAN] = :BLOWGUNMAN ; Color[:MASTER_BLOWGUNMAN] = 8
    ENUM[95] = :LASHER ; NUME[:LASHER] = 95 ; Caption[:LASHER] = 'Lasher' ; Military[:LASHER] = true ; Color[:LASHER] = 8
    ENUM[96] = :MASTER_LASHER ; NUME[:MASTER_LASHER] = 96 ; Caption[:MASTER_LASHER] = 'Master Lasher' ; Military[:MASTER_LASHER] = true ; Parent[:MASTER_LASHER] = :LASHER ; Color[:MASTER_LASHER] = 8
    ENUM[97] = :RECRUIT ; NUME[:RECRUIT] = 97 ; Caption[:RECRUIT] = 'Recruit' ; Military[:RECRUIT] = true ; Color[:RECRUIT] = 8 ; Moodable[:RECRUIT] = true
    ENUM[98] = :TRAINED_HUNTER ; NUME[:TRAINED_HUNTER] = 98 ; Caption[:TRAINED_HUNTER] = 'Hunting Animal' ; Color[:TRAINED_HUNTER] = 15
    ENUM[99] = :TRAINED_WAR ; NUME[:TRAINED_WAR] = 99 ; Caption[:TRAINED_WAR] = 'War Animal' ; Color[:TRAINED_WAR] = 8
    ENUM[100] = :MASTER_THIEF ; NUME[:MASTER_THIEF] = 100 ; Caption[:MASTER_THIEF] = 'Master Thief' ; Parent[:MASTER_THIEF] = :THIEF ; Color[:MASTER_THIEF] = 8
    ENUM[101] = :THIEF ; NUME[:THIEF] = 101 ; Caption[:THIEF] = 'Thief' ; Color[:THIEF] = 8
    ENUM[102] = :STANDARD ; NUME[:STANDARD] = 102 ; Caption[:STANDARD] = 'Peasant' ; Color[:STANDARD] = -1 ; Moodable[:STANDARD] = true
    ENUM[103] = :CHILD ; NUME[:CHILD] = 103 ; Caption[:CHILD] = 'Child' ; CanAssignLabor[:CHILD] = false ; Parent[:CHILD] = :STANDARD ; Color[:CHILD] = 4 ; Moodable[:CHILD] = true
    ENUM[104] = :BABY ; NUME[:BABY] = 104 ; Caption[:BABY] = 'Baby' ; CanAssignLabor[:BABY] = false ; Parent[:BABY] = :STANDARD ; Color[:BABY] = 4
    ENUM[105] = :DRUNK ; NUME[:DRUNK] = 105 ; Caption[:DRUNK] = 'Drunk' ; CanAssignLabor[:DRUNK] = false ; Parent[:DRUNK] = :STANDARD ; Color[:DRUNK] = 6
    ENUM[106] = :MONSTER_SLAYER ; NUME[:MONSTER_SLAYER] = 106 ; Caption[:MONSTER_SLAYER] = 'Monster slayer' ; CanAssignLabor[:MONSTER_SLAYER] = false ; Parent[:MONSTER_SLAYER] = :STANDARD ; Color[:MONSTER_SLAYER] = 6
    ENUM[107] = :SCOUT ; NUME[:SCOUT] = 107 ; Caption[:SCOUT] = 'Scout' ; CanAssignLabor[:SCOUT] = false ; Parent[:SCOUT] = :STANDARD ; Color[:SCOUT] = 6
    ENUM[108] = :BEAST_HUNTER ; NUME[:BEAST_HUNTER] = 108 ; Caption[:BEAST_HUNTER] = 'Beast hunter' ; CanAssignLabor[:BEAST_HUNTER] = false ; Parent[:BEAST_HUNTER] = :STANDARD ; Color[:BEAST_HUNTER] = 6
    ENUM[109] = :SNATCHER ; NUME[:SNATCHER] = 109 ; Caption[:SNATCHER] = 'Snatcher' ; CanAssignLabor[:SNATCHER] = false ; Parent[:SNATCHER] = :STANDARD ; Color[:SNATCHER] = 6
    ENUM[110] = :MERCENARY ; NUME[:MERCENARY] = 110 ; Caption[:MERCENARY] = 'Mercenary' ; CanAssignLabor[:MERCENARY] = false ; Parent[:MERCENARY] = :STANDARD ; Color[:MERCENARY] = 6
    ENUM[111] = :GELDER ; NUME[:GELDER] = 111 ; Caption[:GELDER] = 'Gelder' ; Parent[:GELDER] = :FARMER ; Color[:GELDER] = 6
end

class ProjectileType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Item ; NUME[:Item] = 0
    ENUM[1] = :Unit ; NUME[:Unit] = 1
    ENUM[2] = :Magic ; NUME[:Magic] = 2
end

class ReactionFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :FUEL ; NUME[:FUEL] = 0
    ENUM[1] = :AUTOMATIC ; NUME[:AUTOMATIC] = 1
    ENUM[2] = :ADVENTURE_MODE_ENABLED ; NUME[:ADVENTURE_MODE_ENABLED] = 2
end

class ReactionProductImprovementFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :GET_MATERIAL_SAME ; NUME[:GET_MATERIAL_SAME] = 0
    ENUM[1] = :GET_MATERIAL_PRODUCT ; NUME[:GET_MATERIAL_PRODUCT] = 1
    ENUM[2] = :GLAZED ; NUME[:GLAZED] = 2
end

class ReactionProductItemFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :GET_MATERIAL_SAME ; NUME[:GET_MATERIAL_SAME] = 0
    ENUM[1] = :GET_MATERIAL_PRODUCT ; NUME[:GET_MATERIAL_PRODUCT] = 1
    ENUM[2] = :FORCE_EDGE ; NUME[:FORCE_EDGE] = 2
    ENUM[3] = :PASTE ; NUME[:PASTE] = 3
    ENUM[4] = :PRESSED ; NUME[:PRESSED] = 4
    ENUM[5] = :CRAFTS ; NUME[:CRAFTS] = 5
end

class ReactionProductType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Item ; NUME[:Item] = 0
    ENUM[1] = :Improvement ; NUME[:Improvement] = 1
end

class ReactionReagentType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Item ; NUME[:Item] = 0
end

class RegionMapEntryFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :HasRiver ; NUME[:HasRiver] = 0
    ENUM[1] = :TileVariant ; NUME[:TileVariant] = 1
    ENUM[3] = :HasSite ; NUME[:HasSite] = 3
    ENUM[5] = :RiverUp ; NUME[:RiverUp] = 5
    ENUM[6] = :RiverDown ; NUME[:RiverDown] = 6
    ENUM[7] = :RiverRight ; NUME[:RiverRight] = 7
    ENUM[8] = :RiverLeft ; NUME[:RiverLeft] = 8
    ENUM[9] = :Discovered ; NUME[:Discovered] = 9
    ENUM[13] = :IsPeak ; NUME[:IsPeak] = 13
    ENUM[14] = :IsLake ; NUME[:IsLake] = 14
    ENUM[15] = :IsBrook ; NUME[:IsBrook] = 15
    ENUM[16] = :HasRoad ; NUME[:HasRoad] = 16
end

class ResourceAllotmentSpecifierType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :CROP ; NUME[:CROP] = 0
    ENUM[1] = :STONE ; NUME[:STONE] = 1
    ENUM[2] = :METAL ; NUME[:METAL] = 2
    ENUM[3] = :WOOD ; NUME[:WOOD] = 3
    ENUM[4] = :ARMOR_BODY ; NUME[:ARMOR_BODY] = 4
    ENUM[5] = :ARMOR_PANTS ; NUME[:ARMOR_PANTS] = 5
    ENUM[6] = :ARMOR_GLOVES ; NUME[:ARMOR_GLOVES] = 6
    ENUM[7] = :ARMOR_BOOTS ; NUME[:ARMOR_BOOTS] = 7
    ENUM[8] = :ARMOR_HELM ; NUME[:ARMOR_HELM] = 8
    ENUM[9] = :CLOTHING_BODY ; NUME[:CLOTHING_BODY] = 9
    ENUM[10] = :CLOTHING_PANTS ; NUME[:CLOTHING_PANTS] = 10
    ENUM[11] = :CLOTHING_GLOVES ; NUME[:CLOTHING_GLOVES] = 11
    ENUM[12] = :CLOTHING_BOOTS ; NUME[:CLOTHING_BOOTS] = 12
    ENUM[13] = :CLOTHING_HELM ; NUME[:CLOTHING_HELM] = 13
    ENUM[14] = :WEAPON_MELEE ; NUME[:WEAPON_MELEE] = 14
    ENUM[15] = :WEAPON_RANGED ; NUME[:WEAPON_RANGED] = 15
    ENUM[16] = :ANVIL ; NUME[:ANVIL] = 16
    ENUM[17] = :GEMS ; NUME[:GEMS] = 17
    ENUM[18] = :THREAD ; NUME[:THREAD] = 18
    ENUM[19] = :CLOTH ; NUME[:CLOTH] = 19
    ENUM[20] = :LEATHER ; NUME[:LEATHER] = 20
    ENUM[21] = :QUIVER ; NUME[:QUIVER] = 21
    ENUM[22] = :BACKPACK ; NUME[:BACKPACK] = 22
    ENUM[23] = :FLASK ; NUME[:FLASK] = 23
    ENUM[24] = :BAG ; NUME[:BAG] = 24
    ENUM[25] = :TABLE ; NUME[:TABLE] = 25
    ENUM[26] = :CABINET ; NUME[:CABINET] = 26
    ENUM[27] = :CHAIR ; NUME[:CHAIR] = 27
    ENUM[28] = :BOX ; NUME[:BOX] = 28
    ENUM[29] = :BED ; NUME[:BED] = 29
    ENUM[30] = :CRAFTS ; NUME[:CRAFTS] = 30
    ENUM[31] = :MEAT ; NUME[:MEAT] = 31
    ENUM[32] = :BONE ; NUME[:BONE] = 32
    ENUM[33] = :HORN ; NUME[:HORN] = 33
    ENUM[34] = :SHELL ; NUME[:SHELL] = 34
    ENUM[35] = :TALLOW ; NUME[:TALLOW] = 35
    ENUM[36] = :TOOTH ; NUME[:TOOTH] = 36
    ENUM[37] = :PEARL ; NUME[:PEARL] = 37
    ENUM[38] = :SOAP ; NUME[:SOAP] = 38
    ENUM[39] = :EXTRACT ; NUME[:EXTRACT] = 39
    ENUM[40] = :CHEESE ; NUME[:CHEESE] = 40
    ENUM[41] = :SKIN ; NUME[:SKIN] = 41
    ENUM[42] = :POWDER ; NUME[:POWDER] = 42
    ENUM[43] = :AMMO ; NUME[:AMMO] = 43
end

class ScrewPumpDirection < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :FromNorth ; NUME[:FromNorth] = 0
    ENUM[1] = :FromEast ; NUME[:FromEast] = 1
    ENUM[2] = :FromSouth ; NUME[:FromSouth] = 2
    ENUM[3] = :FromWest ; NUME[:FromWest] = 3
end

class ShoesFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :METAL_ARMOR_LEVELS ; NUME[:METAL_ARMOR_LEVELS] = 0
end

class ShopType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :GeneralStore ; NUME[:GeneralStore] = 0
    ENUM[1] = :CraftsMarket ; NUME[:CraftsMarket] = 1
    ENUM[2] = :ClothingShop ; NUME[:ClothingShop] = 2
    ENUM[3] = :ExoticClothingShop ; NUME[:ExoticClothingShop] = 3
end

class SiegeengineType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Catapult ; NUME[:Catapult] = 0
    ENUM[1] = :Ballista ; NUME[:Ballista] = 1
end

class SiteDisputeType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Territory ; NUME[:Territory] = 0
    ENUM[1] = :WaterRights ; NUME[:WaterRights] = 1
    ENUM[2] = :GrazingRights ; NUME[:GrazingRights] = 2
    ENUM[3] = :FishingRights ; NUME[:FishingRights] = 3
    ENUM[4] = :RightsOfWay ; NUME[:RightsOfWay] = 4
    ENUM[5] = :LivestockOwnership ; NUME[:LivestockOwnership] = 5
end

class SiteRealizationBuildingType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :CottagePlot ; NUME[:CottagePlot] = 0
    ENUM[1] = :CastleWall ; NUME[:CastleWall] = 1
    ENUM[2] = :CastleTower ; NUME[:CastleTower] = 2
    ENUM[3] = :CastleCourtyard ; NUME[:CastleCourtyard] = 3
    ENUM[4] = :House ; NUME[:House] = 4
    ENUM[5] = :Temple ; NUME[:Temple] = 5
    ENUM[6] = :Tomb ; NUME[:Tomb] = 6
    ENUM[7] = :ShopHouse ; NUME[:ShopHouse] = 7
    ENUM[8] = :Warehouse ; NUME[:Warehouse] = 8
    ENUM[9] = :MarketSquare ; NUME[:MarketSquare] = 9
    ENUM[10] = :Pasture ; NUME[:Pasture] = 10
    ENUM[11] = :Waste ; NUME[:Waste] = 11
    ENUM[12] = :Courtyard ; NUME[:Courtyard] = 12
    ENUM[13] = :Well ; NUME[:Well] = 13
    ENUM[14] = :Vault ; NUME[:Vault] = 14
    ENUM[15] = :GreatTower ; NUME[:GreatTower] = 15
    ENUM[16] = :Trenches ; NUME[:Trenches] = 16
    ENUM[17] = :TreeHouse ; NUME[:TreeHouse] = 17
    ENUM[18] = :HillockHouse ; NUME[:HillockHouse] = 18
    ENUM[19] = :MeadHall ; NUME[:MeadHall] = 19
    ENUM[20] = :FortressEntrance ; NUME[:FortressEntrance] = 20
end

class SiteShopType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :GeneralImports ; NUME[:GeneralImports] = 0
    ENUM[1] = :FoodImports ; NUME[:FoodImports] = 1
    ENUM[2] = :ClothingImports ; NUME[:ClothingImports] = 2
    ENUM[3] = :Cloth ; NUME[:Cloth] = 3
    ENUM[4] = :Leather ; NUME[:Leather] = 4
    ENUM[5] = :WovenClothing ; NUME[:WovenClothing] = 5
    ENUM[6] = :LeatherClothing ; NUME[:LeatherClothing] = 6
    ENUM[7] = :BoneCarver ; NUME[:BoneCarver] = 7
    ENUM[8] = :GemCutter ; NUME[:GemCutter] = 8
    ENUM[9] = :Weaponsmith ; NUME[:Weaponsmith] = 9
    ENUM[10] = :Bowyer ; NUME[:Bowyer] = 10
    ENUM[11] = :Blacksmith ; NUME[:Blacksmith] = 11
    ENUM[12] = :Armorsmith ; NUME[:Armorsmith] = 12
    ENUM[13] = :MetalCraft ; NUME[:MetalCraft] = 13
    ENUM[14] = :LeatherGoods ; NUME[:LeatherGoods] = 14
    ENUM[15] = :Carpenter ; NUME[:Carpenter] = 15
    ENUM[16] = :StoneFurniture ; NUME[:StoneFurniture] = 16
    ENUM[17] = :MetalFurniture ; NUME[:MetalFurniture] = 17
    ENUM[18] = :ImportedGoodsMarket ; NUME[:ImportedGoodsMarket] = 18
    ENUM[19] = :ImportedFoodMarket ; NUME[:ImportedFoodMarket] = 19
    ENUM[20] = :ImportedClothingMarket ; NUME[:ImportedClothingMarket] = 20
    ENUM[21] = :MeatMarket ; NUME[:MeatMarket] = 21
    ENUM[22] = :FruitAndVegetableMarket ; NUME[:FruitAndVegetableMarket] = 22
    ENUM[23] = :CheeseMarket ; NUME[:CheeseMarket] = 23
    ENUM[24] = :ProcessedGoodsMarket ; NUME[:ProcessedGoodsMarket] = 24
    ENUM[25] = :Tavern ; NUME[:Tavern] = 25
end

class SiteType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :PLAYER_FORTRESS ; NUME[:PLAYER_FORTRESS] = 0
    ENUM[1] = :DARK_FORTRESS ; NUME[:DARK_FORTRESS] = 1
    ENUM[2] = :CAVE ; NUME[:CAVE] = 2
    ENUM[3] = :CAVE_DETAILED ; NUME[:CAVE_DETAILED] = 3
    ENUM[4] = :TREE_CITY ; NUME[:TREE_CITY] = 4
    ENUM[5] = :CITY ; NUME[:CITY] = 5
    ENUM[8] = :FORTRESS ; NUME[:FORTRESS] = 8
    ENUM[10] = :MONUMENT ; NUME[:MONUMENT] = 10
end

class SkillRating < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    XpThreshold = Hash.new
    Caption = Hash.new
    ENUM[0] = :Dabbling ; NUME[:Dabbling] = 0 ; XpThreshold[:Dabbling] = 500 ; Caption[:Dabbling] = 'Dabbling'
    ENUM[1] = :Novice ; NUME[:Novice] = 1 ; XpThreshold[:Novice] = 600 ; Caption[:Novice] = 'Novice'
    ENUM[2] = :Adequate ; NUME[:Adequate] = 2 ; XpThreshold[:Adequate] = 700 ; Caption[:Adequate] = 'Adequate'
    ENUM[3] = :Competent ; NUME[:Competent] = 3 ; XpThreshold[:Competent] = 800 ; Caption[:Competent] = 'Competent'
    ENUM[4] = :Skilled ; NUME[:Skilled] = 4 ; XpThreshold[:Skilled] = 900 ; Caption[:Skilled] = 'Skilled'
    ENUM[5] = :Proficient ; NUME[:Proficient] = 5 ; XpThreshold[:Proficient] = 1000 ; Caption[:Proficient] = 'Proficient'
    ENUM[6] = :Talented ; NUME[:Talented] = 6 ; XpThreshold[:Talented] = 1100 ; Caption[:Talented] = 'Talented'
    ENUM[7] = :Adept ; NUME[:Adept] = 7 ; XpThreshold[:Adept] = 1200 ; Caption[:Adept] = 'Adept'
    ENUM[8] = :Expert ; NUME[:Expert] = 8 ; XpThreshold[:Expert] = 1300 ; Caption[:Expert] = 'Expert'
    ENUM[9] = :Professional ; NUME[:Professional] = 9 ; XpThreshold[:Professional] = 1400 ; Caption[:Professional] = 'Professional'
    ENUM[10] = :Accomplished ; NUME[:Accomplished] = 10 ; XpThreshold[:Accomplished] = 1500 ; Caption[:Accomplished] = 'Accomplished'
    ENUM[11] = :Great ; NUME[:Great] = 11 ; XpThreshold[:Great] = 1600 ; Caption[:Great] = 'Great'
    ENUM[12] = :Master ; NUME[:Master] = 12 ; XpThreshold[:Master] = 1700 ; Caption[:Master] = 'Master'
    ENUM[13] = :HighMaster ; NUME[:HighMaster] = 13 ; XpThreshold[:HighMaster] = 1800 ; Caption[:HighMaster] = 'High Master'
    ENUM[14] = :GrandMaster ; NUME[:GrandMaster] = 14 ; XpThreshold[:GrandMaster] = 1900 ; Caption[:GrandMaster] = 'Grand Master'
    ENUM[15] = :Legendary ; NUME[:Legendary] = 15 ; XpThreshold[:Legendary] = 2000 ; Caption[:Legendary] = 'Legendary'
    ENUM[16] = :Legendary1 ; NUME[:Legendary1] = 16 ; XpThreshold[:Legendary1] = 2100 ; Caption[:Legendary1] = 'Legendary+1'
    ENUM[17] = :Legendary2 ; NUME[:Legendary2] = 17 ; XpThreshold[:Legendary2] = 2200 ; Caption[:Legendary2] = 'Legendary+2'
    ENUM[18] = :Legendary3 ; NUME[:Legendary3] = 18 ; XpThreshold[:Legendary3] = 2300 ; Caption[:Legendary3] = 'Legendary+3'
    ENUM[19] = :Legendary4 ; NUME[:Legendary4] = 19 ; XpThreshold[:Legendary4] = 2400 ; Caption[:Legendary4] = 'Legendary+4'
    ENUM[20] = :Legendary5 ; NUME[:Legendary5] = 20 ; Caption[:Legendary5] = 'Legendary+5'
end

class SlabEngravingType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :Slab ; NUME[:Slab] = -1
    ENUM[0] = :Memorial ; NUME[:Memorial] = 0
    ENUM[1] = :CraftShopSign ; NUME[:CraftShopSign] = 1
    ENUM[2] = :WeaponsmithShopSign ; NUME[:WeaponsmithShopSign] = 2
    ENUM[3] = :ArmorsmithShopSign ; NUME[:ArmorsmithShopSign] = 3
    ENUM[4] = :GeneralStoreSign ; NUME[:GeneralStoreSign] = 4
    ENUM[5] = :FoodShopSign ; NUME[:FoodShopSign] = 5
    ENUM[6] = :Secrets ; NUME[:Secrets] = 6
    ENUM[7] = :FoodImportsSign ; NUME[:FoodImportsSign] = 7
    ENUM[8] = :ClothingImportsSign ; NUME[:ClothingImportsSign] = 8
    ENUM[9] = :GeneralImportsSign ; NUME[:GeneralImportsSign] = 9
    ENUM[10] = :ClothShopSign ; NUME[:ClothShopSign] = 10
    ENUM[11] = :LeatherShopSign ; NUME[:LeatherShopSign] = 11
    ENUM[12] = :WovenClothingShopSign ; NUME[:WovenClothingShopSign] = 12
    ENUM[13] = :LeatherClothingShopSign ; NUME[:LeatherClothingShopSign] = 13
    ENUM[14] = :BoneCarverShopSign ; NUME[:BoneCarverShopSign] = 14
    ENUM[15] = :GemCutterShopSign ; NUME[:GemCutterShopSign] = 15
    ENUM[16] = :WeaponsmithShopSign2 ; NUME[:WeaponsmithShopSign2] = 16
    ENUM[17] = :BowyerShopSign ; NUME[:BowyerShopSign] = 17
    ENUM[18] = :BlacksmithShopSign ; NUME[:BlacksmithShopSign] = 18
    ENUM[19] = :ArmorsmithShopSign2 ; NUME[:ArmorsmithShopSign2] = 19
    ENUM[20] = :MetalCraftShopSign ; NUME[:MetalCraftShopSign] = 20
    ENUM[21] = :LeatherGoodsShopSign ; NUME[:LeatherGoodsShopSign] = 21
    ENUM[22] = :CarpenterShopSign ; NUME[:CarpenterShopSign] = 22
    ENUM[23] = :StoneFurnitureShopSign ; NUME[:StoneFurnitureShopSign] = 23
    ENUM[24] = :MetalFurnitureShopSign ; NUME[:MetalFurnitureShopSign] = 24
    ENUM[25] = :DemonIdentity ; NUME[:DemonIdentity] = 25
    ENUM[26] = :TavernSign ; NUME[:TavernSign] = 26
end

class SpecificRefType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[1] = :UNIT_INVENTORY ; NUME[:UNIT_INVENTORY] = 1
    ENUM[2] = :JOB ; NUME[:JOB] = 2
    ENUM[3] = :BUILDING_PARTY ; NUME[:BUILDING_PARTY] = 3
    ENUM[4] = :ACTIVITY ; NUME[:ACTIVITY] = 4
    ENUM[5] = :ITEM_GENERAL ; NUME[:ITEM_GENERAL] = 5
    ENUM[6] = :EFFECT ; NUME[:EFFECT] = 6
    ENUM[7] = :PETINFO_PET ; NUME[:PETINFO_PET] = 7
    ENUM[8] = :PETINFO_OWNER ; NUME[:PETINFO_OWNER] = 8
    ENUM[9] = :VERMIN_EVENT ; NUME[:VERMIN_EVENT] = 9
    ENUM[10] = :VERMIN_ESCAPED_PET ; NUME[:VERMIN_ESCAPED_PET] = 10
    ENUM[11] = :ENTITY ; NUME[:ENTITY] = 11
    ENUM[12] = :PLOT_INFO ; NUME[:PLOT_INFO] = 12
    ENUM[13] = :VIEWSCREEN ; NUME[:VIEWSCREEN] = 13
    ENUM[14] = :UNIT_ITEM_WRESTLE ; NUME[:UNIT_ITEM_WRESTLE] = 14
    ENUM[15] = :NULL_REF ; NUME[:NULL_REF] = 15
    ENUM[16] = :HIST_FIG ; NUME[:HIST_FIG] = 16
    ENUM[17] = :SITE ; NUME[:SITE] = 17
    ENUM[18] = :ARTIFACT ; NUME[:ARTIFACT] = 18
    ENUM[19] = :ITEM_IMPROVEMENT ; NUME[:ITEM_IMPROVEMENT] = 19
    ENUM[20] = :COIN_FRONT ; NUME[:COIN_FRONT] = 20
    ENUM[21] = :COIN_BACK ; NUME[:COIN_BACK] = 21
    ENUM[22] = :DETAIL_EVENT ; NUME[:DETAIL_EVENT] = 22
    ENUM[23] = :SUBREGION ; NUME[:SUBREGION] = 23
    ENUM[24] = :FEATURE_LAYER ; NUME[:FEATURE_LAYER] = 24
    ENUM[25] = :ART_IMAGE ; NUME[:ART_IMAGE] = 25
    ENUM[26] = :CREATURE_DEF ; NUME[:CREATURE_DEF] = 26
    ENUM[29] = :ENTITY_POPULATION ; NUME[:ENTITY_POPULATION] = 29
    ENUM[30] = :BREED ; NUME[:BREED] = 30
end

class SphereType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :AGRICULTURE ; NUME[:AGRICULTURE] = 0
    ENUM[1] = :ANIMALS ; NUME[:ANIMALS] = 1
    ENUM[2] = :ART ; NUME[:ART] = 2
    ENUM[3] = :BALANCE ; NUME[:BALANCE] = 3
    ENUM[4] = :BEAUTY ; NUME[:BEAUTY] = 4
    ENUM[5] = :BIRTH ; NUME[:BIRTH] = 5
    ENUM[6] = :BLIGHT ; NUME[:BLIGHT] = 6
    ENUM[7] = :BOUNDARIES ; NUME[:BOUNDARIES] = 7
    ENUM[8] = :CAVERNS ; NUME[:CAVERNS] = 8
    ENUM[9] = :CHAOS ; NUME[:CHAOS] = 9
    ENUM[10] = :CHARITY ; NUME[:CHARITY] = 10
    ENUM[11] = :CHILDREN ; NUME[:CHILDREN] = 11
    ENUM[12] = :COASTS ; NUME[:COASTS] = 12
    ENUM[13] = :CONSOLATION ; NUME[:CONSOLATION] = 13
    ENUM[14] = :COURAGE ; NUME[:COURAGE] = 14
    ENUM[15] = :CRAFTS ; NUME[:CRAFTS] = 15
    ENUM[16] = :CREATION ; NUME[:CREATION] = 16
    ENUM[17] = :DANCE ; NUME[:DANCE] = 17
    ENUM[18] = :DARKNESS ; NUME[:DARKNESS] = 18
    ENUM[19] = :DAWN ; NUME[:DAWN] = 19
    ENUM[20] = :DAY ; NUME[:DAY] = 20
    ENUM[21] = :DEATH ; NUME[:DEATH] = 21
    ENUM[22] = :DEFORMITY ; NUME[:DEFORMITY] = 22
    ENUM[23] = :DEPRAVITY ; NUME[:DEPRAVITY] = 23
    ENUM[24] = :DISCIPLINE ; NUME[:DISCIPLINE] = 24
    ENUM[25] = :DISEASE ; NUME[:DISEASE] = 25
    ENUM[26] = :DREAMS ; NUME[:DREAMS] = 26
    ENUM[27] = :DUSK ; NUME[:DUSK] = 27
    ENUM[28] = :DUTY ; NUME[:DUTY] = 28
    ENUM[29] = :EARTH ; NUME[:EARTH] = 29
    ENUM[30] = :FAMILY ; NUME[:FAMILY] = 30
    ENUM[31] = :FAME ; NUME[:FAME] = 31
    ENUM[32] = :FATE ; NUME[:FATE] = 32
    ENUM[33] = :FERTILITY ; NUME[:FERTILITY] = 33
    ENUM[34] = :FESTIVALS ; NUME[:FESTIVALS] = 34
    ENUM[35] = :FIRE ; NUME[:FIRE] = 35
    ENUM[36] = :FISH ; NUME[:FISH] = 36
    ENUM[37] = :FISHING ; NUME[:FISHING] = 37
    ENUM[38] = :FOOD ; NUME[:FOOD] = 38
    ENUM[39] = :FORGIVENESS ; NUME[:FORGIVENESS] = 39
    ENUM[40] = :FORTRESSES ; NUME[:FORTRESSES] = 40
    ENUM[41] = :FREEDOM ; NUME[:FREEDOM] = 41
    ENUM[42] = :GAMBLING ; NUME[:GAMBLING] = 42
    ENUM[43] = :GAMES ; NUME[:GAMES] = 43
    ENUM[44] = :GENEROSITY ; NUME[:GENEROSITY] = 44
    ENUM[45] = :HAPPINESS ; NUME[:HAPPINESS] = 45
    ENUM[46] = :HEALING ; NUME[:HEALING] = 46
    ENUM[47] = :HOSPITALITY ; NUME[:HOSPITALITY] = 47
    ENUM[48] = :HUNTING ; NUME[:HUNTING] = 48
    ENUM[49] = :INSPIRATION ; NUME[:INSPIRATION] = 49
    ENUM[50] = :JEALOUSY ; NUME[:JEALOUSY] = 50
    ENUM[51] = :JEWELS ; NUME[:JEWELS] = 51
    ENUM[52] = :JUSTICE ; NUME[:JUSTICE] = 52
    ENUM[53] = :LABOR ; NUME[:LABOR] = 53
    ENUM[54] = :LAKES ; NUME[:LAKES] = 54
    ENUM[55] = :LAWS ; NUME[:LAWS] = 55
    ENUM[56] = :LIES ; NUME[:LIES] = 56
    ENUM[57] = :LIGHT ; NUME[:LIGHT] = 57
    ENUM[58] = :LIGHTNING ; NUME[:LIGHTNING] = 58
    ENUM[59] = :LONGEVITY ; NUME[:LONGEVITY] = 59
    ENUM[60] = :LOVE ; NUME[:LOVE] = 60
    ENUM[61] = :LOYALTY ; NUME[:LOYALTY] = 61
    ENUM[62] = :LUCK ; NUME[:LUCK] = 62
    ENUM[63] = :LUST ; NUME[:LUST] = 63
    ENUM[64] = :MARRIAGE ; NUME[:MARRIAGE] = 64
    ENUM[65] = :MERCY ; NUME[:MERCY] = 65
    ENUM[66] = :METALS ; NUME[:METALS] = 66
    ENUM[67] = :MINERALS ; NUME[:MINERALS] = 67
    ENUM[68] = :MISERY ; NUME[:MISERY] = 68
    ENUM[69] = :MIST ; NUME[:MIST] = 69
    ENUM[70] = :MOON ; NUME[:MOON] = 70
    ENUM[71] = :MOUNTAINS ; NUME[:MOUNTAINS] = 71
    ENUM[72] = :MUCK ; NUME[:MUCK] = 72
    ENUM[73] = :MURDER ; NUME[:MURDER] = 73
    ENUM[74] = :MUSIC ; NUME[:MUSIC] = 74
    ENUM[75] = :NATURE ; NUME[:NATURE] = 75
    ENUM[76] = :NIGHT ; NUME[:NIGHT] = 76
    ENUM[77] = :NIGHTMARES ; NUME[:NIGHTMARES] = 77
    ENUM[78] = :OATHS ; NUME[:OATHS] = 78
    ENUM[79] = :OCEANS ; NUME[:OCEANS] = 79
    ENUM[80] = :ORDER ; NUME[:ORDER] = 80
    ENUM[81] = :PAINTING ; NUME[:PAINTING] = 81
    ENUM[82] = :PEACE ; NUME[:PEACE] = 82
    ENUM[83] = :PERSUASION ; NUME[:PERSUASION] = 83
    ENUM[84] = :PLANTS ; NUME[:PLANTS] = 84
    ENUM[85] = :POETRY ; NUME[:POETRY] = 85
    ENUM[86] = :PREGNANCY ; NUME[:PREGNANCY] = 86
    ENUM[87] = :RAIN ; NUME[:RAIN] = 87
    ENUM[88] = :RAINBOWS ; NUME[:RAINBOWS] = 88
    ENUM[89] = :REBIRTH ; NUME[:REBIRTH] = 89
    ENUM[90] = :REVELRY ; NUME[:REVELRY] = 90
    ENUM[91] = :REVENGE ; NUME[:REVENGE] = 91
    ENUM[92] = :RIVERS ; NUME[:RIVERS] = 92
    ENUM[93] = :RULERSHIP ; NUME[:RULERSHIP] = 93
    ENUM[94] = :RUMORS ; NUME[:RUMORS] = 94
    ENUM[95] = :SACRIFICE ; NUME[:SACRIFICE] = 95
    ENUM[96] = :SALT ; NUME[:SALT] = 96
    ENUM[97] = :SCHOLARSHIP ; NUME[:SCHOLARSHIP] = 97
    ENUM[98] = :SEASONS ; NUME[:SEASONS] = 98
    ENUM[99] = :SILENCE ; NUME[:SILENCE] = 99
    ENUM[100] = :SKY ; NUME[:SKY] = 100
    ENUM[101] = :SONG ; NUME[:SONG] = 101
    ENUM[102] = :SPEECH ; NUME[:SPEECH] = 102
    ENUM[103] = :STARS ; NUME[:STARS] = 103
    ENUM[104] = :STORMS ; NUME[:STORMS] = 104
    ENUM[105] = :STRENGTH ; NUME[:STRENGTH] = 105
    ENUM[106] = :SUICIDE ; NUME[:SUICIDE] = 106
    ENUM[107] = :SUN ; NUME[:SUN] = 107
    ENUM[108] = :THEFT ; NUME[:THEFT] = 108
    ENUM[109] = :THRALLDOM ; NUME[:THRALLDOM] = 109
    ENUM[110] = :THUNDER ; NUME[:THUNDER] = 110
    ENUM[111] = :TORTURE ; NUME[:TORTURE] = 111
    ENUM[112] = :TRADE ; NUME[:TRADE] = 112
    ENUM[113] = :TRAVELERS ; NUME[:TRAVELERS] = 113
    ENUM[114] = :TREACHERY ; NUME[:TREACHERY] = 114
    ENUM[115] = :TREES ; NUME[:TREES] = 115
    ENUM[116] = :TRICKERY ; NUME[:TRICKERY] = 116
    ENUM[117] = :TRUTH ; NUME[:TRUTH] = 117
    ENUM[118] = :TWILIGHT ; NUME[:TWILIGHT] = 118
    ENUM[119] = :VALOR ; NUME[:VALOR] = 119
    ENUM[120] = :VICTORY ; NUME[:VICTORY] = 120
    ENUM[121] = :VOLCANOS ; NUME[:VOLCANOS] = 121
    ENUM[122] = :WAR ; NUME[:WAR] = 122
    ENUM[123] = :WATER ; NUME[:WATER] = 123
    ENUM[124] = :WEALTH ; NUME[:WEALTH] = 124
    ENUM[125] = :WEATHER ; NUME[:WEATHER] = 125
    ENUM[126] = :WIND ; NUME[:WIND] = 126
    ENUM[127] = :WISDOM ; NUME[:WISDOM] = 127
    ENUM[128] = :WRITING ; NUME[:WRITING] = 128
    ENUM[129] = :YOUTH ; NUME[:YOUTH] = 129
end

class SquadEventType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :None ; NUME[:None] = -1
    ENUM[0] = :Unk0 ; NUME[:Unk0] = 0
    ENUM[1] = :Unk1 ; NUME[:Unk1] = 1
    ENUM[2] = :Unk2 ; NUME[:Unk2] = 2
end

class SquadOrderCannotReason < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :NotFollowingOrder ; NUME[:NotFollowingOrder] = 0
    ENUM[1] = :ActivityCancelled ; NUME[:ActivityCancelled] = 1
    ENUM[2] = :NoBarracks ; NUME[:NoBarracks] = 2
    ENUM[3] = :ImproperBarracks ; NUME[:ImproperBarracks] = 3
    ENUM[4] = :NoActivity ; NUME[:NoActivity] = 4
    ENUM[5] = :CannotIndividuallyDrill ; NUME[:CannotIndividuallyDrill] = 5
    ENUM[6] = :DoesNotExist ; NUME[:DoesNotExist] = 6
    ENUM[7] = :NoArcheryTarget ; NUME[:NoArcheryTarget] = 7
    ENUM[8] = :ImproperBuilding ; NUME[:ImproperBuilding] = 8
    ENUM[9] = :UnreachableLocation ; NUME[:UnreachableLocation] = 9
    ENUM[10] = :InvalidLocation ; NUME[:InvalidLocation] = 10
    ENUM[11] = :NoReachableValidTarget ; NUME[:NoReachableValidTarget] = 11
    ENUM[12] = :NoBurrow ; NUME[:NoBurrow] = 12
    ENUM[13] = :NotInSquad ; NUME[:NotInSquad] = 13
    ENUM[14] = :NoPatrolRoute ; NUME[:NoPatrolRoute] = 14
    ENUM[15] = :NoReachablePointOnRoute ; NUME[:NoReachablePointOnRoute] = 15
    ENUM[16] = :InvalidOrder ; NUME[:InvalidOrder] = 16
end

class SquadOrderType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :MOVE ; NUME[:MOVE] = 0
    ENUM[1] = :KILL_LIST ; NUME[:KILL_LIST] = 1
    ENUM[2] = :DEFEND_BURROWS ; NUME[:DEFEND_BURROWS] = 2
    ENUM[3] = :PATROL_ROUTE ; NUME[:PATROL_ROUTE] = 3
    ENUM[4] = :TRAIN ; NUME[:TRAIN] = 4
    ENUM[5] = :DRIVE_ENTITY_OFF_SITE ; NUME[:DRIVE_ENTITY_OFF_SITE] = 5
    ENUM[6] = :CAUSE_TROUBLE_FOR_ENTITY ; NUME[:CAUSE_TROUBLE_FOR_ENTITY] = 6
end

class StockpileCategory < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :Remove ; NUME[:Remove] = -1
    ENUM[0] = :Animals ; NUME[:Animals] = 0
    ENUM[1] = :Food ; NUME[:Food] = 1
    ENUM[2] = :Furniture ; NUME[:Furniture] = 2
    ENUM[3] = :Corpses ; NUME[:Corpses] = 3
    ENUM[4] = :Refuse ; NUME[:Refuse] = 4
    ENUM[5] = :Stone ; NUME[:Stone] = 5
    ENUM[6] = :Ore ; NUME[:Ore] = 6
    ENUM[7] = :Ammo ; NUME[:Ammo] = 7
    ENUM[8] = :Coins ; NUME[:Coins] = 8
    ENUM[9] = :Bars ; NUME[:Bars] = 9
    ENUM[10] = :Gems ; NUME[:Gems] = 10
    ENUM[11] = :Goods ; NUME[:Goods] = 11
    ENUM[12] = :Leather ; NUME[:Leather] = 12
    ENUM[13] = :Cloth ; NUME[:Cloth] = 13
    ENUM[14] = :Wood ; NUME[:Wood] = 14
    ENUM[15] = :Weapons ; NUME[:Weapons] = 15
    ENUM[16] = :Armor ; NUME[:Armor] = 16
    ENUM[17] = :Custom ; NUME[:Custom] = 17
end

class StockpileList < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    IsCategory = Hash.new
    ENUM[0] = :Animals ; NUME[:Animals] = 0 ; IsCategory[:Animals] = true
    ENUM[1] = :Food ; NUME[:Food] = 1 ; IsCategory[:Food] = true
    ENUM[2] = :FoodMeat ; NUME[:FoodMeat] = 2
    ENUM[3] = :FoodFish ; NUME[:FoodFish] = 3
    ENUM[4] = :FoodUnpreparedFish ; NUME[:FoodUnpreparedFish] = 4
    ENUM[5] = :FoodEgg ; NUME[:FoodEgg] = 5
    ENUM[6] = :FoodPlants ; NUME[:FoodPlants] = 6
    ENUM[7] = :FoodDrinkPlant ; NUME[:FoodDrinkPlant] = 7
    ENUM[8] = :FoodDrinkAnimal ; NUME[:FoodDrinkAnimal] = 8
    ENUM[9] = :FoodCheesePlant ; NUME[:FoodCheesePlant] = 9
    ENUM[10] = :FoodCheeseAnimal ; NUME[:FoodCheeseAnimal] = 10
    ENUM[11] = :FoodSeeds ; NUME[:FoodSeeds] = 11
    ENUM[12] = :FoodLeaves ; NUME[:FoodLeaves] = 12
    ENUM[13] = :FoodMilledPlant ; NUME[:FoodMilledPlant] = 13
    ENUM[14] = :FoodBoneMeal ; NUME[:FoodBoneMeal] = 14
    ENUM[15] = :FoodFat ; NUME[:FoodFat] = 15
    ENUM[16] = :FoodPaste ; NUME[:FoodPaste] = 16
    ENUM[17] = :FoodPressedMaterial ; NUME[:FoodPressedMaterial] = 17
    ENUM[18] = :FoodExtractPlant ; NUME[:FoodExtractPlant] = 18
    ENUM[19] = :FoodExtractAnimal ; NUME[:FoodExtractAnimal] = 19
    ENUM[20] = :FoodMiscLiquid ; NUME[:FoodMiscLiquid] = 20
    ENUM[21] = :Furniture ; NUME[:Furniture] = 21 ; IsCategory[:Furniture] = true
    ENUM[22] = :FurnitureType ; NUME[:FurnitureType] = 22
    ENUM[23] = :FurnitureStoneClay ; NUME[:FurnitureStoneClay] = 23
    ENUM[24] = :FurnitureMetal ; NUME[:FurnitureMetal] = 24
    ENUM[25] = :FurnitureOtherMaterials ; NUME[:FurnitureOtherMaterials] = 25
    ENUM[26] = :FurnitureCoreQuality ; NUME[:FurnitureCoreQuality] = 26
    ENUM[27] = :FurnitureTotalQuality ; NUME[:FurnitureTotalQuality] = 27
    ENUM[28] = :Corpses ; NUME[:Corpses] = 28 ; IsCategory[:Corpses] = true
    ENUM[29] = :Refuse ; NUME[:Refuse] = 29 ; IsCategory[:Refuse] = true
    ENUM[30] = :RefuseItems ; NUME[:RefuseItems] = 30
    ENUM[31] = :RefuseCorpses ; NUME[:RefuseCorpses] = 31
    ENUM[32] = :RefuseParts ; NUME[:RefuseParts] = 32
    ENUM[33] = :RefuseSkulls ; NUME[:RefuseSkulls] = 33
    ENUM[34] = :RefuseBones ; NUME[:RefuseBones] = 34
    ENUM[35] = :RefuseShells ; NUME[:RefuseShells] = 35
    ENUM[36] = :RefuseTeeth ; NUME[:RefuseTeeth] = 36
    ENUM[37] = :RefuseHorns ; NUME[:RefuseHorns] = 37
    ENUM[38] = :RefuseHair ; NUME[:RefuseHair] = 38
    ENUM[39] = :Stone ; NUME[:Stone] = 39 ; IsCategory[:Stone] = true
    ENUM[40] = :StoneOres ; NUME[:StoneOres] = 40
    ENUM[41] = :StoneEconomic ; NUME[:StoneEconomic] = 41
    ENUM[42] = :StoneOther ; NUME[:StoneOther] = 42
    ENUM[43] = :StoneClay ; NUME[:StoneClay] = 43
    ENUM[44] = :Ammo ; NUME[:Ammo] = 44 ; IsCategory[:Ammo] = true
    ENUM[45] = :AmmoType ; NUME[:AmmoType] = 45
    ENUM[46] = :AmmoMetal ; NUME[:AmmoMetal] = 46
    ENUM[47] = :AmmoOther ; NUME[:AmmoOther] = 47
    ENUM[48] = :AmmoCoreQuality ; NUME[:AmmoCoreQuality] = 48
    ENUM[49] = :AmmoTotalQuality ; NUME[:AmmoTotalQuality] = 49
    ENUM[50] = :Coins ; NUME[:Coins] = 50 ; IsCategory[:Coins] = true
    ENUM[51] = :BarsBlocks ; NUME[:BarsBlocks] = 51 ; IsCategory[:BarsBlocks] = true
    ENUM[52] = :BarsMetal ; NUME[:BarsMetal] = 52
    ENUM[53] = :BarsOther ; NUME[:BarsOther] = 53
    ENUM[54] = :BlocksStone ; NUME[:BlocksStone] = 54
    ENUM[55] = :BlocksMetal ; NUME[:BlocksMetal] = 55
    ENUM[56] = :BlocksOther ; NUME[:BlocksOther] = 56
    ENUM[57] = :Gems ; NUME[:Gems] = 57 ; IsCategory[:Gems] = true
    ENUM[58] = :RoughGem ; NUME[:RoughGem] = 58
    ENUM[59] = :RoughGlass ; NUME[:RoughGlass] = 59
    ENUM[60] = :CutGem ; NUME[:CutGem] = 60
    ENUM[61] = :CutGlass ; NUME[:CutGlass] = 61
    ENUM[62] = :Goods ; NUME[:Goods] = 62 ; IsCategory[:Goods] = true
    ENUM[63] = :GoodsType ; NUME[:GoodsType] = 63
    ENUM[64] = :GoodsStone ; NUME[:GoodsStone] = 64
    ENUM[65] = :GoodsMetal ; NUME[:GoodsMetal] = 65
    ENUM[66] = :GoodsOther ; NUME[:GoodsOther] = 66
    ENUM[67] = :GoodsCoreQuality ; NUME[:GoodsCoreQuality] = 67
    ENUM[68] = :GoodsTotalQuality ; NUME[:GoodsTotalQuality] = 68
    ENUM[69] = :Leather ; NUME[:Leather] = 69 ; IsCategory[:Leather] = true
    ENUM[70] = :Cloth ; NUME[:Cloth] = 70 ; IsCategory[:Cloth] = true
    ENUM[71] = :ThreadSilk ; NUME[:ThreadSilk] = 71
    ENUM[72] = :ThreadPlant ; NUME[:ThreadPlant] = 72
    ENUM[73] = :ThreadYarn ; NUME[:ThreadYarn] = 73
    ENUM[74] = :ThreadMetal ; NUME[:ThreadMetal] = 74
    ENUM[75] = :ClothSilk ; NUME[:ClothSilk] = 75
    ENUM[76] = :ClothPlant ; NUME[:ClothPlant] = 76
    ENUM[77] = :ClothYarn ; NUME[:ClothYarn] = 77
    ENUM[78] = :ClothMetal ; NUME[:ClothMetal] = 78
    ENUM[79] = :Wood ; NUME[:Wood] = 79 ; IsCategory[:Wood] = true
    ENUM[80] = :Weapons ; NUME[:Weapons] = 80 ; IsCategory[:Weapons] = true
    ENUM[81] = :WeaponsType ; NUME[:WeaponsType] = 81
    ENUM[82] = :WeaponsTrapcomp ; NUME[:WeaponsTrapcomp] = 82
    ENUM[83] = :WeaponsMetal ; NUME[:WeaponsMetal] = 83
    ENUM[84] = :WeaponsStone ; NUME[:WeaponsStone] = 84
    ENUM[85] = :WeaponsOther ; NUME[:WeaponsOther] = 85
    ENUM[86] = :WeaponsCoreQuality ; NUME[:WeaponsCoreQuality] = 86
    ENUM[87] = :WeaponsTotalQuality ; NUME[:WeaponsTotalQuality] = 87
    ENUM[88] = :Armor ; NUME[:Armor] = 88 ; IsCategory[:Armor] = true
    ENUM[89] = :ArmorBody ; NUME[:ArmorBody] = 89
    ENUM[90] = :ArmorHead ; NUME[:ArmorHead] = 90
    ENUM[91] = :ArmorFeet ; NUME[:ArmorFeet] = 91
    ENUM[92] = :ArmorHands ; NUME[:ArmorHands] = 92
    ENUM[93] = :ArmorLegs ; NUME[:ArmorLegs] = 93
    ENUM[94] = :ArmorShield ; NUME[:ArmorShield] = 94
    ENUM[95] = :ArmorMetal ; NUME[:ArmorMetal] = 95
    ENUM[96] = :ArmorOther ; NUME[:ArmorOther] = 96
    ENUM[97] = :ArmorCoreQuality ; NUME[:ArmorCoreQuality] = 97
    ENUM[98] = :ArmorTotalQuality ; NUME[:ArmorTotalQuality] = 98
    ENUM[99] = :AdditionalOptions ; NUME[:AdditionalOptions] = 99 ; IsCategory[:AdditionalOptions] = true
end

class StrainType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :BENDING ; NUME[:BENDING] = 0
    ENUM[1] = :SHEAR ; NUME[:SHEAR] = 1
    ENUM[2] = :TORSION ; NUME[:TORSION] = 2
    ENUM[3] = :IMPACT ; NUME[:IMPACT] = 3
    ENUM[4] = :TENSILE ; NUME[:TENSILE] = 4
    ENUM[5] = :COMPRESSIVE ; NUME[:COMPRESSIVE] = 5
end

class TalkChoiceType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Greet ; NUME[:Greet] = 0
    ENUM[1] = :Nevermind ; NUME[:Nevermind] = 1
    ENUM[2] = :Trade ; NUME[:Trade] = 2
    ENUM[3] = :AskJoin ; NUME[:AskJoin] = 3
    ENUM[4] = :AskSurroundings ; NUME[:AskSurroundings] = 4
    ENUM[5] = :SayGoodbye ; NUME[:SayGoodbye] = 5
    ENUM[6] = :AskStructure ; NUME[:AskStructure] = 6
    ENUM[7] = :AskFamily ; NUME[:AskFamily] = 7
    ENUM[8] = :AskProfession ; NUME[:AskProfession] = 8
    ENUM[9] = :AskPermissionSleep ; NUME[:AskPermissionSleep] = 9
    ENUM[10] = :AccuseNightCreature ; NUME[:AccuseNightCreature] = 10
    ENUM[11] = :AskTroubles ; NUME[:AskTroubles] = 11
    ENUM[12] = :BringUpEvent ; NUME[:BringUpEvent] = 12
    ENUM[13] = :SpreadRumor ; NUME[:SpreadRumor] = 13
    ENUM[14] = :ReplyGreeting ; NUME[:ReplyGreeting] = 14
    ENUM[15] = :RefuseConversation ; NUME[:RefuseConversation] = 15
    ENUM[16] = :ReplyImpersonate ; NUME[:ReplyImpersonate] = 16
    ENUM[17] = :BringUpIncident ; NUME[:BringUpIncident] = 17
    ENUM[18] = :TellNothingChanged ; NUME[:TellNothingChanged] = 18
    ENUM[19] = :Goodbye2 ; NUME[:Goodbye2] = 19
    ENUM[20] = :ReturnTopic ; NUME[:ReturnTopic] = 20
    ENUM[21] = :ChangeSubject ; NUME[:ChangeSubject] = 21
    ENUM[22] = :AskTargetAction ; NUME[:AskTargetAction] = 22
    ENUM[23] = :RequestSuggestAction ; NUME[:RequestSuggestAction] = 23
    ENUM[24] = :AskJoinInsurrection ; NUME[:AskJoinInsurrection] = 24
    ENUM[25] = :AskJoinRescue ; NUME[:AskJoinRescue] = 25
    ENUM[26] = :StateOpinion ; NUME[:StateOpinion] = 26
    ENUM[29] = :AllowPermissionSleep ; NUME[:AllowPermissionSleep] = 29
    ENUM[30] = :DenyPermissionSleep ; NUME[:DenyPermissionSleep] = 30
    ENUM[32] = :AskJoinAdventure ; NUME[:AskJoinAdventure] = 32
    ENUM[33] = :AskGuideLocation ; NUME[:AskGuideLocation] = 33
    ENUM[34] = :RespondJoin ; NUME[:RespondJoin] = 34
    ENUM[35] = :RespondJoin2 ; NUME[:RespondJoin2] = 35
    ENUM[36] = :OfferCondolences ; NUME[:OfferCondolences] = 36
    ENUM[37] = :StateNotAcquainted ; NUME[:StateNotAcquainted] = 37
    ENUM[38] = :SuggestTravel ; NUME[:SuggestTravel] = 38
    ENUM[39] = :SuggestTalk ; NUME[:SuggestTalk] = 39
    ENUM[40] = :RequestSelfRescue ; NUME[:RequestSelfRescue] = 40
    ENUM[41] = :AskWhatHappened ; NUME[:AskWhatHappened] = 41
    ENUM[42] = :AskBeRescued ; NUME[:AskBeRescued] = 42
    ENUM[43] = :SayNotRemember ; NUME[:SayNotRemember] = 43
    ENUM[45] = :SayNoFamily ; NUME[:SayNoFamily] = 45
    ENUM[46] = :StateUnitLocation ; NUME[:StateUnitLocation] = 46
    ENUM[47] = :ReferToElder ; NUME[:ReferToElder] = 47
    ENUM[48] = :AskComeCloser ; NUME[:AskComeCloser] = 48
    ENUM[49] = :DoBusiness ; NUME[:DoBusiness] = 49
    ENUM[50] = :AskComeStoreLater ; NUME[:AskComeStoreLater] = 50
    ENUM[51] = :AskComeMarketLater ; NUME[:AskComeMarketLater] = 51
    ENUM[52] = :TellTryShopkeeper ; NUME[:TellTryShopkeeper] = 52
    ENUM[53] = :DescribeSurroundings ; NUME[:DescribeSurroundings] = 53
    ENUM[54] = :AskWaitUntilHome ; NUME[:AskWaitUntilHome] = 54
    ENUM[55] = :DescribeFamily ; NUME[:DescribeFamily] = 55
    ENUM[56] = :StateAge ; NUME[:StateAge] = 56
    ENUM[57] = :DescribeProfession ; NUME[:DescribeProfession] = 57
    ENUM[58] = :AnnounceNightCreature ; NUME[:AnnounceNightCreature] = 58
    ENUM[59] = :StateIncredulity ; NUME[:StateIncredulity] = 59
    ENUM[60] = :BypassGreeting ; NUME[:BypassGreeting] = 60
    ENUM[61] = :AskCeaseHostilities ; NUME[:AskCeaseHostilities] = 61
    ENUM[62] = :DemandYield ; NUME[:DemandYield] = 62
    ENUM[63] = :HawkWares ; NUME[:HawkWares] = 63
    ENUM[64] = :YieldTerror ; NUME[:YieldTerror] = 64
    ENUM[65] = :Yield ; NUME[:Yield] = 65
    ENUM[66] = :ExpressOverwhelmingEmotion ; NUME[:ExpressOverwhelmingEmotion] = 66
    ENUM[67] = :ExpressGreatEmotion ; NUME[:ExpressGreatEmotion] = 67
    ENUM[68] = :ExpressEmotion ; NUME[:ExpressEmotion] = 68
    ENUM[69] = :ExpressMinorEmotion ; NUME[:ExpressMinorEmotion] = 69
    ENUM[70] = :ExpressLackEmotion ; NUME[:ExpressLackEmotion] = 70
    ENUM[71] = :OutburstFleeConflict ; NUME[:OutburstFleeConflict] = 71
    ENUM[72] = :StateFleeConflict ; NUME[:StateFleeConflict] = 72
    ENUM[73] = :MentionJourney ; NUME[:MentionJourney] = 73
    ENUM[74] = :SummarizeTroubles ; NUME[:SummarizeTroubles] = 74
    ENUM[75] = :AskAboutIncident ; NUME[:AskAboutIncident] = 75
    ENUM[76] = :AskDirectionsPerson ; NUME[:AskDirectionsPerson] = 76
    ENUM[77] = :AskDirectionsPlace ; NUME[:AskDirectionsPlace] = 77
    ENUM[78] = :AskWhereabouts ; NUME[:AskWhereabouts] = 78
    ENUM[79] = :RequestGuide ; NUME[:RequestGuide] = 79
    ENUM[80] = :RequestGuide2 ; NUME[:RequestGuide2] = 80
    ENUM[81] = :ProvideDirections ; NUME[:ProvideDirections] = 81
    ENUM[82] = :ProvideWhereabouts ; NUME[:ProvideWhereabouts] = 82
    ENUM[83] = :TellTargetSelf ; NUME[:TellTargetSelf] = 83
    ENUM[84] = :TellTargetDead ; NUME[:TellTargetDead] = 84
    ENUM[85] = :RecommendGuide ; NUME[:RecommendGuide] = 85
    ENUM[86] = :ProfessIgnorance ; NUME[:ProfessIgnorance] = 86
    ENUM[87] = :TellAboutPlace ; NUME[:TellAboutPlace] = 87
    ENUM[88] = :AskFavorMenu ; NUME[:AskFavorMenu] = 88
    ENUM[89] = :AskWait ; NUME[:AskWait] = 89
    ENUM[90] = :AskFollow ; NUME[:AskFollow] = 90
    ENUM[91] = :ApologizeBusy ; NUME[:ApologizeBusy] = 91
    ENUM[92] = :ComplyOrder ; NUME[:ComplyOrder] = 92
    ENUM[93] = :AgreeFollow ; NUME[:AgreeFollow] = 93
    ENUM[94] = :ExchangeItems ; NUME[:ExchangeItems] = 94
    ENUM[95] = :AskComeCloser2 ; NUME[:AskComeCloser2] = 95
    ENUM[96] = :InitiateBarter ; NUME[:InitiateBarter] = 96
    ENUM[97] = :AgreeCeaseHostile ; NUME[:AgreeCeaseHostile] = 97
    ENUM[98] = :RefuseCeaseHostile ; NUME[:RefuseCeaseHostile] = 98
    ENUM[99] = :RefuseCeaseHostile2 ; NUME[:RefuseCeaseHostile2] = 99
    ENUM[100] = :RefuseYield ; NUME[:RefuseYield] = 100
    ENUM[101] = :RefuseYield2 ; NUME[:RefuseYield2] = 101
    ENUM[102] = :Brag ; NUME[:Brag] = 102
    ENUM[103] = :DescribeRelation ; NUME[:DescribeRelation] = 103
    ENUM[105] = :AnnounceLairHunt ; NUME[:AnnounceLairHunt] = 105
    ENUM[106] = :RequestDuty ; NUME[:RequestDuty] = 106
    ENUM[107] = :AskJoinService ; NUME[:AskJoinService] = 107
    ENUM[108] = :AcceptService ; NUME[:AcceptService] = 108
    ENUM[109] = :TellRemainVigilant ; NUME[:TellRemainVigilant] = 109
    ENUM[110] = :GiveServiceOrder ; NUME[:GiveServiceOrder] = 110
    ENUM[111] = :WelcomeSelfHome ; NUME[:WelcomeSelfHome] = 111
    ENUM[113] = :AskTravelReason ; NUME[:AskTravelReason] = 113
    ENUM[114] = :TellTravelReason ; NUME[:TellTravelReason] = 114
    ENUM[115] = :AskLocalRuler ; NUME[:AskLocalRuler] = 115
    ENUM[116] = :ComplainAgreement ; NUME[:ComplainAgreement] = 116
    ENUM[117] = :CancelAgreement ; NUME[:CancelAgreement] = 117
    ENUM[118] = :SummarizeConflict ; NUME[:SummarizeConflict] = 118
    ENUM[119] = :SummarizeViews ; NUME[:SummarizeViews] = 119
    ENUM[120] = :AskClaimStrength ; NUME[:AskClaimStrength] = 120
    ENUM[121] = :AskArmyPosition ; NUME[:AskArmyPosition] = 121
    ENUM[122] = :AskOtherClaims ; NUME[:AskOtherClaims] = 122
    ENUM[123] = :AskDeserters ; NUME[:AskDeserters] = 123
    ENUM[124] = :AskSiteNeighbors ; NUME[:AskSiteNeighbors] = 124
    ENUM[125] = :DescribeSiteNeighbors ; NUME[:DescribeSiteNeighbors] = 125
    ENUM[126] = :RaiseAlarm ; NUME[:RaiseAlarm] = 126
    ENUM[127] = :DemandDropWeapon ; NUME[:DemandDropWeapon] = 127
    ENUM[128] = :AgreeComplyDemand ; NUME[:AgreeComplyDemand] = 128
    ENUM[129] = :RefuseComplyDemand ; NUME[:RefuseComplyDemand] = 129
    ENUM[130] = :AskLocationObject ; NUME[:AskLocationObject] = 130
    ENUM[131] = :DemandTribute ; NUME[:DemandTribute] = 131
    ENUM[132] = :AgreeGiveTribute ; NUME[:AgreeGiveTribute] = 132
    ENUM[133] = :RefuseGiveTribute ; NUME[:RefuseGiveTribute] = 133
    ENUM[134] = :OfferGiveTribute ; NUME[:OfferGiveTribute] = 134
    ENUM[135] = :AgreeAcceptTribute ; NUME[:AgreeAcceptTribute] = 135
    ENUM[136] = :RefuseAcceptTribute ; NUME[:RefuseAcceptTribute] = 136
    ENUM[137] = :CancelTribute ; NUME[:CancelTribute] = 137
    ENUM[138] = :OfferPeace ; NUME[:OfferPeace] = 138
    ENUM[139] = :AgreePeace ; NUME[:AgreePeace] = 139
    ENUM[140] = :RefusePeace ; NUME[:RefusePeace] = 140
    ENUM[141] = :AskTradeDepotLater ; NUME[:AskTradeDepotLater] = 141
    ENUM[142] = :ExpressAstonishment ; NUME[:ExpressAstonishment] = 142
    ENUM[143] = :CommentWeather ; NUME[:CommentWeather] = 143
    ENUM[144] = :CommentNature ; NUME[:CommentNature] = 144
    ENUM[145] = :SummarizeTerritory ; NUME[:SummarizeTerritory] = 145
    ENUM[146] = :SummarizePatrols ; NUME[:SummarizePatrols] = 146
    ENUM[147] = :SummarizeOpposition ; NUME[:SummarizeOpposition] = 147
    ENUM[148] = :DescribeRefugees ; NUME[:DescribeRefugees] = 148
    ENUM[149] = :AccuseTroublemaker ; NUME[:AccuseTroublemaker] = 149
    ENUM[150] = :AskAdopt ; NUME[:AskAdopt] = 150
    ENUM[151] = :AgreeAdopt ; NUME[:AgreeAdopt] = 151
    ENUM[152] = :RefuseAdopt ; NUME[:RefuseAdopt] = 152
    ENUM[153] = :RevokeService ; NUME[:RevokeService] = 153
    ENUM[154] = :InviteService ; NUME[:InviteService] = 154
    ENUM[155] = :AcceptInviteService ; NUME[:AcceptInviteService] = 155
    ENUM[156] = :RefuseShareInformation ; NUME[:RefuseShareInformation] = 156
    ENUM[157] = :RefuseInviteService ; NUME[:RefuseInviteService] = 157
    ENUM[158] = :RefuseRequestService ; NUME[:RefuseRequestService] = 158
    ENUM[159] = :OfferService ; NUME[:OfferService] = 159
    ENUM[160] = :AcceptPositionService ; NUME[:AcceptPositionService] = 160
    ENUM[161] = :RefusePositionService ; NUME[:RefusePositionService] = 161
    ENUM[162] = :InvokeNameBanish ; NUME[:InvokeNameBanish] = 162
    ENUM[163] = :InvokeNameService ; NUME[:InvokeNameService] = 163
    ENUM[164] = :GrovelMaster ; NUME[:GrovelMaster] = 164
    ENUM[165] = :DemandItem ; NUME[:DemandItem] = 165
    ENUM[166] = :GiveServiceReport ; NUME[:GiveServiceReport] = 166
    ENUM[167] = :OfferEncouragement ; NUME[:OfferEncouragement] = 167
    ENUM[168] = :PraiseTaskCompleter ; NUME[:PraiseTaskCompleter] = 168
end

class TileBuildingOcc < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :None ; NUME[:None] = 0
    ENUM[1] = :Planned ; NUME[:Planned] = 1
    ENUM[2] = :Passable ; NUME[:Passable] = 2
    ENUM[3] = :Obstacle ; NUME[:Obstacle] = 3
    ENUM[4] = :Well ; NUME[:Well] = 4
    ENUM[5] = :Floored ; NUME[:Floored] = 5
    ENUM[6] = :Impassable ; NUME[:Impassable] = 6
    ENUM[7] = :Dynamic ; NUME[:Dynamic] = 7
end

class TileDigDesignation < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :No ; NUME[:No] = 0
    ENUM[1] = :Default ; NUME[:Default] = 1
    ENUM[2] = :UpDownStair ; NUME[:UpDownStair] = 2
    ENUM[3] = :Channel ; NUME[:Channel] = 3
    ENUM[4] = :Ramp ; NUME[:Ramp] = 4
    ENUM[5] = :DownStair ; NUME[:DownStair] = 5
    ENUM[6] = :UpStair ; NUME[:UpStair] = 6
end

class TileLiquid < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Water ; NUME[:Water] = 0
    ENUM[1] = :Magma ; NUME[:Magma] = 1
end

class TileLiquidFlowDir < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :None ; NUME[:None] = 0
    ENUM[1] = :South ; NUME[:South] = 1
    ENUM[2] = :East ; NUME[:East] = 2
    ENUM[3] = :Northeast ; NUME[:Northeast] = 3
    ENUM[4] = :West ; NUME[:West] = 4
    ENUM[5] = :Northwest ; NUME[:Northwest] = 5
    ENUM[6] = :Southeast ; NUME[:Southeast] = 6
    ENUM[7] = :Southwest ; NUME[:Southwest] = 7
    ENUM[8] = :Inv8 ; NUME[:Inv8] = 8
    ENUM[9] = :Inv9 ; NUME[:Inv9] = 9
    ENUM[10] = :North ; NUME[:North] = 10
    ENUM[11] = :InvB ; NUME[:InvB] = 11
    ENUM[12] = :InvC ; NUME[:InvC] = 12
    ENUM[13] = :InvD ; NUME[:InvD] = 13
    ENUM[14] = :InvE ; NUME[:InvE] = 14
    ENUM[15] = :InvF ; NUME[:InvF] = 15
end

class TileTraffic < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Normal ; NUME[:Normal] = 0
    ENUM[1] = :Low ; NUME[:Low] = 1
    ENUM[2] = :High ; NUME[:High] = 2
    ENUM[3] = :Restricted ; NUME[:Restricted] = 3
end

class Tiletype < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Caption = Hash.new
    Shape = Hash.new(:NONE)
    Material = Hash.new(:NONE)
    Variant = Hash.new(:NONE)
    Special = Hash.new(:NONE)
    Direction = Hash.new('--------')
    ENUM[0] = :Void ; NUME[:Void] = 0 ; Caption[:Void] = 'void'
    ENUM[1] = :RampTop ; NUME[:RampTop] = 1 ; Caption[:RampTop] = 'ramp top' ; Shape[:RampTop] = :RAMP_TOP ; Material[:RampTop] = :AIR
    ENUM[2] = :MurkyPool ; NUME[:MurkyPool] = 2 ; Caption[:MurkyPool] = 'murky pool' ; Shape[:MurkyPool] = :FLOOR ; Material[:MurkyPool] = :POOL
    ENUM[3] = :MurkyPoolRamp ; NUME[:MurkyPoolRamp] = 3 ; Caption[:MurkyPoolRamp] = 'murky pool slope' ; Shape[:MurkyPoolRamp] = :RAMP ; Material[:MurkyPoolRamp] = :POOL
    ENUM[4] = :UnderworldGateStairU ; NUME[:UnderworldGateStairU] = 4 ; Caption[:UnderworldGateStairU] = 'underworld gate up' ; Shape[:UnderworldGateStairU] = :STAIR_UP ; Material[:UnderworldGateStairU] = :UNDERWORLD_GATE
    ENUM[5] = :UnderworldGateStairD ; NUME[:UnderworldGateStairD] = 5 ; Caption[:UnderworldGateStairD] = 'underworld gate down' ; Shape[:UnderworldGateStairD] = :STAIR_DOWN ; Material[:UnderworldGateStairD] = :UNDERWORLD_GATE
    ENUM[6] = :UnderworldGateStairUD ; NUME[:UnderworldGateStairUD] = 6 ; Caption[:UnderworldGateStairUD] = 'underworld gate up/down' ; Shape[:UnderworldGateStairUD] = :STAIR_UPDOWN ; Material[:UnderworldGateStairUD] = :UNDERWORLD_GATE
    ENUM[19] = :Driftwood ; NUME[:Driftwood] = 19 ; Caption[:Driftwood] = 'driftwood' ; Shape[:Driftwood] = :FLOOR ; Material[:Driftwood] = :DRIFTWOOD
    ENUM[25] = :FrozenStairUD ; NUME[:FrozenStairUD] = 25 ; Caption[:FrozenStairUD] = 'ice stair up/down' ; Shape[:FrozenStairUD] = :STAIR_UPDOWN ; Material[:FrozenStairUD] = :FROZEN_LIQUID
    ENUM[26] = :FrozenStairD ; NUME[:FrozenStairD] = 26 ; Caption[:FrozenStairD] = 'ice stair down' ; Shape[:FrozenStairD] = :STAIR_DOWN ; Material[:FrozenStairD] = :FROZEN_LIQUID
    ENUM[27] = :FrozenStairU ; NUME[:FrozenStairU] = 27 ; Caption[:FrozenStairU] = 'ice stair up' ; Shape[:FrozenStairU] = :STAIR_UP ; Material[:FrozenStairU] = :FROZEN_LIQUID
    ENUM[32] = :OpenSpace ; NUME[:OpenSpace] = 32 ; Caption[:OpenSpace] = 'open space' ; Shape[:OpenSpace] = :EMPTY ; Material[:OpenSpace] = :AIR
    ENUM[34] = :Shrub ; NUME[:Shrub] = 34 ; Caption[:Shrub] = 'shrub' ; Shape[:Shrub] = :SHRUB ; Material[:Shrub] = :PLANT ; Special[:Shrub] = :NORMAL
    ENUM[35] = :Chasm ; NUME[:Chasm] = 35 ; Caption[:Chasm] = 'chasm' ; Shape[:Chasm] = :ENDLESS_PIT ; Material[:Chasm] = :AIR
    ENUM[36] = :LavaStairUD ; NUME[:LavaStairUD] = 36 ; Caption[:LavaStairUD] = 'obsidian stair up/down' ; Shape[:LavaStairUD] = :STAIR_UPDOWN ; Material[:LavaStairUD] = :LAVA_STONE
    ENUM[37] = :LavaStairD ; NUME[:LavaStairD] = 37 ; Caption[:LavaStairD] = 'obsidian stair down' ; Shape[:LavaStairD] = :STAIR_DOWN ; Material[:LavaStairD] = :LAVA_STONE
    ENUM[38] = :LavaStairU ; NUME[:LavaStairU] = 38 ; Caption[:LavaStairU] = 'obsidian stair up' ; Shape[:LavaStairU] = :STAIR_UP ; Material[:LavaStairU] = :LAVA_STONE
    ENUM[39] = :SoilStairUD ; NUME[:SoilStairUD] = 39 ; Caption[:SoilStairUD] = 'soil stair up/down' ; Shape[:SoilStairUD] = :STAIR_UPDOWN ; Material[:SoilStairUD] = :SOIL
    ENUM[40] = :SoilStairD ; NUME[:SoilStairD] = 40 ; Caption[:SoilStairD] = 'soil stair down' ; Shape[:SoilStairD] = :STAIR_DOWN ; Material[:SoilStairD] = :SOIL
    ENUM[41] = :SoilStairU ; NUME[:SoilStairU] = 41 ; Caption[:SoilStairU] = 'soil stair up' ; Shape[:SoilStairU] = :STAIR_UP ; Material[:SoilStairU] = :SOIL
    ENUM[42] = :EeriePit ; NUME[:EeriePit] = 42 ; Caption[:EeriePit] = 'eerie pit' ; Shape[:EeriePit] = :ENDLESS_PIT ; Material[:EeriePit] = :HFS
    ENUM[43] = :StoneFloorSmooth ; NUME[:StoneFloorSmooth] = 43 ; Caption[:StoneFloorSmooth] = 'smooth stone floor' ; Shape[:StoneFloorSmooth] = :FLOOR ; Material[:StoneFloorSmooth] = :STONE ; Special[:StoneFloorSmooth] = :SMOOTH
    ENUM[44] = :LavaFloorSmooth ; NUME[:LavaFloorSmooth] = 44 ; Caption[:LavaFloorSmooth] = 'smooth obsidian floor' ; Shape[:LavaFloorSmooth] = :FLOOR ; Material[:LavaFloorSmooth] = :LAVA_STONE ; Special[:LavaFloorSmooth] = :SMOOTH
    ENUM[45] = :FeatureFloorSmooth ; NUME[:FeatureFloorSmooth] = 45 ; Caption[:FeatureFloorSmooth] = 'smooth featstone floor' ; Shape[:FeatureFloorSmooth] = :FLOOR ; Material[:FeatureFloorSmooth] = :FEATURE ; Special[:FeatureFloorSmooth] = :SMOOTH
    ENUM[46] = :MineralFloorSmooth ; NUME[:MineralFloorSmooth] = 46 ; Caption[:MineralFloorSmooth] = 'smooth vein floor' ; Shape[:MineralFloorSmooth] = :FLOOR ; Material[:MineralFloorSmooth] = :MINERAL ; Special[:MineralFloorSmooth] = :SMOOTH
    ENUM[47] = :FrozenFloorSmooth ; NUME[:FrozenFloorSmooth] = 47 ; Caption[:FrozenFloorSmooth] = 'smooth ice floor' ; Shape[:FrozenFloorSmooth] = :FLOOR ; Material[:FrozenFloorSmooth] = :FROZEN_LIQUID ; Special[:FrozenFloorSmooth] = :SMOOTH
    ENUM[49] = :Grass1StairUD ; NUME[:Grass1StairUD] = 49 ; Caption[:Grass1StairUD] = 'light grass stair up/down' ; Shape[:Grass1StairUD] = :STAIR_UPDOWN ; Material[:Grass1StairUD] = :GRASS_LIGHT
    ENUM[50] = :Grass1StairD ; NUME[:Grass1StairD] = 50 ; Caption[:Grass1StairD] = 'light grass stair down' ; Shape[:Grass1StairD] = :STAIR_DOWN ; Material[:Grass1StairD] = :GRASS_LIGHT
    ENUM[51] = :Grass1StairU ; NUME[:Grass1StairU] = 51 ; Caption[:Grass1StairU] = 'light grass stair up' ; Shape[:Grass1StairU] = :STAIR_UP ; Material[:Grass1StairU] = :GRASS_LIGHT
    ENUM[52] = :Grass2StairUD ; NUME[:Grass2StairUD] = 52 ; Caption[:Grass2StairUD] = 'dark grass stair up/down' ; Shape[:Grass2StairUD] = :STAIR_UPDOWN ; Material[:Grass2StairUD] = :GRASS_DARK
    ENUM[53] = :Grass2StairD ; NUME[:Grass2StairD] = 53 ; Caption[:Grass2StairD] = 'dark grass stair down' ; Shape[:Grass2StairD] = :STAIR_DOWN ; Material[:Grass2StairD] = :GRASS_DARK
    ENUM[54] = :Grass2StairU ; NUME[:Grass2StairU] = 54 ; Caption[:Grass2StairU] = 'dark grass stair up' ; Shape[:Grass2StairU] = :STAIR_UP ; Material[:Grass2StairU] = :GRASS_DARK
    ENUM[55] = :StoneStairUD ; NUME[:StoneStairUD] = 55 ; Caption[:StoneStairUD] = 'stone stair up/down' ; Shape[:StoneStairUD] = :STAIR_UPDOWN ; Material[:StoneStairUD] = :STONE
    ENUM[56] = :StoneStairD ; NUME[:StoneStairD] = 56 ; Caption[:StoneStairD] = 'stone stair down' ; Shape[:StoneStairD] = :STAIR_DOWN ; Material[:StoneStairD] = :STONE
    ENUM[57] = :StoneStairU ; NUME[:StoneStairU] = 57 ; Caption[:StoneStairU] = 'stone stair up' ; Shape[:StoneStairU] = :STAIR_UP ; Material[:StoneStairU] = :STONE
    ENUM[58] = :MineralStairUD ; NUME[:MineralStairUD] = 58 ; Caption[:MineralStairUD] = 'vein stair up/down' ; Shape[:MineralStairUD] = :STAIR_UPDOWN ; Material[:MineralStairUD] = :MINERAL
    ENUM[59] = :MineralStairD ; NUME[:MineralStairD] = 59 ; Caption[:MineralStairD] = 'vein stair down' ; Shape[:MineralStairD] = :STAIR_DOWN ; Material[:MineralStairD] = :MINERAL
    ENUM[60] = :MineralStairU ; NUME[:MineralStairU] = 60 ; Caption[:MineralStairU] = 'vein stair up' ; Shape[:MineralStairU] = :STAIR_UP ; Material[:MineralStairU] = :MINERAL
    ENUM[61] = :FeatureStairUD ; NUME[:FeatureStairUD] = 61 ; Caption[:FeatureStairUD] = 'featstone stair up/down' ; Shape[:FeatureStairUD] = :STAIR_UPDOWN ; Material[:FeatureStairUD] = :FEATURE
    ENUM[62] = :FeatureStairD ; NUME[:FeatureStairD] = 62 ; Caption[:FeatureStairD] = 'featstone stair down' ; Shape[:FeatureStairD] = :STAIR_DOWN ; Material[:FeatureStairD] = :FEATURE
    ENUM[63] = :FeatureStairU ; NUME[:FeatureStairU] = 63 ; Caption[:FeatureStairU] = 'featstone stair up' ; Shape[:FeatureStairU] = :STAIR_UP ; Material[:FeatureStairU] = :FEATURE
    ENUM[65] = :StoneFortification ; NUME[:StoneFortification] = 65 ; Caption[:StoneFortification] = 'stone fortification' ; Shape[:StoneFortification] = :FORTIFICATION ; Material[:StoneFortification] = :STONE
    ENUM[67] = :Campfire ; NUME[:Campfire] = 67 ; Caption[:Campfire] = 'campfire' ; Shape[:Campfire] = :FLOOR ; Material[:Campfire] = :CAMPFIRE
    ENUM[70] = :Fire ; NUME[:Fire] = 70 ; Caption[:Fire] = 'fire' ; Shape[:Fire] = :FLOOR ; Material[:Fire] = :FIRE
    ENUM[71] = :BurningTreeTrunk ; NUME[:BurningTreeTrunk] = 71 ; Caption[:BurningTreeTrunk] = 'fire' ; Shape[:BurningTreeTrunk] = :WALL ; Material[:BurningTreeTrunk] = :FIRE
    ENUM[72] = :BurningTreeBranches ; NUME[:BurningTreeBranches] = 72 ; Caption[:BurningTreeBranches] = 'fire' ; Shape[:BurningTreeBranches] = :BRANCH ; Material[:BurningTreeBranches] = :FIRE
    ENUM[73] = :BurningTreeTwigs ; NUME[:BurningTreeTwigs] = 73 ; Caption[:BurningTreeTwigs] = 'fire' ; Shape[:BurningTreeTwigs] = :TWIG ; Material[:BurningTreeTwigs] = :FIRE
    ENUM[74] = :BurningTreeCapWall ; NUME[:BurningTreeCapWall] = 74 ; Caption[:BurningTreeCapWall] = 'fire' ; Shape[:BurningTreeCapWall] = :WALL ; Material[:BurningTreeCapWall] = :FIRE
    ENUM[75] = :BurningTreeCapRamp ; NUME[:BurningTreeCapRamp] = 75 ; Caption[:BurningTreeCapRamp] = 'fire' ; Shape[:BurningTreeCapRamp] = :RAMP ; Material[:BurningTreeCapRamp] = :FIRE
    ENUM[76] = :BurningTreeCapFloor ; NUME[:BurningTreeCapFloor] = 76 ; Caption[:BurningTreeCapFloor] = 'fire' ; Shape[:BurningTreeCapFloor] = :FLOOR ; Material[:BurningTreeCapFloor] = :FIRE
    ENUM[79] = :StonePillar ; NUME[:StonePillar] = 79 ; Caption[:StonePillar] = 'stone pillar' ; Shape[:StonePillar] = :WALL ; Material[:StonePillar] = :STONE ; Special[:StonePillar] = :SMOOTH
    ENUM[80] = :LavaPillar ; NUME[:LavaPillar] = 80 ; Caption[:LavaPillar] = 'obsidian pillar' ; Shape[:LavaPillar] = :WALL ; Material[:LavaPillar] = :LAVA_STONE ; Special[:LavaPillar] = :SMOOTH
    ENUM[81] = :FeaturePillar ; NUME[:FeaturePillar] = 81 ; Caption[:FeaturePillar] = 'featstone pillar' ; Shape[:FeaturePillar] = :WALL ; Material[:FeaturePillar] = :FEATURE ; Special[:FeaturePillar] = :SMOOTH
    ENUM[82] = :MineralPillar ; NUME[:MineralPillar] = 82 ; Caption[:MineralPillar] = 'vein pillar' ; Shape[:MineralPillar] = :WALL ; Material[:MineralPillar] = :MINERAL ; Special[:MineralPillar] = :SMOOTH
    ENUM[83] = :FrozenPillar ; NUME[:FrozenPillar] = 83 ; Caption[:FrozenPillar] = 'ice pillar' ; Shape[:FrozenPillar] = :WALL ; Material[:FrozenPillar] = :FROZEN_LIQUID ; Special[:FrozenPillar] = :SMOOTH
    ENUM[89] = :Waterfall ; NUME[:Waterfall] = 89 ; Caption[:Waterfall] = 'waterfall' ; Shape[:Waterfall] = :FLOOR ; Material[:Waterfall] = :RIVER ; Special[:Waterfall] = :WATERFALL
    ENUM[90] = :RiverSource ; NUME[:RiverSource] = 90 ; Caption[:RiverSource] = 'river source' ; Shape[:RiverSource] = :FLOOR ; Material[:RiverSource] = :RIVER ; Special[:RiverSource] = :RIVER_SOURCE
    ENUM[91] = :TreeRootSloping ; NUME[:TreeRootSloping] = 91 ; Caption[:TreeRootSloping] = 'sloping roots' ; Shape[:TreeRootSloping] = :RAMP ; Material[:TreeRootSloping] = :ROOT
    ENUM[92] = :TreeRoots ; NUME[:TreeRoots] = 92 ; Caption[:TreeRoots] = 'roots' ; Shape[:TreeRoots] = :WALL ; Material[:TreeRoots] = :ROOT
    ENUM[93] = :TreeTrunkPillar ; NUME[:TreeTrunkPillar] = 93 ; Caption[:TreeTrunkPillar] = 'trunk pillar' ; Shape[:TreeTrunkPillar] = :WALL ; Material[:TreeTrunkPillar] = :TREE ; Special[:TreeTrunkPillar] = :SMOOTH
    ENUM[94] = :TreeTrunkSloping ; NUME[:TreeTrunkSloping] = 94 ; Caption[:TreeTrunkSloping] = 'sloping trunk' ; Shape[:TreeTrunkSloping] = :RAMP ; Material[:TreeTrunkSloping] = :TREE
    ENUM[95] = :TreeTrunkN ; NUME[:TreeTrunkN] = 95 ; Caption[:TreeTrunkN] = 'trunk (N)' ; Shape[:TreeTrunkN] = :WALL ; Material[:TreeTrunkN] = :TREE ; Direction[:TreeTrunkN] = 'N'
    ENUM[96] = :TreeTrunkS ; NUME[:TreeTrunkS] = 96 ; Caption[:TreeTrunkS] = 'trunk (S)' ; Shape[:TreeTrunkS] = :WALL ; Material[:TreeTrunkS] = :TREE ; Direction[:TreeTrunkS] = 'S'
    ENUM[97] = :TreeTrunkE ; NUME[:TreeTrunkE] = 97 ; Caption[:TreeTrunkE] = 'trunk (E)' ; Shape[:TreeTrunkE] = :WALL ; Material[:TreeTrunkE] = :TREE ; Direction[:TreeTrunkE] = 'E'
    ENUM[98] = :TreeTrunkW ; NUME[:TreeTrunkW] = 98 ; Caption[:TreeTrunkW] = 'trunk (W)' ; Shape[:TreeTrunkW] = :WALL ; Material[:TreeTrunkW] = :TREE ; Direction[:TreeTrunkW] = 'W'
    ENUM[99] = :TreeTrunkNW ; NUME[:TreeTrunkNW] = 99 ; Caption[:TreeTrunkNW] = 'trunk (NW)' ; Shape[:TreeTrunkNW] = :WALL ; Material[:TreeTrunkNW] = :TREE ; Direction[:TreeTrunkNW] = 'NW'
    ENUM[100] = :TreeTrunkNE ; NUME[:TreeTrunkNE] = 100 ; Caption[:TreeTrunkNE] = 'trunk (NE)' ; Shape[:TreeTrunkNE] = :WALL ; Material[:TreeTrunkNE] = :TREE ; Direction[:TreeTrunkNE] = 'NE'
    ENUM[101] = :TreeTrunkSW ; NUME[:TreeTrunkSW] = 101 ; Caption[:TreeTrunkSW] = 'trunk (SW)' ; Shape[:TreeTrunkSW] = :WALL ; Material[:TreeTrunkSW] = :TREE ; Direction[:TreeTrunkSW] = 'SW'
    ENUM[102] = :TreeTrunkSE ; NUME[:TreeTrunkSE] = 102 ; Caption[:TreeTrunkSE] = 'trunk (SE)' ; Shape[:TreeTrunkSE] = :WALL ; Material[:TreeTrunkSE] = :TREE ; Direction[:TreeTrunkSE] = 'SE'
    ENUM[103] = :TreeTrunkBranchN ; NUME[:TreeTrunkBranchN] = 103 ; Caption[:TreeTrunkBranchN] = 'trunk branch (N)' ; Shape[:TreeTrunkBranchN] = :TRUNK_BRANCH ; Material[:TreeTrunkBranchN] = :TREE ; Direction[:TreeTrunkBranchN] = 'N'
    ENUM[104] = :TreeTrunkBranchS ; NUME[:TreeTrunkBranchS] = 104 ; Caption[:TreeTrunkBranchS] = 'trunk branch (S)' ; Shape[:TreeTrunkBranchS] = :TRUNK_BRANCH ; Material[:TreeTrunkBranchS] = :TREE ; Direction[:TreeTrunkBranchS] = 'S'
    ENUM[105] = :TreeTrunkBranchE ; NUME[:TreeTrunkBranchE] = 105 ; Caption[:TreeTrunkBranchE] = 'trunk branch (E)' ; Shape[:TreeTrunkBranchE] = :TRUNK_BRANCH ; Material[:TreeTrunkBranchE] = :TREE ; Direction[:TreeTrunkBranchE] = 'E'
    ENUM[106] = :TreeTrunkBranchW ; NUME[:TreeTrunkBranchW] = 106 ; Caption[:TreeTrunkBranchW] = 'trunk branch (W)' ; Shape[:TreeTrunkBranchW] = :TRUNK_BRANCH ; Material[:TreeTrunkBranchW] = :TREE ; Direction[:TreeTrunkBranchW] = 'W'
    ENUM[107] = :TreeBranchNS ; NUME[:TreeBranchNS] = 107 ; Caption[:TreeBranchNS] = 'branch (NS)' ; Shape[:TreeBranchNS] = :BRANCH ; Material[:TreeBranchNS] = :TREE ; Direction[:TreeBranchNS] = 'NS'
    ENUM[108] = :TreeBranchEW ; NUME[:TreeBranchEW] = 108 ; Caption[:TreeBranchEW] = 'branch (EW)' ; Shape[:TreeBranchEW] = :BRANCH ; Material[:TreeBranchEW] = :TREE ; Direction[:TreeBranchEW] = 'EW'
    ENUM[109] = :TreeBranchesSmooth ; NUME[:TreeBranchesSmooth] = 109 ; Caption[:TreeBranchesSmooth] = 'smooth branch' ; Shape[:TreeBranchesSmooth] = :BRANCH ; Material[:TreeBranchesSmooth] = :TREE ; Special[:TreeBranchesSmooth] = :SMOOTH
    ENUM[110] = :TreeDeadBranchesSmooth ; NUME[:TreeDeadBranchesSmooth] = 110 ; Caption[:TreeDeadBranchesSmooth] = 'smooth dead branch' ; Shape[:TreeDeadBranchesSmooth] = :BRANCH ; Material[:TreeDeadBranchesSmooth] = :TREE ; Special[:TreeDeadBranchesSmooth] = :SMOOTH_DEAD
    ENUM[111] = :TreeBranchNW ; NUME[:TreeBranchNW] = 111 ; Caption[:TreeBranchNW] = 'branch (NW)' ; Shape[:TreeBranchNW] = :BRANCH ; Material[:TreeBranchNW] = :TREE ; Direction[:TreeBranchNW] = 'NW'
    ENUM[112] = :TreeBranchNE ; NUME[:TreeBranchNE] = 112 ; Caption[:TreeBranchNE] = 'branch (NE)' ; Shape[:TreeBranchNE] = :BRANCH ; Material[:TreeBranchNE] = :TREE ; Direction[:TreeBranchNE] = 'NE'
    ENUM[113] = :TreeBranchSW ; NUME[:TreeBranchSW] = 113 ; Caption[:TreeBranchSW] = 'branch (SW)' ; Shape[:TreeBranchSW] = :BRANCH ; Material[:TreeBranchSW] = :TREE ; Direction[:TreeBranchSW] = 'SW'
    ENUM[114] = :TreeBranchSE ; NUME[:TreeBranchSE] = 114 ; Caption[:TreeBranchSE] = 'branch (SE)' ; Shape[:TreeBranchSE] = :BRANCH ; Material[:TreeBranchSE] = :TREE ; Direction[:TreeBranchSE] = 'SE'
    ENUM[115] = :TreeBranches ; NUME[:TreeBranches] = 115 ; Caption[:TreeBranches] = 'branches' ; Shape[:TreeBranches] = :BRANCH ; Material[:TreeBranches] = :TREE
    ENUM[116] = :TreeTwigs ; NUME[:TreeTwigs] = 116 ; Caption[:TreeTwigs] = 'twigs' ; Shape[:TreeTwigs] = :TWIG ; Material[:TreeTwigs] = :TREE
    ENUM[117] = :TreeCapRamp ; NUME[:TreeCapRamp] = 117 ; Caption[:TreeCapRamp] = 'cap ramp' ; Shape[:TreeCapRamp] = :RAMP ; Material[:TreeCapRamp] = :MUSHROOM
    ENUM[118] = :TreeCapPillar ; NUME[:TreeCapPillar] = 118 ; Caption[:TreeCapPillar] = 'cap pillar' ; Shape[:TreeCapPillar] = :WALL ; Material[:TreeCapPillar] = :MUSHROOM ; Special[:TreeCapPillar] = :SMOOTH
    ENUM[119] = :TreeCapWallN ; NUME[:TreeCapWallN] = 119 ; Caption[:TreeCapWallN] = 'cap wall (N)' ; Shape[:TreeCapWallN] = :WALL ; Material[:TreeCapWallN] = :MUSHROOM ; Direction[:TreeCapWallN] = 'N'
    ENUM[120] = :TreeCapWallS ; NUME[:TreeCapWallS] = 120 ; Caption[:TreeCapWallS] = 'cap wall (S)' ; Shape[:TreeCapWallS] = :WALL ; Material[:TreeCapWallS] = :MUSHROOM ; Direction[:TreeCapWallS] = 'S'
    ENUM[121] = :TreeCapWallE ; NUME[:TreeCapWallE] = 121 ; Caption[:TreeCapWallE] = 'cap wall (E)' ; Shape[:TreeCapWallE] = :WALL ; Material[:TreeCapWallE] = :MUSHROOM ; Direction[:TreeCapWallE] = 'E'
    ENUM[122] = :TreeCapWallW ; NUME[:TreeCapWallW] = 122 ; Caption[:TreeCapWallW] = 'cap wall (W)' ; Shape[:TreeCapWallW] = :WALL ; Material[:TreeCapWallW] = :MUSHROOM ; Direction[:TreeCapWallW] = 'W'
    ENUM[123] = :TreeCapWallNW ; NUME[:TreeCapWallNW] = 123 ; Caption[:TreeCapWallNW] = 'cap wall (NW)' ; Shape[:TreeCapWallNW] = :WALL ; Material[:TreeCapWallNW] = :MUSHROOM ; Direction[:TreeCapWallNW] = 'NW'
    ENUM[124] = :TreeCapWallNE ; NUME[:TreeCapWallNE] = 124 ; Caption[:TreeCapWallNE] = 'cap wall (NE)' ; Shape[:TreeCapWallNE] = :WALL ; Material[:TreeCapWallNE] = :MUSHROOM ; Direction[:TreeCapWallNE] = 'NE'
    ENUM[125] = :TreeCapWallSW ; NUME[:TreeCapWallSW] = 125 ; Caption[:TreeCapWallSW] = 'cap wall (SW)' ; Shape[:TreeCapWallSW] = :WALL ; Material[:TreeCapWallSW] = :MUSHROOM ; Direction[:TreeCapWallSW] = 'SW'
    ENUM[126] = :TreeCapWallSE ; NUME[:TreeCapWallSE] = 126 ; Caption[:TreeCapWallSE] = 'cap wall (SE)' ; Shape[:TreeCapWallSE] = :WALL ; Material[:TreeCapWallSE] = :MUSHROOM ; Direction[:TreeCapWallSE] = 'SE'
    ENUM[127] = :TreeCapFloor1 ; NUME[:TreeCapFloor1] = 127 ; Caption[:TreeCapFloor1] = 'cap floor' ; Shape[:TreeCapFloor1] = :FLOOR ; Material[:TreeCapFloor1] = :MUSHROOM ; Variant[:TreeCapFloor1] = :VAR_1
    ENUM[128] = :TreeCapFloor2 ; NUME[:TreeCapFloor2] = 128 ; Caption[:TreeCapFloor2] = 'cap floor' ; Shape[:TreeCapFloor2] = :FLOOR ; Material[:TreeCapFloor2] = :MUSHROOM ; Variant[:TreeCapFloor2] = :VAR_2
    ENUM[129] = :TreeCapFloor3 ; NUME[:TreeCapFloor3] = 129 ; Caption[:TreeCapFloor3] = 'cap floor' ; Shape[:TreeCapFloor3] = :FLOOR ; Material[:TreeCapFloor3] = :MUSHROOM ; Variant[:TreeCapFloor3] = :VAR_3
    ENUM[130] = :TreeCapFloor4 ; NUME[:TreeCapFloor4] = 130 ; Caption[:TreeCapFloor4] = 'cap floor' ; Shape[:TreeCapFloor4] = :FLOOR ; Material[:TreeCapFloor4] = :MUSHROOM ; Variant[:TreeCapFloor4] = :VAR_4
    ENUM[131] = :TreeDeadRootSloping ; NUME[:TreeDeadRootSloping] = 131 ; Caption[:TreeDeadRootSloping] = 'dead sloping roots' ; Shape[:TreeDeadRootSloping] = :RAMP ; Material[:TreeDeadRootSloping] = :ROOT ; Special[:TreeDeadRootSloping] = :DEAD
    ENUM[132] = :TreeDeadRoots ; NUME[:TreeDeadRoots] = 132 ; Caption[:TreeDeadRoots] = 'dead roots' ; Shape[:TreeDeadRoots] = :WALL ; Material[:TreeDeadRoots] = :ROOT ; Special[:TreeDeadRoots] = :DEAD
    ENUM[133] = :TreeDeadTrunkPillar ; NUME[:TreeDeadTrunkPillar] = 133 ; Caption[:TreeDeadTrunkPillar] = 'dead trunk pillar' ; Shape[:TreeDeadTrunkPillar] = :WALL ; Material[:TreeDeadTrunkPillar] = :TREE ; Special[:TreeDeadTrunkPillar] = :SMOOTH_DEAD
    ENUM[134] = :TreeDeadTrunkSloping ; NUME[:TreeDeadTrunkSloping] = 134 ; Caption[:TreeDeadTrunkSloping] = 'dead sloping trunk' ; Shape[:TreeDeadTrunkSloping] = :RAMP ; Material[:TreeDeadTrunkSloping] = :TREE ; Special[:TreeDeadTrunkSloping] = :DEAD
    ENUM[135] = :TreeDeadTrunkN ; NUME[:TreeDeadTrunkN] = 135 ; Caption[:TreeDeadTrunkN] = 'dead trunk (N)' ; Shape[:TreeDeadTrunkN] = :WALL ; Material[:TreeDeadTrunkN] = :TREE ; Special[:TreeDeadTrunkN] = :DEAD ; Direction[:TreeDeadTrunkN] = 'N'
    ENUM[136] = :TreeDeadTrunkS ; NUME[:TreeDeadTrunkS] = 136 ; Caption[:TreeDeadTrunkS] = 'dead trunk (S)' ; Shape[:TreeDeadTrunkS] = :WALL ; Material[:TreeDeadTrunkS] = :TREE ; Special[:TreeDeadTrunkS] = :DEAD ; Direction[:TreeDeadTrunkS] = 'S'
    ENUM[137] = :TreeDeadTrunkE ; NUME[:TreeDeadTrunkE] = 137 ; Caption[:TreeDeadTrunkE] = 'dead trunk (E)' ; Shape[:TreeDeadTrunkE] = :WALL ; Material[:TreeDeadTrunkE] = :TREE ; Special[:TreeDeadTrunkE] = :DEAD ; Direction[:TreeDeadTrunkE] = 'E'
    ENUM[138] = :TreeDeadTrunkW ; NUME[:TreeDeadTrunkW] = 138 ; Caption[:TreeDeadTrunkW] = 'dead trunk (W)' ; Shape[:TreeDeadTrunkW] = :WALL ; Material[:TreeDeadTrunkW] = :TREE ; Special[:TreeDeadTrunkW] = :DEAD ; Direction[:TreeDeadTrunkW] = 'W'
    ENUM[139] = :TreeDeadTrunkNW ; NUME[:TreeDeadTrunkNW] = 139 ; Caption[:TreeDeadTrunkNW] = 'dead trunk (NW)' ; Shape[:TreeDeadTrunkNW] = :WALL ; Material[:TreeDeadTrunkNW] = :TREE ; Special[:TreeDeadTrunkNW] = :DEAD ; Direction[:TreeDeadTrunkNW] = 'NW'
    ENUM[140] = :TreeDeadTrunkNE ; NUME[:TreeDeadTrunkNE] = 140 ; Caption[:TreeDeadTrunkNE] = 'dead trunk (NE)' ; Shape[:TreeDeadTrunkNE] = :WALL ; Material[:TreeDeadTrunkNE] = :TREE ; Special[:TreeDeadTrunkNE] = :DEAD ; Direction[:TreeDeadTrunkNE] = 'NE'
    ENUM[141] = :TreeDeadTrunkSW ; NUME[:TreeDeadTrunkSW] = 141 ; Caption[:TreeDeadTrunkSW] = 'dead trunk (SW)' ; Shape[:TreeDeadTrunkSW] = :WALL ; Material[:TreeDeadTrunkSW] = :TREE ; Special[:TreeDeadTrunkSW] = :DEAD ; Direction[:TreeDeadTrunkSW] = 'SW'
    ENUM[142] = :TreeDeadTrunkSE ; NUME[:TreeDeadTrunkSE] = 142 ; Caption[:TreeDeadTrunkSE] = 'dead trunk (SE)' ; Shape[:TreeDeadTrunkSE] = :WALL ; Material[:TreeDeadTrunkSE] = :TREE ; Special[:TreeDeadTrunkSE] = :DEAD ; Direction[:TreeDeadTrunkSE] = 'SE'
    ENUM[143] = :TreeDeadTrunkBranchN ; NUME[:TreeDeadTrunkBranchN] = 143 ; Caption[:TreeDeadTrunkBranchN] = 'dead trunk branch (N)' ; Shape[:TreeDeadTrunkBranchN] = :TRUNK_BRANCH ; Material[:TreeDeadTrunkBranchN] = :TREE ; Special[:TreeDeadTrunkBranchN] = :DEAD ; Direction[:TreeDeadTrunkBranchN] = 'N'
    ENUM[144] = :TreeDeadTrunkBranchS ; NUME[:TreeDeadTrunkBranchS] = 144 ; Caption[:TreeDeadTrunkBranchS] = 'dead trunk branch (S)' ; Shape[:TreeDeadTrunkBranchS] = :TRUNK_BRANCH ; Material[:TreeDeadTrunkBranchS] = :TREE ; Special[:TreeDeadTrunkBranchS] = :DEAD ; Direction[:TreeDeadTrunkBranchS] = 'S'
    ENUM[145] = :TreeDeadTrunkBranchE ; NUME[:TreeDeadTrunkBranchE] = 145 ; Caption[:TreeDeadTrunkBranchE] = 'dead trunk branch (E)' ; Shape[:TreeDeadTrunkBranchE] = :TRUNK_BRANCH ; Material[:TreeDeadTrunkBranchE] = :TREE ; Special[:TreeDeadTrunkBranchE] = :DEAD ; Direction[:TreeDeadTrunkBranchE] = 'E'
    ENUM[146] = :TreeDeadTrunkBranchW ; NUME[:TreeDeadTrunkBranchW] = 146 ; Caption[:TreeDeadTrunkBranchW] = 'dead trunk branch (W)' ; Shape[:TreeDeadTrunkBranchW] = :TRUNK_BRANCH ; Material[:TreeDeadTrunkBranchW] = :TREE ; Special[:TreeDeadTrunkBranchW] = :DEAD ; Direction[:TreeDeadTrunkBranchW] = 'W'
    ENUM[147] = :TreeDeadBranchNS ; NUME[:TreeDeadBranchNS] = 147 ; Caption[:TreeDeadBranchNS] = 'dead branch (NS)' ; Shape[:TreeDeadBranchNS] = :BRANCH ; Material[:TreeDeadBranchNS] = :TREE ; Special[:TreeDeadBranchNS] = :DEAD ; Direction[:TreeDeadBranchNS] = 'NS'
    ENUM[148] = :TreeDeadBranchEW ; NUME[:TreeDeadBranchEW] = 148 ; Caption[:TreeDeadBranchEW] = 'dead branch (EW)' ; Shape[:TreeDeadBranchEW] = :BRANCH ; Material[:TreeDeadBranchEW] = :TREE ; Special[:TreeDeadBranchEW] = :DEAD ; Direction[:TreeDeadBranchEW] = 'EW'
    ENUM[151] = :TreeDeadBranchNW ; NUME[:TreeDeadBranchNW] = 151 ; Caption[:TreeDeadBranchNW] = 'dead branch (NW)' ; Shape[:TreeDeadBranchNW] = :BRANCH ; Material[:TreeDeadBranchNW] = :TREE ; Special[:TreeDeadBranchNW] = :DEAD ; Direction[:TreeDeadBranchNW] = 'NW'
    ENUM[152] = :TreeDeadBranchNE ; NUME[:TreeDeadBranchNE] = 152 ; Caption[:TreeDeadBranchNE] = 'dead branch (NE)' ; Shape[:TreeDeadBranchNE] = :BRANCH ; Material[:TreeDeadBranchNE] = :TREE ; Special[:TreeDeadBranchNE] = :DEAD ; Direction[:TreeDeadBranchNE] = 'NE'
    ENUM[153] = :TreeDeadBranchSW ; NUME[:TreeDeadBranchSW] = 153 ; Caption[:TreeDeadBranchSW] = 'dead branch (SW)' ; Shape[:TreeDeadBranchSW] = :BRANCH ; Material[:TreeDeadBranchSW] = :TREE ; Special[:TreeDeadBranchSW] = :DEAD ; Direction[:TreeDeadBranchSW] = 'SW'
    ENUM[154] = :TreeDeadBranchSE ; NUME[:TreeDeadBranchSE] = 154 ; Caption[:TreeDeadBranchSE] = 'dead branch (SE)' ; Shape[:TreeDeadBranchSE] = :BRANCH ; Material[:TreeDeadBranchSE] = :TREE ; Special[:TreeDeadBranchSE] = :DEAD ; Direction[:TreeDeadBranchSE] = 'SE'
    ENUM[155] = :TreeDeadBranches ; NUME[:TreeDeadBranches] = 155 ; Caption[:TreeDeadBranches] = 'dead branches' ; Shape[:TreeDeadBranches] = :BRANCH ; Material[:TreeDeadBranches] = :TREE ; Special[:TreeDeadBranches] = :DEAD
    ENUM[156] = :TreeDeadTwigs ; NUME[:TreeDeadTwigs] = 156 ; Caption[:TreeDeadTwigs] = 'dead twigs' ; Shape[:TreeDeadTwigs] = :TWIG ; Material[:TreeDeadTwigs] = :TREE ; Special[:TreeDeadTwigs] = :DEAD
    ENUM[157] = :TreeDeadCapRamp ; NUME[:TreeDeadCapRamp] = 157 ; Caption[:TreeDeadCapRamp] = 'dead cap ramp' ; Shape[:TreeDeadCapRamp] = :RAMP ; Material[:TreeDeadCapRamp] = :MUSHROOM ; Special[:TreeDeadCapRamp] = :DEAD
    ENUM[158] = :TreeDeadCapPillar ; NUME[:TreeDeadCapPillar] = 158 ; Caption[:TreeDeadCapPillar] = 'dead cap pillar' ; Shape[:TreeDeadCapPillar] = :WALL ; Material[:TreeDeadCapPillar] = :MUSHROOM ; Special[:TreeDeadCapPillar] = :SMOOTH_DEAD
    ENUM[159] = :TreeDeadCapWallN ; NUME[:TreeDeadCapWallN] = 159 ; Caption[:TreeDeadCapWallN] = 'dead cap wall (N)' ; Shape[:TreeDeadCapWallN] = :WALL ; Material[:TreeDeadCapWallN] = :MUSHROOM ; Special[:TreeDeadCapWallN] = :DEAD ; Direction[:TreeDeadCapWallN] = 'N'
    ENUM[160] = :TreeDeadCapWallS ; NUME[:TreeDeadCapWallS] = 160 ; Caption[:TreeDeadCapWallS] = 'dead cap wall (S)' ; Shape[:TreeDeadCapWallS] = :WALL ; Material[:TreeDeadCapWallS] = :MUSHROOM ; Special[:TreeDeadCapWallS] = :DEAD ; Direction[:TreeDeadCapWallS] = 'S'
    ENUM[161] = :TreeDeadCapWallE ; NUME[:TreeDeadCapWallE] = 161 ; Caption[:TreeDeadCapWallE] = 'dead cap wall (E)' ; Shape[:TreeDeadCapWallE] = :WALL ; Material[:TreeDeadCapWallE] = :MUSHROOM ; Special[:TreeDeadCapWallE] = :DEAD ; Direction[:TreeDeadCapWallE] = 'E'
    ENUM[162] = :TreeDeadCapWallW ; NUME[:TreeDeadCapWallW] = 162 ; Caption[:TreeDeadCapWallW] = 'dead cap wall (W)' ; Shape[:TreeDeadCapWallW] = :WALL ; Material[:TreeDeadCapWallW] = :MUSHROOM ; Special[:TreeDeadCapWallW] = :DEAD ; Direction[:TreeDeadCapWallW] = 'W'
    ENUM[163] = :TreeDeadCapWallNW ; NUME[:TreeDeadCapWallNW] = 163 ; Caption[:TreeDeadCapWallNW] = 'dead cap wall (NW)' ; Shape[:TreeDeadCapWallNW] = :WALL ; Material[:TreeDeadCapWallNW] = :MUSHROOM ; Special[:TreeDeadCapWallNW] = :DEAD ; Direction[:TreeDeadCapWallNW] = 'NW'
    ENUM[164] = :TreeDeadCapWallNE ; NUME[:TreeDeadCapWallNE] = 164 ; Caption[:TreeDeadCapWallNE] = 'dead cap wall (NE)' ; Shape[:TreeDeadCapWallNE] = :WALL ; Material[:TreeDeadCapWallNE] = :MUSHROOM ; Special[:TreeDeadCapWallNE] = :DEAD ; Direction[:TreeDeadCapWallNE] = 'NE'
    ENUM[165] = :TreeDeadCapWallSW ; NUME[:TreeDeadCapWallSW] = 165 ; Caption[:TreeDeadCapWallSW] = 'dead cap wall (SW)' ; Shape[:TreeDeadCapWallSW] = :WALL ; Material[:TreeDeadCapWallSW] = :MUSHROOM ; Special[:TreeDeadCapWallSW] = :DEAD ; Direction[:TreeDeadCapWallSW] = 'SW'
    ENUM[166] = :TreeDeadCapWallSE ; NUME[:TreeDeadCapWallSE] = 166 ; Caption[:TreeDeadCapWallSE] = 'dead cap wall (SE)' ; Shape[:TreeDeadCapWallSE] = :WALL ; Material[:TreeDeadCapWallSE] = :MUSHROOM ; Special[:TreeDeadCapWallSE] = :DEAD ; Direction[:TreeDeadCapWallSE] = 'SE'
    ENUM[167] = :TreeDeadCapFloor1 ; NUME[:TreeDeadCapFloor1] = 167 ; Caption[:TreeDeadCapFloor1] = 'dead cap floor' ; Shape[:TreeDeadCapFloor1] = :FLOOR ; Material[:TreeDeadCapFloor1] = :MUSHROOM ; Special[:TreeDeadCapFloor1] = :DEAD ; Variant[:TreeDeadCapFloor1] = :VAR_1
    ENUM[168] = :TreeDeadCapFloor2 ; NUME[:TreeDeadCapFloor2] = 168 ; Caption[:TreeDeadCapFloor2] = 'dead cap floor' ; Shape[:TreeDeadCapFloor2] = :FLOOR ; Material[:TreeDeadCapFloor2] = :MUSHROOM ; Special[:TreeDeadCapFloor2] = :DEAD ; Variant[:TreeDeadCapFloor2] = :VAR_2
    ENUM[169] = :TreeDeadCapFloor3 ; NUME[:TreeDeadCapFloor3] = 169 ; Caption[:TreeDeadCapFloor3] = 'dead cap floor' ; Shape[:TreeDeadCapFloor3] = :FLOOR ; Material[:TreeDeadCapFloor3] = :MUSHROOM ; Special[:TreeDeadCapFloor3] = :DEAD ; Variant[:TreeDeadCapFloor3] = :VAR_3
    ENUM[170] = :TreeDeadCapFloor4 ; NUME[:TreeDeadCapFloor4] = 170 ; Caption[:TreeDeadCapFloor4] = 'dead cap floor' ; Shape[:TreeDeadCapFloor4] = :FLOOR ; Material[:TreeDeadCapFloor4] = :MUSHROOM ; Special[:TreeDeadCapFloor4] = :DEAD ; Variant[:TreeDeadCapFloor4] = :VAR_4
    ENUM[172] = :StoneWallWorn1 ; NUME[:StoneWallWorn1] = 172 ; Caption[:StoneWallWorn1] = 'worn 1 stone wall' ; Shape[:StoneWallWorn1] = :WALL ; Material[:StoneWallWorn1] = :STONE ; Special[:StoneWallWorn1] = :WORN_1
    ENUM[173] = :StoneWallWorn2 ; NUME[:StoneWallWorn2] = 173 ; Caption[:StoneWallWorn2] = 'worn 2 stone wall' ; Shape[:StoneWallWorn2] = :WALL ; Material[:StoneWallWorn2] = :STONE ; Special[:StoneWallWorn2] = :WORN_2
    ENUM[174] = :StoneWallWorn3 ; NUME[:StoneWallWorn3] = 174 ; Caption[:StoneWallWorn3] = 'worn 3 stone wall' ; Shape[:StoneWallWorn3] = :WALL ; Material[:StoneWallWorn3] = :STONE ; Special[:StoneWallWorn3] = :WORN_3
    ENUM[175] = :TreeBranchNSE ; NUME[:TreeBranchNSE] = 175 ; Caption[:TreeBranchNSE] = 'branches (NSE)' ; Shape[:TreeBranchNSE] = :BRANCH ; Material[:TreeBranchNSE] = :TREE ; Direction[:TreeBranchNSE] = 'NSE'
    ENUM[176] = :TreeBranchNSW ; NUME[:TreeBranchNSW] = 176 ; Caption[:TreeBranchNSW] = 'branches (NSW)' ; Shape[:TreeBranchNSW] = :BRANCH ; Material[:TreeBranchNSW] = :TREE ; Direction[:TreeBranchNSW] = 'NSW'
    ENUM[177] = :TreeBranchNEW ; NUME[:TreeBranchNEW] = 177 ; Caption[:TreeBranchNEW] = 'branches (NEW)' ; Shape[:TreeBranchNEW] = :BRANCH ; Material[:TreeBranchNEW] = :TREE ; Direction[:TreeBranchNEW] = 'NEW'
    ENUM[178] = :TreeBranchSEW ; NUME[:TreeBranchSEW] = 178 ; Caption[:TreeBranchSEW] = 'branches (SEW)' ; Shape[:TreeBranchSEW] = :BRANCH ; Material[:TreeBranchSEW] = :TREE ; Direction[:TreeBranchSEW] = 'SEW'
    ENUM[179] = :TreeBranchNSEW ; NUME[:TreeBranchNSEW] = 179 ; Caption[:TreeBranchNSEW] = 'branches (NSEW)' ; Shape[:TreeBranchNSEW] = :BRANCH ; Material[:TreeBranchNSEW] = :TREE ; Direction[:TreeBranchNSEW] = 'NSEW'
    ENUM[180] = :TreeDeadBranchNSE ; NUME[:TreeDeadBranchNSE] = 180 ; Caption[:TreeDeadBranchNSE] = 'dead branches (NSW)' ; Shape[:TreeDeadBranchNSE] = :BRANCH ; Material[:TreeDeadBranchNSE] = :TREE ; Special[:TreeDeadBranchNSE] = :DEAD ; Direction[:TreeDeadBranchNSE] = 'NSW'
    ENUM[181] = :TreeDeadBranchNSW ; NUME[:TreeDeadBranchNSW] = 181 ; Caption[:TreeDeadBranchNSW] = 'dead branches (NEW)' ; Shape[:TreeDeadBranchNSW] = :BRANCH ; Material[:TreeDeadBranchNSW] = :TREE ; Special[:TreeDeadBranchNSW] = :DEAD ; Direction[:TreeDeadBranchNSW] = 'NEW'
    ENUM[182] = :TreeDeadBranchNEW ; NUME[:TreeDeadBranchNEW] = 182 ; Caption[:TreeDeadBranchNEW] = 'dead branches (NEW)' ; Shape[:TreeDeadBranchNEW] = :BRANCH ; Material[:TreeDeadBranchNEW] = :TREE ; Special[:TreeDeadBranchNEW] = :DEAD ; Direction[:TreeDeadBranchNEW] = 'NEW'
    ENUM[183] = :TreeDeadBranchSEW ; NUME[:TreeDeadBranchSEW] = 183 ; Caption[:TreeDeadBranchSEW] = 'dead branches (SEW)' ; Shape[:TreeDeadBranchSEW] = :BRANCH ; Material[:TreeDeadBranchSEW] = :TREE ; Special[:TreeDeadBranchSEW] = :DEAD ; Direction[:TreeDeadBranchSEW] = 'SEW'
    ENUM[184] = :TreeDeadBranchNSEW ; NUME[:TreeDeadBranchNSEW] = 184 ; Caption[:TreeDeadBranchNSEW] = 'dead branches (NSEW)' ; Shape[:TreeDeadBranchNSEW] = :BRANCH ; Material[:TreeDeadBranchNSEW] = :TREE ; Special[:TreeDeadBranchNSEW] = :DEAD ; Direction[:TreeDeadBranchNSEW] = 'NSEW'
    ENUM[185] = :TreeTrunkNSE ; NUME[:TreeTrunkNSE] = 185 ; Caption[:TreeTrunkNSE] = 'trunk (NSE)' ; Shape[:TreeTrunkNSE] = :WALL ; Material[:TreeTrunkNSE] = :TREE ; Direction[:TreeTrunkNSE] = 'NSE'
    ENUM[186] = :TreeTrunkNSW ; NUME[:TreeTrunkNSW] = 186 ; Caption[:TreeTrunkNSW] = 'trunk (NSW)' ; Shape[:TreeTrunkNSW] = :WALL ; Material[:TreeTrunkNSW] = :TREE ; Direction[:TreeTrunkNSW] = 'NSW'
    ENUM[187] = :TreeTrunkNEW ; NUME[:TreeTrunkNEW] = 187 ; Caption[:TreeTrunkNEW] = 'trunk (NEW)' ; Shape[:TreeTrunkNEW] = :WALL ; Material[:TreeTrunkNEW] = :TREE ; Direction[:TreeTrunkNEW] = 'NEW'
    ENUM[188] = :TreeTrunkSEW ; NUME[:TreeTrunkSEW] = 188 ; Caption[:TreeTrunkSEW] = 'trunk (SEW)' ; Shape[:TreeTrunkSEW] = :WALL ; Material[:TreeTrunkSEW] = :TREE ; Direction[:TreeTrunkSEW] = 'SEW'
    ENUM[189] = :TreeTrunkNS ; NUME[:TreeTrunkNS] = 189 ; Caption[:TreeTrunkNS] = 'trunk (NS)' ; Shape[:TreeTrunkNS] = :WALL ; Material[:TreeTrunkNS] = :TREE ; Direction[:TreeTrunkNS] = 'NS'
    ENUM[190] = :TreeTrunkEW ; NUME[:TreeTrunkEW] = 190 ; Caption[:TreeTrunkEW] = 'trunk (EW)' ; Shape[:TreeTrunkEW] = :WALL ; Material[:TreeTrunkEW] = :TREE ; Direction[:TreeTrunkEW] = 'EW'
    ENUM[191] = :TreeTrunkNSEW ; NUME[:TreeTrunkNSEW] = 191 ; Caption[:TreeTrunkNSEW] = 'trunk (NSEW)' ; Shape[:TreeTrunkNSEW] = :WALL ; Material[:TreeTrunkNSEW] = :TREE ; Direction[:TreeTrunkNSEW] = 'NSEW'
    ENUM[192] = :TreeTrunkInterior ; NUME[:TreeTrunkInterior] = 192 ; Caption[:TreeTrunkInterior] = 'trunk interior' ; Shape[:TreeTrunkInterior] = :WALL ; Material[:TreeTrunkInterior] = :TREE
    ENUM[193] = :TreeDeadTrunkNSE ; NUME[:TreeDeadTrunkNSE] = 193 ; Caption[:TreeDeadTrunkNSE] = 'dead trunk (NSE)' ; Shape[:TreeDeadTrunkNSE] = :WALL ; Material[:TreeDeadTrunkNSE] = :TREE ; Special[:TreeDeadTrunkNSE] = :DEAD ; Direction[:TreeDeadTrunkNSE] = 'NSE'
    ENUM[194] = :TreeDeadTrunkNSW ; NUME[:TreeDeadTrunkNSW] = 194 ; Caption[:TreeDeadTrunkNSW] = 'dead trunk (NSW)' ; Shape[:TreeDeadTrunkNSW] = :WALL ; Material[:TreeDeadTrunkNSW] = :TREE ; Special[:TreeDeadTrunkNSW] = :DEAD ; Direction[:TreeDeadTrunkNSW] = 'NSW'
    ENUM[195] = :TreeDeadTrunkNEW ; NUME[:TreeDeadTrunkNEW] = 195 ; Caption[:TreeDeadTrunkNEW] = 'dead trunk (NEW)' ; Shape[:TreeDeadTrunkNEW] = :WALL ; Material[:TreeDeadTrunkNEW] = :TREE ; Special[:TreeDeadTrunkNEW] = :DEAD ; Direction[:TreeDeadTrunkNEW] = 'NEW'
    ENUM[196] = :TreeDeadTrunkSEW ; NUME[:TreeDeadTrunkSEW] = 196 ; Caption[:TreeDeadTrunkSEW] = 'dead trunk (SEW)' ; Shape[:TreeDeadTrunkSEW] = :WALL ; Material[:TreeDeadTrunkSEW] = :TREE ; Special[:TreeDeadTrunkSEW] = :DEAD ; Direction[:TreeDeadTrunkSEW] = 'SEW'
    ENUM[197] = :TreeDeadTrunkNS ; NUME[:TreeDeadTrunkNS] = 197 ; Caption[:TreeDeadTrunkNS] = 'dead trunk (NS)' ; Shape[:TreeDeadTrunkNS] = :WALL ; Material[:TreeDeadTrunkNS] = :TREE ; Special[:TreeDeadTrunkNS] = :DEAD ; Direction[:TreeDeadTrunkNS] = 'NS'
    ENUM[198] = :TreeDeadTrunkEW ; NUME[:TreeDeadTrunkEW] = 198 ; Caption[:TreeDeadTrunkEW] = 'dead trunk (EW)' ; Shape[:TreeDeadTrunkEW] = :WALL ; Material[:TreeDeadTrunkEW] = :TREE ; Special[:TreeDeadTrunkEW] = :DEAD ; Direction[:TreeDeadTrunkEW] = 'EW'
    ENUM[199] = :TreeDeadTrunkNSEW ; NUME[:TreeDeadTrunkNSEW] = 199 ; Caption[:TreeDeadTrunkNSEW] = 'dead trunk (NSEW)' ; Shape[:TreeDeadTrunkNSEW] = :WALL ; Material[:TreeDeadTrunkNSEW] = :TREE ; Special[:TreeDeadTrunkNSEW] = :DEAD ; Direction[:TreeDeadTrunkNSEW] = 'NSEW'
    ENUM[200] = :TreeDeadTrunkInterior ; NUME[:TreeDeadTrunkInterior] = 200 ; Caption[:TreeDeadTrunkInterior] = 'dead trunk interior' ; Shape[:TreeDeadTrunkInterior] = :WALL ; Material[:TreeDeadTrunkInterior] = :TREE ; Special[:TreeDeadTrunkInterior] = :DEAD
    ENUM[215] = :StoneWall ; NUME[:StoneWall] = 215 ; Caption[:StoneWall] = 'stone wall' ; Shape[:StoneWall] = :WALL ; Material[:StoneWall] = :STONE ; Special[:StoneWall] = :NORMAL
    ENUM[227] = :Sapling ; NUME[:Sapling] = 227 ; Caption[:Sapling] = 'sapling' ; Shape[:Sapling] = :SAPLING ; Material[:Sapling] = :PLANT ; Special[:Sapling] = :NORMAL
    ENUM[229] = :GrassDryRamp ; NUME[:GrassDryRamp] = 229 ; Caption[:GrassDryRamp] = 'dry grass ramp' ; Shape[:GrassDryRamp] = :RAMP ; Material[:GrassDryRamp] = :GRASS_DRY
    ENUM[230] = :GrassDeadRamp ; NUME[:GrassDeadRamp] = 230 ; Caption[:GrassDeadRamp] = 'dead grass ramp' ; Shape[:GrassDeadRamp] = :RAMP ; Material[:GrassDeadRamp] = :GRASS_DEAD
    ENUM[231] = :GrassLightRamp ; NUME[:GrassLightRamp] = 231 ; Caption[:GrassLightRamp] = 'light grass ramp' ; Shape[:GrassLightRamp] = :RAMP ; Material[:GrassLightRamp] = :GRASS_LIGHT
    ENUM[232] = :GrassDarkRamp ; NUME[:GrassDarkRamp] = 232 ; Caption[:GrassDarkRamp] = 'dark grass ramp' ; Shape[:GrassDarkRamp] = :RAMP ; Material[:GrassDarkRamp] = :GRASS_DARK
    ENUM[233] = :StoneRamp ; NUME[:StoneRamp] = 233 ; Caption[:StoneRamp] = 'stone ramp' ; Shape[:StoneRamp] = :RAMP ; Material[:StoneRamp] = :STONE
    ENUM[234] = :LavaRamp ; NUME[:LavaRamp] = 234 ; Caption[:LavaRamp] = 'obsidian ramp' ; Shape[:LavaRamp] = :RAMP ; Material[:LavaRamp] = :LAVA_STONE
    ENUM[235] = :FeatureRamp ; NUME[:FeatureRamp] = 235 ; Caption[:FeatureRamp] = 'featstone ramp' ; Shape[:FeatureRamp] = :RAMP ; Material[:FeatureRamp] = :FEATURE
    ENUM[236] = :MineralRamp ; NUME[:MineralRamp] = 236 ; Caption[:MineralRamp] = 'vein ramp' ; Shape[:MineralRamp] = :RAMP ; Material[:MineralRamp] = :MINERAL
    ENUM[237] = :SoilRamp ; NUME[:SoilRamp] = 237 ; Caption[:SoilRamp] = 'soil ramp' ; Shape[:SoilRamp] = :RAMP ; Material[:SoilRamp] = :SOIL
    ENUM[238] = :Ashes1 ; NUME[:Ashes1] = 238 ; Caption[:Ashes1] = 'ashes' ; Shape[:Ashes1] = :FLOOR ; Material[:Ashes1] = :ASHES ; Variant[:Ashes1] = :VAR_1
    ENUM[239] = :Ashes2 ; NUME[:Ashes2] = 239 ; Caption[:Ashes2] = 'ashes' ; Shape[:Ashes2] = :FLOOR ; Material[:Ashes2] = :ASHES ; Variant[:Ashes2] = :VAR_2
    ENUM[240] = :Ashes3 ; NUME[:Ashes3] = 240 ; Caption[:Ashes3] = 'ashes' ; Shape[:Ashes3] = :FLOOR ; Material[:Ashes3] = :ASHES ; Variant[:Ashes3] = :VAR_3
    ENUM[241] = :FrozenRamp ; NUME[:FrozenRamp] = 241 ; Caption[:FrozenRamp] = 'ice ramp' ; Shape[:FrozenRamp] = :RAMP ; Material[:FrozenRamp] = :FROZEN_LIQUID
    ENUM[254] = :FrozenFloor2 ; NUME[:FrozenFloor2] = 254 ; Caption[:FrozenFloor2] = 'ice floor' ; Shape[:FrozenFloor2] = :FLOOR ; Material[:FrozenFloor2] = :FROZEN_LIQUID ; Variant[:FrozenFloor2] = :VAR_2 ; Special[:FrozenFloor2] = :NORMAL
    ENUM[255] = :FrozenFloor3 ; NUME[:FrozenFloor3] = 255 ; Caption[:FrozenFloor3] = 'ice floor' ; Shape[:FrozenFloor3] = :FLOOR ; Material[:FrozenFloor3] = :FROZEN_LIQUID ; Variant[:FrozenFloor3] = :VAR_3 ; Special[:FrozenFloor3] = :NORMAL
    ENUM[256] = :FrozenFloor4 ; NUME[:FrozenFloor4] = 256 ; Caption[:FrozenFloor4] = 'ice floor' ; Shape[:FrozenFloor4] = :FLOOR ; Material[:FrozenFloor4] = :FROZEN_LIQUID ; Variant[:FrozenFloor4] = :VAR_4 ; Special[:FrozenFloor4] = :NORMAL
    ENUM[257] = :FurrowedSoil ; NUME[:FurrowedSoil] = 257 ; Caption[:FurrowedSoil] = 'furrowed soil' ; Shape[:FurrowedSoil] = :FLOOR ; Material[:FurrowedSoil] = :SOIL ; Special[:FurrowedSoil] = :FURROWED
    ENUM[258] = :FrozenFloor1 ; NUME[:FrozenFloor1] = 258 ; Caption[:FrozenFloor1] = 'ice floor' ; Shape[:FrozenFloor1] = :FLOOR ; Material[:FrozenFloor1] = :FROZEN_LIQUID ; Variant[:FrozenFloor1] = :VAR_1 ; Special[:FrozenFloor1] = :NORMAL
    ENUM[259] = :SemiMoltenRock ; NUME[:SemiMoltenRock] = 259 ; Caption[:SemiMoltenRock] = 'semi-molten rock' ; Shape[:SemiMoltenRock] = :WALL ; Material[:SemiMoltenRock] = :MAGMA
    ENUM[260] = :MagmaFlow ; NUME[:MagmaFlow] = 260 ; Caption[:MagmaFlow] = 'magma flow' ; Shape[:MagmaFlow] = :FLOOR ; Material[:MagmaFlow] = :MAGMA
    ENUM[261] = :SoilWall ; NUME[:SoilWall] = 261 ; Caption[:SoilWall] = 'soil wall' ; Shape[:SoilWall] = :WALL ; Material[:SoilWall] = :SOIL
    ENUM[262] = :GlowingBarrier ; NUME[:GlowingBarrier] = 262 ; Caption[:GlowingBarrier] = 'glowing barrier' ; Shape[:GlowingBarrier] = :WALL ; Material[:GlowingBarrier] = :HFS
    ENUM[263] = :GlowingFloor ; NUME[:GlowingFloor] = 263 ; Caption[:GlowingFloor] = 'glowing floor' ; Shape[:GlowingFloor] = :FLOOR ; Material[:GlowingFloor] = :HFS
    ENUM[265] = :LavaWallSmoothRD2 ; NUME[:LavaWallSmoothRD2] = 265 ; Caption[:LavaWallSmoothRD2] = 'smooth obsidian wall RD2' ; Shape[:LavaWallSmoothRD2] = :WALL ; Material[:LavaWallSmoothRD2] = :LAVA_STONE ; Special[:LavaWallSmoothRD2] = :SMOOTH ; Direction[:LavaWallSmoothRD2] = '--SS--E-'
    ENUM[266] = :LavaWallSmoothR2D ; NUME[:LavaWallSmoothR2D] = 266 ; Caption[:LavaWallSmoothR2D] = 'smooth obsidian wall R2D' ; Shape[:LavaWallSmoothR2D] = :WALL ; Material[:LavaWallSmoothR2D] = :LAVA_STONE ; Special[:LavaWallSmoothR2D] = :SMOOTH ; Direction[:LavaWallSmoothR2D] = '--S---EE'
    ENUM[267] = :LavaWallSmoothR2U ; NUME[:LavaWallSmoothR2U] = 267 ; Caption[:LavaWallSmoothR2U] = 'smooth obsidian wall R2U' ; Shape[:LavaWallSmoothR2U] = :WALL ; Material[:LavaWallSmoothR2U] = :LAVA_STONE ; Special[:LavaWallSmoothR2U] = :SMOOTH ; Direction[:LavaWallSmoothR2U] = 'N-----EE'
    ENUM[268] = :LavaWallSmoothRU2 ; NUME[:LavaWallSmoothRU2] = 268 ; Caption[:LavaWallSmoothRU2] = 'smooth obsidian wall RU2' ; Shape[:LavaWallSmoothRU2] = :WALL ; Material[:LavaWallSmoothRU2] = :LAVA_STONE ; Special[:LavaWallSmoothRU2] = :SMOOTH ; Direction[:LavaWallSmoothRU2] = 'NN----E-'
    ENUM[269] = :LavaWallSmoothL2U ; NUME[:LavaWallSmoothL2U] = 269 ; Caption[:LavaWallSmoothL2U] = 'smooth obsidian wall L2U' ; Shape[:LavaWallSmoothL2U] = :WALL ; Material[:LavaWallSmoothL2U] = :LAVA_STONE ; Special[:LavaWallSmoothL2U] = :SMOOTH ; Direction[:LavaWallSmoothL2U] = 'N---WW--'
    ENUM[270] = :LavaWallSmoothLU2 ; NUME[:LavaWallSmoothLU2] = 270 ; Caption[:LavaWallSmoothLU2] = 'smooth obsidian wall LU2' ; Shape[:LavaWallSmoothLU2] = :WALL ; Material[:LavaWallSmoothLU2] = :LAVA_STONE ; Special[:LavaWallSmoothLU2] = :SMOOTH ; Direction[:LavaWallSmoothLU2] = 'NN--W---'
    ENUM[271] = :LavaWallSmoothL2D ; NUME[:LavaWallSmoothL2D] = 271 ; Caption[:LavaWallSmoothL2D] = 'smooth obsidian wall L2D' ; Shape[:LavaWallSmoothL2D] = :WALL ; Material[:LavaWallSmoothL2D] = :LAVA_STONE ; Special[:LavaWallSmoothL2D] = :SMOOTH ; Direction[:LavaWallSmoothL2D] = '--S-WW--'
    ENUM[272] = :LavaWallSmoothLD2 ; NUME[:LavaWallSmoothLD2] = 272 ; Caption[:LavaWallSmoothLD2] = 'smooth obsidian wall LD2' ; Shape[:LavaWallSmoothLD2] = :WALL ; Material[:LavaWallSmoothLD2] = :LAVA_STONE ; Special[:LavaWallSmoothLD2] = :SMOOTH ; Direction[:LavaWallSmoothLD2] = '--SSW---'
    ENUM[273] = :LavaWallSmoothLRUD ; NUME[:LavaWallSmoothLRUD] = 273 ; Caption[:LavaWallSmoothLRUD] = 'smooth obsidian wall LRUD' ; Shape[:LavaWallSmoothLRUD] = :WALL ; Material[:LavaWallSmoothLRUD] = :LAVA_STONE ; Special[:LavaWallSmoothLRUD] = :SMOOTH ; Direction[:LavaWallSmoothLRUD] = 'N-S-W-E-'
    ENUM[274] = :LavaWallSmoothRUD ; NUME[:LavaWallSmoothRUD] = 274 ; Caption[:LavaWallSmoothRUD] = 'smooth obsidian wall RUD' ; Shape[:LavaWallSmoothRUD] = :WALL ; Material[:LavaWallSmoothRUD] = :LAVA_STONE ; Special[:LavaWallSmoothRUD] = :SMOOTH ; Direction[:LavaWallSmoothRUD] = 'N-S---E-'
    ENUM[275] = :LavaWallSmoothLRD ; NUME[:LavaWallSmoothLRD] = 275 ; Caption[:LavaWallSmoothLRD] = 'smooth obsidian wall LRD' ; Shape[:LavaWallSmoothLRD] = :WALL ; Material[:LavaWallSmoothLRD] = :LAVA_STONE ; Special[:LavaWallSmoothLRD] = :SMOOTH ; Direction[:LavaWallSmoothLRD] = '--S-W-E-'
    ENUM[276] = :LavaWallSmoothLRU ; NUME[:LavaWallSmoothLRU] = 276 ; Caption[:LavaWallSmoothLRU] = 'smooth obsidian wall LRU' ; Shape[:LavaWallSmoothLRU] = :WALL ; Material[:LavaWallSmoothLRU] = :LAVA_STONE ; Special[:LavaWallSmoothLRU] = :SMOOTH ; Direction[:LavaWallSmoothLRU] = 'N---W-E-'
    ENUM[277] = :LavaWallSmoothLUD ; NUME[:LavaWallSmoothLUD] = 277 ; Caption[:LavaWallSmoothLUD] = 'smooth obsidian wall LUD' ; Shape[:LavaWallSmoothLUD] = :WALL ; Material[:LavaWallSmoothLUD] = :LAVA_STONE ; Special[:LavaWallSmoothLUD] = :SMOOTH ; Direction[:LavaWallSmoothLUD] = 'N-S-W---'
    ENUM[278] = :LavaWallSmoothRD ; NUME[:LavaWallSmoothRD] = 278 ; Caption[:LavaWallSmoothRD] = 'smooth obsidian wall RD' ; Shape[:LavaWallSmoothRD] = :WALL ; Material[:LavaWallSmoothRD] = :LAVA_STONE ; Special[:LavaWallSmoothRD] = :SMOOTH ; Direction[:LavaWallSmoothRD] = '--S---E-'
    ENUM[279] = :LavaWallSmoothRU ; NUME[:LavaWallSmoothRU] = 279 ; Caption[:LavaWallSmoothRU] = 'smooth obsidian wall RU' ; Shape[:LavaWallSmoothRU] = :WALL ; Material[:LavaWallSmoothRU] = :LAVA_STONE ; Special[:LavaWallSmoothRU] = :SMOOTH ; Direction[:LavaWallSmoothRU] = 'N-----E-'
    ENUM[280] = :LavaWallSmoothLU ; NUME[:LavaWallSmoothLU] = 280 ; Caption[:LavaWallSmoothLU] = 'smooth obsidian wall LU' ; Shape[:LavaWallSmoothLU] = :WALL ; Material[:LavaWallSmoothLU] = :LAVA_STONE ; Special[:LavaWallSmoothLU] = :SMOOTH ; Direction[:LavaWallSmoothLU] = 'N---W---'
    ENUM[281] = :LavaWallSmoothLD ; NUME[:LavaWallSmoothLD] = 281 ; Caption[:LavaWallSmoothLD] = 'smooth obsidian wall LD' ; Shape[:LavaWallSmoothLD] = :WALL ; Material[:LavaWallSmoothLD] = :LAVA_STONE ; Special[:LavaWallSmoothLD] = :SMOOTH ; Direction[:LavaWallSmoothLD] = '--S-W---'
    ENUM[282] = :LavaWallSmoothUD ; NUME[:LavaWallSmoothUD] = 282 ; Caption[:LavaWallSmoothUD] = 'smooth obsidian wall UD' ; Shape[:LavaWallSmoothUD] = :WALL ; Material[:LavaWallSmoothUD] = :LAVA_STONE ; Special[:LavaWallSmoothUD] = :SMOOTH ; Direction[:LavaWallSmoothUD] = 'N-S-----'
    ENUM[283] = :LavaWallSmoothLR ; NUME[:LavaWallSmoothLR] = 283 ; Caption[:LavaWallSmoothLR] = 'smooth obsidian wall LR' ; Shape[:LavaWallSmoothLR] = :WALL ; Material[:LavaWallSmoothLR] = :LAVA_STONE ; Special[:LavaWallSmoothLR] = :SMOOTH ; Direction[:LavaWallSmoothLR] = '----W-E-'
    ENUM[284] = :FeatureWallSmoothRD2 ; NUME[:FeatureWallSmoothRD2] = 284 ; Caption[:FeatureWallSmoothRD2] = 'smooth featstone wall RD2' ; Shape[:FeatureWallSmoothRD2] = :WALL ; Material[:FeatureWallSmoothRD2] = :FEATURE ; Special[:FeatureWallSmoothRD2] = :SMOOTH ; Direction[:FeatureWallSmoothRD2] = '--SS--E-'
    ENUM[285] = :FeatureWallSmoothR2D ; NUME[:FeatureWallSmoothR2D] = 285 ; Caption[:FeatureWallSmoothR2D] = 'smooth featstone wall R2D' ; Shape[:FeatureWallSmoothR2D] = :WALL ; Material[:FeatureWallSmoothR2D] = :FEATURE ; Special[:FeatureWallSmoothR2D] = :SMOOTH ; Direction[:FeatureWallSmoothR2D] = '--S---EE'
    ENUM[286] = :FeatureWallSmoothR2U ; NUME[:FeatureWallSmoothR2U] = 286 ; Caption[:FeatureWallSmoothR2U] = 'smooth featstone wall R2U' ; Shape[:FeatureWallSmoothR2U] = :WALL ; Material[:FeatureWallSmoothR2U] = :FEATURE ; Special[:FeatureWallSmoothR2U] = :SMOOTH ; Direction[:FeatureWallSmoothR2U] = 'N-----EE'
    ENUM[287] = :FeatureWallSmoothRU2 ; NUME[:FeatureWallSmoothRU2] = 287 ; Caption[:FeatureWallSmoothRU2] = 'smooth featstone wall RU2' ; Shape[:FeatureWallSmoothRU2] = :WALL ; Material[:FeatureWallSmoothRU2] = :FEATURE ; Special[:FeatureWallSmoothRU2] = :SMOOTH ; Direction[:FeatureWallSmoothRU2] = 'NN----E-'
    ENUM[288] = :FeatureWallSmoothL2U ; NUME[:FeatureWallSmoothL2U] = 288 ; Caption[:FeatureWallSmoothL2U] = 'smooth featstone wall L2U' ; Shape[:FeatureWallSmoothL2U] = :WALL ; Material[:FeatureWallSmoothL2U] = :FEATURE ; Special[:FeatureWallSmoothL2U] = :SMOOTH ; Direction[:FeatureWallSmoothL2U] = 'N---WW--'
    ENUM[289] = :FeatureWallSmoothLU2 ; NUME[:FeatureWallSmoothLU2] = 289 ; Caption[:FeatureWallSmoothLU2] = 'smooth featstone wall LU2' ; Shape[:FeatureWallSmoothLU2] = :WALL ; Material[:FeatureWallSmoothLU2] = :FEATURE ; Special[:FeatureWallSmoothLU2] = :SMOOTH ; Direction[:FeatureWallSmoothLU2] = 'NN--W---'
    ENUM[290] = :FeatureWallSmoothL2D ; NUME[:FeatureWallSmoothL2D] = 290 ; Caption[:FeatureWallSmoothL2D] = 'smooth featstone wall L2D' ; Shape[:FeatureWallSmoothL2D] = :WALL ; Material[:FeatureWallSmoothL2D] = :FEATURE ; Special[:FeatureWallSmoothL2D] = :SMOOTH ; Direction[:FeatureWallSmoothL2D] = '--S-WW--'
    ENUM[291] = :FeatureWallSmoothLD2 ; NUME[:FeatureWallSmoothLD2] = 291 ; Caption[:FeatureWallSmoothLD2] = 'smooth featstone wall LD2' ; Shape[:FeatureWallSmoothLD2] = :WALL ; Material[:FeatureWallSmoothLD2] = :FEATURE ; Special[:FeatureWallSmoothLD2] = :SMOOTH ; Direction[:FeatureWallSmoothLD2] = '--SSW---'
    ENUM[292] = :FeatureWallSmoothLRUD ; NUME[:FeatureWallSmoothLRUD] = 292 ; Caption[:FeatureWallSmoothLRUD] = 'smooth featstone wall LRUD' ; Shape[:FeatureWallSmoothLRUD] = :WALL ; Material[:FeatureWallSmoothLRUD] = :FEATURE ; Special[:FeatureWallSmoothLRUD] = :SMOOTH ; Direction[:FeatureWallSmoothLRUD] = 'N-S-W-E-'
    ENUM[293] = :FeatureWallSmoothRUD ; NUME[:FeatureWallSmoothRUD] = 293 ; Caption[:FeatureWallSmoothRUD] = 'smooth featstone wall RUD' ; Shape[:FeatureWallSmoothRUD] = :WALL ; Material[:FeatureWallSmoothRUD] = :FEATURE ; Special[:FeatureWallSmoothRUD] = :SMOOTH ; Direction[:FeatureWallSmoothRUD] = 'N-S---E-'
    ENUM[294] = :FeatureWallSmoothLRD ; NUME[:FeatureWallSmoothLRD] = 294 ; Caption[:FeatureWallSmoothLRD] = 'smooth featstone wall LRD' ; Shape[:FeatureWallSmoothLRD] = :WALL ; Material[:FeatureWallSmoothLRD] = :FEATURE ; Special[:FeatureWallSmoothLRD] = :SMOOTH ; Direction[:FeatureWallSmoothLRD] = '--S-W-E-'
    ENUM[295] = :FeatureWallSmoothLRU ; NUME[:FeatureWallSmoothLRU] = 295 ; Caption[:FeatureWallSmoothLRU] = 'smooth featstone wall LRU' ; Shape[:FeatureWallSmoothLRU] = :WALL ; Material[:FeatureWallSmoothLRU] = :FEATURE ; Special[:FeatureWallSmoothLRU] = :SMOOTH ; Direction[:FeatureWallSmoothLRU] = 'N---W-E-'
    ENUM[296] = :FeatureWallSmoothLUD ; NUME[:FeatureWallSmoothLUD] = 296 ; Caption[:FeatureWallSmoothLUD] = 'smooth featstone wall LUD' ; Shape[:FeatureWallSmoothLUD] = :WALL ; Material[:FeatureWallSmoothLUD] = :FEATURE ; Special[:FeatureWallSmoothLUD] = :SMOOTH ; Direction[:FeatureWallSmoothLUD] = 'N-S-W---'
    ENUM[297] = :FeatureWallSmoothRD ; NUME[:FeatureWallSmoothRD] = 297 ; Caption[:FeatureWallSmoothRD] = 'smooth featstone wall RD' ; Shape[:FeatureWallSmoothRD] = :WALL ; Material[:FeatureWallSmoothRD] = :FEATURE ; Special[:FeatureWallSmoothRD] = :SMOOTH ; Direction[:FeatureWallSmoothRD] = '--S---E-'
    ENUM[298] = :FeatureWallSmoothRU ; NUME[:FeatureWallSmoothRU] = 298 ; Caption[:FeatureWallSmoothRU] = 'smooth featstone wall RU' ; Shape[:FeatureWallSmoothRU] = :WALL ; Material[:FeatureWallSmoothRU] = :FEATURE ; Special[:FeatureWallSmoothRU] = :SMOOTH ; Direction[:FeatureWallSmoothRU] = 'N-----E-'
    ENUM[299] = :FeatureWallSmoothLU ; NUME[:FeatureWallSmoothLU] = 299 ; Caption[:FeatureWallSmoothLU] = 'smooth featstone wall LU' ; Shape[:FeatureWallSmoothLU] = :WALL ; Material[:FeatureWallSmoothLU] = :FEATURE ; Special[:FeatureWallSmoothLU] = :SMOOTH ; Direction[:FeatureWallSmoothLU] = 'N---W---'
    ENUM[300] = :FeatureWallSmoothLD ; NUME[:FeatureWallSmoothLD] = 300 ; Caption[:FeatureWallSmoothLD] = 'smooth featstone wall LD' ; Shape[:FeatureWallSmoothLD] = :WALL ; Material[:FeatureWallSmoothLD] = :FEATURE ; Special[:FeatureWallSmoothLD] = :SMOOTH ; Direction[:FeatureWallSmoothLD] = '--S-W---'
    ENUM[301] = :FeatureWallSmoothUD ; NUME[:FeatureWallSmoothUD] = 301 ; Caption[:FeatureWallSmoothUD] = 'smooth featstone wall UD' ; Shape[:FeatureWallSmoothUD] = :WALL ; Material[:FeatureWallSmoothUD] = :FEATURE ; Special[:FeatureWallSmoothUD] = :SMOOTH ; Direction[:FeatureWallSmoothUD] = 'N-S-----'
    ENUM[302] = :FeatureWallSmoothLR ; NUME[:FeatureWallSmoothLR] = 302 ; Caption[:FeatureWallSmoothLR] = 'smooth featstone wall LR' ; Shape[:FeatureWallSmoothLR] = :WALL ; Material[:FeatureWallSmoothLR] = :FEATURE ; Special[:FeatureWallSmoothLR] = :SMOOTH ; Direction[:FeatureWallSmoothLR] = '----W-E-'
    ENUM[303] = :StoneWallSmoothRD2 ; NUME[:StoneWallSmoothRD2] = 303 ; Caption[:StoneWallSmoothRD2] = 'smooth stone wall RD2' ; Shape[:StoneWallSmoothRD2] = :WALL ; Material[:StoneWallSmoothRD2] = :STONE ; Special[:StoneWallSmoothRD2] = :SMOOTH ; Direction[:StoneWallSmoothRD2] = '--SS--E-'
    ENUM[304] = :StoneWallSmoothR2D ; NUME[:StoneWallSmoothR2D] = 304 ; Caption[:StoneWallSmoothR2D] = 'smooth stone wall R2D' ; Shape[:StoneWallSmoothR2D] = :WALL ; Material[:StoneWallSmoothR2D] = :STONE ; Special[:StoneWallSmoothR2D] = :SMOOTH ; Direction[:StoneWallSmoothR2D] = '--S---EE'
    ENUM[305] = :StoneWallSmoothR2U ; NUME[:StoneWallSmoothR2U] = 305 ; Caption[:StoneWallSmoothR2U] = 'smooth stone wall R2U' ; Shape[:StoneWallSmoothR2U] = :WALL ; Material[:StoneWallSmoothR2U] = :STONE ; Special[:StoneWallSmoothR2U] = :SMOOTH ; Direction[:StoneWallSmoothR2U] = 'N-----EE'
    ENUM[306] = :StoneWallSmoothRU2 ; NUME[:StoneWallSmoothRU2] = 306 ; Caption[:StoneWallSmoothRU2] = 'smooth stone wall RU2' ; Shape[:StoneWallSmoothRU2] = :WALL ; Material[:StoneWallSmoothRU2] = :STONE ; Special[:StoneWallSmoothRU2] = :SMOOTH ; Direction[:StoneWallSmoothRU2] = 'NN----E-'
    ENUM[307] = :StoneWallSmoothL2U ; NUME[:StoneWallSmoothL2U] = 307 ; Caption[:StoneWallSmoothL2U] = 'smooth stone wall L2U' ; Shape[:StoneWallSmoothL2U] = :WALL ; Material[:StoneWallSmoothL2U] = :STONE ; Special[:StoneWallSmoothL2U] = :SMOOTH ; Direction[:StoneWallSmoothL2U] = 'N---WW--'
    ENUM[308] = :StoneWallSmoothLU2 ; NUME[:StoneWallSmoothLU2] = 308 ; Caption[:StoneWallSmoothLU2] = 'smooth stone wall LU2' ; Shape[:StoneWallSmoothLU2] = :WALL ; Material[:StoneWallSmoothLU2] = :STONE ; Special[:StoneWallSmoothLU2] = :SMOOTH ; Direction[:StoneWallSmoothLU2] = 'NN--W---'
    ENUM[309] = :StoneWallSmoothL2D ; NUME[:StoneWallSmoothL2D] = 309 ; Caption[:StoneWallSmoothL2D] = 'smooth stone wall L2D' ; Shape[:StoneWallSmoothL2D] = :WALL ; Material[:StoneWallSmoothL2D] = :STONE ; Special[:StoneWallSmoothL2D] = :SMOOTH ; Direction[:StoneWallSmoothL2D] = '--S-WW--'
    ENUM[310] = :StoneWallSmoothLD2 ; NUME[:StoneWallSmoothLD2] = 310 ; Caption[:StoneWallSmoothLD2] = 'smooth stone wall LD2' ; Shape[:StoneWallSmoothLD2] = :WALL ; Material[:StoneWallSmoothLD2] = :STONE ; Special[:StoneWallSmoothLD2] = :SMOOTH ; Direction[:StoneWallSmoothLD2] = '--SSW---'
    ENUM[311] = :StoneWallSmoothLRUD ; NUME[:StoneWallSmoothLRUD] = 311 ; Caption[:StoneWallSmoothLRUD] = 'smooth stone wall LRUD' ; Shape[:StoneWallSmoothLRUD] = :WALL ; Material[:StoneWallSmoothLRUD] = :STONE ; Special[:StoneWallSmoothLRUD] = :SMOOTH ; Direction[:StoneWallSmoothLRUD] = 'N-S-W-E-'
    ENUM[312] = :StoneWallSmoothRUD ; NUME[:StoneWallSmoothRUD] = 312 ; Caption[:StoneWallSmoothRUD] = 'smooth stone wall RUD' ; Shape[:StoneWallSmoothRUD] = :WALL ; Material[:StoneWallSmoothRUD] = :STONE ; Special[:StoneWallSmoothRUD] = :SMOOTH ; Direction[:StoneWallSmoothRUD] = 'N-S---E-'
    ENUM[313] = :StoneWallSmoothLRD ; NUME[:StoneWallSmoothLRD] = 313 ; Caption[:StoneWallSmoothLRD] = 'smooth stone wall LRD' ; Shape[:StoneWallSmoothLRD] = :WALL ; Material[:StoneWallSmoothLRD] = :STONE ; Special[:StoneWallSmoothLRD] = :SMOOTH ; Direction[:StoneWallSmoothLRD] = '--S-W-E-'
    ENUM[314] = :StoneWallSmoothLRU ; NUME[:StoneWallSmoothLRU] = 314 ; Caption[:StoneWallSmoothLRU] = 'smooth stone wall LRU' ; Shape[:StoneWallSmoothLRU] = :WALL ; Material[:StoneWallSmoothLRU] = :STONE ; Special[:StoneWallSmoothLRU] = :SMOOTH ; Direction[:StoneWallSmoothLRU] = 'N---W-E-'
    ENUM[315] = :StoneWallSmoothLUD ; NUME[:StoneWallSmoothLUD] = 315 ; Caption[:StoneWallSmoothLUD] = 'smooth stone wall LUD' ; Shape[:StoneWallSmoothLUD] = :WALL ; Material[:StoneWallSmoothLUD] = :STONE ; Special[:StoneWallSmoothLUD] = :SMOOTH ; Direction[:StoneWallSmoothLUD] = 'N-S-W---'
    ENUM[316] = :StoneWallSmoothRD ; NUME[:StoneWallSmoothRD] = 316 ; Caption[:StoneWallSmoothRD] = 'smooth stone wall RD' ; Shape[:StoneWallSmoothRD] = :WALL ; Material[:StoneWallSmoothRD] = :STONE ; Special[:StoneWallSmoothRD] = :SMOOTH ; Direction[:StoneWallSmoothRD] = '--S---E-'
    ENUM[317] = :StoneWallSmoothRU ; NUME[:StoneWallSmoothRU] = 317 ; Caption[:StoneWallSmoothRU] = 'smooth stone wall RU' ; Shape[:StoneWallSmoothRU] = :WALL ; Material[:StoneWallSmoothRU] = :STONE ; Special[:StoneWallSmoothRU] = :SMOOTH ; Direction[:StoneWallSmoothRU] = 'N-----E-'
    ENUM[318] = :StoneWallSmoothLU ; NUME[:StoneWallSmoothLU] = 318 ; Caption[:StoneWallSmoothLU] = 'smooth stone wall LU' ; Shape[:StoneWallSmoothLU] = :WALL ; Material[:StoneWallSmoothLU] = :STONE ; Special[:StoneWallSmoothLU] = :SMOOTH ; Direction[:StoneWallSmoothLU] = 'N---W---'
    ENUM[319] = :StoneWallSmoothLD ; NUME[:StoneWallSmoothLD] = 319 ; Caption[:StoneWallSmoothLD] = 'smooth stone wall LD' ; Shape[:StoneWallSmoothLD] = :WALL ; Material[:StoneWallSmoothLD] = :STONE ; Special[:StoneWallSmoothLD] = :SMOOTH ; Direction[:StoneWallSmoothLD] = '--S-W---'
    ENUM[320] = :StoneWallSmoothUD ; NUME[:StoneWallSmoothUD] = 320 ; Caption[:StoneWallSmoothUD] = 'smooth stone wall UD' ; Shape[:StoneWallSmoothUD] = :WALL ; Material[:StoneWallSmoothUD] = :STONE ; Special[:StoneWallSmoothUD] = :SMOOTH ; Direction[:StoneWallSmoothUD] = 'N-S-----'
    ENUM[321] = :StoneWallSmoothLR ; NUME[:StoneWallSmoothLR] = 321 ; Caption[:StoneWallSmoothLR] = 'smooth stone wall LR' ; Shape[:StoneWallSmoothLR] = :WALL ; Material[:StoneWallSmoothLR] = :STONE ; Special[:StoneWallSmoothLR] = :SMOOTH ; Direction[:StoneWallSmoothLR] = '----W-E-'
    ENUM[322] = :LavaFortification ; NUME[:LavaFortification] = 322 ; Caption[:LavaFortification] = 'obsidian fortification' ; Shape[:LavaFortification] = :FORTIFICATION ; Material[:LavaFortification] = :LAVA_STONE
    ENUM[323] = :FeatureFortification ; NUME[:FeatureFortification] = 323 ; Caption[:FeatureFortification] = 'featstone fortification' ; Shape[:FeatureFortification] = :FORTIFICATION ; Material[:FeatureFortification] = :FEATURE
    ENUM[324] = :LavaWallWorn1 ; NUME[:LavaWallWorn1] = 324 ; Caption[:LavaWallWorn1] = 'worn 1 obsidian wall' ; Shape[:LavaWallWorn1] = :WALL ; Material[:LavaWallWorn1] = :LAVA_STONE ; Special[:LavaWallWorn1] = :WORN_1
    ENUM[325] = :LavaWallWorn2 ; NUME[:LavaWallWorn2] = 325 ; Caption[:LavaWallWorn2] = 'worn 2 obsidian wall' ; Shape[:LavaWallWorn2] = :WALL ; Material[:LavaWallWorn2] = :LAVA_STONE ; Special[:LavaWallWorn2] = :WORN_2
    ENUM[326] = :LavaWallWorn3 ; NUME[:LavaWallWorn3] = 326 ; Caption[:LavaWallWorn3] = 'worn 3 obsidian wall' ; Shape[:LavaWallWorn3] = :WALL ; Material[:LavaWallWorn3] = :LAVA_STONE ; Special[:LavaWallWorn3] = :WORN_3
    ENUM[327] = :LavaWall ; NUME[:LavaWall] = 327 ; Caption[:LavaWall] = 'obsidian wall' ; Shape[:LavaWall] = :WALL ; Material[:LavaWall] = :LAVA_STONE ; Special[:LavaWall] = :NORMAL
    ENUM[328] = :FeatureWallWorn1 ; NUME[:FeatureWallWorn1] = 328 ; Caption[:FeatureWallWorn1] = 'worn 1 featstone wall' ; Shape[:FeatureWallWorn1] = :WALL ; Material[:FeatureWallWorn1] = :FEATURE ; Special[:FeatureWallWorn1] = :WORN_1
    ENUM[329] = :FeatureWallWorn2 ; NUME[:FeatureWallWorn2] = 329 ; Caption[:FeatureWallWorn2] = 'worn 2 featstone wall' ; Shape[:FeatureWallWorn2] = :WALL ; Material[:FeatureWallWorn2] = :FEATURE ; Special[:FeatureWallWorn2] = :WORN_2
    ENUM[330] = :FeatureWallWorn3 ; NUME[:FeatureWallWorn3] = 330 ; Caption[:FeatureWallWorn3] = 'worn 3 featstone wall' ; Shape[:FeatureWallWorn3] = :WALL ; Material[:FeatureWallWorn3] = :FEATURE ; Special[:FeatureWallWorn3] = :WORN_3
    ENUM[331] = :FeatureWall ; NUME[:FeatureWall] = 331 ; Caption[:FeatureWall] = 'featstone wall' ; Shape[:FeatureWall] = :WALL ; Material[:FeatureWall] = :FEATURE ; Special[:FeatureWall] = :NORMAL
    ENUM[332] = :StoneFloor1 ; NUME[:StoneFloor1] = 332 ; Caption[:StoneFloor1] = 'stone floor' ; Shape[:StoneFloor1] = :FLOOR ; Material[:StoneFloor1] = :STONE ; Variant[:StoneFloor1] = :VAR_1 ; Special[:StoneFloor1] = :NORMAL
    ENUM[333] = :StoneFloor2 ; NUME[:StoneFloor2] = 333 ; Caption[:StoneFloor2] = 'stone floor' ; Shape[:StoneFloor2] = :FLOOR ; Material[:StoneFloor2] = :STONE ; Variant[:StoneFloor2] = :VAR_2 ; Special[:StoneFloor2] = :NORMAL
    ENUM[334] = :StoneFloor3 ; NUME[:StoneFloor3] = 334 ; Caption[:StoneFloor3] = 'stone floor' ; Shape[:StoneFloor3] = :FLOOR ; Material[:StoneFloor3] = :STONE ; Variant[:StoneFloor3] = :VAR_3 ; Special[:StoneFloor3] = :NORMAL
    ENUM[335] = :StoneFloor4 ; NUME[:StoneFloor4] = 335 ; Caption[:StoneFloor4] = 'stone floor' ; Shape[:StoneFloor4] = :FLOOR ; Material[:StoneFloor4] = :STONE ; Variant[:StoneFloor4] = :VAR_4 ; Special[:StoneFloor4] = :NORMAL
    ENUM[336] = :LavaFloor1 ; NUME[:LavaFloor1] = 336 ; Caption[:LavaFloor1] = 'obsidian floor' ; Shape[:LavaFloor1] = :FLOOR ; Material[:LavaFloor1] = :LAVA_STONE ; Variant[:LavaFloor1] = :VAR_1 ; Special[:LavaFloor1] = :NORMAL
    ENUM[337] = :LavaFloor2 ; NUME[:LavaFloor2] = 337 ; Caption[:LavaFloor2] = 'obsidian floor' ; Shape[:LavaFloor2] = :FLOOR ; Material[:LavaFloor2] = :LAVA_STONE ; Variant[:LavaFloor2] = :VAR_2 ; Special[:LavaFloor2] = :NORMAL
    ENUM[338] = :LavaFloor3 ; NUME[:LavaFloor3] = 338 ; Caption[:LavaFloor3] = 'obsidian floor' ; Shape[:LavaFloor3] = :FLOOR ; Material[:LavaFloor3] = :LAVA_STONE ; Variant[:LavaFloor3] = :VAR_3 ; Special[:LavaFloor3] = :NORMAL
    ENUM[339] = :LavaFloor4 ; NUME[:LavaFloor4] = 339 ; Caption[:LavaFloor4] = 'obsidian floor' ; Shape[:LavaFloor4] = :FLOOR ; Material[:LavaFloor4] = :LAVA_STONE ; Variant[:LavaFloor4] = :VAR_4 ; Special[:LavaFloor4] = :NORMAL
    ENUM[340] = :FeatureFloor1 ; NUME[:FeatureFloor1] = 340 ; Caption[:FeatureFloor1] = 'featstone floor' ; Shape[:FeatureFloor1] = :FLOOR ; Material[:FeatureFloor1] = :FEATURE ; Variant[:FeatureFloor1] = :VAR_1 ; Special[:FeatureFloor1] = :NORMAL
    ENUM[341] = :FeatureFloor2 ; NUME[:FeatureFloor2] = 341 ; Caption[:FeatureFloor2] = 'featstone floor' ; Shape[:FeatureFloor2] = :FLOOR ; Material[:FeatureFloor2] = :FEATURE ; Variant[:FeatureFloor2] = :VAR_2 ; Special[:FeatureFloor2] = :NORMAL
    ENUM[342] = :FeatureFloor3 ; NUME[:FeatureFloor3] = 342 ; Caption[:FeatureFloor3] = 'featstone floor' ; Shape[:FeatureFloor3] = :FLOOR ; Material[:FeatureFloor3] = :FEATURE ; Variant[:FeatureFloor3] = :VAR_3 ; Special[:FeatureFloor3] = :NORMAL
    ENUM[343] = :FeatureFloor4 ; NUME[:FeatureFloor4] = 343 ; Caption[:FeatureFloor4] = 'featstone floor' ; Shape[:FeatureFloor4] = :FLOOR ; Material[:FeatureFloor4] = :FEATURE ; Variant[:FeatureFloor4] = :VAR_4 ; Special[:FeatureFloor4] = :NORMAL
    ENUM[344] = :GrassDarkFloor1 ; NUME[:GrassDarkFloor1] = 344 ; Caption[:GrassDarkFloor1] = 'dark grass' ; Shape[:GrassDarkFloor1] = :FLOOR ; Material[:GrassDarkFloor1] = :GRASS_DARK ; Variant[:GrassDarkFloor1] = :VAR_1
    ENUM[345] = :GrassDarkFloor2 ; NUME[:GrassDarkFloor2] = 345 ; Caption[:GrassDarkFloor2] = 'dark grass' ; Shape[:GrassDarkFloor2] = :FLOOR ; Material[:GrassDarkFloor2] = :GRASS_DARK ; Variant[:GrassDarkFloor2] = :VAR_2
    ENUM[346] = :GrassDarkFloor3 ; NUME[:GrassDarkFloor3] = 346 ; Caption[:GrassDarkFloor3] = 'dark grass' ; Shape[:GrassDarkFloor3] = :FLOOR ; Material[:GrassDarkFloor3] = :GRASS_DARK ; Variant[:GrassDarkFloor3] = :VAR_3
    ENUM[347] = :GrassDarkFloor4 ; NUME[:GrassDarkFloor4] = 347 ; Caption[:GrassDarkFloor4] = 'dark grass' ; Shape[:GrassDarkFloor4] = :FLOOR ; Material[:GrassDarkFloor4] = :GRASS_DARK ; Variant[:GrassDarkFloor4] = :VAR_4
    ENUM[348] = :SoilFloor1 ; NUME[:SoilFloor1] = 348 ; Caption[:SoilFloor1] = 'soil floor' ; Shape[:SoilFloor1] = :FLOOR ; Material[:SoilFloor1] = :SOIL ; Variant[:SoilFloor1] = :VAR_1 ; Special[:SoilFloor1] = :NORMAL
    ENUM[349] = :SoilFloor2 ; NUME[:SoilFloor2] = 349 ; Caption[:SoilFloor2] = 'soil floor' ; Shape[:SoilFloor2] = :FLOOR ; Material[:SoilFloor2] = :SOIL ; Variant[:SoilFloor2] = :VAR_2 ; Special[:SoilFloor2] = :NORMAL
    ENUM[350] = :SoilFloor3 ; NUME[:SoilFloor3] = 350 ; Caption[:SoilFloor3] = 'soil floor' ; Shape[:SoilFloor3] = :FLOOR ; Material[:SoilFloor3] = :SOIL ; Variant[:SoilFloor3] = :VAR_3 ; Special[:SoilFloor3] = :NORMAL
    ENUM[351] = :SoilFloor4 ; NUME[:SoilFloor4] = 351 ; Caption[:SoilFloor4] = 'soil floor' ; Shape[:SoilFloor4] = :FLOOR ; Material[:SoilFloor4] = :SOIL ; Variant[:SoilFloor4] = :VAR_4 ; Special[:SoilFloor4] = :NORMAL
    ENUM[352] = :SoilWetFloor1 ; NUME[:SoilWetFloor1] = 352 ; Caption[:SoilWetFloor1] = 'wet soil floor' ; Shape[:SoilWetFloor1] = :FLOOR ; Material[:SoilWetFloor1] = :SOIL ; Variant[:SoilWetFloor1] = :VAR_1 ; Special[:SoilWetFloor1] = :WET
    ENUM[353] = :SoilWetFloor2 ; NUME[:SoilWetFloor2] = 353 ; Caption[:SoilWetFloor2] = 'wet soil floor' ; Shape[:SoilWetFloor2] = :FLOOR ; Material[:SoilWetFloor2] = :SOIL ; Variant[:SoilWetFloor2] = :VAR_2 ; Special[:SoilWetFloor2] = :WET
    ENUM[354] = :SoilWetFloor3 ; NUME[:SoilWetFloor3] = 354 ; Caption[:SoilWetFloor3] = 'wet soil floor' ; Shape[:SoilWetFloor3] = :FLOOR ; Material[:SoilWetFloor3] = :SOIL ; Variant[:SoilWetFloor3] = :VAR_3 ; Special[:SoilWetFloor3] = :WET
    ENUM[355] = :SoilWetFloor4 ; NUME[:SoilWetFloor4] = 355 ; Caption[:SoilWetFloor4] = 'wet soil floor' ; Shape[:SoilWetFloor4] = :FLOOR ; Material[:SoilWetFloor4] = :SOIL ; Variant[:SoilWetFloor4] = :VAR_4 ; Special[:SoilWetFloor4] = :WET
    ENUM[356] = :FrozenFortification ; NUME[:FrozenFortification] = 356 ; Caption[:FrozenFortification] = 'ice fortification' ; Shape[:FrozenFortification] = :FORTIFICATION ; Material[:FrozenFortification] = :FROZEN_LIQUID
    ENUM[357] = :FrozenWallWorn1 ; NUME[:FrozenWallWorn1] = 357 ; Caption[:FrozenWallWorn1] = 'worn 1 ice wall' ; Shape[:FrozenWallWorn1] = :WALL ; Material[:FrozenWallWorn1] = :FROZEN_LIQUID ; Special[:FrozenWallWorn1] = :WORN_1
    ENUM[358] = :FrozenWallWorn2 ; NUME[:FrozenWallWorn2] = 358 ; Caption[:FrozenWallWorn2] = 'worn 2 ice wall' ; Shape[:FrozenWallWorn2] = :WALL ; Material[:FrozenWallWorn2] = :FROZEN_LIQUID ; Special[:FrozenWallWorn2] = :WORN_2
    ENUM[359] = :FrozenWallWorn3 ; NUME[:FrozenWallWorn3] = 359 ; Caption[:FrozenWallWorn3] = 'worn 3 ice wall' ; Shape[:FrozenWallWorn3] = :WALL ; Material[:FrozenWallWorn3] = :FROZEN_LIQUID ; Special[:FrozenWallWorn3] = :WORN_3
    ENUM[360] = :FrozenWall ; NUME[:FrozenWall] = 360 ; Caption[:FrozenWall] = 'ice wall' ; Shape[:FrozenWall] = :WALL ; Material[:FrozenWall] = :FROZEN_LIQUID ; Special[:FrozenWall] = :NORMAL
    ENUM[361] = :RiverN ; NUME[:RiverN] = 361 ; Caption[:RiverN] = 'river N' ; Shape[:RiverN] = :FLOOR ; Material[:RiverN] = :RIVER ; Special[:RiverN] = :NORMAL ; Direction[:RiverN] = 'N'
    ENUM[362] = :RiverS ; NUME[:RiverS] = 362 ; Caption[:RiverS] = 'river S' ; Shape[:RiverS] = :FLOOR ; Material[:RiverS] = :RIVER ; Special[:RiverS] = :NORMAL ; Direction[:RiverS] = 'S'
    ENUM[363] = :RiverE ; NUME[:RiverE] = 363 ; Caption[:RiverE] = 'river E' ; Shape[:RiverE] = :FLOOR ; Material[:RiverE] = :RIVER ; Special[:RiverE] = :NORMAL ; Direction[:RiverE] = 'E'
    ENUM[364] = :RiverW ; NUME[:RiverW] = 364 ; Caption[:RiverW] = 'river W' ; Shape[:RiverW] = :FLOOR ; Material[:RiverW] = :RIVER ; Special[:RiverW] = :NORMAL ; Direction[:RiverW] = 'W'
    ENUM[365] = :RiverNW ; NUME[:RiverNW] = 365 ; Caption[:RiverNW] = 'river NW' ; Shape[:RiverNW] = :FLOOR ; Material[:RiverNW] = :RIVER ; Special[:RiverNW] = :NORMAL ; Direction[:RiverNW] = 'NW'
    ENUM[366] = :RiverNE ; NUME[:RiverNE] = 366 ; Caption[:RiverNE] = 'river NE' ; Shape[:RiverNE] = :FLOOR ; Material[:RiverNE] = :RIVER ; Special[:RiverNE] = :NORMAL ; Direction[:RiverNE] = 'NE'
    ENUM[367] = :RiverSW ; NUME[:RiverSW] = 367 ; Caption[:RiverSW] = 'river SW' ; Shape[:RiverSW] = :FLOOR ; Material[:RiverSW] = :RIVER ; Special[:RiverSW] = :NORMAL ; Direction[:RiverSW] = 'SW'
    ENUM[368] = :RiverSE ; NUME[:RiverSE] = 368 ; Caption[:RiverSE] = 'river SE' ; Shape[:RiverSE] = :FLOOR ; Material[:RiverSE] = :RIVER ; Special[:RiverSE] = :NORMAL ; Direction[:RiverSE] = 'SE'
    ENUM[369] = :BrookN ; NUME[:BrookN] = 369 ; Caption[:BrookN] = 'brook bed N' ; Shape[:BrookN] = :BROOK_BED ; Material[:BrookN] = :BROOK ; Direction[:BrookN] = 'N'
    ENUM[370] = :BrookS ; NUME[:BrookS] = 370 ; Caption[:BrookS] = 'brook bed S' ; Shape[:BrookS] = :BROOK_BED ; Material[:BrookS] = :BROOK ; Direction[:BrookS] = 'S'
    ENUM[371] = :BrookE ; NUME[:BrookE] = 371 ; Caption[:BrookE] = 'brook bed E' ; Shape[:BrookE] = :BROOK_BED ; Material[:BrookE] = :BROOK ; Direction[:BrookE] = 'E'
    ENUM[372] = :BrookW ; NUME[:BrookW] = 372 ; Caption[:BrookW] = 'brook bed W' ; Shape[:BrookW] = :BROOK_BED ; Material[:BrookW] = :BROOK ; Direction[:BrookW] = 'W'
    ENUM[373] = :BrookNW ; NUME[:BrookNW] = 373 ; Caption[:BrookNW] = 'brook bed NW' ; Shape[:BrookNW] = :BROOK_BED ; Material[:BrookNW] = :BROOK ; Direction[:BrookNW] = 'NW'
    ENUM[374] = :BrookNE ; NUME[:BrookNE] = 374 ; Caption[:BrookNE] = 'brook bed NE' ; Shape[:BrookNE] = :BROOK_BED ; Material[:BrookNE] = :BROOK ; Direction[:BrookNE] = 'NE'
    ENUM[375] = :BrookSW ; NUME[:BrookSW] = 375 ; Caption[:BrookSW] = 'brook bed SW' ; Shape[:BrookSW] = :BROOK_BED ; Material[:BrookSW] = :BROOK ; Direction[:BrookSW] = 'SW'
    ENUM[376] = :BrookSE ; NUME[:BrookSE] = 376 ; Caption[:BrookSE] = 'brook bed SE' ; Shape[:BrookSE] = :BROOK_BED ; Material[:BrookSE] = :BROOK ; Direction[:BrookSE] = 'SE'
    ENUM[377] = :BrookTop ; NUME[:BrookTop] = 377 ; Caption[:BrookTop] = 'brook top' ; Shape[:BrookTop] = :BROOK_TOP ; Material[:BrookTop] = :BROOK
    ENUM[383] = :GrassDryFloor1 ; NUME[:GrassDryFloor1] = 383 ; Caption[:GrassDryFloor1] = 'dry grass' ; Shape[:GrassDryFloor1] = :FLOOR ; Material[:GrassDryFloor1] = :GRASS_DRY ; Variant[:GrassDryFloor1] = :VAR_1
    ENUM[384] = :GrassDryFloor2 ; NUME[:GrassDryFloor2] = 384 ; Caption[:GrassDryFloor2] = 'dry grass' ; Shape[:GrassDryFloor2] = :FLOOR ; Material[:GrassDryFloor2] = :GRASS_DRY ; Variant[:GrassDryFloor2] = :VAR_2
    ENUM[385] = :GrassDryFloor3 ; NUME[:GrassDryFloor3] = 385 ; Caption[:GrassDryFloor3] = 'dry grass' ; Shape[:GrassDryFloor3] = :FLOOR ; Material[:GrassDryFloor3] = :GRASS_DRY ; Variant[:GrassDryFloor3] = :VAR_3
    ENUM[386] = :GrassDryFloor4 ; NUME[:GrassDryFloor4] = 386 ; Caption[:GrassDryFloor4] = 'dry grass' ; Shape[:GrassDryFloor4] = :FLOOR ; Material[:GrassDryFloor4] = :GRASS_DRY ; Variant[:GrassDryFloor4] = :VAR_4
    ENUM[388] = :SaplingDead ; NUME[:SaplingDead] = 388 ; Caption[:SaplingDead] = 'dead sapling' ; Shape[:SaplingDead] = :SAPLING ; Material[:SaplingDead] = :PLANT ; Special[:SaplingDead] = :DEAD
    ENUM[389] = :ShrubDead ; NUME[:ShrubDead] = 389 ; Caption[:ShrubDead] = 'dead shrub' ; Shape[:ShrubDead] = :SHRUB ; Material[:ShrubDead] = :PLANT ; Special[:ShrubDead] = :DEAD
    ENUM[390] = :GrassDeadFloor1 ; NUME[:GrassDeadFloor1] = 390 ; Caption[:GrassDeadFloor1] = 'dead grass' ; Shape[:GrassDeadFloor1] = :FLOOR ; Material[:GrassDeadFloor1] = :GRASS_DEAD ; Variant[:GrassDeadFloor1] = :VAR_1
    ENUM[391] = :GrassDeadFloor2 ; NUME[:GrassDeadFloor2] = 391 ; Caption[:GrassDeadFloor2] = 'dead grass' ; Shape[:GrassDeadFloor2] = :FLOOR ; Material[:GrassDeadFloor2] = :GRASS_DEAD ; Variant[:GrassDeadFloor2] = :VAR_2
    ENUM[392] = :GrassDeadFloor3 ; NUME[:GrassDeadFloor3] = 392 ; Caption[:GrassDeadFloor3] = 'dead grass' ; Shape[:GrassDeadFloor3] = :FLOOR ; Material[:GrassDeadFloor3] = :GRASS_DEAD ; Variant[:GrassDeadFloor3] = :VAR_3
    ENUM[393] = :GrassDeadFloor4 ; NUME[:GrassDeadFloor4] = 393 ; Caption[:GrassDeadFloor4] = 'dead grass' ; Shape[:GrassDeadFloor4] = :FLOOR ; Material[:GrassDeadFloor4] = :GRASS_DEAD ; Variant[:GrassDeadFloor4] = :VAR_4
    ENUM[394] = :GrassLightFloor1 ; NUME[:GrassLightFloor1] = 394 ; Caption[:GrassLightFloor1] = 'light grass' ; Shape[:GrassLightFloor1] = :FLOOR ; Material[:GrassLightFloor1] = :GRASS_LIGHT ; Variant[:GrassLightFloor1] = :VAR_1
    ENUM[395] = :GrassLightFloor2 ; NUME[:GrassLightFloor2] = 395 ; Caption[:GrassLightFloor2] = 'light grass' ; Shape[:GrassLightFloor2] = :FLOOR ; Material[:GrassLightFloor2] = :GRASS_LIGHT ; Variant[:GrassLightFloor2] = :VAR_2
    ENUM[396] = :GrassLightFloor3 ; NUME[:GrassLightFloor3] = 396 ; Caption[:GrassLightFloor3] = 'light grass' ; Shape[:GrassLightFloor3] = :FLOOR ; Material[:GrassLightFloor3] = :GRASS_LIGHT ; Variant[:GrassLightFloor3] = :VAR_3
    ENUM[397] = :GrassLightFloor4 ; NUME[:GrassLightFloor4] = 397 ; Caption[:GrassLightFloor4] = 'light grass' ; Shape[:GrassLightFloor4] = :FLOOR ; Material[:GrassLightFloor4] = :GRASS_LIGHT ; Variant[:GrassLightFloor4] = :VAR_4
    ENUM[398] = :StoneBoulder ; NUME[:StoneBoulder] = 398 ; Caption[:StoneBoulder] = 'boulder' ; Shape[:StoneBoulder] = :BOULDER ; Material[:StoneBoulder] = :STONE
    ENUM[399] = :LavaBoulder ; NUME[:LavaBoulder] = 399 ; Caption[:LavaBoulder] = 'obsidian boulder' ; Shape[:LavaBoulder] = :BOULDER ; Material[:LavaBoulder] = :LAVA_STONE
    ENUM[400] = :FeatureBoulder ; NUME[:FeatureBoulder] = 400 ; Caption[:FeatureBoulder] = 'featstone boulder' ; Shape[:FeatureBoulder] = :BOULDER ; Material[:FeatureBoulder] = :FEATURE
    ENUM[401] = :StonePebbles1 ; NUME[:StonePebbles1] = 401 ; Caption[:StonePebbles1] = 'stone pebbles' ; Shape[:StonePebbles1] = :PEBBLES ; Material[:StonePebbles1] = :STONE ; Variant[:StonePebbles1] = :VAR_1
    ENUM[402] = :StonePebbles2 ; NUME[:StonePebbles2] = 402 ; Caption[:StonePebbles2] = 'stone pebbles' ; Shape[:StonePebbles2] = :PEBBLES ; Material[:StonePebbles2] = :STONE ; Variant[:StonePebbles2] = :VAR_2
    ENUM[403] = :StonePebbles3 ; NUME[:StonePebbles3] = 403 ; Caption[:StonePebbles3] = 'stone pebbles' ; Shape[:StonePebbles3] = :PEBBLES ; Material[:StonePebbles3] = :STONE ; Variant[:StonePebbles3] = :VAR_3
    ENUM[404] = :StonePebbles4 ; NUME[:StonePebbles4] = 404 ; Caption[:StonePebbles4] = 'stone pebbles' ; Shape[:StonePebbles4] = :PEBBLES ; Material[:StonePebbles4] = :STONE ; Variant[:StonePebbles4] = :VAR_4
    ENUM[405] = :LavaPebbles1 ; NUME[:LavaPebbles1] = 405 ; Caption[:LavaPebbles1] = 'obsidian pebbles' ; Shape[:LavaPebbles1] = :PEBBLES ; Material[:LavaPebbles1] = :LAVA_STONE ; Variant[:LavaPebbles1] = :VAR_1
    ENUM[406] = :LavaPebbles2 ; NUME[:LavaPebbles2] = 406 ; Caption[:LavaPebbles2] = 'obsidian pebbles' ; Shape[:LavaPebbles2] = :PEBBLES ; Material[:LavaPebbles2] = :LAVA_STONE ; Variant[:LavaPebbles2] = :VAR_2
    ENUM[407] = :LavaPebbles3 ; NUME[:LavaPebbles3] = 407 ; Caption[:LavaPebbles3] = 'obsidian pebbles' ; Shape[:LavaPebbles3] = :PEBBLES ; Material[:LavaPebbles3] = :LAVA_STONE ; Variant[:LavaPebbles3] = :VAR_3
    ENUM[408] = :LavaPebbles4 ; NUME[:LavaPebbles4] = 408 ; Caption[:LavaPebbles4] = 'obsidian pebbles' ; Shape[:LavaPebbles4] = :PEBBLES ; Material[:LavaPebbles4] = :LAVA_STONE ; Variant[:LavaPebbles4] = :VAR_4
    ENUM[409] = :FeaturePebbles1 ; NUME[:FeaturePebbles1] = 409 ; Caption[:FeaturePebbles1] = 'featstone pebbles' ; Shape[:FeaturePebbles1] = :PEBBLES ; Material[:FeaturePebbles1] = :FEATURE ; Variant[:FeaturePebbles1] = :VAR_1
    ENUM[410] = :FeaturePebbles2 ; NUME[:FeaturePebbles2] = 410 ; Caption[:FeaturePebbles2] = 'featstone pebbles' ; Shape[:FeaturePebbles2] = :PEBBLES ; Material[:FeaturePebbles2] = :FEATURE ; Variant[:FeaturePebbles2] = :VAR_2
    ENUM[411] = :FeaturePebbles3 ; NUME[:FeaturePebbles3] = 411 ; Caption[:FeaturePebbles3] = 'featstone pebbles' ; Shape[:FeaturePebbles3] = :PEBBLES ; Material[:FeaturePebbles3] = :FEATURE ; Variant[:FeaturePebbles3] = :VAR_3
    ENUM[412] = :FeaturePebbles4 ; NUME[:FeaturePebbles4] = 412 ; Caption[:FeaturePebbles4] = 'featstone pebbles' ; Shape[:FeaturePebbles4] = :PEBBLES ; Material[:FeaturePebbles4] = :FEATURE ; Variant[:FeaturePebbles4] = :VAR_4
    ENUM[413] = :MineralWallSmoothRD2 ; NUME[:MineralWallSmoothRD2] = 413 ; Caption[:MineralWallSmoothRD2] = 'smooth vein wall RD2' ; Shape[:MineralWallSmoothRD2] = :WALL ; Material[:MineralWallSmoothRD2] = :MINERAL ; Special[:MineralWallSmoothRD2] = :SMOOTH ; Direction[:MineralWallSmoothRD2] = '--SS--E-'
    ENUM[414] = :MineralWallSmoothR2D ; NUME[:MineralWallSmoothR2D] = 414 ; Caption[:MineralWallSmoothR2D] = 'smooth vein wall R2D' ; Shape[:MineralWallSmoothR2D] = :WALL ; Material[:MineralWallSmoothR2D] = :MINERAL ; Special[:MineralWallSmoothR2D] = :SMOOTH ; Direction[:MineralWallSmoothR2D] = '--S---EE'
    ENUM[415] = :MineralWallSmoothR2U ; NUME[:MineralWallSmoothR2U] = 415 ; Caption[:MineralWallSmoothR2U] = 'smooth vein wall R2U' ; Shape[:MineralWallSmoothR2U] = :WALL ; Material[:MineralWallSmoothR2U] = :MINERAL ; Special[:MineralWallSmoothR2U] = :SMOOTH ; Direction[:MineralWallSmoothR2U] = 'N-----EE'
    ENUM[416] = :MineralWallSmoothRU2 ; NUME[:MineralWallSmoothRU2] = 416 ; Caption[:MineralWallSmoothRU2] = 'smooth vein wall RU2' ; Shape[:MineralWallSmoothRU2] = :WALL ; Material[:MineralWallSmoothRU2] = :MINERAL ; Special[:MineralWallSmoothRU2] = :SMOOTH ; Direction[:MineralWallSmoothRU2] = 'NN----E-'
    ENUM[417] = :MineralWallSmoothL2U ; NUME[:MineralWallSmoothL2U] = 417 ; Caption[:MineralWallSmoothL2U] = 'smooth vein wall L2U' ; Shape[:MineralWallSmoothL2U] = :WALL ; Material[:MineralWallSmoothL2U] = :MINERAL ; Special[:MineralWallSmoothL2U] = :SMOOTH ; Direction[:MineralWallSmoothL2U] = 'N---WW--'
    ENUM[418] = :MineralWallSmoothLU2 ; NUME[:MineralWallSmoothLU2] = 418 ; Caption[:MineralWallSmoothLU2] = 'smooth vein wall LU2' ; Shape[:MineralWallSmoothLU2] = :WALL ; Material[:MineralWallSmoothLU2] = :MINERAL ; Special[:MineralWallSmoothLU2] = :SMOOTH ; Direction[:MineralWallSmoothLU2] = 'NN--W---'
    ENUM[419] = :MineralWallSmoothL2D ; NUME[:MineralWallSmoothL2D] = 419 ; Caption[:MineralWallSmoothL2D] = 'smooth vein wall L2D' ; Shape[:MineralWallSmoothL2D] = :WALL ; Material[:MineralWallSmoothL2D] = :MINERAL ; Special[:MineralWallSmoothL2D] = :SMOOTH ; Direction[:MineralWallSmoothL2D] = '--S-WW--'
    ENUM[420] = :MineralWallSmoothLD2 ; NUME[:MineralWallSmoothLD2] = 420 ; Caption[:MineralWallSmoothLD2] = 'smooth vein wall LD2' ; Shape[:MineralWallSmoothLD2] = :WALL ; Material[:MineralWallSmoothLD2] = :MINERAL ; Special[:MineralWallSmoothLD2] = :SMOOTH ; Direction[:MineralWallSmoothLD2] = '--SSW---'
    ENUM[421] = :MineralWallSmoothLRUD ; NUME[:MineralWallSmoothLRUD] = 421 ; Caption[:MineralWallSmoothLRUD] = 'smooth vein wall LRUD' ; Shape[:MineralWallSmoothLRUD] = :WALL ; Material[:MineralWallSmoothLRUD] = :MINERAL ; Special[:MineralWallSmoothLRUD] = :SMOOTH ; Direction[:MineralWallSmoothLRUD] = 'N-S-W-E-'
    ENUM[422] = :MineralWallSmoothRUD ; NUME[:MineralWallSmoothRUD] = 422 ; Caption[:MineralWallSmoothRUD] = 'smooth vein wall RUD' ; Shape[:MineralWallSmoothRUD] = :WALL ; Material[:MineralWallSmoothRUD] = :MINERAL ; Special[:MineralWallSmoothRUD] = :SMOOTH ; Direction[:MineralWallSmoothRUD] = 'N-S---E-'
    ENUM[423] = :MineralWallSmoothLRD ; NUME[:MineralWallSmoothLRD] = 423 ; Caption[:MineralWallSmoothLRD] = 'smooth vein wall LRD' ; Shape[:MineralWallSmoothLRD] = :WALL ; Material[:MineralWallSmoothLRD] = :MINERAL ; Special[:MineralWallSmoothLRD] = :SMOOTH ; Direction[:MineralWallSmoothLRD] = '--S-W-E-'
    ENUM[424] = :MineralWallSmoothLRU ; NUME[:MineralWallSmoothLRU] = 424 ; Caption[:MineralWallSmoothLRU] = 'smooth vein wall LRU' ; Shape[:MineralWallSmoothLRU] = :WALL ; Material[:MineralWallSmoothLRU] = :MINERAL ; Special[:MineralWallSmoothLRU] = :SMOOTH ; Direction[:MineralWallSmoothLRU] = 'N---W-E-'
    ENUM[425] = :MineralWallSmoothLUD ; NUME[:MineralWallSmoothLUD] = 425 ; Caption[:MineralWallSmoothLUD] = 'smooth vein wall LUD' ; Shape[:MineralWallSmoothLUD] = :WALL ; Material[:MineralWallSmoothLUD] = :MINERAL ; Special[:MineralWallSmoothLUD] = :SMOOTH ; Direction[:MineralWallSmoothLUD] = 'N-S-W---'
    ENUM[426] = :MineralWallSmoothRD ; NUME[:MineralWallSmoothRD] = 426 ; Caption[:MineralWallSmoothRD] = 'smooth vein wall RD' ; Shape[:MineralWallSmoothRD] = :WALL ; Material[:MineralWallSmoothRD] = :MINERAL ; Special[:MineralWallSmoothRD] = :SMOOTH ; Direction[:MineralWallSmoothRD] = '--S---E-'
    ENUM[427] = :MineralWallSmoothRU ; NUME[:MineralWallSmoothRU] = 427 ; Caption[:MineralWallSmoothRU] = 'smooth vein wall RU' ; Shape[:MineralWallSmoothRU] = :WALL ; Material[:MineralWallSmoothRU] = :MINERAL ; Special[:MineralWallSmoothRU] = :SMOOTH ; Direction[:MineralWallSmoothRU] = 'N-----E-'
    ENUM[428] = :MineralWallSmoothLU ; NUME[:MineralWallSmoothLU] = 428 ; Caption[:MineralWallSmoothLU] = 'smooth vein wall LU' ; Shape[:MineralWallSmoothLU] = :WALL ; Material[:MineralWallSmoothLU] = :MINERAL ; Special[:MineralWallSmoothLU] = :SMOOTH ; Direction[:MineralWallSmoothLU] = 'N---W---'
    ENUM[429] = :MineralWallSmoothLD ; NUME[:MineralWallSmoothLD] = 429 ; Caption[:MineralWallSmoothLD] = 'smooth vein wall LD' ; Shape[:MineralWallSmoothLD] = :WALL ; Material[:MineralWallSmoothLD] = :MINERAL ; Special[:MineralWallSmoothLD] = :SMOOTH ; Direction[:MineralWallSmoothLD] = '--S-W---'
    ENUM[430] = :MineralWallSmoothUD ; NUME[:MineralWallSmoothUD] = 430 ; Caption[:MineralWallSmoothUD] = 'smooth vein wall UD' ; Shape[:MineralWallSmoothUD] = :WALL ; Material[:MineralWallSmoothUD] = :MINERAL ; Special[:MineralWallSmoothUD] = :SMOOTH ; Direction[:MineralWallSmoothUD] = 'N-S-----'
    ENUM[431] = :MineralWallSmoothLR ; NUME[:MineralWallSmoothLR] = 431 ; Caption[:MineralWallSmoothLR] = 'smooth vein wall LR' ; Shape[:MineralWallSmoothLR] = :WALL ; Material[:MineralWallSmoothLR] = :MINERAL ; Special[:MineralWallSmoothLR] = :SMOOTH ; Direction[:MineralWallSmoothLR] = '----W-E-'
    ENUM[432] = :MineralFortification ; NUME[:MineralFortification] = 432 ; Caption[:MineralFortification] = 'vein fortification' ; Shape[:MineralFortification] = :FORTIFICATION ; Material[:MineralFortification] = :MINERAL
    ENUM[433] = :MineralWallWorn1 ; NUME[:MineralWallWorn1] = 433 ; Caption[:MineralWallWorn1] = 'worn 1 vein wall' ; Shape[:MineralWallWorn1] = :WALL ; Material[:MineralWallWorn1] = :MINERAL ; Special[:MineralWallWorn1] = :WORN_1
    ENUM[434] = :MineralWallWorn2 ; NUME[:MineralWallWorn2] = 434 ; Caption[:MineralWallWorn2] = 'worn 2 vein wall' ; Shape[:MineralWallWorn2] = :WALL ; Material[:MineralWallWorn2] = :MINERAL ; Special[:MineralWallWorn2] = :WORN_2
    ENUM[435] = :MineralWallWorn3 ; NUME[:MineralWallWorn3] = 435 ; Caption[:MineralWallWorn3] = 'worn 3 vein wall' ; Shape[:MineralWallWorn3] = :WALL ; Material[:MineralWallWorn3] = :MINERAL ; Special[:MineralWallWorn3] = :WORN_3
    ENUM[436] = :MineralWall ; NUME[:MineralWall] = 436 ; Caption[:MineralWall] = 'vein wall' ; Shape[:MineralWall] = :WALL ; Material[:MineralWall] = :MINERAL ; Special[:MineralWall] = :NORMAL
    ENUM[437] = :MineralFloor1 ; NUME[:MineralFloor1] = 437 ; Caption[:MineralFloor1] = 'vein floor' ; Shape[:MineralFloor1] = :FLOOR ; Material[:MineralFloor1] = :MINERAL ; Variant[:MineralFloor1] = :VAR_1 ; Special[:MineralFloor1] = :NORMAL
    ENUM[438] = :MineralFloor2 ; NUME[:MineralFloor2] = 438 ; Caption[:MineralFloor2] = 'vein floor' ; Shape[:MineralFloor2] = :FLOOR ; Material[:MineralFloor2] = :MINERAL ; Variant[:MineralFloor2] = :VAR_2 ; Special[:MineralFloor2] = :NORMAL
    ENUM[439] = :MineralFloor3 ; NUME[:MineralFloor3] = 439 ; Caption[:MineralFloor3] = 'vein floor' ; Shape[:MineralFloor3] = :FLOOR ; Material[:MineralFloor3] = :MINERAL ; Variant[:MineralFloor3] = :VAR_3 ; Special[:MineralFloor3] = :NORMAL
    ENUM[440] = :MineralFloor4 ; NUME[:MineralFloor4] = 440 ; Caption[:MineralFloor4] = 'vein floor' ; Shape[:MineralFloor4] = :FLOOR ; Material[:MineralFloor4] = :MINERAL ; Variant[:MineralFloor4] = :VAR_4 ; Special[:MineralFloor4] = :NORMAL
    ENUM[441] = :MineralBoulder ; NUME[:MineralBoulder] = 441 ; Caption[:MineralBoulder] = 'vein boulder' ; Shape[:MineralBoulder] = :BOULDER ; Material[:MineralBoulder] = :MINERAL
    ENUM[442] = :MineralPebbles1 ; NUME[:MineralPebbles1] = 442 ; Caption[:MineralPebbles1] = 'vein pebbles' ; Shape[:MineralPebbles1] = :PEBBLES ; Material[:MineralPebbles1] = :MINERAL ; Variant[:MineralPebbles1] = :VAR_1
    ENUM[443] = :MineralPebbles2 ; NUME[:MineralPebbles2] = 443 ; Caption[:MineralPebbles2] = 'vein pebbles' ; Shape[:MineralPebbles2] = :PEBBLES ; Material[:MineralPebbles2] = :MINERAL ; Variant[:MineralPebbles2] = :VAR_2
    ENUM[444] = :MineralPebbles3 ; NUME[:MineralPebbles3] = 444 ; Caption[:MineralPebbles3] = 'vein pebbles' ; Shape[:MineralPebbles3] = :PEBBLES ; Material[:MineralPebbles3] = :MINERAL ; Variant[:MineralPebbles3] = :VAR_3
    ENUM[445] = :MineralPebbles4 ; NUME[:MineralPebbles4] = 445 ; Caption[:MineralPebbles4] = 'vein pebbles' ; Shape[:MineralPebbles4] = :PEBBLES ; Material[:MineralPebbles4] = :MINERAL ; Variant[:MineralPebbles4] = :VAR_4
    ENUM[446] = :FrozenWallSmoothRD2 ; NUME[:FrozenWallSmoothRD2] = 446 ; Caption[:FrozenWallSmoothRD2] = 'smooth ice wall RD2' ; Shape[:FrozenWallSmoothRD2] = :WALL ; Material[:FrozenWallSmoothRD2] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothRD2] = :SMOOTH ; Direction[:FrozenWallSmoothRD2] = '--SS--E-'
    ENUM[447] = :FrozenWallSmoothR2D ; NUME[:FrozenWallSmoothR2D] = 447 ; Caption[:FrozenWallSmoothR2D] = 'smooth ice wall R2D' ; Shape[:FrozenWallSmoothR2D] = :WALL ; Material[:FrozenWallSmoothR2D] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothR2D] = :SMOOTH ; Direction[:FrozenWallSmoothR2D] = '--S---EE'
    ENUM[448] = :FrozenWallSmoothR2U ; NUME[:FrozenWallSmoothR2U] = 448 ; Caption[:FrozenWallSmoothR2U] = 'smooth ice wall R2U' ; Shape[:FrozenWallSmoothR2U] = :WALL ; Material[:FrozenWallSmoothR2U] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothR2U] = :SMOOTH ; Direction[:FrozenWallSmoothR2U] = 'N-----EE'
    ENUM[449] = :FrozenWallSmoothRU2 ; NUME[:FrozenWallSmoothRU2] = 449 ; Caption[:FrozenWallSmoothRU2] = 'smooth ice wall RU2' ; Shape[:FrozenWallSmoothRU2] = :WALL ; Material[:FrozenWallSmoothRU2] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothRU2] = :SMOOTH ; Direction[:FrozenWallSmoothRU2] = 'NN----E-'
    ENUM[450] = :FrozenWallSmoothL2U ; NUME[:FrozenWallSmoothL2U] = 450 ; Caption[:FrozenWallSmoothL2U] = 'smooth ice wall L2U' ; Shape[:FrozenWallSmoothL2U] = :WALL ; Material[:FrozenWallSmoothL2U] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothL2U] = :SMOOTH ; Direction[:FrozenWallSmoothL2U] = 'N---WW--'
    ENUM[451] = :FrozenWallSmoothLU2 ; NUME[:FrozenWallSmoothLU2] = 451 ; Caption[:FrozenWallSmoothLU2] = 'smooth ice wall LU2' ; Shape[:FrozenWallSmoothLU2] = :WALL ; Material[:FrozenWallSmoothLU2] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothLU2] = :SMOOTH ; Direction[:FrozenWallSmoothLU2] = 'NN--W---'
    ENUM[452] = :FrozenWallSmoothL2D ; NUME[:FrozenWallSmoothL2D] = 452 ; Caption[:FrozenWallSmoothL2D] = 'smooth ice wall L2D' ; Shape[:FrozenWallSmoothL2D] = :WALL ; Material[:FrozenWallSmoothL2D] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothL2D] = :SMOOTH ; Direction[:FrozenWallSmoothL2D] = '--S-WW--'
    ENUM[453] = :FrozenWallSmoothLD2 ; NUME[:FrozenWallSmoothLD2] = 453 ; Caption[:FrozenWallSmoothLD2] = 'smooth ice wall LD2' ; Shape[:FrozenWallSmoothLD2] = :WALL ; Material[:FrozenWallSmoothLD2] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothLD2] = :SMOOTH ; Direction[:FrozenWallSmoothLD2] = '--SSW---'
    ENUM[454] = :FrozenWallSmoothLRUD ; NUME[:FrozenWallSmoothLRUD] = 454 ; Caption[:FrozenWallSmoothLRUD] = 'smooth ice wall LRUD' ; Shape[:FrozenWallSmoothLRUD] = :WALL ; Material[:FrozenWallSmoothLRUD] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothLRUD] = :SMOOTH ; Direction[:FrozenWallSmoothLRUD] = 'N-S-W-E-'
    ENUM[455] = :FrozenWallSmoothRUD ; NUME[:FrozenWallSmoothRUD] = 455 ; Caption[:FrozenWallSmoothRUD] = 'smooth ice wall RUD' ; Shape[:FrozenWallSmoothRUD] = :WALL ; Material[:FrozenWallSmoothRUD] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothRUD] = :SMOOTH ; Direction[:FrozenWallSmoothRUD] = 'N-S---E-'
    ENUM[456] = :FrozenWallSmoothLRD ; NUME[:FrozenWallSmoothLRD] = 456 ; Caption[:FrozenWallSmoothLRD] = 'smooth ice wall LRD' ; Shape[:FrozenWallSmoothLRD] = :WALL ; Material[:FrozenWallSmoothLRD] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothLRD] = :SMOOTH ; Direction[:FrozenWallSmoothLRD] = '--S-W-E-'
    ENUM[457] = :FrozenWallSmoothLRU ; NUME[:FrozenWallSmoothLRU] = 457 ; Caption[:FrozenWallSmoothLRU] = 'smooth ice wall LRU' ; Shape[:FrozenWallSmoothLRU] = :WALL ; Material[:FrozenWallSmoothLRU] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothLRU] = :SMOOTH ; Direction[:FrozenWallSmoothLRU] = 'N---W-E-'
    ENUM[458] = :FrozenWallSmoothLUD ; NUME[:FrozenWallSmoothLUD] = 458 ; Caption[:FrozenWallSmoothLUD] = 'smooth ice wall LUD' ; Shape[:FrozenWallSmoothLUD] = :WALL ; Material[:FrozenWallSmoothLUD] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothLUD] = :SMOOTH ; Direction[:FrozenWallSmoothLUD] = 'N-S-W---'
    ENUM[459] = :FrozenWallSmoothRD ; NUME[:FrozenWallSmoothRD] = 459 ; Caption[:FrozenWallSmoothRD] = 'smooth ice wall RD' ; Shape[:FrozenWallSmoothRD] = :WALL ; Material[:FrozenWallSmoothRD] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothRD] = :SMOOTH ; Direction[:FrozenWallSmoothRD] = '--S---E-'
    ENUM[460] = :FrozenWallSmoothRU ; NUME[:FrozenWallSmoothRU] = 460 ; Caption[:FrozenWallSmoothRU] = 'smooth ice wall RU' ; Shape[:FrozenWallSmoothRU] = :WALL ; Material[:FrozenWallSmoothRU] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothRU] = :SMOOTH ; Direction[:FrozenWallSmoothRU] = 'N-----E-'
    ENUM[461] = :FrozenWallSmoothLU ; NUME[:FrozenWallSmoothLU] = 461 ; Caption[:FrozenWallSmoothLU] = 'smooth ice wall LU' ; Shape[:FrozenWallSmoothLU] = :WALL ; Material[:FrozenWallSmoothLU] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothLU] = :SMOOTH ; Direction[:FrozenWallSmoothLU] = 'N---W---'
    ENUM[462] = :FrozenWallSmoothLD ; NUME[:FrozenWallSmoothLD] = 462 ; Caption[:FrozenWallSmoothLD] = 'smooth ice wall LD' ; Shape[:FrozenWallSmoothLD] = :WALL ; Material[:FrozenWallSmoothLD] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothLD] = :SMOOTH ; Direction[:FrozenWallSmoothLD] = '--S-W---'
    ENUM[463] = :FrozenWallSmoothUD ; NUME[:FrozenWallSmoothUD] = 463 ; Caption[:FrozenWallSmoothUD] = 'smooth ice wall UD' ; Shape[:FrozenWallSmoothUD] = :WALL ; Material[:FrozenWallSmoothUD] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothUD] = :SMOOTH ; Direction[:FrozenWallSmoothUD] = 'N-S-----'
    ENUM[464] = :FrozenWallSmoothLR ; NUME[:FrozenWallSmoothLR] = 464 ; Caption[:FrozenWallSmoothLR] = 'smooth ice wall LR' ; Shape[:FrozenWallSmoothLR] = :WALL ; Material[:FrozenWallSmoothLR] = :FROZEN_LIQUID ; Special[:FrozenWallSmoothLR] = :SMOOTH ; Direction[:FrozenWallSmoothLR] = '----W-E-'
    ENUM[465] = :RiverRampN ; NUME[:RiverRampN] = 465 ; Caption[:RiverRampN] = 'river ramp N' ; Shape[:RiverRampN] = :RAMP ; Material[:RiverRampN] = :RIVER ; Direction[:RiverRampN] = 'N'
    ENUM[466] = :RiverRampS ; NUME[:RiverRampS] = 466 ; Caption[:RiverRampS] = 'river ramp S' ; Shape[:RiverRampS] = :RAMP ; Material[:RiverRampS] = :RIVER ; Direction[:RiverRampS] = 'S'
    ENUM[467] = :RiverRampE ; NUME[:RiverRampE] = 467 ; Caption[:RiverRampE] = 'river ramp E' ; Shape[:RiverRampE] = :RAMP ; Material[:RiverRampE] = :RIVER ; Direction[:RiverRampE] = 'E'
    ENUM[468] = :RiverRampW ; NUME[:RiverRampW] = 468 ; Caption[:RiverRampW] = 'river ramp W' ; Shape[:RiverRampW] = :RAMP ; Material[:RiverRampW] = :RIVER ; Direction[:RiverRampW] = 'W'
    ENUM[469] = :RiverRampNW ; NUME[:RiverRampNW] = 469 ; Caption[:RiverRampNW] = 'river ramp NW' ; Shape[:RiverRampNW] = :RAMP ; Material[:RiverRampNW] = :RIVER ; Direction[:RiverRampNW] = 'NW'
    ENUM[470] = :RiverRampNE ; NUME[:RiverRampNE] = 470 ; Caption[:RiverRampNE] = 'river ramp NE' ; Shape[:RiverRampNE] = :RAMP ; Material[:RiverRampNE] = :RIVER ; Direction[:RiverRampNE] = 'NE'
    ENUM[471] = :RiverRampSW ; NUME[:RiverRampSW] = 471 ; Caption[:RiverRampSW] = 'river ramp SW' ; Shape[:RiverRampSW] = :RAMP ; Material[:RiverRampSW] = :RIVER ; Direction[:RiverRampSW] = 'SW'
    ENUM[472] = :RiverRampSE ; NUME[:RiverRampSE] = 472 ; Caption[:RiverRampSE] = 'river ramp SE' ; Shape[:RiverRampSE] = :RAMP ; Material[:RiverRampSE] = :RIVER ; Direction[:RiverRampSE] = 'SE'
    ENUM[489] = :ConstructedFloor ; NUME[:ConstructedFloor] = 489 ; Caption[:ConstructedFloor] = 'constructed floor' ; Shape[:ConstructedFloor] = :FLOOR ; Material[:ConstructedFloor] = :CONSTRUCTION ; Special[:ConstructedFloor] = :SMOOTH
    ENUM[490] = :ConstructedFortification ; NUME[:ConstructedFortification] = 490 ; Caption[:ConstructedFortification] = 'constructed fortification' ; Shape[:ConstructedFortification] = :FORTIFICATION ; Material[:ConstructedFortification] = :CONSTRUCTION
    ENUM[491] = :ConstructedPillar ; NUME[:ConstructedPillar] = 491 ; Caption[:ConstructedPillar] = 'constructed pillar' ; Shape[:ConstructedPillar] = :WALL ; Material[:ConstructedPillar] = :CONSTRUCTION ; Special[:ConstructedPillar] = :SMOOTH
    ENUM[492] = :ConstructedWallRD2 ; NUME[:ConstructedWallRD2] = 492 ; Caption[:ConstructedWallRD2] = 'constructed wall RD2' ; Shape[:ConstructedWallRD2] = :WALL ; Material[:ConstructedWallRD2] = :CONSTRUCTION ; Special[:ConstructedWallRD2] = :SMOOTH ; Direction[:ConstructedWallRD2] = '--SS--E-'
    ENUM[493] = :ConstructedWallR2D ; NUME[:ConstructedWallR2D] = 493 ; Caption[:ConstructedWallR2D] = 'constructed wall R2D' ; Shape[:ConstructedWallR2D] = :WALL ; Material[:ConstructedWallR2D] = :CONSTRUCTION ; Special[:ConstructedWallR2D] = :SMOOTH ; Direction[:ConstructedWallR2D] = '--S---EE'
    ENUM[494] = :ConstructedWallR2U ; NUME[:ConstructedWallR2U] = 494 ; Caption[:ConstructedWallR2U] = 'constructed wall R2U' ; Shape[:ConstructedWallR2U] = :WALL ; Material[:ConstructedWallR2U] = :CONSTRUCTION ; Special[:ConstructedWallR2U] = :SMOOTH ; Direction[:ConstructedWallR2U] = 'N-----EE'
    ENUM[495] = :ConstructedWallRU2 ; NUME[:ConstructedWallRU2] = 495 ; Caption[:ConstructedWallRU2] = 'constructed wall RU2' ; Shape[:ConstructedWallRU2] = :WALL ; Material[:ConstructedWallRU2] = :CONSTRUCTION ; Special[:ConstructedWallRU2] = :SMOOTH ; Direction[:ConstructedWallRU2] = 'NN----E-'
    ENUM[496] = :ConstructedWallL2U ; NUME[:ConstructedWallL2U] = 496 ; Caption[:ConstructedWallL2U] = 'constructed wall L2U' ; Shape[:ConstructedWallL2U] = :WALL ; Material[:ConstructedWallL2U] = :CONSTRUCTION ; Special[:ConstructedWallL2U] = :SMOOTH ; Direction[:ConstructedWallL2U] = 'N---WW--'
    ENUM[497] = :ConstructedWallLU2 ; NUME[:ConstructedWallLU2] = 497 ; Caption[:ConstructedWallLU2] = 'constructed wall LU2' ; Shape[:ConstructedWallLU2] = :WALL ; Material[:ConstructedWallLU2] = :CONSTRUCTION ; Special[:ConstructedWallLU2] = :SMOOTH ; Direction[:ConstructedWallLU2] = 'NN--W---'
    ENUM[498] = :ConstructedWallL2D ; NUME[:ConstructedWallL2D] = 498 ; Caption[:ConstructedWallL2D] = 'constructed wall L2D' ; Shape[:ConstructedWallL2D] = :WALL ; Material[:ConstructedWallL2D] = :CONSTRUCTION ; Special[:ConstructedWallL2D] = :SMOOTH ; Direction[:ConstructedWallL2D] = '--S-WW--'
    ENUM[499] = :ConstructedWallLD2 ; NUME[:ConstructedWallLD2] = 499 ; Caption[:ConstructedWallLD2] = 'constructed wall LD2' ; Shape[:ConstructedWallLD2] = :WALL ; Material[:ConstructedWallLD2] = :CONSTRUCTION ; Special[:ConstructedWallLD2] = :SMOOTH ; Direction[:ConstructedWallLD2] = '--SSW---'
    ENUM[500] = :ConstructedWallLRUD ; NUME[:ConstructedWallLRUD] = 500 ; Caption[:ConstructedWallLRUD] = 'constructed wall LRUD' ; Shape[:ConstructedWallLRUD] = :WALL ; Material[:ConstructedWallLRUD] = :CONSTRUCTION ; Special[:ConstructedWallLRUD] = :SMOOTH ; Direction[:ConstructedWallLRUD] = 'N-S-W-E-'
    ENUM[501] = :ConstructedWallRUD ; NUME[:ConstructedWallRUD] = 501 ; Caption[:ConstructedWallRUD] = 'constructed wall RUD' ; Shape[:ConstructedWallRUD] = :WALL ; Material[:ConstructedWallRUD] = :CONSTRUCTION ; Special[:ConstructedWallRUD] = :SMOOTH ; Direction[:ConstructedWallRUD] = 'N-S---E-'
    ENUM[502] = :ConstructedWallLRD ; NUME[:ConstructedWallLRD] = 502 ; Caption[:ConstructedWallLRD] = 'constructed wall LRD' ; Shape[:ConstructedWallLRD] = :WALL ; Material[:ConstructedWallLRD] = :CONSTRUCTION ; Special[:ConstructedWallLRD] = :SMOOTH ; Direction[:ConstructedWallLRD] = '--S-W-E-'
    ENUM[503] = :ConstructedWallLRU ; NUME[:ConstructedWallLRU] = 503 ; Caption[:ConstructedWallLRU] = 'constructed wall LRU' ; Shape[:ConstructedWallLRU] = :WALL ; Material[:ConstructedWallLRU] = :CONSTRUCTION ; Special[:ConstructedWallLRU] = :SMOOTH ; Direction[:ConstructedWallLRU] = 'N---W-E-'
    ENUM[504] = :ConstructedWallLUD ; NUME[:ConstructedWallLUD] = 504 ; Caption[:ConstructedWallLUD] = 'constructed wall LUD' ; Shape[:ConstructedWallLUD] = :WALL ; Material[:ConstructedWallLUD] = :CONSTRUCTION ; Special[:ConstructedWallLUD] = :SMOOTH ; Direction[:ConstructedWallLUD] = 'N-S-W---'
    ENUM[505] = :ConstructedWallRD ; NUME[:ConstructedWallRD] = 505 ; Caption[:ConstructedWallRD] = 'constructed wall RD' ; Shape[:ConstructedWallRD] = :WALL ; Material[:ConstructedWallRD] = :CONSTRUCTION ; Special[:ConstructedWallRD] = :SMOOTH ; Direction[:ConstructedWallRD] = '--S---E-'
    ENUM[506] = :ConstructedWallRU ; NUME[:ConstructedWallRU] = 506 ; Caption[:ConstructedWallRU] = 'constructed wall RU' ; Shape[:ConstructedWallRU] = :WALL ; Material[:ConstructedWallRU] = :CONSTRUCTION ; Special[:ConstructedWallRU] = :SMOOTH ; Direction[:ConstructedWallRU] = 'N-----E-'
    ENUM[507] = :ConstructedWallLU ; NUME[:ConstructedWallLU] = 507 ; Caption[:ConstructedWallLU] = 'constructed wall LU' ; Shape[:ConstructedWallLU] = :WALL ; Material[:ConstructedWallLU] = :CONSTRUCTION ; Special[:ConstructedWallLU] = :SMOOTH ; Direction[:ConstructedWallLU] = 'N---W---'
    ENUM[508] = :ConstructedWallLD ; NUME[:ConstructedWallLD] = 508 ; Caption[:ConstructedWallLD] = 'constructed wall LD' ; Shape[:ConstructedWallLD] = :WALL ; Material[:ConstructedWallLD] = :CONSTRUCTION ; Special[:ConstructedWallLD] = :SMOOTH ; Direction[:ConstructedWallLD] = '--S-W---'
    ENUM[509] = :ConstructedWallUD ; NUME[:ConstructedWallUD] = 509 ; Caption[:ConstructedWallUD] = 'constructed wall UD' ; Shape[:ConstructedWallUD] = :WALL ; Material[:ConstructedWallUD] = :CONSTRUCTION ; Special[:ConstructedWallUD] = :SMOOTH ; Direction[:ConstructedWallUD] = 'N-S-----'
    ENUM[510] = :ConstructedWallLR ; NUME[:ConstructedWallLR] = 510 ; Caption[:ConstructedWallLR] = 'constructed wall LR' ; Shape[:ConstructedWallLR] = :WALL ; Material[:ConstructedWallLR] = :CONSTRUCTION ; Special[:ConstructedWallLR] = :SMOOTH ; Direction[:ConstructedWallLR] = '----W-E-'
    ENUM[511] = :ConstructedStairUD ; NUME[:ConstructedStairUD] = 511 ; Caption[:ConstructedStairUD] = 'constructed stair up/down' ; Shape[:ConstructedStairUD] = :STAIR_UPDOWN ; Material[:ConstructedStairUD] = :CONSTRUCTION
    ENUM[512] = :ConstructedStairD ; NUME[:ConstructedStairD] = 512 ; Caption[:ConstructedStairD] = 'constructed stair down' ; Shape[:ConstructedStairD] = :STAIR_DOWN ; Material[:ConstructedStairD] = :CONSTRUCTION
    ENUM[513] = :ConstructedStairU ; NUME[:ConstructedStairU] = 513 ; Caption[:ConstructedStairU] = 'constructed stair up' ; Shape[:ConstructedStairU] = :STAIR_UP ; Material[:ConstructedStairU] = :CONSTRUCTION
    ENUM[514] = :ConstructedRamp ; NUME[:ConstructedRamp] = 514 ; Caption[:ConstructedRamp] = 'constructed ramp' ; Shape[:ConstructedRamp] = :RAMP ; Material[:ConstructedRamp] = :CONSTRUCTION
    ENUM[515] = :StoneFloorTrackN ; NUME[:StoneFloorTrackN] = 515 ; Caption[:StoneFloorTrackN] = 'stone floor track N' ; Shape[:StoneFloorTrackN] = :FLOOR ; Material[:StoneFloorTrackN] = :STONE ; Special[:StoneFloorTrackN] = :TRACK ; Direction[:StoneFloorTrackN] = 'N'
    ENUM[516] = :StoneFloorTrackS ; NUME[:StoneFloorTrackS] = 516 ; Caption[:StoneFloorTrackS] = 'stone floor track S' ; Shape[:StoneFloorTrackS] = :FLOOR ; Material[:StoneFloorTrackS] = :STONE ; Special[:StoneFloorTrackS] = :TRACK ; Direction[:StoneFloorTrackS] = 'S'
    ENUM[517] = :StoneFloorTrackE ; NUME[:StoneFloorTrackE] = 517 ; Caption[:StoneFloorTrackE] = 'stone floor track E' ; Shape[:StoneFloorTrackE] = :FLOOR ; Material[:StoneFloorTrackE] = :STONE ; Special[:StoneFloorTrackE] = :TRACK ; Direction[:StoneFloorTrackE] = 'E'
    ENUM[518] = :StoneFloorTrackW ; NUME[:StoneFloorTrackW] = 518 ; Caption[:StoneFloorTrackW] = 'stone floor track W' ; Shape[:StoneFloorTrackW] = :FLOOR ; Material[:StoneFloorTrackW] = :STONE ; Special[:StoneFloorTrackW] = :TRACK ; Direction[:StoneFloorTrackW] = 'W'
    ENUM[519] = :StoneFloorTrackNS ; NUME[:StoneFloorTrackNS] = 519 ; Caption[:StoneFloorTrackNS] = 'stone floor track NS' ; Shape[:StoneFloorTrackNS] = :FLOOR ; Material[:StoneFloorTrackNS] = :STONE ; Special[:StoneFloorTrackNS] = :TRACK ; Direction[:StoneFloorTrackNS] = 'NS'
    ENUM[520] = :StoneFloorTrackNE ; NUME[:StoneFloorTrackNE] = 520 ; Caption[:StoneFloorTrackNE] = 'stone floor track NE' ; Shape[:StoneFloorTrackNE] = :FLOOR ; Material[:StoneFloorTrackNE] = :STONE ; Special[:StoneFloorTrackNE] = :TRACK ; Direction[:StoneFloorTrackNE] = 'NE'
    ENUM[521] = :StoneFloorTrackNW ; NUME[:StoneFloorTrackNW] = 521 ; Caption[:StoneFloorTrackNW] = 'stone floor track NW' ; Shape[:StoneFloorTrackNW] = :FLOOR ; Material[:StoneFloorTrackNW] = :STONE ; Special[:StoneFloorTrackNW] = :TRACK ; Direction[:StoneFloorTrackNW] = 'NW'
    ENUM[522] = :StoneFloorTrackSE ; NUME[:StoneFloorTrackSE] = 522 ; Caption[:StoneFloorTrackSE] = 'stone floor track SE' ; Shape[:StoneFloorTrackSE] = :FLOOR ; Material[:StoneFloorTrackSE] = :STONE ; Special[:StoneFloorTrackSE] = :TRACK ; Direction[:StoneFloorTrackSE] = 'SE'
    ENUM[523] = :StoneFloorTrackSW ; NUME[:StoneFloorTrackSW] = 523 ; Caption[:StoneFloorTrackSW] = 'stone floor track SW' ; Shape[:StoneFloorTrackSW] = :FLOOR ; Material[:StoneFloorTrackSW] = :STONE ; Special[:StoneFloorTrackSW] = :TRACK ; Direction[:StoneFloorTrackSW] = 'SW'
    ENUM[524] = :StoneFloorTrackEW ; NUME[:StoneFloorTrackEW] = 524 ; Caption[:StoneFloorTrackEW] = 'stone floor track EW' ; Shape[:StoneFloorTrackEW] = :FLOOR ; Material[:StoneFloorTrackEW] = :STONE ; Special[:StoneFloorTrackEW] = :TRACK ; Direction[:StoneFloorTrackEW] = 'EW'
    ENUM[525] = :StoneFloorTrackNSE ; NUME[:StoneFloorTrackNSE] = 525 ; Caption[:StoneFloorTrackNSE] = 'stone floor track NSE' ; Shape[:StoneFloorTrackNSE] = :FLOOR ; Material[:StoneFloorTrackNSE] = :STONE ; Special[:StoneFloorTrackNSE] = :TRACK ; Direction[:StoneFloorTrackNSE] = 'NSE'
    ENUM[526] = :StoneFloorTrackNSW ; NUME[:StoneFloorTrackNSW] = 526 ; Caption[:StoneFloorTrackNSW] = 'stone floor track NSW' ; Shape[:StoneFloorTrackNSW] = :FLOOR ; Material[:StoneFloorTrackNSW] = :STONE ; Special[:StoneFloorTrackNSW] = :TRACK ; Direction[:StoneFloorTrackNSW] = 'NSW'
    ENUM[527] = :StoneFloorTrackNEW ; NUME[:StoneFloorTrackNEW] = 527 ; Caption[:StoneFloorTrackNEW] = 'stone floor track NEW' ; Shape[:StoneFloorTrackNEW] = :FLOOR ; Material[:StoneFloorTrackNEW] = :STONE ; Special[:StoneFloorTrackNEW] = :TRACK ; Direction[:StoneFloorTrackNEW] = 'NEW'
    ENUM[528] = :StoneFloorTrackSEW ; NUME[:StoneFloorTrackSEW] = 528 ; Caption[:StoneFloorTrackSEW] = 'stone floor track SEW' ; Shape[:StoneFloorTrackSEW] = :FLOOR ; Material[:StoneFloorTrackSEW] = :STONE ; Special[:StoneFloorTrackSEW] = :TRACK ; Direction[:StoneFloorTrackSEW] = 'SEW'
    ENUM[529] = :StoneFloorTrackNSEW ; NUME[:StoneFloorTrackNSEW] = 529 ; Caption[:StoneFloorTrackNSEW] = 'stone floor track NSEW' ; Shape[:StoneFloorTrackNSEW] = :FLOOR ; Material[:StoneFloorTrackNSEW] = :STONE ; Special[:StoneFloorTrackNSEW] = :TRACK ; Direction[:StoneFloorTrackNSEW] = 'NSEW'
    ENUM[530] = :LavaFloorTrackN ; NUME[:LavaFloorTrackN] = 530 ; Caption[:LavaFloorTrackN] = 'obsidian floor track N' ; Shape[:LavaFloorTrackN] = :FLOOR ; Material[:LavaFloorTrackN] = :LAVA_STONE ; Special[:LavaFloorTrackN] = :TRACK ; Direction[:LavaFloorTrackN] = 'N'
    ENUM[531] = :LavaFloorTrackS ; NUME[:LavaFloorTrackS] = 531 ; Caption[:LavaFloorTrackS] = 'obsidian floor track S' ; Shape[:LavaFloorTrackS] = :FLOOR ; Material[:LavaFloorTrackS] = :LAVA_STONE ; Special[:LavaFloorTrackS] = :TRACK ; Direction[:LavaFloorTrackS] = 'S'
    ENUM[532] = :LavaFloorTrackE ; NUME[:LavaFloorTrackE] = 532 ; Caption[:LavaFloorTrackE] = 'obsidian floor track E' ; Shape[:LavaFloorTrackE] = :FLOOR ; Material[:LavaFloorTrackE] = :LAVA_STONE ; Special[:LavaFloorTrackE] = :TRACK ; Direction[:LavaFloorTrackE] = 'E'
    ENUM[533] = :LavaFloorTrackW ; NUME[:LavaFloorTrackW] = 533 ; Caption[:LavaFloorTrackW] = 'obsidian floor track W' ; Shape[:LavaFloorTrackW] = :FLOOR ; Material[:LavaFloorTrackW] = :LAVA_STONE ; Special[:LavaFloorTrackW] = :TRACK ; Direction[:LavaFloorTrackW] = 'W'
    ENUM[534] = :LavaFloorTrackNS ; NUME[:LavaFloorTrackNS] = 534 ; Caption[:LavaFloorTrackNS] = 'obsidian floor track NS' ; Shape[:LavaFloorTrackNS] = :FLOOR ; Material[:LavaFloorTrackNS] = :LAVA_STONE ; Special[:LavaFloorTrackNS] = :TRACK ; Direction[:LavaFloorTrackNS] = 'NS'
    ENUM[535] = :LavaFloorTrackNE ; NUME[:LavaFloorTrackNE] = 535 ; Caption[:LavaFloorTrackNE] = 'obsidian floor track NE' ; Shape[:LavaFloorTrackNE] = :FLOOR ; Material[:LavaFloorTrackNE] = :LAVA_STONE ; Special[:LavaFloorTrackNE] = :TRACK ; Direction[:LavaFloorTrackNE] = 'NE'
    ENUM[536] = :LavaFloorTrackNW ; NUME[:LavaFloorTrackNW] = 536 ; Caption[:LavaFloorTrackNW] = 'obsidian floor track NW' ; Shape[:LavaFloorTrackNW] = :FLOOR ; Material[:LavaFloorTrackNW] = :LAVA_STONE ; Special[:LavaFloorTrackNW] = :TRACK ; Direction[:LavaFloorTrackNW] = 'NW'
    ENUM[537] = :LavaFloorTrackSE ; NUME[:LavaFloorTrackSE] = 537 ; Caption[:LavaFloorTrackSE] = 'obsidian floor track SE' ; Shape[:LavaFloorTrackSE] = :FLOOR ; Material[:LavaFloorTrackSE] = :LAVA_STONE ; Special[:LavaFloorTrackSE] = :TRACK ; Direction[:LavaFloorTrackSE] = 'SE'
    ENUM[538] = :LavaFloorTrackSW ; NUME[:LavaFloorTrackSW] = 538 ; Caption[:LavaFloorTrackSW] = 'obsidian floor track SW' ; Shape[:LavaFloorTrackSW] = :FLOOR ; Material[:LavaFloorTrackSW] = :LAVA_STONE ; Special[:LavaFloorTrackSW] = :TRACK ; Direction[:LavaFloorTrackSW] = 'SW'
    ENUM[539] = :LavaFloorTrackEW ; NUME[:LavaFloorTrackEW] = 539 ; Caption[:LavaFloorTrackEW] = 'obsidian floor track EW' ; Shape[:LavaFloorTrackEW] = :FLOOR ; Material[:LavaFloorTrackEW] = :LAVA_STONE ; Special[:LavaFloorTrackEW] = :TRACK ; Direction[:LavaFloorTrackEW] = 'EW'
    ENUM[540] = :LavaFloorTrackNSE ; NUME[:LavaFloorTrackNSE] = 540 ; Caption[:LavaFloorTrackNSE] = 'obsidian floor track NSE' ; Shape[:LavaFloorTrackNSE] = :FLOOR ; Material[:LavaFloorTrackNSE] = :LAVA_STONE ; Special[:LavaFloorTrackNSE] = :TRACK ; Direction[:LavaFloorTrackNSE] = 'NSE'
    ENUM[541] = :LavaFloorTrackNSW ; NUME[:LavaFloorTrackNSW] = 541 ; Caption[:LavaFloorTrackNSW] = 'obsidian floor track NSW' ; Shape[:LavaFloorTrackNSW] = :FLOOR ; Material[:LavaFloorTrackNSW] = :LAVA_STONE ; Special[:LavaFloorTrackNSW] = :TRACK ; Direction[:LavaFloorTrackNSW] = 'NSW'
    ENUM[542] = :LavaFloorTrackNEW ; NUME[:LavaFloorTrackNEW] = 542 ; Caption[:LavaFloorTrackNEW] = 'obsidian floor track NEW' ; Shape[:LavaFloorTrackNEW] = :FLOOR ; Material[:LavaFloorTrackNEW] = :LAVA_STONE ; Special[:LavaFloorTrackNEW] = :TRACK ; Direction[:LavaFloorTrackNEW] = 'NEW'
    ENUM[543] = :LavaFloorTrackSEW ; NUME[:LavaFloorTrackSEW] = 543 ; Caption[:LavaFloorTrackSEW] = 'obsidian floor track SEW' ; Shape[:LavaFloorTrackSEW] = :FLOOR ; Material[:LavaFloorTrackSEW] = :LAVA_STONE ; Special[:LavaFloorTrackSEW] = :TRACK ; Direction[:LavaFloorTrackSEW] = 'SEW'
    ENUM[544] = :LavaFloorTrackNSEW ; NUME[:LavaFloorTrackNSEW] = 544 ; Caption[:LavaFloorTrackNSEW] = 'obsidian floor track NSEW' ; Shape[:LavaFloorTrackNSEW] = :FLOOR ; Material[:LavaFloorTrackNSEW] = :LAVA_STONE ; Special[:LavaFloorTrackNSEW] = :TRACK ; Direction[:LavaFloorTrackNSEW] = 'NSEW'
    ENUM[545] = :FeatureFloorTrackN ; NUME[:FeatureFloorTrackN] = 545 ; Caption[:FeatureFloorTrackN] = 'featstone floor track N' ; Shape[:FeatureFloorTrackN] = :FLOOR ; Material[:FeatureFloorTrackN] = :FEATURE ; Special[:FeatureFloorTrackN] = :TRACK ; Direction[:FeatureFloorTrackN] = 'N'
    ENUM[546] = :FeatureFloorTrackS ; NUME[:FeatureFloorTrackS] = 546 ; Caption[:FeatureFloorTrackS] = 'featstone floor track S' ; Shape[:FeatureFloorTrackS] = :FLOOR ; Material[:FeatureFloorTrackS] = :FEATURE ; Special[:FeatureFloorTrackS] = :TRACK ; Direction[:FeatureFloorTrackS] = 'S'
    ENUM[547] = :FeatureFloorTrackE ; NUME[:FeatureFloorTrackE] = 547 ; Caption[:FeatureFloorTrackE] = 'featstone floor track E' ; Shape[:FeatureFloorTrackE] = :FLOOR ; Material[:FeatureFloorTrackE] = :FEATURE ; Special[:FeatureFloorTrackE] = :TRACK ; Direction[:FeatureFloorTrackE] = 'E'
    ENUM[548] = :FeatureFloorTrackW ; NUME[:FeatureFloorTrackW] = 548 ; Caption[:FeatureFloorTrackW] = 'featstone floor track W' ; Shape[:FeatureFloorTrackW] = :FLOOR ; Material[:FeatureFloorTrackW] = :FEATURE ; Special[:FeatureFloorTrackW] = :TRACK ; Direction[:FeatureFloorTrackW] = 'W'
    ENUM[549] = :FeatureFloorTrackNS ; NUME[:FeatureFloorTrackNS] = 549 ; Caption[:FeatureFloorTrackNS] = 'featstone floor track NS' ; Shape[:FeatureFloorTrackNS] = :FLOOR ; Material[:FeatureFloorTrackNS] = :FEATURE ; Special[:FeatureFloorTrackNS] = :TRACK ; Direction[:FeatureFloorTrackNS] = 'NS'
    ENUM[550] = :FeatureFloorTrackNE ; NUME[:FeatureFloorTrackNE] = 550 ; Caption[:FeatureFloorTrackNE] = 'featstone floor track NE' ; Shape[:FeatureFloorTrackNE] = :FLOOR ; Material[:FeatureFloorTrackNE] = :FEATURE ; Special[:FeatureFloorTrackNE] = :TRACK ; Direction[:FeatureFloorTrackNE] = 'NE'
    ENUM[551] = :FeatureFloorTrackNW ; NUME[:FeatureFloorTrackNW] = 551 ; Caption[:FeatureFloorTrackNW] = 'featstone floor track NW' ; Shape[:FeatureFloorTrackNW] = :FLOOR ; Material[:FeatureFloorTrackNW] = :FEATURE ; Special[:FeatureFloorTrackNW] = :TRACK ; Direction[:FeatureFloorTrackNW] = 'NW'
    ENUM[552] = :FeatureFloorTrackSE ; NUME[:FeatureFloorTrackSE] = 552 ; Caption[:FeatureFloorTrackSE] = 'featstone floor track SE' ; Shape[:FeatureFloorTrackSE] = :FLOOR ; Material[:FeatureFloorTrackSE] = :FEATURE ; Special[:FeatureFloorTrackSE] = :TRACK ; Direction[:FeatureFloorTrackSE] = 'SE'
    ENUM[553] = :FeatureFloorTrackSW ; NUME[:FeatureFloorTrackSW] = 553 ; Caption[:FeatureFloorTrackSW] = 'featstone floor track SW' ; Shape[:FeatureFloorTrackSW] = :FLOOR ; Material[:FeatureFloorTrackSW] = :FEATURE ; Special[:FeatureFloorTrackSW] = :TRACK ; Direction[:FeatureFloorTrackSW] = 'SW'
    ENUM[554] = :FeatureFloorTrackEW ; NUME[:FeatureFloorTrackEW] = 554 ; Caption[:FeatureFloorTrackEW] = 'featstone floor track EW' ; Shape[:FeatureFloorTrackEW] = :FLOOR ; Material[:FeatureFloorTrackEW] = :FEATURE ; Special[:FeatureFloorTrackEW] = :TRACK ; Direction[:FeatureFloorTrackEW] = 'EW'
    ENUM[555] = :FeatureFloorTrackNSE ; NUME[:FeatureFloorTrackNSE] = 555 ; Caption[:FeatureFloorTrackNSE] = 'featstone floor track NSE' ; Shape[:FeatureFloorTrackNSE] = :FLOOR ; Material[:FeatureFloorTrackNSE] = :FEATURE ; Special[:FeatureFloorTrackNSE] = :TRACK ; Direction[:FeatureFloorTrackNSE] = 'NSE'
    ENUM[556] = :FeatureFloorTrackNSW ; NUME[:FeatureFloorTrackNSW] = 556 ; Caption[:FeatureFloorTrackNSW] = 'featstone floor track NSW' ; Shape[:FeatureFloorTrackNSW] = :FLOOR ; Material[:FeatureFloorTrackNSW] = :FEATURE ; Special[:FeatureFloorTrackNSW] = :TRACK ; Direction[:FeatureFloorTrackNSW] = 'NSW'
    ENUM[557] = :FeatureFloorTrackNEW ; NUME[:FeatureFloorTrackNEW] = 557 ; Caption[:FeatureFloorTrackNEW] = 'featstone floor track NEW' ; Shape[:FeatureFloorTrackNEW] = :FLOOR ; Material[:FeatureFloorTrackNEW] = :FEATURE ; Special[:FeatureFloorTrackNEW] = :TRACK ; Direction[:FeatureFloorTrackNEW] = 'NEW'
    ENUM[558] = :FeatureFloorTrackSEW ; NUME[:FeatureFloorTrackSEW] = 558 ; Caption[:FeatureFloorTrackSEW] = 'featstone floor track SEW' ; Shape[:FeatureFloorTrackSEW] = :FLOOR ; Material[:FeatureFloorTrackSEW] = :FEATURE ; Special[:FeatureFloorTrackSEW] = :TRACK ; Direction[:FeatureFloorTrackSEW] = 'SEW'
    ENUM[559] = :FeatureFloorTrackNSEW ; NUME[:FeatureFloorTrackNSEW] = 559 ; Caption[:FeatureFloorTrackNSEW] = 'featstone floor track NSEW' ; Shape[:FeatureFloorTrackNSEW] = :FLOOR ; Material[:FeatureFloorTrackNSEW] = :FEATURE ; Special[:FeatureFloorTrackNSEW] = :TRACK ; Direction[:FeatureFloorTrackNSEW] = 'NSEW'
    ENUM[560] = :MineralFloorTrackN ; NUME[:MineralFloorTrackN] = 560 ; Caption[:MineralFloorTrackN] = 'vein floor track N' ; Shape[:MineralFloorTrackN] = :FLOOR ; Material[:MineralFloorTrackN] = :MINERAL ; Special[:MineralFloorTrackN] = :TRACK ; Direction[:MineralFloorTrackN] = 'N'
    ENUM[561] = :MineralFloorTrackS ; NUME[:MineralFloorTrackS] = 561 ; Caption[:MineralFloorTrackS] = 'vein floor track S' ; Shape[:MineralFloorTrackS] = :FLOOR ; Material[:MineralFloorTrackS] = :MINERAL ; Special[:MineralFloorTrackS] = :TRACK ; Direction[:MineralFloorTrackS] = 'S'
    ENUM[562] = :MineralFloorTrackE ; NUME[:MineralFloorTrackE] = 562 ; Caption[:MineralFloorTrackE] = 'vein floor track E' ; Shape[:MineralFloorTrackE] = :FLOOR ; Material[:MineralFloorTrackE] = :MINERAL ; Special[:MineralFloorTrackE] = :TRACK ; Direction[:MineralFloorTrackE] = 'E'
    ENUM[563] = :MineralFloorTrackW ; NUME[:MineralFloorTrackW] = 563 ; Caption[:MineralFloorTrackW] = 'vein floor track W' ; Shape[:MineralFloorTrackW] = :FLOOR ; Material[:MineralFloorTrackW] = :MINERAL ; Special[:MineralFloorTrackW] = :TRACK ; Direction[:MineralFloorTrackW] = 'W'
    ENUM[564] = :MineralFloorTrackNS ; NUME[:MineralFloorTrackNS] = 564 ; Caption[:MineralFloorTrackNS] = 'vein floor track NS' ; Shape[:MineralFloorTrackNS] = :FLOOR ; Material[:MineralFloorTrackNS] = :MINERAL ; Special[:MineralFloorTrackNS] = :TRACK ; Direction[:MineralFloorTrackNS] = 'NS'
    ENUM[565] = :MineralFloorTrackNE ; NUME[:MineralFloorTrackNE] = 565 ; Caption[:MineralFloorTrackNE] = 'vein floor track NE' ; Shape[:MineralFloorTrackNE] = :FLOOR ; Material[:MineralFloorTrackNE] = :MINERAL ; Special[:MineralFloorTrackNE] = :TRACK ; Direction[:MineralFloorTrackNE] = 'NE'
    ENUM[566] = :MineralFloorTrackNW ; NUME[:MineralFloorTrackNW] = 566 ; Caption[:MineralFloorTrackNW] = 'vein floor track NW' ; Shape[:MineralFloorTrackNW] = :FLOOR ; Material[:MineralFloorTrackNW] = :MINERAL ; Special[:MineralFloorTrackNW] = :TRACK ; Direction[:MineralFloorTrackNW] = 'NW'
    ENUM[567] = :MineralFloorTrackSE ; NUME[:MineralFloorTrackSE] = 567 ; Caption[:MineralFloorTrackSE] = 'vein floor track SE' ; Shape[:MineralFloorTrackSE] = :FLOOR ; Material[:MineralFloorTrackSE] = :MINERAL ; Special[:MineralFloorTrackSE] = :TRACK ; Direction[:MineralFloorTrackSE] = 'SE'
    ENUM[568] = :MineralFloorTrackSW ; NUME[:MineralFloorTrackSW] = 568 ; Caption[:MineralFloorTrackSW] = 'vein floor track SW' ; Shape[:MineralFloorTrackSW] = :FLOOR ; Material[:MineralFloorTrackSW] = :MINERAL ; Special[:MineralFloorTrackSW] = :TRACK ; Direction[:MineralFloorTrackSW] = 'SW'
    ENUM[569] = :MineralFloorTrackEW ; NUME[:MineralFloorTrackEW] = 569 ; Caption[:MineralFloorTrackEW] = 'vein floor track EW' ; Shape[:MineralFloorTrackEW] = :FLOOR ; Material[:MineralFloorTrackEW] = :MINERAL ; Special[:MineralFloorTrackEW] = :TRACK ; Direction[:MineralFloorTrackEW] = 'EW'
    ENUM[570] = :MineralFloorTrackNSE ; NUME[:MineralFloorTrackNSE] = 570 ; Caption[:MineralFloorTrackNSE] = 'vein floor track NSE' ; Shape[:MineralFloorTrackNSE] = :FLOOR ; Material[:MineralFloorTrackNSE] = :MINERAL ; Special[:MineralFloorTrackNSE] = :TRACK ; Direction[:MineralFloorTrackNSE] = 'NSE'
    ENUM[571] = :MineralFloorTrackNSW ; NUME[:MineralFloorTrackNSW] = 571 ; Caption[:MineralFloorTrackNSW] = 'vein floor track NSW' ; Shape[:MineralFloorTrackNSW] = :FLOOR ; Material[:MineralFloorTrackNSW] = :MINERAL ; Special[:MineralFloorTrackNSW] = :TRACK ; Direction[:MineralFloorTrackNSW] = 'NSW'
    ENUM[572] = :MineralFloorTrackNEW ; NUME[:MineralFloorTrackNEW] = 572 ; Caption[:MineralFloorTrackNEW] = 'vein floor track NEW' ; Shape[:MineralFloorTrackNEW] = :FLOOR ; Material[:MineralFloorTrackNEW] = :MINERAL ; Special[:MineralFloorTrackNEW] = :TRACK ; Direction[:MineralFloorTrackNEW] = 'NEW'
    ENUM[573] = :MineralFloorTrackSEW ; NUME[:MineralFloorTrackSEW] = 573 ; Caption[:MineralFloorTrackSEW] = 'vein floor track SEW' ; Shape[:MineralFloorTrackSEW] = :FLOOR ; Material[:MineralFloorTrackSEW] = :MINERAL ; Special[:MineralFloorTrackSEW] = :TRACK ; Direction[:MineralFloorTrackSEW] = 'SEW'
    ENUM[574] = :MineralFloorTrackNSEW ; NUME[:MineralFloorTrackNSEW] = 574 ; Caption[:MineralFloorTrackNSEW] = 'vein floor track NSEW' ; Shape[:MineralFloorTrackNSEW] = :FLOOR ; Material[:MineralFloorTrackNSEW] = :MINERAL ; Special[:MineralFloorTrackNSEW] = :TRACK ; Direction[:MineralFloorTrackNSEW] = 'NSEW'
    ENUM[575] = :FrozenFloorTrackN ; NUME[:FrozenFloorTrackN] = 575 ; Caption[:FrozenFloorTrackN] = 'ice floor track N' ; Shape[:FrozenFloorTrackN] = :FLOOR ; Material[:FrozenFloorTrackN] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackN] = :TRACK ; Direction[:FrozenFloorTrackN] = 'N'
    ENUM[576] = :FrozenFloorTrackS ; NUME[:FrozenFloorTrackS] = 576 ; Caption[:FrozenFloorTrackS] = 'ice floor track S' ; Shape[:FrozenFloorTrackS] = :FLOOR ; Material[:FrozenFloorTrackS] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackS] = :TRACK ; Direction[:FrozenFloorTrackS] = 'S'
    ENUM[577] = :FrozenFloorTrackE ; NUME[:FrozenFloorTrackE] = 577 ; Caption[:FrozenFloorTrackE] = 'ice floor track E' ; Shape[:FrozenFloorTrackE] = :FLOOR ; Material[:FrozenFloorTrackE] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackE] = :TRACK ; Direction[:FrozenFloorTrackE] = 'E'
    ENUM[578] = :FrozenFloorTrackW ; NUME[:FrozenFloorTrackW] = 578 ; Caption[:FrozenFloorTrackW] = 'ice floor track W' ; Shape[:FrozenFloorTrackW] = :FLOOR ; Material[:FrozenFloorTrackW] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackW] = :TRACK ; Direction[:FrozenFloorTrackW] = 'W'
    ENUM[579] = :FrozenFloorTrackNS ; NUME[:FrozenFloorTrackNS] = 579 ; Caption[:FrozenFloorTrackNS] = 'ice floor track NS' ; Shape[:FrozenFloorTrackNS] = :FLOOR ; Material[:FrozenFloorTrackNS] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackNS] = :TRACK ; Direction[:FrozenFloorTrackNS] = 'NS'
    ENUM[580] = :FrozenFloorTrackNE ; NUME[:FrozenFloorTrackNE] = 580 ; Caption[:FrozenFloorTrackNE] = 'ice floor track NE' ; Shape[:FrozenFloorTrackNE] = :FLOOR ; Material[:FrozenFloorTrackNE] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackNE] = :TRACK ; Direction[:FrozenFloorTrackNE] = 'NE'
    ENUM[581] = :FrozenFloorTrackNW ; NUME[:FrozenFloorTrackNW] = 581 ; Caption[:FrozenFloorTrackNW] = 'ice floor track NW' ; Shape[:FrozenFloorTrackNW] = :FLOOR ; Material[:FrozenFloorTrackNW] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackNW] = :TRACK ; Direction[:FrozenFloorTrackNW] = 'NW'
    ENUM[582] = :FrozenFloorTrackSE ; NUME[:FrozenFloorTrackSE] = 582 ; Caption[:FrozenFloorTrackSE] = 'ice floor track SE' ; Shape[:FrozenFloorTrackSE] = :FLOOR ; Material[:FrozenFloorTrackSE] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackSE] = :TRACK ; Direction[:FrozenFloorTrackSE] = 'SE'
    ENUM[583] = :FrozenFloorTrackSW ; NUME[:FrozenFloorTrackSW] = 583 ; Caption[:FrozenFloorTrackSW] = 'ice floor track SW' ; Shape[:FrozenFloorTrackSW] = :FLOOR ; Material[:FrozenFloorTrackSW] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackSW] = :TRACK ; Direction[:FrozenFloorTrackSW] = 'SW'
    ENUM[584] = :FrozenFloorTrackEW ; NUME[:FrozenFloorTrackEW] = 584 ; Caption[:FrozenFloorTrackEW] = 'ice floor track EW' ; Shape[:FrozenFloorTrackEW] = :FLOOR ; Material[:FrozenFloorTrackEW] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackEW] = :TRACK ; Direction[:FrozenFloorTrackEW] = 'EW'
    ENUM[585] = :FrozenFloorTrackNSE ; NUME[:FrozenFloorTrackNSE] = 585 ; Caption[:FrozenFloorTrackNSE] = 'ice floor track NSE' ; Shape[:FrozenFloorTrackNSE] = :FLOOR ; Material[:FrozenFloorTrackNSE] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackNSE] = :TRACK ; Direction[:FrozenFloorTrackNSE] = 'NSE'
    ENUM[586] = :FrozenFloorTrackNSW ; NUME[:FrozenFloorTrackNSW] = 586 ; Caption[:FrozenFloorTrackNSW] = 'ice floor track NSW' ; Shape[:FrozenFloorTrackNSW] = :FLOOR ; Material[:FrozenFloorTrackNSW] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackNSW] = :TRACK ; Direction[:FrozenFloorTrackNSW] = 'NSW'
    ENUM[587] = :FrozenFloorTrackNEW ; NUME[:FrozenFloorTrackNEW] = 587 ; Caption[:FrozenFloorTrackNEW] = 'ice floor track NEW' ; Shape[:FrozenFloorTrackNEW] = :FLOOR ; Material[:FrozenFloorTrackNEW] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackNEW] = :TRACK ; Direction[:FrozenFloorTrackNEW] = 'NEW'
    ENUM[588] = :FrozenFloorTrackSEW ; NUME[:FrozenFloorTrackSEW] = 588 ; Caption[:FrozenFloorTrackSEW] = 'ice floor track SEW' ; Shape[:FrozenFloorTrackSEW] = :FLOOR ; Material[:FrozenFloorTrackSEW] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackSEW] = :TRACK ; Direction[:FrozenFloorTrackSEW] = 'SEW'
    ENUM[589] = :FrozenFloorTrackNSEW ; NUME[:FrozenFloorTrackNSEW] = 589 ; Caption[:FrozenFloorTrackNSEW] = 'ice floor track NSEW' ; Shape[:FrozenFloorTrackNSEW] = :FLOOR ; Material[:FrozenFloorTrackNSEW] = :FROZEN_LIQUID ; Special[:FrozenFloorTrackNSEW] = :TRACK ; Direction[:FrozenFloorTrackNSEW] = 'NSEW'
    ENUM[590] = :ConstructedFloorTrackN ; NUME[:ConstructedFloorTrackN] = 590 ; Caption[:ConstructedFloorTrackN] = 'constructed floor track N' ; Shape[:ConstructedFloorTrackN] = :FLOOR ; Material[:ConstructedFloorTrackN] = :CONSTRUCTION ; Special[:ConstructedFloorTrackN] = :TRACK ; Direction[:ConstructedFloorTrackN] = 'N'
    ENUM[591] = :ConstructedFloorTrackS ; NUME[:ConstructedFloorTrackS] = 591 ; Caption[:ConstructedFloorTrackS] = 'constructed floor track S' ; Shape[:ConstructedFloorTrackS] = :FLOOR ; Material[:ConstructedFloorTrackS] = :CONSTRUCTION ; Special[:ConstructedFloorTrackS] = :TRACK ; Direction[:ConstructedFloorTrackS] = 'S'
    ENUM[592] = :ConstructedFloorTrackE ; NUME[:ConstructedFloorTrackE] = 592 ; Caption[:ConstructedFloorTrackE] = 'constructed floor track E' ; Shape[:ConstructedFloorTrackE] = :FLOOR ; Material[:ConstructedFloorTrackE] = :CONSTRUCTION ; Special[:ConstructedFloorTrackE] = :TRACK ; Direction[:ConstructedFloorTrackE] = 'E'
    ENUM[593] = :ConstructedFloorTrackW ; NUME[:ConstructedFloorTrackW] = 593 ; Caption[:ConstructedFloorTrackW] = 'constructed floor track W' ; Shape[:ConstructedFloorTrackW] = :FLOOR ; Material[:ConstructedFloorTrackW] = :CONSTRUCTION ; Special[:ConstructedFloorTrackW] = :TRACK ; Direction[:ConstructedFloorTrackW] = 'W'
    ENUM[594] = :ConstructedFloorTrackNS ; NUME[:ConstructedFloorTrackNS] = 594 ; Caption[:ConstructedFloorTrackNS] = 'constructed floor track NS' ; Shape[:ConstructedFloorTrackNS] = :FLOOR ; Material[:ConstructedFloorTrackNS] = :CONSTRUCTION ; Special[:ConstructedFloorTrackNS] = :TRACK ; Direction[:ConstructedFloorTrackNS] = 'NS'
    ENUM[595] = :ConstructedFloorTrackNE ; NUME[:ConstructedFloorTrackNE] = 595 ; Caption[:ConstructedFloorTrackNE] = 'constructed floor track NE' ; Shape[:ConstructedFloorTrackNE] = :FLOOR ; Material[:ConstructedFloorTrackNE] = :CONSTRUCTION ; Special[:ConstructedFloorTrackNE] = :TRACK ; Direction[:ConstructedFloorTrackNE] = 'NE'
    ENUM[596] = :ConstructedFloorTrackNW ; NUME[:ConstructedFloorTrackNW] = 596 ; Caption[:ConstructedFloorTrackNW] = 'constructed floor track NW' ; Shape[:ConstructedFloorTrackNW] = :FLOOR ; Material[:ConstructedFloorTrackNW] = :CONSTRUCTION ; Special[:ConstructedFloorTrackNW] = :TRACK ; Direction[:ConstructedFloorTrackNW] = 'NW'
    ENUM[597] = :ConstructedFloorTrackSE ; NUME[:ConstructedFloorTrackSE] = 597 ; Caption[:ConstructedFloorTrackSE] = 'constructed floor track SE' ; Shape[:ConstructedFloorTrackSE] = :FLOOR ; Material[:ConstructedFloorTrackSE] = :CONSTRUCTION ; Special[:ConstructedFloorTrackSE] = :TRACK ; Direction[:ConstructedFloorTrackSE] = 'SE'
    ENUM[598] = :ConstructedFloorTrackSW ; NUME[:ConstructedFloorTrackSW] = 598 ; Caption[:ConstructedFloorTrackSW] = 'constructed floor track SW' ; Shape[:ConstructedFloorTrackSW] = :FLOOR ; Material[:ConstructedFloorTrackSW] = :CONSTRUCTION ; Special[:ConstructedFloorTrackSW] = :TRACK ; Direction[:ConstructedFloorTrackSW] = 'SW'
    ENUM[599] = :ConstructedFloorTrackEW ; NUME[:ConstructedFloorTrackEW] = 599 ; Caption[:ConstructedFloorTrackEW] = 'constructed floor track EW' ; Shape[:ConstructedFloorTrackEW] = :FLOOR ; Material[:ConstructedFloorTrackEW] = :CONSTRUCTION ; Special[:ConstructedFloorTrackEW] = :TRACK ; Direction[:ConstructedFloorTrackEW] = 'EW'
    ENUM[600] = :ConstructedFloorTrackNSE ; NUME[:ConstructedFloorTrackNSE] = 600 ; Caption[:ConstructedFloorTrackNSE] = 'constructed floor track NSE' ; Shape[:ConstructedFloorTrackNSE] = :FLOOR ; Material[:ConstructedFloorTrackNSE] = :CONSTRUCTION ; Special[:ConstructedFloorTrackNSE] = :TRACK ; Direction[:ConstructedFloorTrackNSE] = 'NSE'
    ENUM[601] = :ConstructedFloorTrackNSW ; NUME[:ConstructedFloorTrackNSW] = 601 ; Caption[:ConstructedFloorTrackNSW] = 'constructed floor track NSW' ; Shape[:ConstructedFloorTrackNSW] = :FLOOR ; Material[:ConstructedFloorTrackNSW] = :CONSTRUCTION ; Special[:ConstructedFloorTrackNSW] = :TRACK ; Direction[:ConstructedFloorTrackNSW] = 'NSW'
    ENUM[602] = :ConstructedFloorTrackNEW ; NUME[:ConstructedFloorTrackNEW] = 602 ; Caption[:ConstructedFloorTrackNEW] = 'constructed floor track NEW' ; Shape[:ConstructedFloorTrackNEW] = :FLOOR ; Material[:ConstructedFloorTrackNEW] = :CONSTRUCTION ; Special[:ConstructedFloorTrackNEW] = :TRACK ; Direction[:ConstructedFloorTrackNEW] = 'NEW'
    ENUM[603] = :ConstructedFloorTrackSEW ; NUME[:ConstructedFloorTrackSEW] = 603 ; Caption[:ConstructedFloorTrackSEW] = 'constructed floor track SEW' ; Shape[:ConstructedFloorTrackSEW] = :FLOOR ; Material[:ConstructedFloorTrackSEW] = :CONSTRUCTION ; Special[:ConstructedFloorTrackSEW] = :TRACK ; Direction[:ConstructedFloorTrackSEW] = 'SEW'
    ENUM[604] = :ConstructedFloorTrackNSEW ; NUME[:ConstructedFloorTrackNSEW] = 604 ; Caption[:ConstructedFloorTrackNSEW] = 'constructed floor track NSEW' ; Shape[:ConstructedFloorTrackNSEW] = :FLOOR ; Material[:ConstructedFloorTrackNSEW] = :CONSTRUCTION ; Special[:ConstructedFloorTrackNSEW] = :TRACK ; Direction[:ConstructedFloorTrackNSEW] = 'NSEW'
    ENUM[605] = :StoneRampTrackN ; NUME[:StoneRampTrackN] = 605 ; Caption[:StoneRampTrackN] = 'stone ramp track N' ; Shape[:StoneRampTrackN] = :RAMP ; Material[:StoneRampTrackN] = :STONE ; Special[:StoneRampTrackN] = :TRACK ; Direction[:StoneRampTrackN] = 'N'
    ENUM[606] = :StoneRampTrackS ; NUME[:StoneRampTrackS] = 606 ; Caption[:StoneRampTrackS] = 'stone ramp track S' ; Shape[:StoneRampTrackS] = :RAMP ; Material[:StoneRampTrackS] = :STONE ; Special[:StoneRampTrackS] = :TRACK ; Direction[:StoneRampTrackS] = 'S'
    ENUM[607] = :StoneRampTrackE ; NUME[:StoneRampTrackE] = 607 ; Caption[:StoneRampTrackE] = 'stone ramp track E' ; Shape[:StoneRampTrackE] = :RAMP ; Material[:StoneRampTrackE] = :STONE ; Special[:StoneRampTrackE] = :TRACK ; Direction[:StoneRampTrackE] = 'E'
    ENUM[608] = :StoneRampTrackW ; NUME[:StoneRampTrackW] = 608 ; Caption[:StoneRampTrackW] = 'stone ramp track W' ; Shape[:StoneRampTrackW] = :RAMP ; Material[:StoneRampTrackW] = :STONE ; Special[:StoneRampTrackW] = :TRACK ; Direction[:StoneRampTrackW] = 'W'
    ENUM[609] = :StoneRampTrackNS ; NUME[:StoneRampTrackNS] = 609 ; Caption[:StoneRampTrackNS] = 'stone ramp track NS' ; Shape[:StoneRampTrackNS] = :RAMP ; Material[:StoneRampTrackNS] = :STONE ; Special[:StoneRampTrackNS] = :TRACK ; Direction[:StoneRampTrackNS] = 'NS'
    ENUM[610] = :StoneRampTrackNE ; NUME[:StoneRampTrackNE] = 610 ; Caption[:StoneRampTrackNE] = 'stone ramp track NE' ; Shape[:StoneRampTrackNE] = :RAMP ; Material[:StoneRampTrackNE] = :STONE ; Special[:StoneRampTrackNE] = :TRACK ; Direction[:StoneRampTrackNE] = 'NE'
    ENUM[611] = :StoneRampTrackNW ; NUME[:StoneRampTrackNW] = 611 ; Caption[:StoneRampTrackNW] = 'stone ramp track NW' ; Shape[:StoneRampTrackNW] = :RAMP ; Material[:StoneRampTrackNW] = :STONE ; Special[:StoneRampTrackNW] = :TRACK ; Direction[:StoneRampTrackNW] = 'NW'
    ENUM[612] = :StoneRampTrackSE ; NUME[:StoneRampTrackSE] = 612 ; Caption[:StoneRampTrackSE] = 'stone ramp track SE' ; Shape[:StoneRampTrackSE] = :RAMP ; Material[:StoneRampTrackSE] = :STONE ; Special[:StoneRampTrackSE] = :TRACK ; Direction[:StoneRampTrackSE] = 'SE'
    ENUM[613] = :StoneRampTrackSW ; NUME[:StoneRampTrackSW] = 613 ; Caption[:StoneRampTrackSW] = 'stone ramp track SW' ; Shape[:StoneRampTrackSW] = :RAMP ; Material[:StoneRampTrackSW] = :STONE ; Special[:StoneRampTrackSW] = :TRACK ; Direction[:StoneRampTrackSW] = 'SW'
    ENUM[614] = :StoneRampTrackEW ; NUME[:StoneRampTrackEW] = 614 ; Caption[:StoneRampTrackEW] = 'stone ramp track EW' ; Shape[:StoneRampTrackEW] = :RAMP ; Material[:StoneRampTrackEW] = :STONE ; Special[:StoneRampTrackEW] = :TRACK ; Direction[:StoneRampTrackEW] = 'EW'
    ENUM[615] = :StoneRampTrackNSE ; NUME[:StoneRampTrackNSE] = 615 ; Caption[:StoneRampTrackNSE] = 'stone ramp track NSE' ; Shape[:StoneRampTrackNSE] = :RAMP ; Material[:StoneRampTrackNSE] = :STONE ; Special[:StoneRampTrackNSE] = :TRACK ; Direction[:StoneRampTrackNSE] = 'NSE'
    ENUM[616] = :StoneRampTrackNSW ; NUME[:StoneRampTrackNSW] = 616 ; Caption[:StoneRampTrackNSW] = 'stone ramp track NSW' ; Shape[:StoneRampTrackNSW] = :RAMP ; Material[:StoneRampTrackNSW] = :STONE ; Special[:StoneRampTrackNSW] = :TRACK ; Direction[:StoneRampTrackNSW] = 'NSW'
    ENUM[617] = :StoneRampTrackNEW ; NUME[:StoneRampTrackNEW] = 617 ; Caption[:StoneRampTrackNEW] = 'stone ramp track NEW' ; Shape[:StoneRampTrackNEW] = :RAMP ; Material[:StoneRampTrackNEW] = :STONE ; Special[:StoneRampTrackNEW] = :TRACK ; Direction[:StoneRampTrackNEW] = 'NEW'
    ENUM[618] = :StoneRampTrackSEW ; NUME[:StoneRampTrackSEW] = 618 ; Caption[:StoneRampTrackSEW] = 'stone ramp track SEW' ; Shape[:StoneRampTrackSEW] = :RAMP ; Material[:StoneRampTrackSEW] = :STONE ; Special[:StoneRampTrackSEW] = :TRACK ; Direction[:StoneRampTrackSEW] = 'SEW'
    ENUM[619] = :StoneRampTrackNSEW ; NUME[:StoneRampTrackNSEW] = 619 ; Caption[:StoneRampTrackNSEW] = 'stone ramp track NSEW' ; Shape[:StoneRampTrackNSEW] = :RAMP ; Material[:StoneRampTrackNSEW] = :STONE ; Special[:StoneRampTrackNSEW] = :TRACK ; Direction[:StoneRampTrackNSEW] = 'NSEW'
    ENUM[620] = :LavaRampTrackN ; NUME[:LavaRampTrackN] = 620 ; Caption[:LavaRampTrackN] = 'obsidian ramp track N' ; Shape[:LavaRampTrackN] = :RAMP ; Material[:LavaRampTrackN] = :LAVA_STONE ; Special[:LavaRampTrackN] = :TRACK ; Direction[:LavaRampTrackN] = 'N'
    ENUM[621] = :LavaRampTrackS ; NUME[:LavaRampTrackS] = 621 ; Caption[:LavaRampTrackS] = 'obsidian ramp track S' ; Shape[:LavaRampTrackS] = :RAMP ; Material[:LavaRampTrackS] = :LAVA_STONE ; Special[:LavaRampTrackS] = :TRACK ; Direction[:LavaRampTrackS] = 'S'
    ENUM[622] = :LavaRampTrackE ; NUME[:LavaRampTrackE] = 622 ; Caption[:LavaRampTrackE] = 'obsidian ramp track E' ; Shape[:LavaRampTrackE] = :RAMP ; Material[:LavaRampTrackE] = :LAVA_STONE ; Special[:LavaRampTrackE] = :TRACK ; Direction[:LavaRampTrackE] = 'E'
    ENUM[623] = :LavaRampTrackW ; NUME[:LavaRampTrackW] = 623 ; Caption[:LavaRampTrackW] = 'obsidian ramp track W' ; Shape[:LavaRampTrackW] = :RAMP ; Material[:LavaRampTrackW] = :LAVA_STONE ; Special[:LavaRampTrackW] = :TRACK ; Direction[:LavaRampTrackW] = 'W'
    ENUM[624] = :LavaRampTrackNS ; NUME[:LavaRampTrackNS] = 624 ; Caption[:LavaRampTrackNS] = 'obsidian ramp track NS' ; Shape[:LavaRampTrackNS] = :RAMP ; Material[:LavaRampTrackNS] = :LAVA_STONE ; Special[:LavaRampTrackNS] = :TRACK ; Direction[:LavaRampTrackNS] = 'NS'
    ENUM[625] = :LavaRampTrackNE ; NUME[:LavaRampTrackNE] = 625 ; Caption[:LavaRampTrackNE] = 'obsidian ramp track NE' ; Shape[:LavaRampTrackNE] = :RAMP ; Material[:LavaRampTrackNE] = :LAVA_STONE ; Special[:LavaRampTrackNE] = :TRACK ; Direction[:LavaRampTrackNE] = 'NE'
    ENUM[626] = :LavaRampTrackNW ; NUME[:LavaRampTrackNW] = 626 ; Caption[:LavaRampTrackNW] = 'obsidian ramp track NW' ; Shape[:LavaRampTrackNW] = :RAMP ; Material[:LavaRampTrackNW] = :LAVA_STONE ; Special[:LavaRampTrackNW] = :TRACK ; Direction[:LavaRampTrackNW] = 'NW'
    ENUM[627] = :LavaRampTrackSE ; NUME[:LavaRampTrackSE] = 627 ; Caption[:LavaRampTrackSE] = 'obsidian ramp track SE' ; Shape[:LavaRampTrackSE] = :RAMP ; Material[:LavaRampTrackSE] = :LAVA_STONE ; Special[:LavaRampTrackSE] = :TRACK ; Direction[:LavaRampTrackSE] = 'SE'
    ENUM[628] = :LavaRampTrackSW ; NUME[:LavaRampTrackSW] = 628 ; Caption[:LavaRampTrackSW] = 'obsidian ramp track SW' ; Shape[:LavaRampTrackSW] = :RAMP ; Material[:LavaRampTrackSW] = :LAVA_STONE ; Special[:LavaRampTrackSW] = :TRACK ; Direction[:LavaRampTrackSW] = 'SW'
    ENUM[629] = :LavaRampTrackEW ; NUME[:LavaRampTrackEW] = 629 ; Caption[:LavaRampTrackEW] = 'obsidian ramp track EW' ; Shape[:LavaRampTrackEW] = :RAMP ; Material[:LavaRampTrackEW] = :LAVA_STONE ; Special[:LavaRampTrackEW] = :TRACK ; Direction[:LavaRampTrackEW] = 'EW'
    ENUM[630] = :LavaRampTrackNSE ; NUME[:LavaRampTrackNSE] = 630 ; Caption[:LavaRampTrackNSE] = 'obsidian ramp track NSE' ; Shape[:LavaRampTrackNSE] = :RAMP ; Material[:LavaRampTrackNSE] = :LAVA_STONE ; Special[:LavaRampTrackNSE] = :TRACK ; Direction[:LavaRampTrackNSE] = 'NSE'
    ENUM[631] = :LavaRampTrackNSW ; NUME[:LavaRampTrackNSW] = 631 ; Caption[:LavaRampTrackNSW] = 'obsidian ramp track NSW' ; Shape[:LavaRampTrackNSW] = :RAMP ; Material[:LavaRampTrackNSW] = :LAVA_STONE ; Special[:LavaRampTrackNSW] = :TRACK ; Direction[:LavaRampTrackNSW] = 'NSW'
    ENUM[632] = :LavaRampTrackNEW ; NUME[:LavaRampTrackNEW] = 632 ; Caption[:LavaRampTrackNEW] = 'obsidian ramp track NEW' ; Shape[:LavaRampTrackNEW] = :RAMP ; Material[:LavaRampTrackNEW] = :LAVA_STONE ; Special[:LavaRampTrackNEW] = :TRACK ; Direction[:LavaRampTrackNEW] = 'NEW'
    ENUM[633] = :LavaRampTrackSEW ; NUME[:LavaRampTrackSEW] = 633 ; Caption[:LavaRampTrackSEW] = 'obsidian ramp track SEW' ; Shape[:LavaRampTrackSEW] = :RAMP ; Material[:LavaRampTrackSEW] = :LAVA_STONE ; Special[:LavaRampTrackSEW] = :TRACK ; Direction[:LavaRampTrackSEW] = 'SEW'
    ENUM[634] = :LavaRampTrackNSEW ; NUME[:LavaRampTrackNSEW] = 634 ; Caption[:LavaRampTrackNSEW] = 'obsidian ramp track NSEW' ; Shape[:LavaRampTrackNSEW] = :RAMP ; Material[:LavaRampTrackNSEW] = :LAVA_STONE ; Special[:LavaRampTrackNSEW] = :TRACK ; Direction[:LavaRampTrackNSEW] = 'NSEW'
    ENUM[635] = :FeatureRampTrackN ; NUME[:FeatureRampTrackN] = 635 ; Caption[:FeatureRampTrackN] = 'featstone ramp track N' ; Shape[:FeatureRampTrackN] = :RAMP ; Material[:FeatureRampTrackN] = :FEATURE ; Special[:FeatureRampTrackN] = :TRACK ; Direction[:FeatureRampTrackN] = 'N'
    ENUM[636] = :FeatureRampTrackS ; NUME[:FeatureRampTrackS] = 636 ; Caption[:FeatureRampTrackS] = 'featstone ramp track S' ; Shape[:FeatureRampTrackS] = :RAMP ; Material[:FeatureRampTrackS] = :FEATURE ; Special[:FeatureRampTrackS] = :TRACK ; Direction[:FeatureRampTrackS] = 'S'
    ENUM[637] = :FeatureRampTrackE ; NUME[:FeatureRampTrackE] = 637 ; Caption[:FeatureRampTrackE] = 'featstone ramp track E' ; Shape[:FeatureRampTrackE] = :RAMP ; Material[:FeatureRampTrackE] = :FEATURE ; Special[:FeatureRampTrackE] = :TRACK ; Direction[:FeatureRampTrackE] = 'E'
    ENUM[638] = :FeatureRampTrackW ; NUME[:FeatureRampTrackW] = 638 ; Caption[:FeatureRampTrackW] = 'featstone ramp track W' ; Shape[:FeatureRampTrackW] = :RAMP ; Material[:FeatureRampTrackW] = :FEATURE ; Special[:FeatureRampTrackW] = :TRACK ; Direction[:FeatureRampTrackW] = 'W'
    ENUM[639] = :FeatureRampTrackNS ; NUME[:FeatureRampTrackNS] = 639 ; Caption[:FeatureRampTrackNS] = 'featstone ramp track NS' ; Shape[:FeatureRampTrackNS] = :RAMP ; Material[:FeatureRampTrackNS] = :FEATURE ; Special[:FeatureRampTrackNS] = :TRACK ; Direction[:FeatureRampTrackNS] = 'NS'
    ENUM[640] = :FeatureRampTrackNE ; NUME[:FeatureRampTrackNE] = 640 ; Caption[:FeatureRampTrackNE] = 'featstone ramp track NE' ; Shape[:FeatureRampTrackNE] = :RAMP ; Material[:FeatureRampTrackNE] = :FEATURE ; Special[:FeatureRampTrackNE] = :TRACK ; Direction[:FeatureRampTrackNE] = 'NE'
    ENUM[641] = :FeatureRampTrackNW ; NUME[:FeatureRampTrackNW] = 641 ; Caption[:FeatureRampTrackNW] = 'featstone ramp track NW' ; Shape[:FeatureRampTrackNW] = :RAMP ; Material[:FeatureRampTrackNW] = :FEATURE ; Special[:FeatureRampTrackNW] = :TRACK ; Direction[:FeatureRampTrackNW] = 'NW'
    ENUM[642] = :FeatureRampTrackSE ; NUME[:FeatureRampTrackSE] = 642 ; Caption[:FeatureRampTrackSE] = 'featstone ramp track SE' ; Shape[:FeatureRampTrackSE] = :RAMP ; Material[:FeatureRampTrackSE] = :FEATURE ; Special[:FeatureRampTrackSE] = :TRACK ; Direction[:FeatureRampTrackSE] = 'SE'
    ENUM[643] = :FeatureRampTrackSW ; NUME[:FeatureRampTrackSW] = 643 ; Caption[:FeatureRampTrackSW] = 'featstone ramp track SW' ; Shape[:FeatureRampTrackSW] = :RAMP ; Material[:FeatureRampTrackSW] = :FEATURE ; Special[:FeatureRampTrackSW] = :TRACK ; Direction[:FeatureRampTrackSW] = 'SW'
    ENUM[644] = :FeatureRampTrackEW ; NUME[:FeatureRampTrackEW] = 644 ; Caption[:FeatureRampTrackEW] = 'featstone ramp track EW' ; Shape[:FeatureRampTrackEW] = :RAMP ; Material[:FeatureRampTrackEW] = :FEATURE ; Special[:FeatureRampTrackEW] = :TRACK ; Direction[:FeatureRampTrackEW] = 'EW'
    ENUM[645] = :FeatureRampTrackNSE ; NUME[:FeatureRampTrackNSE] = 645 ; Caption[:FeatureRampTrackNSE] = 'featstone ramp track NSE' ; Shape[:FeatureRampTrackNSE] = :RAMP ; Material[:FeatureRampTrackNSE] = :FEATURE ; Special[:FeatureRampTrackNSE] = :TRACK ; Direction[:FeatureRampTrackNSE] = 'NSE'
    ENUM[646] = :FeatureRampTrackNSW ; NUME[:FeatureRampTrackNSW] = 646 ; Caption[:FeatureRampTrackNSW] = 'featstone ramp track NSW' ; Shape[:FeatureRampTrackNSW] = :RAMP ; Material[:FeatureRampTrackNSW] = :FEATURE ; Special[:FeatureRampTrackNSW] = :TRACK ; Direction[:FeatureRampTrackNSW] = 'NSW'
    ENUM[647] = :FeatureRampTrackNEW ; NUME[:FeatureRampTrackNEW] = 647 ; Caption[:FeatureRampTrackNEW] = 'featstone ramp track NEW' ; Shape[:FeatureRampTrackNEW] = :RAMP ; Material[:FeatureRampTrackNEW] = :FEATURE ; Special[:FeatureRampTrackNEW] = :TRACK ; Direction[:FeatureRampTrackNEW] = 'NEW'
    ENUM[648] = :FeatureRampTrackSEW ; NUME[:FeatureRampTrackSEW] = 648 ; Caption[:FeatureRampTrackSEW] = 'featstone ramp track SEW' ; Shape[:FeatureRampTrackSEW] = :RAMP ; Material[:FeatureRampTrackSEW] = :FEATURE ; Special[:FeatureRampTrackSEW] = :TRACK ; Direction[:FeatureRampTrackSEW] = 'SEW'
    ENUM[649] = :FeatureRampTrackNSEW ; NUME[:FeatureRampTrackNSEW] = 649 ; Caption[:FeatureRampTrackNSEW] = 'featstone ramp track NSEW' ; Shape[:FeatureRampTrackNSEW] = :RAMP ; Material[:FeatureRampTrackNSEW] = :FEATURE ; Special[:FeatureRampTrackNSEW] = :TRACK ; Direction[:FeatureRampTrackNSEW] = 'NSEW'
    ENUM[650] = :MineralRampTrackN ; NUME[:MineralRampTrackN] = 650 ; Caption[:MineralRampTrackN] = 'vein ramp track N' ; Shape[:MineralRampTrackN] = :RAMP ; Material[:MineralRampTrackN] = :MINERAL ; Special[:MineralRampTrackN] = :TRACK ; Direction[:MineralRampTrackN] = 'N'
    ENUM[651] = :MineralRampTrackS ; NUME[:MineralRampTrackS] = 651 ; Caption[:MineralRampTrackS] = 'vein ramp track S' ; Shape[:MineralRampTrackS] = :RAMP ; Material[:MineralRampTrackS] = :MINERAL ; Special[:MineralRampTrackS] = :TRACK ; Direction[:MineralRampTrackS] = 'S'
    ENUM[652] = :MineralRampTrackE ; NUME[:MineralRampTrackE] = 652 ; Caption[:MineralRampTrackE] = 'vein ramp track E' ; Shape[:MineralRampTrackE] = :RAMP ; Material[:MineralRampTrackE] = :MINERAL ; Special[:MineralRampTrackE] = :TRACK ; Direction[:MineralRampTrackE] = 'E'
    ENUM[653] = :MineralRampTrackW ; NUME[:MineralRampTrackW] = 653 ; Caption[:MineralRampTrackW] = 'vein ramp track W' ; Shape[:MineralRampTrackW] = :RAMP ; Material[:MineralRampTrackW] = :MINERAL ; Special[:MineralRampTrackW] = :TRACK ; Direction[:MineralRampTrackW] = 'W'
    ENUM[654] = :MineralRampTrackNS ; NUME[:MineralRampTrackNS] = 654 ; Caption[:MineralRampTrackNS] = 'vein ramp track NS' ; Shape[:MineralRampTrackNS] = :RAMP ; Material[:MineralRampTrackNS] = :MINERAL ; Special[:MineralRampTrackNS] = :TRACK ; Direction[:MineralRampTrackNS] = 'NS'
    ENUM[655] = :MineralRampTrackNE ; NUME[:MineralRampTrackNE] = 655 ; Caption[:MineralRampTrackNE] = 'vein ramp track NE' ; Shape[:MineralRampTrackNE] = :RAMP ; Material[:MineralRampTrackNE] = :MINERAL ; Special[:MineralRampTrackNE] = :TRACK ; Direction[:MineralRampTrackNE] = 'NE'
    ENUM[656] = :MineralRampTrackNW ; NUME[:MineralRampTrackNW] = 656 ; Caption[:MineralRampTrackNW] = 'vein ramp track NW' ; Shape[:MineralRampTrackNW] = :RAMP ; Material[:MineralRampTrackNW] = :MINERAL ; Special[:MineralRampTrackNW] = :TRACK ; Direction[:MineralRampTrackNW] = 'NW'
    ENUM[657] = :MineralRampTrackSE ; NUME[:MineralRampTrackSE] = 657 ; Caption[:MineralRampTrackSE] = 'vein ramp track SE' ; Shape[:MineralRampTrackSE] = :RAMP ; Material[:MineralRampTrackSE] = :MINERAL ; Special[:MineralRampTrackSE] = :TRACK ; Direction[:MineralRampTrackSE] = 'SE'
    ENUM[658] = :MineralRampTrackSW ; NUME[:MineralRampTrackSW] = 658 ; Caption[:MineralRampTrackSW] = 'vein ramp track SW' ; Shape[:MineralRampTrackSW] = :RAMP ; Material[:MineralRampTrackSW] = :MINERAL ; Special[:MineralRampTrackSW] = :TRACK ; Direction[:MineralRampTrackSW] = 'SW'
    ENUM[659] = :MineralRampTrackEW ; NUME[:MineralRampTrackEW] = 659 ; Caption[:MineralRampTrackEW] = 'vein ramp track EW' ; Shape[:MineralRampTrackEW] = :RAMP ; Material[:MineralRampTrackEW] = :MINERAL ; Special[:MineralRampTrackEW] = :TRACK ; Direction[:MineralRampTrackEW] = 'EW'
    ENUM[660] = :MineralRampTrackNSE ; NUME[:MineralRampTrackNSE] = 660 ; Caption[:MineralRampTrackNSE] = 'vein ramp track NSE' ; Shape[:MineralRampTrackNSE] = :RAMP ; Material[:MineralRampTrackNSE] = :MINERAL ; Special[:MineralRampTrackNSE] = :TRACK ; Direction[:MineralRampTrackNSE] = 'NSE'
    ENUM[661] = :MineralRampTrackNSW ; NUME[:MineralRampTrackNSW] = 661 ; Caption[:MineralRampTrackNSW] = 'vein ramp track NSW' ; Shape[:MineralRampTrackNSW] = :RAMP ; Material[:MineralRampTrackNSW] = :MINERAL ; Special[:MineralRampTrackNSW] = :TRACK ; Direction[:MineralRampTrackNSW] = 'NSW'
    ENUM[662] = :MineralRampTrackNEW ; NUME[:MineralRampTrackNEW] = 662 ; Caption[:MineralRampTrackNEW] = 'vein ramp track NEW' ; Shape[:MineralRampTrackNEW] = :RAMP ; Material[:MineralRampTrackNEW] = :MINERAL ; Special[:MineralRampTrackNEW] = :TRACK ; Direction[:MineralRampTrackNEW] = 'NEW'
    ENUM[663] = :MineralRampTrackSEW ; NUME[:MineralRampTrackSEW] = 663 ; Caption[:MineralRampTrackSEW] = 'vein ramp track SEW' ; Shape[:MineralRampTrackSEW] = :RAMP ; Material[:MineralRampTrackSEW] = :MINERAL ; Special[:MineralRampTrackSEW] = :TRACK ; Direction[:MineralRampTrackSEW] = 'SEW'
    ENUM[664] = :MineralRampTrackNSEW ; NUME[:MineralRampTrackNSEW] = 664 ; Caption[:MineralRampTrackNSEW] = 'vein ramp track NSEW' ; Shape[:MineralRampTrackNSEW] = :RAMP ; Material[:MineralRampTrackNSEW] = :MINERAL ; Special[:MineralRampTrackNSEW] = :TRACK ; Direction[:MineralRampTrackNSEW] = 'NSEW'
    ENUM[665] = :FrozenRampTrackN ; NUME[:FrozenRampTrackN] = 665 ; Caption[:FrozenRampTrackN] = 'ice ramp track N' ; Shape[:FrozenRampTrackN] = :RAMP ; Material[:FrozenRampTrackN] = :FROZEN_LIQUID ; Special[:FrozenRampTrackN] = :TRACK ; Direction[:FrozenRampTrackN] = 'N'
    ENUM[666] = :FrozenRampTrackS ; NUME[:FrozenRampTrackS] = 666 ; Caption[:FrozenRampTrackS] = 'ice ramp track S' ; Shape[:FrozenRampTrackS] = :RAMP ; Material[:FrozenRampTrackS] = :FROZEN_LIQUID ; Special[:FrozenRampTrackS] = :TRACK ; Direction[:FrozenRampTrackS] = 'S'
    ENUM[667] = :FrozenRampTrackE ; NUME[:FrozenRampTrackE] = 667 ; Caption[:FrozenRampTrackE] = 'ice ramp track E' ; Shape[:FrozenRampTrackE] = :RAMP ; Material[:FrozenRampTrackE] = :FROZEN_LIQUID ; Special[:FrozenRampTrackE] = :TRACK ; Direction[:FrozenRampTrackE] = 'E'
    ENUM[668] = :FrozenRampTrackW ; NUME[:FrozenRampTrackW] = 668 ; Caption[:FrozenRampTrackW] = 'ice ramp track W' ; Shape[:FrozenRampTrackW] = :RAMP ; Material[:FrozenRampTrackW] = :FROZEN_LIQUID ; Special[:FrozenRampTrackW] = :TRACK ; Direction[:FrozenRampTrackW] = 'W'
    ENUM[669] = :FrozenRampTrackNS ; NUME[:FrozenRampTrackNS] = 669 ; Caption[:FrozenRampTrackNS] = 'ice ramp track NS' ; Shape[:FrozenRampTrackNS] = :RAMP ; Material[:FrozenRampTrackNS] = :FROZEN_LIQUID ; Special[:FrozenRampTrackNS] = :TRACK ; Direction[:FrozenRampTrackNS] = 'NS'
    ENUM[670] = :FrozenRampTrackNE ; NUME[:FrozenRampTrackNE] = 670 ; Caption[:FrozenRampTrackNE] = 'ice ramp track NE' ; Shape[:FrozenRampTrackNE] = :RAMP ; Material[:FrozenRampTrackNE] = :FROZEN_LIQUID ; Special[:FrozenRampTrackNE] = :TRACK ; Direction[:FrozenRampTrackNE] = 'NE'
    ENUM[671] = :FrozenRampTrackNW ; NUME[:FrozenRampTrackNW] = 671 ; Caption[:FrozenRampTrackNW] = 'ice ramp track NW' ; Shape[:FrozenRampTrackNW] = :RAMP ; Material[:FrozenRampTrackNW] = :FROZEN_LIQUID ; Special[:FrozenRampTrackNW] = :TRACK ; Direction[:FrozenRampTrackNW] = 'NW'
    ENUM[672] = :FrozenRampTrackSE ; NUME[:FrozenRampTrackSE] = 672 ; Caption[:FrozenRampTrackSE] = 'ice ramp track SE' ; Shape[:FrozenRampTrackSE] = :RAMP ; Material[:FrozenRampTrackSE] = :FROZEN_LIQUID ; Special[:FrozenRampTrackSE] = :TRACK ; Direction[:FrozenRampTrackSE] = 'SE'
    ENUM[673] = :FrozenRampTrackSW ; NUME[:FrozenRampTrackSW] = 673 ; Caption[:FrozenRampTrackSW] = 'ice ramp track SW' ; Shape[:FrozenRampTrackSW] = :RAMP ; Material[:FrozenRampTrackSW] = :FROZEN_LIQUID ; Special[:FrozenRampTrackSW] = :TRACK ; Direction[:FrozenRampTrackSW] = 'SW'
    ENUM[674] = :FrozenRampTrackEW ; NUME[:FrozenRampTrackEW] = 674 ; Caption[:FrozenRampTrackEW] = 'ice ramp track EW' ; Shape[:FrozenRampTrackEW] = :RAMP ; Material[:FrozenRampTrackEW] = :FROZEN_LIQUID ; Special[:FrozenRampTrackEW] = :TRACK ; Direction[:FrozenRampTrackEW] = 'EW'
    ENUM[675] = :FrozenRampTrackNSE ; NUME[:FrozenRampTrackNSE] = 675 ; Caption[:FrozenRampTrackNSE] = 'ice ramp track NSE' ; Shape[:FrozenRampTrackNSE] = :RAMP ; Material[:FrozenRampTrackNSE] = :FROZEN_LIQUID ; Special[:FrozenRampTrackNSE] = :TRACK ; Direction[:FrozenRampTrackNSE] = 'NSE'
    ENUM[676] = :FrozenRampTrackNSW ; NUME[:FrozenRampTrackNSW] = 676 ; Caption[:FrozenRampTrackNSW] = 'ice ramp track NSW' ; Shape[:FrozenRampTrackNSW] = :RAMP ; Material[:FrozenRampTrackNSW] = :FROZEN_LIQUID ; Special[:FrozenRampTrackNSW] = :TRACK ; Direction[:FrozenRampTrackNSW] = 'NSW'
    ENUM[677] = :FrozenRampTrackNEW ; NUME[:FrozenRampTrackNEW] = 677 ; Caption[:FrozenRampTrackNEW] = 'ice ramp track NEW' ; Shape[:FrozenRampTrackNEW] = :RAMP ; Material[:FrozenRampTrackNEW] = :FROZEN_LIQUID ; Special[:FrozenRampTrackNEW] = :TRACK ; Direction[:FrozenRampTrackNEW] = 'NEW'
    ENUM[678] = :FrozenRampTrackSEW ; NUME[:FrozenRampTrackSEW] = 678 ; Caption[:FrozenRampTrackSEW] = 'ice ramp track SEW' ; Shape[:FrozenRampTrackSEW] = :RAMP ; Material[:FrozenRampTrackSEW] = :FROZEN_LIQUID ; Special[:FrozenRampTrackSEW] = :TRACK ; Direction[:FrozenRampTrackSEW] = 'SEW'
    ENUM[679] = :FrozenRampTrackNSEW ; NUME[:FrozenRampTrackNSEW] = 679 ; Caption[:FrozenRampTrackNSEW] = 'ice ramp track NSEW' ; Shape[:FrozenRampTrackNSEW] = :RAMP ; Material[:FrozenRampTrackNSEW] = :FROZEN_LIQUID ; Special[:FrozenRampTrackNSEW] = :TRACK ; Direction[:FrozenRampTrackNSEW] = 'NSEW'
    ENUM[680] = :ConstructedRampTrackN ; NUME[:ConstructedRampTrackN] = 680 ; Caption[:ConstructedRampTrackN] = 'constructed ramp track N' ; Shape[:ConstructedRampTrackN] = :RAMP ; Material[:ConstructedRampTrackN] = :CONSTRUCTION ; Special[:ConstructedRampTrackN] = :TRACK ; Direction[:ConstructedRampTrackN] = 'N'
    ENUM[681] = :ConstructedRampTrackS ; NUME[:ConstructedRampTrackS] = 681 ; Caption[:ConstructedRampTrackS] = 'constructed ramp track S' ; Shape[:ConstructedRampTrackS] = :RAMP ; Material[:ConstructedRampTrackS] = :CONSTRUCTION ; Special[:ConstructedRampTrackS] = :TRACK ; Direction[:ConstructedRampTrackS] = 'S'
    ENUM[682] = :ConstructedRampTrackE ; NUME[:ConstructedRampTrackE] = 682 ; Caption[:ConstructedRampTrackE] = 'constructed ramp track E' ; Shape[:ConstructedRampTrackE] = :RAMP ; Material[:ConstructedRampTrackE] = :CONSTRUCTION ; Special[:ConstructedRampTrackE] = :TRACK ; Direction[:ConstructedRampTrackE] = 'E'
    ENUM[683] = :ConstructedRampTrackW ; NUME[:ConstructedRampTrackW] = 683 ; Caption[:ConstructedRampTrackW] = 'constructed ramp track W' ; Shape[:ConstructedRampTrackW] = :RAMP ; Material[:ConstructedRampTrackW] = :CONSTRUCTION ; Special[:ConstructedRampTrackW] = :TRACK ; Direction[:ConstructedRampTrackW] = 'W'
    ENUM[684] = :ConstructedRampTrackNS ; NUME[:ConstructedRampTrackNS] = 684 ; Caption[:ConstructedRampTrackNS] = 'constructed ramp track NS' ; Shape[:ConstructedRampTrackNS] = :RAMP ; Material[:ConstructedRampTrackNS] = :CONSTRUCTION ; Special[:ConstructedRampTrackNS] = :TRACK ; Direction[:ConstructedRampTrackNS] = 'NS'
    ENUM[685] = :ConstructedRampTrackNE ; NUME[:ConstructedRampTrackNE] = 685 ; Caption[:ConstructedRampTrackNE] = 'constructed ramp track NE' ; Shape[:ConstructedRampTrackNE] = :RAMP ; Material[:ConstructedRampTrackNE] = :CONSTRUCTION ; Special[:ConstructedRampTrackNE] = :TRACK ; Direction[:ConstructedRampTrackNE] = 'NE'
    ENUM[686] = :ConstructedRampTrackNW ; NUME[:ConstructedRampTrackNW] = 686 ; Caption[:ConstructedRampTrackNW] = 'constructed ramp track NW' ; Shape[:ConstructedRampTrackNW] = :RAMP ; Material[:ConstructedRampTrackNW] = :CONSTRUCTION ; Special[:ConstructedRampTrackNW] = :TRACK ; Direction[:ConstructedRampTrackNW] = 'NW'
    ENUM[687] = :ConstructedRampTrackSE ; NUME[:ConstructedRampTrackSE] = 687 ; Caption[:ConstructedRampTrackSE] = 'constructed ramp track SE' ; Shape[:ConstructedRampTrackSE] = :RAMP ; Material[:ConstructedRampTrackSE] = :CONSTRUCTION ; Special[:ConstructedRampTrackSE] = :TRACK ; Direction[:ConstructedRampTrackSE] = 'SE'
    ENUM[688] = :ConstructedRampTrackSW ; NUME[:ConstructedRampTrackSW] = 688 ; Caption[:ConstructedRampTrackSW] = 'constructed ramp track SW' ; Shape[:ConstructedRampTrackSW] = :RAMP ; Material[:ConstructedRampTrackSW] = :CONSTRUCTION ; Special[:ConstructedRampTrackSW] = :TRACK ; Direction[:ConstructedRampTrackSW] = 'SW'
    ENUM[689] = :ConstructedRampTrackEW ; NUME[:ConstructedRampTrackEW] = 689 ; Caption[:ConstructedRampTrackEW] = 'constructed ramp track EW' ; Shape[:ConstructedRampTrackEW] = :RAMP ; Material[:ConstructedRampTrackEW] = :CONSTRUCTION ; Special[:ConstructedRampTrackEW] = :TRACK ; Direction[:ConstructedRampTrackEW] = 'EW'
    ENUM[690] = :ConstructedRampTrackNSE ; NUME[:ConstructedRampTrackNSE] = 690 ; Caption[:ConstructedRampTrackNSE] = 'constructed ramp track NSE' ; Shape[:ConstructedRampTrackNSE] = :RAMP ; Material[:ConstructedRampTrackNSE] = :CONSTRUCTION ; Special[:ConstructedRampTrackNSE] = :TRACK ; Direction[:ConstructedRampTrackNSE] = 'NSE'
    ENUM[691] = :ConstructedRampTrackNSW ; NUME[:ConstructedRampTrackNSW] = 691 ; Caption[:ConstructedRampTrackNSW] = 'constructed ramp track NSW' ; Shape[:ConstructedRampTrackNSW] = :RAMP ; Material[:ConstructedRampTrackNSW] = :CONSTRUCTION ; Special[:ConstructedRampTrackNSW] = :TRACK ; Direction[:ConstructedRampTrackNSW] = 'NSW'
    ENUM[692] = :ConstructedRampTrackNEW ; NUME[:ConstructedRampTrackNEW] = 692 ; Caption[:ConstructedRampTrackNEW] = 'constructed ramp track NEW' ; Shape[:ConstructedRampTrackNEW] = :RAMP ; Material[:ConstructedRampTrackNEW] = :CONSTRUCTION ; Special[:ConstructedRampTrackNEW] = :TRACK ; Direction[:ConstructedRampTrackNEW] = 'NEW'
    ENUM[693] = :ConstructedRampTrackSEW ; NUME[:ConstructedRampTrackSEW] = 693 ; Caption[:ConstructedRampTrackSEW] = 'constructed ramp track SEW' ; Shape[:ConstructedRampTrackSEW] = :RAMP ; Material[:ConstructedRampTrackSEW] = :CONSTRUCTION ; Special[:ConstructedRampTrackSEW] = :TRACK ; Direction[:ConstructedRampTrackSEW] = 'SEW'
    ENUM[694] = :ConstructedRampTrackNSEW ; NUME[:ConstructedRampTrackNSEW] = 694 ; Caption[:ConstructedRampTrackNSEW] = 'constructed ramp track NSEW' ; Shape[:ConstructedRampTrackNSEW] = :RAMP ; Material[:ConstructedRampTrackNSEW] = :CONSTRUCTION ; Special[:ConstructedRampTrackNSEW] = :TRACK ; Direction[:ConstructedRampTrackNSEW] = 'NSEW'
end

class TiletypeMaterial < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Caption = Hash.new
    ENUM[-1] = :NONE ; NUME[:NONE] = -1
    ENUM[0] = :AIR ; NUME[:AIR] = 0 ; Caption[:AIR] = 'empty'
    ENUM[1] = :SOIL ; NUME[:SOIL] = 1 ; Caption[:SOIL] = 'ordinary soil. material depends on geology'
    ENUM[2] = :STONE ; NUME[:STONE] = 2 ; Caption[:STONE] = 'ordinary layer stone. material depends on geology'
    ENUM[3] = :FEATURE ; NUME[:FEATURE] = 3 ; Caption[:FEATURE] = 'map special stone. used for things like hell, curious structures, or adamantine tubes. material depends on local/global special'
    ENUM[4] = :LAVA_STONE ; NUME[:LAVA_STONE] = 4 ; Caption[:LAVA_STONE] = 'lava stone created by mixing magma and water'
    ENUM[5] = :MINERAL ; NUME[:MINERAL] = 5 ; Caption[:MINERAL] = 'vein stone. material depends on mineral veins present'
    ENUM[6] = :FROZEN_LIQUID ; NUME[:FROZEN_LIQUID] = 6 ; Caption[:FROZEN_LIQUID] = 'frozen liquid. material depends on ice vein present (which also indicates what was on the tile before it froze)'
    ENUM[7] = :CONSTRUCTION ; NUME[:CONSTRUCTION] = 7 ; Caption[:CONSTRUCTION] = 'material depends on the construction present'
    ENUM[8] = :GRASS_LIGHT ; NUME[:GRASS_LIGHT] = 8 ; Caption[:GRASS_LIGHT] = 'light grass'
    ENUM[9] = :GRASS_DARK ; NUME[:GRASS_DARK] = 9 ; Caption[:GRASS_DARK] = 'dark grass'
    ENUM[10] = :GRASS_DRY ; NUME[:GRASS_DRY] = 10 ; Caption[:GRASS_DRY] = 'dry grass'
    ENUM[11] = :GRASS_DEAD ; NUME[:GRASS_DEAD] = 11 ; Caption[:GRASS_DEAD] = 'dead grass'
    ENUM[12] = :PLANT ; NUME[:PLANT] = 12 ; Caption[:PLANT] = 'plant'
    ENUM[13] = :HFS ; NUME[:HFS] = 13 ; Caption[:HFS] = 'the stuff glowing barriers/floors and eerie pits are made of - this makes them different from ordinary walls/floors and chasms'
    ENUM[14] = :CAMPFIRE ; NUME[:CAMPFIRE] = 14 ; Caption[:CAMPFIRE] = 'human armies make them when they siege. original tile is lost?'
    ENUM[15] = :FIRE ; NUME[:FIRE] = 15 ; Caption[:FIRE] = 'burning grass'
    ENUM[16] = :ASHES ; NUME[:ASHES] = 16 ; Caption[:ASHES] = 'what remains from a fire'
    ENUM[17] = :MAGMA ; NUME[:MAGMA] = 17 ; Caption[:MAGMA] = 'material for semi-molten rock and magma flow tiles'
    ENUM[18] = :DRIFTWOOD ; NUME[:DRIFTWOOD] = 18 ; Caption[:DRIFTWOOD] = 'driftwood. normally shows up on beaches'
    ENUM[19] = :POOL ; NUME[:POOL] = 19 ; Caption[:POOL] = 'A pool. Gathers water while it\'s raining.'
    ENUM[20] = :BROOK ; NUME[:BROOK] = 20 ; Caption[:BROOK] = 'Brook beds and floors'
    ENUM[21] = :RIVER ; NUME[:RIVER] = 21 ; Caption[:RIVER] = 'It\'s a riverbed. Basically a tile that doesn\'t get muddy.'
    ENUM[22] = :ROOT ; NUME[:ROOT] = 22 ; Caption[:ROOT] = 'tree root'
    ENUM[23] = :TREE ; NUME[:TREE] = 23 ; Caption[:TREE] = 'tree trunk/branch'
    ENUM[24] = :MUSHROOM ; NUME[:MUSHROOM] = 24 ; Caption[:MUSHROOM] = 'mushroom cap'
    ENUM[25] = :UNDERWORLD_GATE ; NUME[:UNDERWORLD_GATE] = 25 ; Caption[:UNDERWORLD_GATE] = 'Underworld Gate'
end

class TiletypeShape < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Caption = Hash.new
    BasicShape = Hash.new(:None)
    PassableLow = Hash.new(false)
    PassableHigh = Hash.new(false)
    PassableFlow = Hash.new(false)
    PassableFlowDown = Hash.new(false)
    Walkable = Hash.new(false)
    WalkableUp = Hash.new(false)
    ENUM[-1] = :NONE ; NUME[:NONE] = -1
    ENUM[0] = :EMPTY ; NUME[:EMPTY] = 0 ; BasicShape[:EMPTY] = :Open ; PassableLow[:EMPTY] = true ; PassableHigh[:EMPTY] = true ; PassableFlow[:EMPTY] = true ; PassableFlowDown[:EMPTY] = true
    ENUM[1] = :FLOOR ; NUME[:FLOOR] = 1 ; BasicShape[:FLOOR] = :Floor ; PassableHigh[:FLOOR] = true ; PassableFlow[:FLOOR] = true ; Walkable[:FLOOR] = true
    ENUM[2] = :BOULDER ; NUME[:BOULDER] = 2 ; BasicShape[:BOULDER] = :Floor ; PassableHigh[:BOULDER] = true ; PassableFlow[:BOULDER] = true ; Walkable[:BOULDER] = true
    ENUM[3] = :PEBBLES ; NUME[:PEBBLES] = 3 ; BasicShape[:PEBBLES] = :Floor ; PassableHigh[:PEBBLES] = true ; PassableFlow[:PEBBLES] = true ; Walkable[:PEBBLES] = true
    ENUM[4] = :WALL ; NUME[:WALL] = 4 ; BasicShape[:WALL] = :Wall
    ENUM[5] = :FORTIFICATION ; NUME[:FORTIFICATION] = 5 ; BasicShape[:FORTIFICATION] = :Wall ; PassableFlow[:FORTIFICATION] = true
    ENUM[6] = :STAIR_UP ; NUME[:STAIR_UP] = 6 ; BasicShape[:STAIR_UP] = :Stair ; PassableHigh[:STAIR_UP] = true ; PassableFlow[:STAIR_UP] = true ; Walkable[:STAIR_UP] = true ; WalkableUp[:STAIR_UP] = true
    ENUM[7] = :STAIR_DOWN ; NUME[:STAIR_DOWN] = 7 ; BasicShape[:STAIR_DOWN] = :Stair ; PassableLow[:STAIR_DOWN] = true ; PassableHigh[:STAIR_DOWN] = true ; PassableFlow[:STAIR_DOWN] = true ; PassableFlowDown[:STAIR_DOWN] = true ; Walkable[:STAIR_DOWN] = true
    ENUM[8] = :STAIR_UPDOWN ; NUME[:STAIR_UPDOWN] = 8 ; BasicShape[:STAIR_UPDOWN] = :Stair ; PassableLow[:STAIR_UPDOWN] = true ; PassableHigh[:STAIR_UPDOWN] = true ; PassableFlow[:STAIR_UPDOWN] = true ; PassableFlowDown[:STAIR_UPDOWN] = true ; Walkable[:STAIR_UPDOWN] = true ; WalkableUp[:STAIR_UPDOWN] = true
    ENUM[9] = :RAMP ; NUME[:RAMP] = 9 ; Caption[:RAMP] = 'ramps have no direction' ; BasicShape[:RAMP] = :Ramp ; PassableHigh[:RAMP] = true ; PassableFlow[:RAMP] = true ; Walkable[:RAMP] = true ; WalkableUp[:RAMP] = true
    ENUM[10] = :RAMP_TOP ; NUME[:RAMP_TOP] = 10 ; Caption[:RAMP_TOP] = 'used for pathing?' ; BasicShape[:RAMP_TOP] = :Open ; PassableLow[:RAMP_TOP] = true ; PassableHigh[:RAMP_TOP] = true ; PassableFlow[:RAMP_TOP] = true ; PassableFlowDown[:RAMP_TOP] = true ; Walkable[:RAMP_TOP] = true
    ENUM[11] = :BROOK_BED ; NUME[:BROOK_BED] = 11 ; Caption[:BROOK_BED] = 'mineable, water-passable rock on the bottom of a brook' ; BasicShape[:BROOK_BED] = :Wall ; PassableFlow[:BROOK_BED] = true
    ENUM[12] = :BROOK_TOP ; NUME[:BROOK_TOP] = 12 ; Caption[:BROOK_TOP] = 'water-passable floor on top of BROOK_BED tiles' ; BasicShape[:BROOK_TOP] = :Floor ; PassableHigh[:BROOK_TOP] = true ; PassableFlow[:BROOK_TOP] = true ; PassableFlowDown[:BROOK_TOP] = true ; Walkable[:BROOK_TOP] = true
    ENUM[13] = :BRANCH ; NUME[:BRANCH] = 13 ; Caption[:BRANCH] = 'small tree branch' ; BasicShape[:BRANCH] = :Floor ; PassableHigh[:BRANCH] = true ; PassableFlow[:BRANCH] = true ; PassableFlowDown[:BRANCH] = true ; Walkable[:BRANCH] = true
    ENUM[14] = :TRUNK_BRANCH ; NUME[:TRUNK_BRANCH] = 14 ; Caption[:TRUNK_BRANCH] = 'large tree branch' ; BasicShape[:TRUNK_BRANCH] = :Floor ; PassableHigh[:TRUNK_BRANCH] = true ; PassableFlow[:TRUNK_BRANCH] = true ; PassableFlowDown[:TRUNK_BRANCH] = true ; Walkable[:TRUNK_BRANCH] = true
    ENUM[15] = :TWIG ; NUME[:TWIG] = 15 ; Caption[:TWIG] = 'tiny tree branch, not strong enough to support creatures' ; BasicShape[:TWIG] = :Open ; PassableLow[:TWIG] = true ; PassableHigh[:TWIG] = true ; PassableFlow[:TWIG] = true ; PassableFlowDown[:TWIG] = true
    ENUM[16] = :SAPLING ; NUME[:SAPLING] = 16 ; BasicShape[:SAPLING] = :Floor ; PassableHigh[:SAPLING] = true ; PassableFlow[:SAPLING] = true ; Walkable[:SAPLING] = true
    ENUM[17] = :SHRUB ; NUME[:SHRUB] = 17 ; BasicShape[:SHRUB] = :Floor ; PassableHigh[:SHRUB] = true ; PassableFlow[:SHRUB] = true ; Walkable[:SHRUB] = true
    ENUM[18] = :ENDLESS_PIT ; NUME[:ENDLESS_PIT] = 18 ; Caption[:ENDLESS_PIT] = 'a fake endless pit' ; BasicShape[:ENDLESS_PIT] = :Open ; PassableHigh[:ENDLESS_PIT] = true ; PassableFlow[:ENDLESS_PIT] = true ; Walkable[:ENDLESS_PIT] = true
end

class TiletypeShapeBasic < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :None ; NUME[:None] = -1
    ENUM[0] = :Open ; NUME[:Open] = 0
    ENUM[1] = :Floor ; NUME[:Floor] = 1
    ENUM[2] = :Ramp ; NUME[:Ramp] = 2
    ENUM[3] = :Wall ; NUME[:Wall] = 3
    ENUM[4] = :Stair ; NUME[:Stair] = 4
end

class TiletypeSpecial < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Caption = Hash.new
    ENUM[-1] = :NONE ; NUME[:NONE] = -1
    ENUM[0] = :NORMAL ; NUME[:NORMAL] = 0 ; Caption[:NORMAL] = 'default for all tiles, nothing special about it'
    ENUM[1] = :RIVER_SOURCE ; NUME[:RIVER_SOURCE] = 1 ; Caption[:RIVER_SOURCE] = 'river source, when it exists on a map'
    ENUM[2] = :WATERFALL ; NUME[:WATERFALL] = 2 ; Caption[:WATERFALL] = 'waterfall from nowhere, used by cave rivers back in 40d'
    ENUM[3] = :SMOOTH ; NUME[:SMOOTH] = 3 ; Caption[:SMOOTH] = 'smooth walls and floors, including constructions'
    ENUM[4] = :FURROWED ; NUME[:FURROWED] = 4 ; Caption[:FURROWED] = 'furrowed soil, left by roads/farms and removing constructions'
    ENUM[5] = :WET ; NUME[:WET] = 5 ; Caption[:WET] = 'wet soil, found on beaches'
    ENUM[6] = :DEAD ; NUME[:DEAD] = 6 ; Caption[:DEAD] = 'dead, used by plants'
    ENUM[7] = :WORN_1 ; NUME[:WORN_1] = 7 ; Caption[:WORN_1] = 'partially (25%) mined walls'
    ENUM[8] = :WORN_2 ; NUME[:WORN_2] = 8 ; Caption[:WORN_2] = 'partially (50%) mined walls'
    ENUM[9] = :WORN_3 ; NUME[:WORN_3] = 9 ; Caption[:WORN_3] = 'partially (75%) mined walls'
    ENUM[10] = :TRACK ; NUME[:TRACK] = 10 ; Caption[:TRACK] = 'mine cart track'
    ENUM[11] = :SMOOTH_DEAD ; NUME[:SMOOTH_DEAD] = 11 ; Caption[:SMOOTH_DEAD] = 'smooth dead leaves, a unique combination'
end

class TiletypeVariant < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :NONE ; NUME[:NONE] = -1
    ENUM[0] = :VAR_1 ; NUME[:VAR_1] = 0
    ENUM[1] = :VAR_2 ; NUME[:VAR_2] = 1
    ENUM[2] = :VAR_3 ; NUME[:VAR_3] = 2
    ENUM[3] = :VAR_4 ; NUME[:VAR_4] = 3
end

class TimedEventType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Caravan ; NUME[:Caravan] = 0
    ENUM[1] = :Migrants ; NUME[:Migrants] = 1
    ENUM[2] = :Diplomat ; NUME[:Diplomat] = 2
    ENUM[3] = :FeatureAttack ; NUME[:FeatureAttack] = 3
    ENUM[4] = :Megabeast ; NUME[:Megabeast] = 4
    ENUM[5] = :WildlifeCurious ; NUME[:WildlifeCurious] = 5
    ENUM[6] = :WildlifeMischievous ; NUME[:WildlifeMischievous] = 6
    ENUM[7] = :WildlifeFlier ; NUME[:WildlifeFlier] = 7
    ENUM[8] = :NightCreature ; NUME[:NightCreature] = 8
end

class TissueFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :THICKENS_ON_STRENGTH ; NUME[:THICKENS_ON_STRENGTH] = 0
    ENUM[1] = :THICKENS_ON_ENERGY_STORAGE ; NUME[:THICKENS_ON_ENERGY_STORAGE] = 1
    ENUM[2] = :ARTERIES ; NUME[:ARTERIES] = 2
    ENUM[3] = :SCARS ; NUME[:SCARS] = 3
    ENUM[4] = :STRUCTURAL ; NUME[:STRUCTURAL] = 4
    ENUM[5] = :NERVOUS ; NUME[:NERVOUS] = 5
    ENUM[6] = :THOUGHT ; NUME[:THOUGHT] = 6
    ENUM[7] = :MUSCULAR ; NUME[:MUSCULAR] = 7
    ENUM[8] = :SMELL ; NUME[:SMELL] = 8
    ENUM[9] = :HEAR ; NUME[:HEAR] = 9
    ENUM[10] = :FLIGHT ; NUME[:FLIGHT] = 10
    ENUM[11] = :BREATHE ; NUME[:BREATHE] = 11
    ENUM[12] = :SIGHT ; NUME[:SIGHT] = 12
    ENUM[13] = :COSMETIC ; NUME[:COSMETIC] = 13
    ENUM[14] = :CONNECTS ; NUME[:CONNECTS] = 14
    ENUM[15] = :FUNCTIONAL ; NUME[:FUNCTIONAL] = 15
    ENUM[16] = :MAJOR_ARTERIES ; NUME[:MAJOR_ARTERIES] = 16
    ENUM[17] = :TISSUE_LEAKS ; NUME[:TISSUE_LEAKS] = 17
    ENUM[18] = :STYLEABLE ; NUME[:STYLEABLE] = 18
    ENUM[19] = :CONNECTIVE_TISSUE_ANCHOR ; NUME[:CONNECTIVE_TISSUE_ANCHOR] = 19
    ENUM[20] = :SETTABLE ; NUME[:SETTABLE] = 20
    ENUM[21] = :SPLINTABLE ; NUME[:SPLINTABLE] = 21
end

class ToolFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :HARD_MAT ; NUME[:HARD_MAT] = 0
    ENUM[1] = :METAL_MAT ; NUME[:METAL_MAT] = 1
    ENUM[2] = :HAS_EDGE_ATTACK ; NUME[:HAS_EDGE_ATTACK] = 2
    ENUM[3] = :METAL_WEAPON_MAT ; NUME[:METAL_WEAPON_MAT] = 3
    ENUM[4] = :UNIMPROVABLE ; NUME[:UNIMPROVABLE] = 4
    ENUM[5] = :SOFT_MAT ; NUME[:SOFT_MAT] = 5
    ENUM[6] = :WOOD_MAT ; NUME[:WOOD_MAT] = 6
    ENUM[7] = :INVERTED_TILE ; NUME[:INVERTED_TILE] = 7
    ENUM[8] = :FURNITURE ; NUME[:FURNITURE] = 8
end

class ToolUses < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :NONE ; NUME[:NONE] = -1
    ENUM[0] = :LIQUID_COOKING ; NUME[:LIQUID_COOKING] = 0
    ENUM[1] = :LIQUID_SCOOP ; NUME[:LIQUID_SCOOP] = 1
    ENUM[2] = :GRIND_POWDER_RECEPTACLE ; NUME[:GRIND_POWDER_RECEPTACLE] = 2
    ENUM[3] = :GRIND_POWDER_GRINDER ; NUME[:GRIND_POWDER_GRINDER] = 3
    ENUM[4] = :MEAT_CARVING ; NUME[:MEAT_CARVING] = 4
    ENUM[5] = :MEAT_BONING ; NUME[:MEAT_BONING] = 5
    ENUM[6] = :MEAT_SLICING ; NUME[:MEAT_SLICING] = 6
    ENUM[7] = :MEAT_CLEAVING ; NUME[:MEAT_CLEAVING] = 7
    ENUM[8] = :HOLD_MEAT_FOR_CARVING ; NUME[:HOLD_MEAT_FOR_CARVING] = 8
    ENUM[9] = :MEAL_CONTAINER ; NUME[:MEAL_CONTAINER] = 9
    ENUM[10] = :LIQUID_CONTAINER ; NUME[:LIQUID_CONTAINER] = 10
    ENUM[11] = :FOOD_STORAGE ; NUME[:FOOD_STORAGE] = 11
    ENUM[12] = :HIVE ; NUME[:HIVE] = 12
    ENUM[13] = :NEST_BOX ; NUME[:NEST_BOX] = 13
    ENUM[14] = :SMALL_OBJECT_STORAGE ; NUME[:SMALL_OBJECT_STORAGE] = 14
    ENUM[15] = :TRACK_CART ; NUME[:TRACK_CART] = 15
    ENUM[16] = :HEAVY_OBJECT_HAULING ; NUME[:HEAVY_OBJECT_HAULING] = 16
    ENUM[17] = :STAND_AND_WORK_ABOVE ; NUME[:STAND_AND_WORK_ABOVE] = 17
end

class ToyFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :HARD_MAT ; NUME[:HARD_MAT] = 0
end

class TrainingKnowledgeLevel < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :None ; NUME[:None] = 0
    ENUM[1] = :FewFacts ; NUME[:FewFacts] = 1
    ENUM[2] = :GeneralFamiliarity ; NUME[:GeneralFamiliarity] = 2
    ENUM[3] = :Knowledgeable ; NUME[:Knowledgeable] = 3
    ENUM[4] = :Expert ; NUME[:Expert] = 4
    ENUM[5] = :Domesticated ; NUME[:Domesticated] = 5
end

class TrapType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Lever ; NUME[:Lever] = 0
    ENUM[1] = :PressurePlate ; NUME[:PressurePlate] = 1
    ENUM[2] = :CageTrap ; NUME[:CageTrap] = 2
    ENUM[3] = :StoneFallTrap ; NUME[:StoneFallTrap] = 3
    ENUM[4] = :WeaponTrap ; NUME[:WeaponTrap] = 4
    ENUM[5] = :TrackStop ; NUME[:TrackStop] = 5
end

class TrapcompFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :IS_SCREW ; NUME[:IS_SCREW] = 0
    ENUM[1] = :IS_SPIKE ; NUME[:IS_SPIKE] = 1
    ENUM[2] = :WOOD ; NUME[:WOOD] = 2
    ENUM[3] = :METAL ; NUME[:METAL] = 3
    ENUM[4] = :HAS_EDGE_ATTACK ; NUME[:HAS_EDGE_ATTACK] = 4
end

class TreeHouseType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :TreeHouse ; NUME[:TreeHouse] = 0
    ENUM[1] = :HomeTree ; NUME[:HomeTree] = 1
    ENUM[2] = :ShapingTree ; NUME[:ShapingTree] = 2
    ENUM[3] = :MarketTree ; NUME[:MarketTree] = 3
end

class UiAdvmodeMenu < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Default ; NUME[:Default] = 0
    ENUM[1] = :Look ; NUME[:Look] = 1
    ENUM[2] = :Talk ; NUME[:Talk] = 2
    ENUM[3] = :Inventory ; NUME[:Inventory] = 3
    ENUM[4] = :Drop ; NUME[:Drop] = 4
    ENUM[5] = :ThrowItem ; NUME[:ThrowItem] = 5
    ENUM[6] = :Wear ; NUME[:Wear] = 6
    ENUM[7] = :Remove ; NUME[:Remove] = 7
    ENUM[8] = :Interact ; NUME[:Interact] = 8
    ENUM[9] = :Put ; NUME[:Put] = 9
    ENUM[10] = :PutContainer ; NUME[:PutContainer] = 10
    ENUM[11] = :Eat ; NUME[:Eat] = 11
    ENUM[12] = :ThrowAim ; NUME[:ThrowAim] = 12
    ENUM[13] = :Unk13 ; NUME[:Unk13] = 13
    ENUM[14] = :Get ; NUME[:Get] = 14
    ENUM[15] = :Fire ; NUME[:Fire] = 15
    ENUM[16] = :CombatPrefs ; NUME[:CombatPrefs] = 16
    ENUM[17] = :Companions ; NUME[:Companions] = 17
    ENUM[18] = :MovementPrefs ; NUME[:MovementPrefs] = 18
    ENUM[19] = :InteractAction ; NUME[:InteractAction] = 19
    ENUM[20] = :MoveCarefully ; NUME[:MoveCarefully] = 20
    ENUM[21] = :Announcements ; NUME[:Announcements] = 21
    ENUM[22] = :Attack ; NUME[:Attack] = 22
    ENUM[23] = :UseBuilding ; NUME[:UseBuilding] = 23
    ENUM[24] = :Travel ; NUME[:Travel] = 24
    ENUM[25] = :Unk25 ; NUME[:Unk25] = 25
    ENUM[26] = :WrestleTarget ; NUME[:WrestleTarget] = 26
    ENUM[27] = :Unk27 ; NUME[:Unk27] = 27
    ENUM[28] = :Unk28 ; NUME[:Unk28] = 28
    ENUM[29] = :Sleep ; NUME[:Sleep] = 29
    ENUM[30] = :Unk30 ; NUME[:Unk30] = 30
    ENUM[31] = :AttackBodypart ; NUME[:AttackBodypart] = 31
    ENUM[32] = :AttackType ; NUME[:AttackType] = 32
    ENUM[33] = :Unk33 ; NUME[:Unk33] = 33
    ENUM[34] = :Unk34 ; NUME[:Unk34] = 34
    ENUM[35] = :Unk35 ; NUME[:Unk35] = 35
end

class UiSidebarMode < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Default ; NUME[:Default] = 0
    ENUM[1] = :Squads ; NUME[:Squads] = 1
    ENUM[2] = :DesignateMine ; NUME[:DesignateMine] = 2
    ENUM[3] = :DesignateRemoveRamps ; NUME[:DesignateRemoveRamps] = 3
    ENUM[4] = :DesignateUpStair ; NUME[:DesignateUpStair] = 4
    ENUM[5] = :DesignateDownStair ; NUME[:DesignateDownStair] = 5
    ENUM[6] = :DesignateUpDownStair ; NUME[:DesignateUpDownStair] = 6
    ENUM[7] = :DesignateUpRamp ; NUME[:DesignateUpRamp] = 7
    ENUM[8] = :DesignateChannel ; NUME[:DesignateChannel] = 8
    ENUM[9] = :DesignateGatherPlants ; NUME[:DesignateGatherPlants] = 9
    ENUM[10] = :DesignateRemoveDesignation ; NUME[:DesignateRemoveDesignation] = 10
    ENUM[11] = :DesignateSmooth ; NUME[:DesignateSmooth] = 11
    ENUM[12] = :DesignateCarveTrack ; NUME[:DesignateCarveTrack] = 12
    ENUM[13] = :DesignateEngrave ; NUME[:DesignateEngrave] = 13
    ENUM[14] = :DesignateCarveFortification ; NUME[:DesignateCarveFortification] = 14
    ENUM[15] = :Stockpiles ; NUME[:Stockpiles] = 15
    ENUM[16] = :Build ; NUME[:Build] = 16
    ENUM[17] = :QueryBuilding ; NUME[:QueryBuilding] = 17
    ENUM[18] = :Orders ; NUME[:Orders] = 18
    ENUM[19] = :OrdersForbid ; NUME[:OrdersForbid] = 19
    ENUM[20] = :OrdersRefuse ; NUME[:OrdersRefuse] = 20
    ENUM[21] = :OrdersWorkshop ; NUME[:OrdersWorkshop] = 21
    ENUM[22] = :OrdersZone ; NUME[:OrdersZone] = 22
    ENUM[23] = :BuildingItems ; NUME[:BuildingItems] = 23
    ENUM[24] = :ViewUnits ; NUME[:ViewUnits] = 24
    ENUM[25] = :LookAround ; NUME[:LookAround] = 25
    ENUM[26] = :DesignateItemsClaim ; NUME[:DesignateItemsClaim] = 26
    ENUM[27] = :DesignateItemsForbid ; NUME[:DesignateItemsForbid] = 27
    ENUM[28] = :DesignateItemsMelt ; NUME[:DesignateItemsMelt] = 28
    ENUM[29] = :DesignateItemsUnmelt ; NUME[:DesignateItemsUnmelt] = 29
    ENUM[30] = :DesignateItemsDump ; NUME[:DesignateItemsDump] = 30
    ENUM[31] = :DesignateItemsUndump ; NUME[:DesignateItemsUndump] = 31
    ENUM[32] = :DesignateItemsHide ; NUME[:DesignateItemsHide] = 32
    ENUM[33] = :DesignateItemsUnhide ; NUME[:DesignateItemsUnhide] = 33
    ENUM[34] = :DesignateChopTrees ; NUME[:DesignateChopTrees] = 34
    ENUM[35] = :DesignateToggleEngravings ; NUME[:DesignateToggleEngravings] = 35
    ENUM[36] = :DesignateToggleMarker ; NUME[:DesignateToggleMarker] = 36
    ENUM[37] = :Hotkeys ; NUME[:Hotkeys] = 37
    ENUM[38] = :DesignateTrafficHigh ; NUME[:DesignateTrafficHigh] = 38
    ENUM[39] = :DesignateTrafficNormal ; NUME[:DesignateTrafficNormal] = 39
    ENUM[40] = :DesignateTrafficLow ; NUME[:DesignateTrafficLow] = 40
    ENUM[41] = :DesignateTrafficRestricted ; NUME[:DesignateTrafficRestricted] = 41
    ENUM[42] = :Zones ; NUME[:Zones] = 42
    ENUM[43] = :ZonesPenInfo ; NUME[:ZonesPenInfo] = 43
    ENUM[44] = :ZonesPitInfo ; NUME[:ZonesPitInfo] = 44
    ENUM[45] = :ZonesHospitalInfo ; NUME[:ZonesHospitalInfo] = 45
    ENUM[46] = :ZonesGatherInfo ; NUME[:ZonesGatherInfo] = 46
    ENUM[47] = :DesignateRemoveConstruction ; NUME[:DesignateRemoveConstruction] = 47
    ENUM[48] = :DepotAccess ; NUME[:DepotAccess] = 48
    ENUM[49] = :NotesPoints ; NUME[:NotesPoints] = 49
    ENUM[50] = :NotesRoutes ; NUME[:NotesRoutes] = 50
    ENUM[51] = :Burrows ; NUME[:Burrows] = 51
    ENUM[52] = :Hauling ; NUME[:Hauling] = 52
end

class UniformCategory < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Body ; NUME[:Body] = 0
    ENUM[1] = :Head ; NUME[:Head] = 1
    ENUM[2] = :Pants ; NUME[:Pants] = 2
    ENUM[3] = :Gloves ; NUME[:Gloves] = 3
    ENUM[4] = :Shoes ; NUME[:Shoes] = 4
    ENUM[5] = :Shield ; NUME[:Shield] = 5
    ENUM[6] = :Weapon ; NUME[:Weapon] = 6
end

class UnitActionType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :None ; NUME[:None] = -1
    ENUM[0] = :Move ; NUME[:Move] = 0
    ENUM[1] = :Attack ; NUME[:Attack] = 1
    ENUM[2] = :Jump ; NUME[:Jump] = 2
    ENUM[3] = :HoldTerrain ; NUME[:HoldTerrain] = 3
    ENUM[4] = :ReleaseTerrain ; NUME[:ReleaseTerrain] = 4
    ENUM[5] = :Climb ; NUME[:Climb] = 5
    ENUM[6] = :Job ; NUME[:Job] = 6
    ENUM[7] = :Talk ; NUME[:Talk] = 7
    ENUM[8] = :Unsteady ; NUME[:Unsteady] = 8
    ENUM[9] = :Parry ; NUME[:Parry] = 9
    ENUM[10] = :Block ; NUME[:Block] = 10
    ENUM[11] = :Dodge ; NUME[:Dodge] = 11
    ENUM[12] = :Recover ; NUME[:Recover] = 12
    ENUM[13] = :StandUp ; NUME[:StandUp] = 13
    ENUM[14] = :LieDown ; NUME[:LieDown] = 14
    ENUM[15] = :Job2 ; NUME[:Job2] = 15
    ENUM[16] = :PushObject ; NUME[:PushObject] = 16
    ENUM[17] = :SuckBlood ; NUME[:SuckBlood] = 17
    ENUM[18] = :HoldItem ; NUME[:HoldItem] = 18
    ENUM[19] = :ReleaseItem ; NUME[:ReleaseItem] = 19
end

class UnitLabor < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Caption = Hash.new
    ENUM[-1] = :NONE ; NUME[:NONE] = -1
    ENUM[0] = :MINE ; NUME[:MINE] = 0 ; Caption[:MINE] = 'Mining'
    ENUM[1] = :HAUL_STONE ; NUME[:HAUL_STONE] = 1 ; Caption[:HAUL_STONE] = 'Stone Hauling'
    ENUM[2] = :HAUL_WOOD ; NUME[:HAUL_WOOD] = 2 ; Caption[:HAUL_WOOD] = 'Wood Hauling'
    ENUM[3] = :HAUL_BODY ; NUME[:HAUL_BODY] = 3 ; Caption[:HAUL_BODY] = 'Burial'
    ENUM[4] = :HAUL_FOOD ; NUME[:HAUL_FOOD] = 4 ; Caption[:HAUL_FOOD] = 'Food Hauling'
    ENUM[5] = :HAUL_REFUSE ; NUME[:HAUL_REFUSE] = 5 ; Caption[:HAUL_REFUSE] = 'Refuse Hauling'
    ENUM[6] = :HAUL_ITEM ; NUME[:HAUL_ITEM] = 6 ; Caption[:HAUL_ITEM] = 'Item Hauling'
    ENUM[7] = :HAUL_FURNITURE ; NUME[:HAUL_FURNITURE] = 7 ; Caption[:HAUL_FURNITURE] = 'Furniture Hauling'
    ENUM[8] = :HAUL_ANIMALS ; NUME[:HAUL_ANIMALS] = 8 ; Caption[:HAUL_ANIMALS] = 'Animal Hauling'
    ENUM[9] = :CLEAN ; NUME[:CLEAN] = 9 ; Caption[:CLEAN] = 'Cleaning'
    ENUM[10] = :CUTWOOD ; NUME[:CUTWOOD] = 10 ; Caption[:CUTWOOD] = 'Wood Cutting'
    ENUM[11] = :CARPENTER ; NUME[:CARPENTER] = 11 ; Caption[:CARPENTER] = 'Carpentry'
    ENUM[12] = :DETAIL ; NUME[:DETAIL] = 12 ; Caption[:DETAIL] = 'Stone Detailing'
    ENUM[13] = :MASON ; NUME[:MASON] = 13 ; Caption[:MASON] = 'Masonry'
    ENUM[14] = :ARCHITECT ; NUME[:ARCHITECT] = 14 ; Caption[:ARCHITECT] = 'Architecture'
    ENUM[15] = :ANIMALTRAIN ; NUME[:ANIMALTRAIN] = 15 ; Caption[:ANIMALTRAIN] = 'Animal Training'
    ENUM[16] = :ANIMALCARE ; NUME[:ANIMALCARE] = 16 ; Caption[:ANIMALCARE] = 'Animal Care'
    ENUM[17] = :DIAGNOSE ; NUME[:DIAGNOSE] = 17 ; Caption[:DIAGNOSE] = 'Diagnosis'
    ENUM[18] = :SURGERY ; NUME[:SURGERY] = 18 ; Caption[:SURGERY] = 'Surgery'
    ENUM[19] = :BONE_SETTING ; NUME[:BONE_SETTING] = 19 ; Caption[:BONE_SETTING] = 'Setting Bones'
    ENUM[20] = :SUTURING ; NUME[:SUTURING] = 20 ; Caption[:SUTURING] = 'Suturing'
    ENUM[21] = :DRESSING_WOUNDS ; NUME[:DRESSING_WOUNDS] = 21 ; Caption[:DRESSING_WOUNDS] = 'Dressing Wounds'
    ENUM[22] = :FEED_WATER_CIVILIANS ; NUME[:FEED_WATER_CIVILIANS] = 22 ; Caption[:FEED_WATER_CIVILIANS] = 'Feed Patients/Prisoners'
    ENUM[23] = :RECOVER_WOUNDED ; NUME[:RECOVER_WOUNDED] = 23 ; Caption[:RECOVER_WOUNDED] = 'Recovering Wounded'
    ENUM[24] = :BUTCHER ; NUME[:BUTCHER] = 24 ; Caption[:BUTCHER] = 'Butchery'
    ENUM[25] = :TRAPPER ; NUME[:TRAPPER] = 25 ; Caption[:TRAPPER] = 'Trapping'
    ENUM[26] = :DISSECT_VERMIN ; NUME[:DISSECT_VERMIN] = 26 ; Caption[:DISSECT_VERMIN] = 'Small Animal Dissection'
    ENUM[27] = :LEATHER ; NUME[:LEATHER] = 27 ; Caption[:LEATHER] = 'Leatherworking'
    ENUM[28] = :TANNER ; NUME[:TANNER] = 28 ; Caption[:TANNER] = 'Tanning'
    ENUM[29] = :BREWER ; NUME[:BREWER] = 29 ; Caption[:BREWER] = 'Brewing'
    ENUM[30] = :ALCHEMIST ; NUME[:ALCHEMIST] = 30 ; Caption[:ALCHEMIST] = 'Alchemy'
    ENUM[31] = :SOAP_MAKER ; NUME[:SOAP_MAKER] = 31 ; Caption[:SOAP_MAKER] = 'Soap Maker'
    ENUM[32] = :WEAVER ; NUME[:WEAVER] = 32 ; Caption[:WEAVER] = 'Weaving'
    ENUM[33] = :CLOTHESMAKER ; NUME[:CLOTHESMAKER] = 33 ; Caption[:CLOTHESMAKER] = 'Clothesmaking'
    ENUM[34] = :MILLER ; NUME[:MILLER] = 34 ; Caption[:MILLER] = 'Milling'
    ENUM[35] = :PROCESS_PLANT ; NUME[:PROCESS_PLANT] = 35 ; Caption[:PROCESS_PLANT] = 'Plant Processing'
    ENUM[36] = :MAKE_CHEESE ; NUME[:MAKE_CHEESE] = 36 ; Caption[:MAKE_CHEESE] = 'Cheese Making'
    ENUM[37] = :MILK ; NUME[:MILK] = 37 ; Caption[:MILK] = 'Milking'
    ENUM[38] = :COOK ; NUME[:COOK] = 38 ; Caption[:COOK] = 'Cooking'
    ENUM[39] = :PLANT ; NUME[:PLANT] = 39 ; Caption[:PLANT] = 'Farming (Fields)'
    ENUM[40] = :HERBALIST ; NUME[:HERBALIST] = 40 ; Caption[:HERBALIST] = 'Plant Gathering'
    ENUM[41] = :FISH ; NUME[:FISH] = 41 ; Caption[:FISH] = 'Fishing'
    ENUM[42] = :CLEAN_FISH ; NUME[:CLEAN_FISH] = 42 ; Caption[:CLEAN_FISH] = 'Fish Cleaning'
    ENUM[43] = :DISSECT_FISH ; NUME[:DISSECT_FISH] = 43 ; Caption[:DISSECT_FISH] = 'Fish Dissection'
    ENUM[44] = :HUNT ; NUME[:HUNT] = 44 ; Caption[:HUNT] = 'Hunting'
    ENUM[45] = :SMELT ; NUME[:SMELT] = 45 ; Caption[:SMELT] = 'Furnace Operating'
    ENUM[46] = :FORGE_WEAPON ; NUME[:FORGE_WEAPON] = 46 ; Caption[:FORGE_WEAPON] = 'Weaponsmithing'
    ENUM[47] = :FORGE_ARMOR ; NUME[:FORGE_ARMOR] = 47 ; Caption[:FORGE_ARMOR] = 'Armoring'
    ENUM[48] = :FORGE_FURNITURE ; NUME[:FORGE_FURNITURE] = 48 ; Caption[:FORGE_FURNITURE] = 'Blacksmithing'
    ENUM[49] = :METAL_CRAFT ; NUME[:METAL_CRAFT] = 49 ; Caption[:METAL_CRAFT] = 'Metalcrafting'
    ENUM[50] = :CUT_GEM ; NUME[:CUT_GEM] = 50 ; Caption[:CUT_GEM] = 'Gem Cutting'
    ENUM[51] = :ENCRUST_GEM ; NUME[:ENCRUST_GEM] = 51 ; Caption[:ENCRUST_GEM] = 'Gem Setting'
    ENUM[52] = :WOOD_CRAFT ; NUME[:WOOD_CRAFT] = 52 ; Caption[:WOOD_CRAFT] = 'Woodcrafting'
    ENUM[53] = :STONE_CRAFT ; NUME[:STONE_CRAFT] = 53 ; Caption[:STONE_CRAFT] = 'Stonecrafting'
    ENUM[54] = :BONE_CARVE ; NUME[:BONE_CARVE] = 54 ; Caption[:BONE_CARVE] = 'Bone Carving'
    ENUM[55] = :GLASSMAKER ; NUME[:GLASSMAKER] = 55 ; Caption[:GLASSMAKER] = 'Glassmaking'
    ENUM[56] = :EXTRACT_STRAND ; NUME[:EXTRACT_STRAND] = 56 ; Caption[:EXTRACT_STRAND] = 'Strand Extraction'
    ENUM[57] = :SIEGECRAFT ; NUME[:SIEGECRAFT] = 57 ; Caption[:SIEGECRAFT] = 'Siege Engineering'
    ENUM[58] = :SIEGEOPERATE ; NUME[:SIEGEOPERATE] = 58 ; Caption[:SIEGEOPERATE] = 'Siege Operating'
    ENUM[59] = :BOWYER ; NUME[:BOWYER] = 59 ; Caption[:BOWYER] = 'Crossbow-making'
    ENUM[60] = :MECHANIC ; NUME[:MECHANIC] = 60 ; Caption[:MECHANIC] = 'Mechanics'
    ENUM[61] = :POTASH_MAKING ; NUME[:POTASH_MAKING] = 61 ; Caption[:POTASH_MAKING] = 'Potash Making'
    ENUM[62] = :LYE_MAKING ; NUME[:LYE_MAKING] = 62 ; Caption[:LYE_MAKING] = 'Lye Making'
    ENUM[63] = :DYER ; NUME[:DYER] = 63 ; Caption[:DYER] = 'Dyeing'
    ENUM[64] = :BURN_WOOD ; NUME[:BURN_WOOD] = 64 ; Caption[:BURN_WOOD] = 'Wood Burning'
    ENUM[65] = :OPERATE_PUMP ; NUME[:OPERATE_PUMP] = 65 ; Caption[:OPERATE_PUMP] = 'Pump Operating'
    ENUM[66] = :SHEARER ; NUME[:SHEARER] = 66 ; Caption[:SHEARER] = 'Shearing'
    ENUM[67] = :SPINNER ; NUME[:SPINNER] = 67 ; Caption[:SPINNER] = 'Spinning'
    ENUM[68] = :POTTERY ; NUME[:POTTERY] = 68 ; Caption[:POTTERY] = 'Pottery'
    ENUM[69] = :GLAZING ; NUME[:GLAZING] = 69 ; Caption[:GLAZING] = 'Glazing'
    ENUM[70] = :PRESSING ; NUME[:PRESSING] = 70 ; Caption[:PRESSING] = 'Pressing'
    ENUM[71] = :BEEKEEPING ; NUME[:BEEKEEPING] = 71 ; Caption[:BEEKEEPING] = 'Bee Keeping'
    ENUM[72] = :WAX_WORKING ; NUME[:WAX_WORKING] = 72 ; Caption[:WAX_WORKING] = 'Wax Working'
    ENUM[73] = :HANDLE_VEHICLES ; NUME[:HANDLE_VEHICLES] = 73 ; Caption[:HANDLE_VEHICLES] = 'Push/Haul Vehicles'
    ENUM[74] = :HAUL_TRADE ; NUME[:HAUL_TRADE] = 74 ; Caption[:HAUL_TRADE] = 'Trade Good Hauling'
    ENUM[75] = :PULL_LEVER ; NUME[:PULL_LEVER] = 75 ; Caption[:PULL_LEVER] = 'Lever Operation'
    ENUM[76] = :REMOVE_CONSTRUCTION ; NUME[:REMOVE_CONSTRUCTION] = 76 ; Caption[:REMOVE_CONSTRUCTION] = 'Construction Removal'
    ENUM[77] = :HAUL_WATER ; NUME[:HAUL_WATER] = 77 ; Caption[:HAUL_WATER] = 'Water Hauling'
    ENUM[78] = :GELD ; NUME[:GELD] = 78 ; Caption[:GELD] = 'Gelding'
    ENUM[79] = :BUILD_ROAD ; NUME[:BUILD_ROAD] = 79 ; Caption[:BUILD_ROAD] = 'Road Building'
    ENUM[80] = :BUILD_CONSTRUCTION ; NUME[:BUILD_CONSTRUCTION] = 80 ; Caption[:BUILD_CONSTRUCTION] = 'Wall/Floor Construction'
end

class UnitPathGoal < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :None ; NUME[:None] = -1
    ENUM[0] = :ComeToJobBuilding ; NUME[:ComeToJobBuilding] = 0
    ENUM[1] = :ValidPondDumpUnit ; NUME[:ValidPondDumpUnit] = 1
    ENUM[2] = :ValidPondDump ; NUME[:ValidPondDump] = 2
    ENUM[3] = :ConflictDefense ; NUME[:ConflictDefense] = 3
    ENUM[4] = :AdventureMove ; NUME[:AdventureMove] = 4
    ENUM[5] = :MarauderMill ; NUME[:MarauderMill] = 5
    ENUM[6] = :WildernessCuriousStealTarget ; NUME[:WildernessCuriousStealTarget] = 6
    ENUM[7] = :WildernessRoamer ; NUME[:WildernessRoamer] = 7
    ENUM[8] = :ThiefTarget ; NUME[:ThiefTarget] = 8
    ENUM[9] = :Owner ; NUME[:Owner] = 9
    ENUM[10] = :CheckChest ; NUME[:CheckChest] = 10
    ENUM[11] = :SleepBed ; NUME[:SleepBed] = 11
    ENUM[12] = :SleepBarracks ; NUME[:SleepBarracks] = 12
    ENUM[13] = :SleepGround ; NUME[:SleepGround] = 13
    ENUM[14] = :LeaveWall ; NUME[:LeaveWall] = 14
    ENUM[15] = :FleeTerrain ; NUME[:FleeTerrain] = 15
    ENUM[16] = :TaxRoom ; NUME[:TaxRoom] = 16
    ENUM[17] = :GuardTaxes ; NUME[:GuardTaxes] = 17
    ENUM[18] = :RansackTaxes ; NUME[:RansackTaxes] = 18
    ENUM[19] = :GetEmptySandBag ; NUME[:GetEmptySandBag] = 19
    ENUM[20] = :SandZone ; NUME[:SandZone] = 20
    ENUM[21] = :GrabCage ; NUME[:GrabCage] = 21
    ENUM[22] = :UncageAnimal ; NUME[:UncageAnimal] = 22
    ENUM[23] = :CaptureSmallPet ; NUME[:CaptureSmallPet] = 23
    ENUM[24] = :GrabCageUnit ; NUME[:GrabCageUnit] = 24
    ENUM[25] = :GoToCage ; NUME[:GoToCage] = 25
    ENUM[26] = :GrabAnimalTrap ; NUME[:GrabAnimalTrap] = 26
    ENUM[27] = :CageVermin ; NUME[:CageVermin] = 27
    ENUM[28] = :GrabUnfillBucket ; NUME[:GrabUnfillBucket] = 28
    ENUM[29] = :SeekFillBucket ; NUME[:SeekFillBucket] = 29
    ENUM[30] = :SeekPatientForCarry ; NUME[:SeekPatientForCarry] = 30
    ENUM[31] = :SeekPatientForDiagnosis ; NUME[:SeekPatientForDiagnosis] = 31
    ENUM[32] = :SeekPatientForImmobilizeBreak ; NUME[:SeekPatientForImmobilizeBreak] = 32
    ENUM[33] = :SeekPatientForCrutch ; NUME[:SeekPatientForCrutch] = 33
    ENUM[34] = :SeekPatientForSuturing ; NUME[:SeekPatientForSuturing] = 34
    ENUM[35] = :SeekSurgerySite ; NUME[:SeekSurgerySite] = 35
    ENUM[36] = :CarryPatientToBed ; NUME[:CarryPatientToBed] = 36
    ENUM[37] = :SeekGiveWaterBucket ; NUME[:SeekGiveWaterBucket] = 37
    ENUM[38] = :SeekJobItem ; NUME[:SeekJobItem] = 38
    ENUM[39] = :SeekUnitForItemDrop ; NUME[:SeekUnitForItemDrop] = 39
    ENUM[40] = :SeekUnitForJob ; NUME[:SeekUnitForJob] = 40
    ENUM[41] = :SeekSplint ; NUME[:SeekSplint] = 41
    ENUM[42] = :SeekCrutch ; NUME[:SeekCrutch] = 42
    ENUM[43] = :SeekSutureThread ; NUME[:SeekSutureThread] = 43
    ENUM[44] = :SeekDressingCloth ; NUME[:SeekDressingCloth] = 44
    ENUM[45] = :GoToGiveWaterTarget ; NUME[:GoToGiveWaterTarget] = 45
    ENUM[46] = :SeekFoodForTarget ; NUME[:SeekFoodForTarget] = 46
    ENUM[47] = :SeekTargetForFood ; NUME[:SeekTargetForFood] = 47
    ENUM[48] = :SeekAnimalForSlaughter ; NUME[:SeekAnimalForSlaughter] = 48
    ENUM[49] = :SeekSlaughterBuilding ; NUME[:SeekSlaughterBuilding] = 49
    ENUM[50] = :SeekAnimalForChain ; NUME[:SeekAnimalForChain] = 50
    ENUM[51] = :SeekChainForAnimal ; NUME[:SeekChainForAnimal] = 51
    ENUM[52] = :SeekCageForUnchain ; NUME[:SeekCageForUnchain] = 52
    ENUM[53] = :SeekAnimalForUnchain ; NUME[:SeekAnimalForUnchain] = 53
    ENUM[54] = :GrabFoodForTaming ; NUME[:GrabFoodForTaming] = 54
    ENUM[55] = :SeekAnimalForTaming ; NUME[:SeekAnimalForTaming] = 55
    ENUM[56] = :SeekDrinkItem ; NUME[:SeekDrinkItem] = 56
    ENUM[57] = :SeekFoodItem ; NUME[:SeekFoodItem] = 57
    ENUM[58] = :SeekEatingChair ; NUME[:SeekEatingChair] = 58
    ENUM[59] = :SeekEatingChair2 ; NUME[:SeekEatingChair2] = 59
    ENUM[60] = :SeekBadMoodBuilding ; NUME[:SeekBadMoodBuilding] = 60
    ENUM[61] = :SetGlassMoodBuilding ; NUME[:SetGlassMoodBuilding] = 61
    ENUM[62] = :SetMoodBuilding ; NUME[:SetMoodBuilding] = 62
    ENUM[63] = :SeekFellVictim ; NUME[:SeekFellVictim] = 63
    ENUM[64] = :CleanBuildingSite ; NUME[:CleanBuildingSite] = 64
    ENUM[65] = :ResetPriorityGoal ; NUME[:ResetPriorityGoal] = 65
    ENUM[66] = :MainJobBuilding ; NUME[:MainJobBuilding] = 66
    ENUM[67] = :DropOffJobItems ; NUME[:DropOffJobItems] = 67
    ENUM[68] = :GrabJobResources ; NUME[:GrabJobResources] = 68
    ENUM[69] = :WorkAtBuilding ; NUME[:WorkAtBuilding] = 69
    ENUM[70] = :GrabUniform ; NUME[:GrabUniform] = 70
    ENUM[71] = :GrabClothing ; NUME[:GrabClothing] = 71
    ENUM[72] = :GrabWeapon ; NUME[:GrabWeapon] = 72
    ENUM[73] = :GrabAmmunition ; NUME[:GrabAmmunition] = 73
    ENUM[74] = :GrabShield ; NUME[:GrabShield] = 74
    ENUM[75] = :GrabArmor ; NUME[:GrabArmor] = 75
    ENUM[76] = :GrabHelm ; NUME[:GrabHelm] = 76
    ENUM[77] = :GrabBoots ; NUME[:GrabBoots] = 77
    ENUM[78] = :GrabGloves ; NUME[:GrabGloves] = 78
    ENUM[79] = :GrabPants ; NUME[:GrabPants] = 79
    ENUM[80] = :GrabQuiver ; NUME[:GrabQuiver] = 80
    ENUM[81] = :GrabBackpack ; NUME[:GrabBackpack] = 81
    ENUM[82] = :GrabWaterskin ; NUME[:GrabWaterskin] = 82
    ENUM[83] = :StartHunt ; NUME[:StartHunt] = 83
    ENUM[84] = :StartFish ; NUME[:StartFish] = 84
    ENUM[85] = :Clean ; NUME[:Clean] = 85
    ENUM[86] = :HuntVermin ; NUME[:HuntVermin] = 86
    ENUM[87] = :Patrol ; NUME[:Patrol] = 87
    ENUM[88] = :SquadStation ; NUME[:SquadStation] = 88
    ENUM[89] = :SeekInfant ; NUME[:SeekInfant] = 89
    ENUM[90] = :ShopSpecific ; NUME[:ShopSpecific] = 90
    ENUM[91] = :MillInShop ; NUME[:MillInShop] = 91
    ENUM[92] = :GoToShop ; NUME[:GoToShop] = 92
    ENUM[93] = :SeekTrainingAmmunition ; NUME[:SeekTrainingAmmunition] = 93
    ENUM[94] = :ArcheryTrainingSite ; NUME[:ArcheryTrainingSite] = 94
    ENUM[95] = :SparringPartner ; NUME[:SparringPartner] = 95
    ENUM[96] = :SparringSite ; NUME[:SparringSite] = 96
    ENUM[97] = :AttendParty ; NUME[:AttendParty] = 97
    ENUM[98] = :SeekArtifact ; NUME[:SeekArtifact] = 98
    ENUM[99] = :GrabAmmunitionForBuilding ; NUME[:GrabAmmunitionForBuilding] = 99
    ENUM[100] = :SeekBuildingForAmmunition ; NUME[:SeekBuildingForAmmunition] = 100
    ENUM[101] = :SeekItemForStorage ; NUME[:SeekItemForStorage] = 101
    ENUM[102] = :StoreItem ; NUME[:StoreItem] = 102
    ENUM[103] = :GrabKill ; NUME[:GrabKill] = 103
    ENUM[104] = :DropKillAtButcher ; NUME[:DropKillAtButcher] = 104
    ENUM[105] = :DropKillOutFront ; NUME[:DropKillOutFront] = 105
    ENUM[106] = :GoToBeatingTarget ; NUME[:GoToBeatingTarget] = 106
    ENUM[107] = :SeekKidnapVictim ; NUME[:SeekKidnapVictim] = 107
    ENUM[108] = :SeekHuntingTarget ; NUME[:SeekHuntingTarget] = 108
    ENUM[109] = :SeekTargetMechanism ; NUME[:SeekTargetMechanism] = 109
    ENUM[110] = :SeekTargetForMechanism ; NUME[:SeekTargetForMechanism] = 110
    ENUM[111] = :SeekMechanismForTrigger ; NUME[:SeekMechanismForTrigger] = 111
    ENUM[112] = :SeekTriggerForMechanism ; NUME[:SeekTriggerForMechanism] = 112
    ENUM[113] = :SeekTrapForVerminCatch ; NUME[:SeekTrapForVerminCatch] = 113
    ENUM[114] = :SeekVerminForCatching ; NUME[:SeekVerminForCatching] = 114
    ENUM[115] = :SeekVerminCatchLocation ; NUME[:SeekVerminCatchLocation] = 115
    ENUM[116] = :WanderVerminCatchLocation ; NUME[:WanderVerminCatchLocation] = 116
    ENUM[117] = :SeekVerminForHunting ; NUME[:SeekVerminForHunting] = 117
    ENUM[118] = :SeekVerminHuntingSpot ; NUME[:SeekVerminHuntingSpot] = 118
    ENUM[119] = :WanderVerminHuntingSpot ; NUME[:WanderVerminHuntingSpot] = 119
    ENUM[120] = :SeekFishTrap ; NUME[:SeekFishTrap] = 120
    ENUM[121] = :SeekFishCatchLocation ; NUME[:SeekFishCatchLocation] = 121
    ENUM[122] = :SeekWellForWater ; NUME[:SeekWellForWater] = 122
    ENUM[123] = :SeekDrinkAreaForWater ; NUME[:SeekDrinkAreaForWater] = 123
    ENUM[124] = :UpgradeSquadEquipment ; NUME[:UpgradeSquadEquipment] = 124
    ENUM[125] = :PrepareEquipmentManifests ; NUME[:PrepareEquipmentManifests] = 125
    ENUM[126] = :WanderDepot ; NUME[:WanderDepot] = 126
    ENUM[127] = :SeekUpdateOffice ; NUME[:SeekUpdateOffice] = 127
    ENUM[128] = :SeekManageOffice ; NUME[:SeekManageOffice] = 128
    ENUM[129] = :AssignedBuildingJob ; NUME[:AssignedBuildingJob] = 129
    ENUM[130] = :ChaseOpponent ; NUME[:ChaseOpponent] = 130
    ENUM[131] = :FleeFromOpponent ; NUME[:FleeFromOpponent] = 131
    ENUM[132] = :AttackBuilding ; NUME[:AttackBuilding] = 132
    ENUM[133] = :StartBedCarry ; NUME[:StartBedCarry] = 133
    ENUM[134] = :StartGiveFoodWater ; NUME[:StartGiveFoodWater] = 134
    ENUM[135] = :StartMedicalAid ; NUME[:StartMedicalAid] = 135
    ENUM[136] = :SeekStationFlood ; NUME[:SeekStationFlood] = 136
    ENUM[137] = :SeekStation ; NUME[:SeekStation] = 137
    ENUM[138] = :StartWaterJobWell ; NUME[:StartWaterJobWell] = 138
    ENUM[139] = :StartWaterJobDrinkArea ; NUME[:StartWaterJobDrinkArea] = 139
    ENUM[140] = :StartEatJob ; NUME[:StartEatJob] = 140
    ENUM[141] = :ScheduledMeal ; NUME[:ScheduledMeal] = 141
    ENUM[142] = :ScheduledSleepBed ; NUME[:ScheduledSleepBed] = 142
    ENUM[143] = :ScheduledSleepGround ; NUME[:ScheduledSleepGround] = 143
    ENUM[144] = :Rest ; NUME[:Rest] = 144
    ENUM[145] = :RemoveConstruction ; NUME[:RemoveConstruction] = 145
    ENUM[146] = :Chop ; NUME[:Chop] = 146
    ENUM[147] = :Detail ; NUME[:Detail] = 147
    ENUM[148] = :GatherPlant ; NUME[:GatherPlant] = 148
    ENUM[149] = :Dig ; NUME[:Dig] = 149
    ENUM[150] = :Mischief ; NUME[:Mischief] = 150
    ENUM[151] = :ChaseOpponentSameSquare ; NUME[:ChaseOpponentSameSquare] = 151
    ENUM[152] = :RestRecovered ; NUME[:RestRecovered] = 152
    ENUM[153] = :RestReset ; NUME[:RestReset] = 153
    ENUM[154] = :CombatTraining ; NUME[:CombatTraining] = 154
    ENUM[155] = :SkillDemonstration ; NUME[:SkillDemonstration] = 155
    ENUM[156] = :IndividualSkillDrill ; NUME[:IndividualSkillDrill] = 156
    ENUM[157] = :SeekBuildingForItemDrop ; NUME[:SeekBuildingForItemDrop] = 157
    ENUM[158] = :SeekBuildingForJob ; NUME[:SeekBuildingForJob] = 158
    ENUM[159] = :GrabMilkUnit ; NUME[:GrabMilkUnit] = 159
    ENUM[160] = :GoToMilkStation ; NUME[:GoToMilkStation] = 160
    ENUM[161] = :SeekPatientForDressWound ; NUME[:SeekPatientForDressWound] = 161
    ENUM[162] = :UndeadHunt ; NUME[:UndeadHunt] = 162
    ENUM[163] = :GrabShearUnit ; NUME[:GrabShearUnit] = 163
    ENUM[164] = :GoToShearStation ; NUME[:GoToShearStation] = 164
    ENUM[165] = :LayEggNestBox ; NUME[:LayEggNestBox] = 165
    ENUM[166] = :ClayZone ; NUME[:ClayZone] = 166
    ENUM[167] = :ColonyToInstall ; NUME[:ColonyToInstall] = 167
    ENUM[168] = :ReturnColonyToInstall ; NUME[:ReturnColonyToInstall] = 168
    ENUM[169] = :Nonsense ; NUME[:Nonsense] = 169
    ENUM[170] = :SeekBloodSuckVictim ; NUME[:SeekBloodSuckVictim] = 170
    ENUM[171] = :SeekSheriff ; NUME[:SeekSheriff] = 171
    ENUM[172] = :GrabExecutionWeapon ; NUME[:GrabExecutionWeapon] = 172
    ENUM[173] = :TrainAnimal ; NUME[:TrainAnimal] = 173
    ENUM[174] = :GuardPath ; NUME[:GuardPath] = 174
    ENUM[175] = :Harass ; NUME[:Harass] = 175
    ENUM[176] = :SiteWalk ; NUME[:SiteWalk] = 176
    ENUM[177] = :SiteWalkToBuilding ; NUME[:SiteWalkToBuilding] = 177
    ENUM[178] = :Reunion ; NUME[:Reunion] = 178
    ENUM[179] = :ArmyWalk ; NUME[:ArmyWalk] = 179
end

class UnitRelationshipType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Pet ; NUME[:Pet] = 0
    ENUM[1] = :Spouse ; NUME[:Spouse] = 1
    ENUM[2] = :Mother ; NUME[:Mother] = 2
    ENUM[3] = :Father ; NUME[:Father] = 3
    ENUM[4] = :LastAttacker ; NUME[:LastAttacker] = 4
    ENUM[5] = :GroupLeader ; NUME[:GroupLeader] = 5
    ENUM[6] = :Dragee ; NUME[:Dragee] = 6
    ENUM[7] = :Dragger ; NUME[:Dragger] = 7
    ENUM[8] = :RiderMount ; NUME[:RiderMount] = 8
    ENUM[9] = :Lover ; NUME[:Lover] = 9
    ENUM[10] = :Unk10 ; NUME[:Unk10] = 10
    ENUM[11] = :Unk11 ; NUME[:Unk11] = 11
    ENUM[12] = :Child ; NUME[:Child] = 12
    ENUM[13] = :Friend ; NUME[:Friend] = 13
    ENUM[14] = :Grudge ; NUME[:Grudge] = 14
    ENUM[15] = :Worship ; NUME[:Worship] = 15
    ENUM[16] = :AcquaintanceLong ; NUME[:AcquaintanceLong] = 16
    ENUM[17] = :AcquaintancePassing ; NUME[:AcquaintancePassing] = 17
    ENUM[18] = :Bonded ; NUME[:Bonded] = 18
    ENUM[19] = :Hero ; NUME[:Hero] = 19
    ENUM[20] = :ConsidersViolent ; NUME[:ConsidersViolent] = 20
    ENUM[21] = :ConsidersPsychotic ; NUME[:ConsidersPsychotic] = 21
    ENUM[22] = :GoodForBusiness ; NUME[:GoodForBusiness] = 22
    ENUM[23] = :FriendlyTerms ; NUME[:FriendlyTerms] = 23
    ENUM[24] = :ConsidersKiller ; NUME[:ConsidersKiller] = 24
    ENUM[25] = :ConsidersMurderer ; NUME[:ConsidersMurderer] = 25
    ENUM[26] = :Comrade ; NUME[:Comrade] = 26
    ENUM[27] = :MemberOfRespectedGroup ; NUME[:MemberOfRespectedGroup] = 27
    ENUM[28] = :MemberOfHatedGroup ; NUME[:MemberOfHatedGroup] = 28
    ENUM[29] = :EnemyFighter ; NUME[:EnemyFighter] = 29
    ENUM[30] = :FriendlyFighter ; NUME[:FriendlyFighter] = 30
    ENUM[31] = :ConsidersBully ; NUME[:ConsidersBully] = 31
    ENUM[32] = :ConsidersBrigand ; NUME[:ConsidersBrigand] = 32
    ENUM[33] = :LoyalSoldier ; NUME[:LoyalSoldier] = 33
    ENUM[34] = :ConsidersMonster ; NUME[:ConsidersMonster] = 34
end

class UnitReportType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Combat ; NUME[:Combat] = 0
    ENUM[1] = :Sparring ; NUME[:Sparring] = 1
    ENUM[2] = :Hunting ; NUME[:Hunting] = 2
end

class UnitStationType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[-1] = :None ; NUME[:None] = -1
    ENUM[0] = :Nonsense ; NUME[:Nonsense] = 0
    ENUM[1] = :DungeonCommander ; NUME[:DungeonCommander] = 1
    ENUM[2] = :InsaneMood ; NUME[:InsaneMood] = 2
    ENUM[3] = :UndeadHunt ; NUME[:UndeadHunt] = 3
    ENUM[4] = :SiegerPatrol ; NUME[:SiegerPatrol] = 4
    ENUM[5] = :MaraudeTarget ; NUME[:MaraudeTarget] = 5
    ENUM[6] = :SiegerBasepoint ; NUME[:SiegerBasepoint] = 6
    ENUM[7] = :SiegerMill ; NUME[:SiegerMill] = 7
    ENUM[8] = :AmbushPatrol ; NUME[:AmbushPatrol] = 8
    ENUM[9] = :MarauderMill ; NUME[:MarauderMill] = 9
    ENUM[10] = :WildernessCuriousWander ; NUME[:WildernessCuriousWander] = 10
    ENUM[11] = :WildernessCuriousStealTarget ; NUME[:WildernessCuriousStealTarget] = 11
    ENUM[12] = :WildernessRoamer ; NUME[:WildernessRoamer] = 12
    ENUM[13] = :PatternPatrol ; NUME[:PatternPatrol] = 13
    ENUM[14] = :InactiveMarauder ; NUME[:InactiveMarauder] = 14
    ENUM[15] = :Owner ; NUME[:Owner] = 15
    ENUM[16] = :Commander ; NUME[:Commander] = 16
    ENUM[17] = :ChainedAnimal ; NUME[:ChainedAnimal] = 17
    ENUM[18] = :MeetingLocation ; NUME[:MeetingLocation] = 18
    ENUM[19] = :MeetingLocationBuilding ; NUME[:MeetingLocationBuilding] = 19
    ENUM[20] = :Depot ; NUME[:Depot] = 20
    ENUM[21] = :VerminHunting ; NUME[:VerminHunting] = 21
    ENUM[22] = :SeekCommander ; NUME[:SeekCommander] = 22
    ENUM[23] = :ReturnToBase ; NUME[:ReturnToBase] = 23
    ENUM[24] = :MillAnywhere ; NUME[:MillAnywhere] = 24
    ENUM[25] = :Wagon ; NUME[:Wagon] = 25
    ENUM[26] = :MillBuilding ; NUME[:MillBuilding] = 26
    ENUM[27] = :HeadForEdge ; NUME[:HeadForEdge] = 27
    ENUM[28] = :MillingFlood ; NUME[:MillingFlood] = 28
    ENUM[29] = :MillingBurrow ; NUME[:MillingBurrow] = 29
    ENUM[30] = :SquadMove ; NUME[:SquadMove] = 30
    ENUM[31] = :SquadKillList ; NUME[:SquadKillList] = 31
    ENUM[32] = :SquadPatrol ; NUME[:SquadPatrol] = 32
    ENUM[33] = :SquadDefendBurrow ; NUME[:SquadDefendBurrow] = 33
    ENUM[34] = :SquadDefendBurrowFromTarget ; NUME[:SquadDefendBurrowFromTarget] = 34
    ENUM[35] = :LairHunter ; NUME[:LairHunter] = 35
    ENUM[36] = :Graze ; NUME[:Graze] = 36
    ENUM[37] = :Guard ; NUME[:Guard] = 37
    ENUM[38] = :Alarm ; NUME[:Alarm] = 38
    ENUM[39] = :MoveToSite ; NUME[:MoveToSite] = 39
    ENUM[40] = :ClaimSite ; NUME[:ClaimSite] = 40
    ENUM[41] = :WaitOrder ; NUME[:WaitOrder] = 41
end

class UnitThoughtType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    Caption = Hash.new
    ENUM[0] = :Conflict ; NUME[:Conflict] = 0 ; Caption[:Conflict] = 'while in conflic'
    ENUM[1] = :Trauma ; NUME[:Trauma] = 1 ; Caption[:Trauma] = 'after experiencing trauma'
    ENUM[2] = :WitnessDeath ; NUME[:WitnessDeath] = 2 ; Caption[:WitnessDeath] = 'after seeing somebody die'
    ENUM[3] = :UnexpectedDeath ; NUME[:UnexpectedDeath] = 3 ; Caption[:UnexpectedDeath] = 'at the unexpected death of [somebody]'
    ENUM[4] = :Death ; NUME[:Death] = 4 ; Caption[:Death] = 'at somebody\'s death'
    ENUM[5] = :Kill ; NUME[:Kill] = 5 ; Caption[:Kill] = 'while killing somebody'
    ENUM[6] = :LoveSeparated ; NUME[:LoveSeparated] = 6 ; Caption[:LoveSeparated] = 'at being separated from a loved one'
    ENUM[7] = :LoveReunited ; NUME[:LoveReunited] = 7 ; Caption[:LoveReunited] = 'after being reunited with a loved one'
    ENUM[8] = :JoinConflict ; NUME[:JoinConflict] = 8 ; Caption[:JoinConflict] = 'when joining an existing conflict'
    ENUM[9] = :MakeMasterwork ; NUME[:MakeMasterwork] = 9 ; Caption[:MakeMasterwork] = 'after producing a masterwork'
    ENUM[10] = :MadeArtifact ; NUME[:MadeArtifact] = 10 ; Caption[:MadeArtifact] = 'after creating an artifact'
    ENUM[11] = :MasterSkill ; NUME[:MasterSkill] = 11 ; Caption[:MasterSkill] = 'upon mastering [skill]'
    ENUM[12] = :NewRomance ; NUME[:NewRomance] = 12 ; Caption[:NewRomance] = 'as [he] was caught up in a new romance'
    ENUM[13] = :BecomeParent ; NUME[:BecomeParent] = 13 ; Caption[:BecomeParent] = 'after becoming a parent'
    ENUM[14] = :NearConflict ; NUME[:NearConflict] = 14 ; Caption[:NearConflict] = 'being near to a conflict'
    ENUM[15] = :CancelAgreement ; NUME[:CancelAgreement] = 15 ; Caption[:CancelAgreement] = 'after an agreement was cancelled'
    ENUM[16] = :JoinTravel ; NUME[:JoinTravel] = 16 ; Caption[:JoinTravel] = 'upon joining a traveling group'
    ENUM[17] = :SiteControlled ; NUME[:SiteControlled] = 17 ; Caption[:SiteControlled] = 'after a site was controlled'
    ENUM[18] = :TributeCancel ; NUME[:TributeCancel] = 18 ; Caption[:TributeCancel] = 'after a tribute cancellation'
    ENUM[19] = :Incident ; NUME[:Incident] = 19 ; Caption[:Incident] = 'after an incident'
    ENUM[20] = :HearRumor ; NUME[:HearRumor] = 20 ; Caption[:HearRumor] = 'after hearing a rumor'
    ENUM[21] = :MilitaryRemoved ; NUME[:MilitaryRemoved] = 21 ; Caption[:MilitaryRemoved] = 'after being removed from a military group'
    ENUM[22] = :StrangerWeapon ; NUME[:StrangerWeapon] = 22 ; Caption[:StrangerWeapon] = 'when a stranger advanced with a weapon'
    ENUM[23] = :StrangerSneaking ; NUME[:StrangerSneaking] = 23 ; Caption[:StrangerSneaking] = 'after seeing a stranger sneaking around'
    ENUM[24] = :SawDrinkBlood ; NUME[:SawDrinkBlood] = 24 ; Caption[:SawDrinkBlood] = 'after witnessing a night creature drinking blood'
    ENUM[25] = :Complained ; NUME[:Complained] = 25 ; Caption[:Complained] = '[multiple]'
    ENUM[26] = :ReceivedComplaint ; NUME[:ReceivedComplaint] = 26 ; Caption[:ReceivedComplaint] = '[multiple]'
    ENUM[27] = :AdmireBuilding ; NUME[:AdmireBuilding] = 27 ; Caption[:AdmireBuilding] = 'near a [quality] [building]'
    ENUM[28] = :AdmireOwnBuilding ; NUME[:AdmireOwnBuilding] = 28 ; Caption[:AdmireOwnBuilding] = 'near [his] own [quality] [building]'
    ENUM[29] = :AdmireArrangedBuilding ; NUME[:AdmireArrangedBuilding] = 29 ; Caption[:AdmireArrangedBuilding] = 'near a [quality] tastefully arranged [building]'
    ENUM[30] = :AdmireOwnArrangedBuilding ; NUME[:AdmireOwnArrangedBuilding] = 30 ; Caption[:AdmireOwnArrangedBuilding] = 'near [his] own [quality] tastefully arranged [building]'
    ENUM[31] = :LostPet ; NUME[:LostPet] = 31 ; Caption[:LostPet] = 'after losing a pet'
    ENUM[32] = :ThrownStuff ; NUME[:ThrownStuff] = 32 ; Caption[:ThrownStuff] = 'after throwing something'
    ENUM[33] = :JailReleased ; NUME[:JailReleased] = 33 ; Caption[:JailReleased] = 'after being released from confinement'
    ENUM[34] = :Miscarriage ; NUME[:Miscarriage] = 34 ; Caption[:Miscarriage] = 'after a miscarriage'
    ENUM[35] = :SpouseMiscarriage ; NUME[:SpouseMiscarriage] = 35 ; Caption[:SpouseMiscarriage] = 'after [his] spouse\'s miscarriage'
    ENUM[36] = :OldClothing ; NUME[:OldClothing] = 36 ; Caption[:OldClothing] = 'to be wearing old clothing'
    ENUM[37] = :TatteredClothing ; NUME[:TatteredClothing] = 37 ; Caption[:TatteredClothing] = 'to be wearing tattered clothing'
    ENUM[38] = :RottedClothing ; NUME[:RottedClothing] = 38 ; Caption[:RottedClothing] = 'to have clothes rot off of [his] body'
    ENUM[39] = :GhostNightmare ; NUME[:GhostNightmare] = 39 ; Caption[:GhostNightmare] = 'after being tormented in nightmares by a dead [somebody]'
    ENUM[40] = :GhostHaunt ; NUME[:GhostHaunt] = 40 ; Caption[:GhostHaunt] = 'after being haunted/tormented/possessed by a dead [somebody]'
    ENUM[41] = :Spar ; NUME[:Spar] = 41 ; Caption[:Spar] = 'after a sparring session'
    ENUM[42] = :UnableComplain ; NUME[:UnableComplain] = 42 ; Caption[:UnableComplain] = 'after being unable to [meet]'
    ENUM[43] = :LongPatrol ; NUME[:LongPatrol] = 43 ; Caption[:LongPatrol] = 'during long patrol duty'
    ENUM[44] = :SunNausea ; NUME[:SunNausea] = 44 ; Caption[:SunNausea] = 'after being nauseated bu the sun'
    ENUM[45] = :SunIrritated ; NUME[:SunIrritated] = 45 ; Caption[:SunIrritated] = 'at being out in the sunshine again'
    ENUM[46] = :Drowsy ; NUME[:Drowsy] = 46 ; Caption[:Drowsy] = 'when drowsy'
    ENUM[47] = :VeryDrowsy ; NUME[:VeryDrowsy] = 47 ; Caption[:VeryDrowsy] = 'when utterly sleep-deprived'
    ENUM[48] = :Thirsty ; NUME[:Thirsty] = 48 ; Caption[:Thirsty] = 'when thirsty'
    ENUM[49] = :Dehydrated ; NUME[:Dehydrated] = 49 ; Caption[:Dehydrated] = 'when dehydrated'
    ENUM[50] = :Hungry ; NUME[:Hungry] = 50 ; Caption[:Hungry] = 'when hungry'
    ENUM[51] = :Starving ; NUME[:Starving] = 51 ; Caption[:Starving] = 'when starving'
    ENUM[52] = :MajorInjuries ; NUME[:MajorInjuries] = 52 ; Caption[:MajorInjuries] = 'after suffering a major injury'
    ENUM[53] = :MinorInjuries ; NUME[:MinorInjuries] = 53 ; Caption[:MinorInjuries] = 'after suffering a minor injury'
    ENUM[54] = :SleepNoise ; NUME[:SleepNoise] = 54 ; Caption[:SleepNoise] = 'after [varying]'
    ENUM[55] = :Rest ; NUME[:Rest] = 55 ; Caption[:Rest] = 'after being able to rest and recuperate'
    ENUM[56] = :FreakishWeather ; NUME[:FreakishWeather] = 56 ; Caption[:FreakishWeather] = 'when caught in freakish weather'
    ENUM[57] = :Rain ; NUME[:Rain] = 57 ; Caption[:Rain] = 'when caught in the rain'
    ENUM[58] = :SnowStorm ; NUME[:SnowStorm] = 58 ; Caption[:SnowStorm] = 'when caught in a snow storm'
    ENUM[59] = :Miasma ; NUME[:Miasma] = 59 ; Caption[:Miasma] = 'after retching on a miasma'
    ENUM[60] = :Smoke ; NUME[:Smoke] = 60 ; Caption[:Smoke] = 'after choking on smoke underground'
    ENUM[61] = :Waterfall ; NUME[:Waterfall] = 61 ; Caption[:Waterfall] = 'being near to a waterfall'
    ENUM[62] = :Dust ; NUME[:Dust] = 62 ; Caption[:Dust] = 'after choking on dust underground'
    ENUM[63] = :Demands ; NUME[:Demands] = 63 ; Caption[:Demands] = 'considering the state of demands'
    ENUM[64] = :ImproperPunishment ; NUME[:ImproperPunishment] = 64 ; Caption[:ImproperPunishment] = 'that a criminal could not be properly punished'
    ENUM[65] = :PunishmentReduced ; NUME[:PunishmentReduced] = 65 ; Caption[:PunishmentReduced] = 'to have [his] punishment reduced'
    ENUM[66] = :Elected ; NUME[:Elected] = 66 ; Caption[:Elected] = 'to be elected'
    ENUM[67] = :Reelected ; NUME[:Reelected] = 67 ; Caption[:Reelected] = 'to be re-elected'
    ENUM[68] = :RequestApproved ; NUME[:RequestApproved] = 68 ; Caption[:RequestApproved] = 'having a request approved'
    ENUM[69] = :RequestIgnored ; NUME[:RequestIgnored] = 69 ; Caption[:RequestIgnored] = 'having a request ignored'
    ENUM[70] = :NoPunishment ; NUME[:NoPunishment] = 70 ; Caption[:NoPunishment] = 'that nobody could be punished for a failure'
    ENUM[71] = :PunishmentDelayed ; NUME[:PunishmentDelayed] = 71 ; Caption[:PunishmentDelayed] = 'to have [his] punishment delayed'
    ENUM[72] = :DelayedPunishment ; NUME[:DelayedPunishment] = 72 ; Caption[:DelayedPunishment] = 'after the delayed punishment of a criminal'
    ENUM[73] = :ScarceCageChain ; NUME[:ScarceCageChain] = 73 ; Caption[:ScarceCageChain] = 'considering the scarcity of cages and chains'
    ENUM[74] = :MandateIgnored ; NUME[:MandateIgnored] = 74 ; Caption[:MandateIgnored] = 'having a mandate ignored'
    ENUM[75] = :MandateDeadlineMissed ; NUME[:MandateDeadlineMissed] = 75 ; Caption[:MandateDeadlineMissed] = 'having a mandate deadline missed'
    ENUM[76] = :LackWork ; NUME[:LackWork] = 76 ; Caption[:LackWork] = 'after the lack of work last season'
    ENUM[77] = :SmashedBuilding ; NUME[:SmashedBuilding] = 77 ; Caption[:SmashedBuilding] = 'after smashing up a building'
    ENUM[78] = :ToppledStuff ; NUME[:ToppledStuff] = 78 ; Caption[:ToppledStuff] = 'after toppling something over'
    ENUM[79] = :NoblePromotion ; NUME[:NoblePromotion] = 79 ; Caption[:NoblePromotion] = 'after receiving a higher rank of nobility'
    ENUM[80] = :BecomeNoble ; NUME[:BecomeNoble] = 80 ; Caption[:BecomeNoble] = 'after entering the nobility'
    ENUM[81] = :Cavein ; NUME[:Cavein] = 81 ; Caption[:Cavein] = 'after being knocked out during a cave-in'
    ENUM[82] = :MandateDeadlineMet ; NUME[:MandateDeadlineMet] = 82 ; Caption[:MandateDeadlineMet] = 'to have a mandate deadline met'
    ENUM[83] = :Uncovered ; NUME[:Uncovered] = 83 ; Caption[:Uncovered] = 'to be uncovered'
    ENUM[84] = :NoShirt ; NUME[:NoShirt] = 84 ; Caption[:NoShirt] = 'to have no shirt'
    ENUM[85] = :NoShoes ; NUME[:NoShoes] = 85 ; Caption[:NoShoes] = 'to have no shoes'
    ENUM[86] = :EatPet ; NUME[:EatPet] = 86 ; Caption[:EatPet] = 'after being forced to eat a treasured pet to survive'
    ENUM[87] = :EatLikedCreature ; NUME[:EatLikedCreature] = 87 ; Caption[:EatLikedCreature] = 'after being forced to eat a beloved creature to survive'
    ENUM[88] = :EatVermin ; NUME[:EatVermin] = 88 ; Caption[:EatVermin] = 'after being forced to eat vermin to survive'
    ENUM[89] = :FistFight ; NUME[:FistFight] = 89 ; Caption[:FistFight] = 'after starting a fist fight'
    ENUM[90] = :GaveBeating ; NUME[:GaveBeating] = 90 ; Caption[:GaveBeating] = 'after punishing somebody with a beating'
    ENUM[91] = :GotBeaten ; NUME[:GotBeaten] = 91 ; Caption[:GotBeaten] = 'after being beaten'
    ENUM[92] = :GaveHammering ; NUME[:GaveHammering] = 92 ; Caption[:GaveHammering] = 'after beating somebody with a hammer'
    ENUM[93] = :GotHammered ; NUME[:GotHammered] = 93 ; Caption[:GotHammered] = 'after being beaten with a hammer'
    ENUM[94] = :NoHammer ; NUME[:NoHammer] = 94 ; Caption[:NoHammer] = 'after being unable to find a hammer'
    ENUM[95] = :SameFood ; NUME[:SameFood] = 95 ; Caption[:SameFood] = 'eating the same old food'
    ENUM[96] = :AteRotten ; NUME[:AteRotten] = 96 ; Caption[:AteRotten] = 'after eating rotten food'
    ENUM[97] = :GoodMeal ; NUME[:GoodMeal] = 97 ; Caption[:GoodMeal] = 'after eating [quality food]'
    ENUM[98] = :GoodDrink ; NUME[:GoodDrink] = 98 ; Caption[:GoodDrink] = 'after having [quality drink]'
    ENUM[99] = :MoreChests ; NUME[:MoreChests] = 99 ; Caption[:MoreChests] = 'not having enough chests'
    ENUM[100] = :MoreCabinets ; NUME[:MoreCabinets] = 100 ; Caption[:MoreCabinets] = 'not having enough cabinets'
    ENUM[101] = :MoreWeaponRacks ; NUME[:MoreWeaponRacks] = 101 ; Caption[:MoreWeaponRacks] = 'not having enough weapon racks'
    ENUM[102] = :MoreArmorStands ; NUME[:MoreArmorStands] = 102 ; Caption[:MoreArmorStands] = 'not having enough armor stands'
    ENUM[103] = :RoomPretension ; NUME[:RoomPretension] = 103 ; Caption[:RoomPretension] = 'by a lesser\'s pretentious [room] arrangements'
    ENUM[104] = :LackTables ; NUME[:LackTables] = 104 ; Caption[:LackTables] = 'at the lack of dining tables'
    ENUM[105] = :CrowdedTables ; NUME[:CrowdedTables] = 105 ; Caption[:CrowdedTables] = 'eating at a crowded table'
    ENUM[106] = :DiningQuality ; NUME[:DiningQuality] = 106 ; Caption[:DiningQuality] = 'dining in [a quality] dining room'
    ENUM[107] = :NoDining ; NUME[:NoDining] = 107 ; Caption[:NoDining] = 'being without a proper dining room'
    ENUM[108] = :LackChairs ; NUME[:LackChairs] = 108 ; Caption[:LackChairs] = 'at the lack of chairs'
    ENUM[109] = :TrainingBond ; NUME[:TrainingBond] = 109 ; Caption[:TrainingBond] = 'after forming a bond with an animal training partner'
    ENUM[110] = :Rescued ; NUME[:Rescued] = 110 ; Caption[:Rescued] = 'after being rescued'
    ENUM[111] = :RescuedOther ; NUME[:RescuedOther] = 111 ; Caption[:RescuedOther] = 'after bringing somebody to rest in bed'
    ENUM[112] = :SatisfiedAtWork ; NUME[:SatisfiedAtWork] = 112 ; Caption[:SatisfiedAtWork] = 'at work'
    ENUM[113] = :TaxedLostProperty ; NUME[:TaxedLostProperty] = 113 ; Caption[:TaxedLostProperty] = 'after losing property to the tax collector\'s escorts'
    ENUM[114] = :Taxed ; NUME[:Taxed] = 114 ; Caption[:Taxed] = 'after being taxed'
    ENUM[115] = :LackProtection ; NUME[:LackProtection] = 115 ; Caption[:LackProtection] = 'not having adequate protection'
    ENUM[116] = :TaxRoomUnreachable ; NUME[:TaxRoomUnreachable] = 116 ; Caption[:TaxRoomUnreachable] = 'after being unable to reach a room for tax collection'
    ENUM[117] = :TaxRoomMisinformed ; NUME[:TaxRoomMisinformed] = 117 ; Caption[:TaxRoomMisinformed] = 'after being misinformed about a room for tax collection'
    ENUM[118] = :PleasedNoble ; NUME[:PleasedNoble] = 118 ; Caption[:PleasedNoble] = 'having pleased a noble'
    ENUM[119] = :TaxCollectionSmooth ; NUME[:TaxCollectionSmooth] = 119 ; Caption[:TaxCollectionSmooth] = 'that the tax collection went smoothly'
    ENUM[120] = :DisappointedNoble ; NUME[:DisappointedNoble] = 120 ; Caption[:DisappointedNoble] = 'having disappointed a noble'
    ENUM[121] = :TaxCollectionRough ; NUME[:TaxCollectionRough] = 121 ; Caption[:TaxCollectionRough] = 'that the tax collection didn\'t go smoothly'
    ENUM[122] = :MadeFriend ; NUME[:MadeFriend] = 122 ; Caption[:MadeFriend] = 'after making a friend'
    ENUM[123] = :FormedGrudge ; NUME[:FormedGrudge] = 123 ; Caption[:FormedGrudge] = 'after forming a grudge'
    ENUM[124] = :AnnoyedVermin ; NUME[:AnnoyedVermin] = 124 ; Caption[:AnnoyedVermin] = 'after being accosted by [vermin]'
    ENUM[125] = :NearVermin ; NUME[:NearVermin] = 125 ; Caption[:NearVermin] = 'after being near [vermin]'
    ENUM[126] = :PesteredVermin ; NUME[:PesteredVermin] = 126 ; Caption[:PesteredVermin] = 'after being pestered by [vermin]'
    ENUM[127] = :AcquiredItem ; NUME[:AcquiredItem] = 127 ; Caption[:AcquiredItem] = 'after a satisfying acquisition'
    ENUM[128] = :AdoptedPet ; NUME[:AdoptedPet] = 128 ; Caption[:AdoptedPet] = 'after adopting a new pet'
    ENUM[129] = :Jailed ; NUME[:Jailed] = 129 ; Caption[:Jailed] = 'after being confined'
    ENUM[130] = :Bath ; NUME[:Bath] = 130 ; Caption[:Bath] = 'after a bath'
    ENUM[131] = :SoapyBath ; NUME[:SoapyBath] = 131 ; Caption[:SoapyBath] = 'after a soapy bath'
    ENUM[132] = :SparringAccident ; NUME[:SparringAccident] = 132 ; Caption[:SparringAccident] = 'after killing somebody by accident while sparring'
    ENUM[133] = :Attacked ; NUME[:Attacked] = 133 ; Caption[:Attacked] = 'after being attacked'
    ENUM[134] = :AttackedByDead ; NUME[:AttackedByDead] = 134 ; Caption[:AttackedByDead] = 'after being attacked by dead [HF relative]'
    ENUM[135] = :SameBooze ; NUME[:SameBooze] = 135 ; Caption[:SameBooze] = 'drinking the same old booze'
    ENUM[136] = :DrinkBlood ; NUME[:DrinkBlood] = 136 ; Caption[:DrinkBlood] = 'while forced to drink bloody water'
    ENUM[137] = :DrinkSlime ; NUME[:DrinkSlime] = 137 ; Caption[:DrinkSlime] = 'while forced to drink slime'
    ENUM[138] = :DrinkVomit ; NUME[:DrinkVomit] = 138 ; Caption[:DrinkVomit] = 'while forced to drink vomit'
    ENUM[139] = :DrinkGoo ; NUME[:DrinkGoo] = 139 ; Caption[:DrinkGoo] = 'while forced to drink gooey water'
    ENUM[140] = :DrinkIchor ; NUME[:DrinkIchor] = 140 ; Caption[:DrinkIchor] = 'while forced to drink ichorous water'
    ENUM[141] = :DrinkPus ; NUME[:DrinkPus] = 141 ; Caption[:DrinkPus] = 'while forced to drink purulent water'
    ENUM[142] = :NastyWater ; NUME[:NastyWater] = 142 ; Caption[:NastyWater] = 'drinking nasty water'
    ENUM[143] = :DrankSpoiled ; NUME[:DrankSpoiled] = 143 ; Caption[:DrankSpoiled] = 'after drinking something spoiled'
    ENUM[144] = :LackWell ; NUME[:LackWell] = 144 ; Caption[:LackWell] = 'after drinking water without a well'
    ENUM[145] = :NearCaged ; NUME[:NearCaged] = 145 ; Caption[:NearCaged] = 'after being near to a [animal] in a cage'
    ENUM[146] = :NearCaged2 ; NUME[:NearCaged2] = 146 ; Caption[:NearCaged2] = 'after being near to a [animal] in a cage'
    ENUM[147] = :LackBedroom ; NUME[:LackBedroom] = 147 ; Caption[:LackBedroom] = 'after sleeping without a proper room'
    ENUM[148] = :BedroomQuality ; NUME[:BedroomQuality] = 148 ; Caption[:BedroomQuality] = 'after sleeing in a [quality] bedroom'
    ENUM[149] = :SleptFloor ; NUME[:SleptFloor] = 149 ; Caption[:SleptFloor] = 'after sleeping on the floor'
    ENUM[150] = :SleptMud ; NUME[:SleptMud] = 150 ; Caption[:SleptMud] = 'after sleeping in the mud'
    ENUM[151] = :SleptGrass ; NUME[:SleptGrass] = 151 ; Caption[:SleptGrass] = 'after sleeping in the grass'
    ENUM[152] = :SleptRoughFloor ; NUME[:SleptRoughFloor] = 152 ; Caption[:SleptRoughFloor] = 'after sleeping on a rough cave floor'
    ENUM[153] = :SleptRocks ; NUME[:SleptRocks] = 153 ; Caption[:SleptRocks] = 'after sleeping on rocks'
    ENUM[154] = :SleptIce ; NUME[:SleptIce] = 154 ; Caption[:SleptIce] = 'after sleeping on ice'
    ENUM[155] = :SleptDirt ; NUME[:SleptDirt] = 155 ; Caption[:SleptDirt] = 'after sleeping in the dirt'
    ENUM[156] = :SleptDriftwood ; NUME[:SleptDriftwood] = 156 ; Caption[:SleptDriftwood] = 'after sleeping on a pile of driftwood'
    ENUM[157] = :ArtDefacement ; NUME[:ArtDefacement] = 157 ; Caption[:ArtDefacement] = 'after suffering the travesty of art defacement'
    ENUM[158] = :Evicted ; NUME[:Evicted] = 158 ; Caption[:Evicted] = 'after being evicted'
    ENUM[159] = :GaveBirth ; NUME[:GaveBirth] = 159 ; Caption[:GaveBirth] = 'after giving birth to [a baby]'
    ENUM[160] = :SpouseGaveBirth ; NUME[:SpouseGaveBirth] = 160 ; Caption[:SpouseGaveBirth] = 'after becoming a parent of [a baby]'
    ENUM[161] = :ReceivedWater ; NUME[:ReceivedWater] = 161 ; Caption[:ReceivedWater] = 'after receiving water'
    ENUM[162] = :GaveWater ; NUME[:GaveWater] = 162 ; Caption[:GaveWater] = 'after giving somebody water'
    ENUM[163] = :ReceivedFood ; NUME[:ReceivedFood] = 163 ; Caption[:ReceivedFood] = 'after receiving food'
    ENUM[164] = :GaveFood ; NUME[:GaveFood] = 164 ; Caption[:GaveFood] = 'after giving somebody food'
    ENUM[165] = :Talked ; NUME[:Talked] = 165 ; Caption[:Talked] = 'talking with a [relation]'
    ENUM[166] = :OfficeQuality ; NUME[:OfficeQuality] = 166 ; Caption[:OfficeQuality] = 'conducted meeting in a [quality] room'
    ENUM[167] = :MeetingInBedroom ; NUME[:MeetingInBedroom] = 167 ; Caption[:MeetingInBedroom] = 'having to conduct an official meeting in a bedroom'
    ENUM[168] = :MeetingInDiningRoom ; NUME[:MeetingInDiningRoom] = 168 ; Caption[:MeetingInDiningRoom] = 'having to conduct an official meeting in a dining room'
    ENUM[169] = :NoRooms ; NUME[:NoRooms] = 169 ; Caption[:NoRooms] = 'not having any rooms'
    ENUM[170] = :TombQuality ; NUME[:TombQuality] = 170 ; Caption[:TombQuality] = 'having a [quality] tomb after gaining another year'
    ENUM[171] = :TombLack ; NUME[:TombLack] = 171 ; Caption[:TombLack] = 'about not having a tomb after gaining another year'
    ENUM[172] = :TalkToNoble ; NUME[:TalkToNoble] = 172 ; Caption[:TalkToNoble] = 'after talking to a pillar of society'
    ENUM[173] = :InteractPet ; NUME[:InteractPet] = 173 ; Caption[:InteractPet] = 'after interacting with a pet'
    ENUM[174] = :ConvictionCorpse ; NUME[:ConvictionCorpse] = 174 ; Caption[:ConvictionCorpse] = 'after a long-dead corpse was convicted of a crime'
    ENUM[175] = :ConvictionAnimal ; NUME[:ConvictionAnimal] = 175 ; Caption[:ConvictionAnimal] = 'after an animal was convicted of a crime'
    ENUM[176] = :ConvictionVictim ; NUME[:ConvictionVictim] = 176 ; Caption[:ConvictionVictim] = 'after the bizarre conviction against all reason of the victim of a crime'
    ENUM[177] = :ConvictionJusticeSelf ; NUME[:ConvictionJusticeSelf] = 177 ; Caption[:ConvictionJusticeSelf] = 'upon receiving justice through a criminal\'s conviction'
    ENUM[178] = :ConvictionJusticeFamily ; NUME[:ConvictionJusticeFamily] = 178 ; Caption[:ConvictionJusticeFamily] = 'when a family member received justice through a criminal\'s conviction'
    ENUM[179] = :Decay ; NUME[:Decay] = 179 ; Caption[:Decay] = 'after being forced to endure the decay of a [relative]'
end

class UnitsOtherId < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :ANY_RIDER ; NUME[:ANY_RIDER] = 0
    ENUM[1] = :ANY_BABY2 ; NUME[:ANY_BABY2] = 1
end

class ValueType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :LAW ; NUME[:LAW] = 0
    ENUM[1] = :LOYALTY ; NUME[:LOYALTY] = 1
    ENUM[2] = :FAMILY ; NUME[:FAMILY] = 2
    ENUM[3] = :FRIENDSHIP ; NUME[:FRIENDSHIP] = 3
    ENUM[4] = :POWER ; NUME[:POWER] = 4
    ENUM[5] = :TRUTH ; NUME[:TRUTH] = 5
    ENUM[6] = :CUNNING ; NUME[:CUNNING] = 6
    ENUM[7] = :ELOQUENCE ; NUME[:ELOQUENCE] = 7
    ENUM[8] = :FAIRNESS ; NUME[:FAIRNESS] = 8
    ENUM[9] = :DECORUM ; NUME[:DECORUM] = 9
    ENUM[10] = :TRADITION ; NUME[:TRADITION] = 10
    ENUM[11] = :ARTWORK ; NUME[:ARTWORK] = 11
    ENUM[12] = :COOPERATION ; NUME[:COOPERATION] = 12
    ENUM[13] = :INDEPENDENCE ; NUME[:INDEPENDENCE] = 13
    ENUM[14] = :STOICISM ; NUME[:STOICISM] = 14
    ENUM[15] = :INTROSPECTION ; NUME[:INTROSPECTION] = 15
    ENUM[16] = :SELF_CONTROL ; NUME[:SELF_CONTROL] = 16
    ENUM[17] = :TRANQUILITY ; NUME[:TRANQUILITY] = 17
    ENUM[18] = :HARMONY ; NUME[:HARMONY] = 18
    ENUM[19] = :MERRIMENT ; NUME[:MERRIMENT] = 19
    ENUM[20] = :CRAFTSMANSHIP ; NUME[:CRAFTSMANSHIP] = 20
    ENUM[21] = :MARTIAL_PROWESS ; NUME[:MARTIAL_PROWESS] = 21
    ENUM[22] = :SKILL ; NUME[:SKILL] = 22
    ENUM[23] = :HARD_WORK ; NUME[:HARD_WORK] = 23
    ENUM[24] = :SACRIFICE ; NUME[:SACRIFICE] = 24
    ENUM[25] = :COMPETITION ; NUME[:COMPETITION] = 25
    ENUM[26] = :PERSEVERENCE ; NUME[:PERSEVERENCE] = 26
    ENUM[27] = :LEISURE_TIME ; NUME[:LEISURE_TIME] = 27
    ENUM[28] = :COMMERCE ; NUME[:COMMERCE] = 28
    ENUM[29] = :ROMANCE ; NUME[:ROMANCE] = 29
    ENUM[30] = :NATURE ; NUME[:NATURE] = 30
    ENUM[31] = :PEACE ; NUME[:PEACE] = 31
end

class ViewscreenUnitlistPage < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Citizens ; NUME[:Citizens] = 0
    ENUM[1] = :Livestock ; NUME[:Livestock] = 1
    ENUM[2] = :Others ; NUME[:Others] = 2
    ENUM[3] = :Dead ; NUME[:Dead] = 3
end

class WeaponFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :CAN_STONE ; NUME[:CAN_STONE] = 0
    ENUM[1] = :HAS_EDGE_ATTACK ; NUME[:HAS_EDGE_ATTACK] = 1
    ENUM[2] = :TRAINING ; NUME[:TRAINING] = 2
end

class WeatherType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :None ; NUME[:None] = 0
    ENUM[1] = :Rain ; NUME[:Rain] = 1
    ENUM[2] = :Snow ; NUME[:Snow] = 2
end

class WorkshopType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Carpenters ; NUME[:Carpenters] = 0
    ENUM[1] = :Farmers ; NUME[:Farmers] = 1
    ENUM[2] = :Masons ; NUME[:Masons] = 2
    ENUM[3] = :Craftsdwarfs ; NUME[:Craftsdwarfs] = 3
    ENUM[4] = :Jewelers ; NUME[:Jewelers] = 4
    ENUM[5] = :MetalsmithsForge ; NUME[:MetalsmithsForge] = 5
    ENUM[6] = :MagmaForge ; NUME[:MagmaForge] = 6
    ENUM[7] = :Bowyers ; NUME[:Bowyers] = 7
    ENUM[8] = :Mechanics ; NUME[:Mechanics] = 8
    ENUM[9] = :Siege ; NUME[:Siege] = 9
    ENUM[10] = :Butchers ; NUME[:Butchers] = 10
    ENUM[11] = :Leatherworks ; NUME[:Leatherworks] = 11
    ENUM[12] = :Tanners ; NUME[:Tanners] = 12
    ENUM[13] = :Clothiers ; NUME[:Clothiers] = 13
    ENUM[14] = :Fishery ; NUME[:Fishery] = 14
    ENUM[15] = :Still ; NUME[:Still] = 15
    ENUM[16] = :Loom ; NUME[:Loom] = 16
    ENUM[17] = :Quern ; NUME[:Quern] = 17
    ENUM[18] = :Kennels ; NUME[:Kennels] = 18
    ENUM[19] = :Kitchen ; NUME[:Kitchen] = 19
    ENUM[20] = :Ashery ; NUME[:Ashery] = 20
    ENUM[21] = :Dyers ; NUME[:Dyers] = 21
    ENUM[22] = :Millstone ; NUME[:Millstone] = 22
    ENUM[23] = :Custom ; NUME[:Custom] = 23
    ENUM[24] = :Tool ; NUME[:Tool] = 24
end

class WorldConstructionType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :ROAD ; NUME[:ROAD] = 0
    ENUM[1] = :TUNNEL ; NUME[:TUNNEL] = 1
    ENUM[2] = :BRIDGE ; NUME[:BRIDGE] = 2
    ENUM[3] = :WALL ; NUME[:WALL] = 3
end

class WorldPopulationType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Animal ; NUME[:Animal] = 0
    ENUM[1] = :Vermin ; NUME[:Vermin] = 1
    ENUM[2] = :Unk2 ; NUME[:Unk2] = 2
    ENUM[3] = :VerminInnumerable ; NUME[:VerminInnumerable] = 3
    ENUM[4] = :ColonyInsect ; NUME[:ColonyInsect] = 4
    ENUM[5] = :Tree ; NUME[:Tree] = 5
    ENUM[6] = :Grass ; NUME[:Grass] = 6
    ENUM[7] = :Bush ; NUME[:Bush] = 7
end

class WorldRegionType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Swamp ; NUME[:Swamp] = 0
    ENUM[1] = :Desert ; NUME[:Desert] = 1
    ENUM[2] = :Jungle ; NUME[:Jungle] = 2
    ENUM[3] = :Mountains ; NUME[:Mountains] = 3
    ENUM[4] = :Ocean ; NUME[:Ocean] = 4
    ENUM[5] = :Lake ; NUME[:Lake] = 5
    ENUM[6] = :Glacier ; NUME[:Glacier] = 6
    ENUM[7] = :Tundra ; NUME[:Tundra] = 7
    ENUM[8] = :Steppe ; NUME[:Steppe] = 8
    ENUM[9] = :Hills ; NUME[:Hills] = 9
end

class WorldSiteFlags < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Undiscovered ; NUME[:Undiscovered] = 0
    ENUM[3] = :Town ; NUME[:Town] = 3
end

class WorldSiteType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :PlayerFortress ; NUME[:PlayerFortress] = 0
    ENUM[1] = :DarkFortress ; NUME[:DarkFortress] = 1
    ENUM[2] = :Cave ; NUME[:Cave] = 2
    ENUM[3] = :MountainHalls ; NUME[:MountainHalls] = 3
    ENUM[4] = :ForestRetreat ; NUME[:ForestRetreat] = 4
    ENUM[5] = :Town ; NUME[:Town] = 5
    ENUM[6] = :ImportantLocation ; NUME[:ImportantLocation] = 6
    ENUM[7] = :LairShrine ; NUME[:LairShrine] = 7
    ENUM[8] = :Fortress ; NUME[:Fortress] = 8
    ENUM[9] = :Camp ; NUME[:Camp] = 9
    ENUM[10] = :Monument ; NUME[:Monument] = 10
end

class WorldgenRangeType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :ELEVATION ; NUME[:ELEVATION] = 0
    ENUM[1] = :RAINFALL ; NUME[:RAINFALL] = 1
    ENUM[3] = :TEMPERATURE ; NUME[:TEMPERATURE] = 3
    ENUM[5] = :DRAINAGE ; NUME[:DRAINAGE] = 5
    ENUM[6] = :VOLCANISM ; NUME[:VOLCANISM] = 6
    ENUM[7] = :SAVAGERY ; NUME[:SAVAGERY] = 7
end

class WorldgenRegionType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :SWAMP ; NUME[:SWAMP] = 0
    ENUM[1] = :DESERT ; NUME[:DESERT] = 1
    ENUM[2] = :FOREST ; NUME[:FOREST] = 2
    ENUM[3] = :MOUNTAINS ; NUME[:MOUNTAINS] = 3
    ENUM[4] = :OCEAN ; NUME[:OCEAN] = 4
    ENUM[5] = :LAKE ; NUME[:LAKE] = 5
    ENUM[6] = :GLACIER ; NUME[:GLACIER] = 6
    ENUM[7] = :TUNDRA ; NUME[:TUNDRA] = 7
    ENUM[8] = :GRASSLAND ; NUME[:GRASSLAND] = 8
    ENUM[9] = :HILLS ; NUME[:HILLS] = 9
end

class WoundEffectType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Bruise ; NUME[:Bruise] = 0
    ENUM[1] = :Burn ; NUME[:Burn] = 1
    ENUM[2] = :Frostbite ; NUME[:Frostbite] = 2
    ENUM[3] = :Burn2 ; NUME[:Burn2] = 3
    ENUM[4] = :Melting ; NUME[:Melting] = 4
    ENUM[5] = :Boiling ; NUME[:Boiling] = 5
    ENUM[6] = :Freezing ; NUME[:Freezing] = 6
    ENUM[7] = :Condensation ; NUME[:Condensation] = 7
    ENUM[8] = :Necrosis ; NUME[:Necrosis] = 8
    ENUM[9] = :Blister ; NUME[:Blister] = 9
end

class WrittenContentStyle < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Meandering ; NUME[:Meandering] = 0
    ENUM[1] = :Cheerful ; NUME[:Cheerful] = 1
    ENUM[2] = :Depressing ; NUME[:Depressing] = 2
    ENUM[3] = :Rigid ; NUME[:Rigid] = 3
    ENUM[4] = :Serious ; NUME[:Serious] = 4
    ENUM[5] = :Disjointed ; NUME[:Disjointed] = 5
    ENUM[6] = :Ornate ; NUME[:Ornate] = 6
    ENUM[7] = :Forceful ; NUME[:Forceful] = 7
    ENUM[8] = :Humorous ; NUME[:Humorous] = 8
    ENUM[9] = :Immature ; NUME[:Immature] = 9
    ENUM[10] = :SelfIndulgent ; NUME[:SelfIndulgent] = 10
    ENUM[11] = :Touching ; NUME[:Touching] = 11
    ENUM[12] = :Compassionate ; NUME[:Compassionate] = 12
    ENUM[13] = :Vicious ; NUME[:Vicious] = 13
    ENUM[14] = :Concise ; NUME[:Concise] = 14
    ENUM[15] = :Scornful ; NUME[:Scornful] = 15
    ENUM[16] = :Witty ; NUME[:Witty] = 16
    ENUM[17] = :Ranting ; NUME[:Ranting] = 17
end

class WrittenContentType < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :Manual ; NUME[:Manual] = 0
    ENUM[1] = :Guide ; NUME[:Guide] = 1
    ENUM[2] = :Chronicle ; NUME[:Chronicle] = 2
    ENUM[3] = :ShortStory ; NUME[:ShortStory] = 3
    ENUM[4] = :Novel ; NUME[:Novel] = 4
    ENUM[5] = :Biography ; NUME[:Biography] = 5
    ENUM[6] = :Autobiography ; NUME[:Autobiography] = 6
    ENUM[7] = :Poem ; NUME[:Poem] = 7
    ENUM[8] = :Play ; NUME[:Play] = 8
    ENUM[9] = :Letter ; NUME[:Letter] = 9
    ENUM[10] = :Essay ; NUME[:Essay] = 10
    ENUM[11] = :Dialog ; NUME[:Dialog] = 11
end

class ZoomCommands < MemHack::Enum
    ENUM = Hash.new
    NUME = Hash.new
    ENUM[0] = :ZoomIn ; NUME[:ZoomIn] = 0
    ENUM[1] = :ZoomOut ; NUME[:ZoomOut] = 1
    ENUM[2] = :ZoomReset ; NUME[:ZoomReset] = 2
    ENUM[3] = :ZoomFullscreen ; NUME[:ZoomFullscreen] = 3
    ENUM[4] = :ZoomResetgrid ; NUME[:ZoomResetgrid] = 4
end

class AbstractBuilding < MemHack::Compound
    sizeof 80

    rtti_classname :abstract_buildingst

    field(:id, 4) {
        number 32, true
    }
    field(:inhabitants, 8) {
        stl_vector(4) {
            pointer {
                compound(:AbstractBuilding_TInhabitants) {
                    sizeof 8

                    field(:anon_1, 0) {
                        number 16, true
                    }
                    field(:anon_2, 4) {
                        number 32, true, -1
                    }
                    def anon_2_tg ; df.world.history.figures.binsearch(anon_2) ; end
                }
            }
        }
    }
    field(:flags, 24) {
        df_flagarray
    }
    field(:unk1, 32) {
        pointer {
            compound(:AbstractBuilding_TUnk1) {
                sizeof 44

                field(:hfig, 0) {
                    stl_vector(4) {
                        number 32, true, -1
                    }
                }
                def hfig_tg ; hfig.map { |i| df.world.history.figures.binsearch(i) } ; end
                field(:anon_1, 16) {
                    number 32, true
                }
                field(:anon_2, 20) {
                    stl_vector(2) {
                        number 16, true
                    }
                }
                field(:mat_type, 36) {
                    number 16, true, -1
                }
                field(:mat_index, 40) {
                    number 32, true
                }
            }
        }
    }
    field(:unk2, 36) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk3, 52) {
        number 32, true
    }
    field(:unk4, 56) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:site_owner_id, 72) {
        number 32, true, -1
    }
    def site_owner_tg ; df.world.entities.all.binsearch(site_owner_id) ; end
    field(:site_id, 76) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
    def getType()
        AbstractBuildingType.sym(DFHack.vmethod_call(self, 0))
    end
    def getSubtype()
        val = DFHack.vmethod_call(self, 4)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def getDisplayTile(tile, fg, bg, bright)
        DFHack.vmethod_call(self, 8, tile, fg, bg, bright) ; nil
    end
    def getName()
        ptr = DFHack.vmethod_call(self, 12)
        class << self
            global :LanguageName
        end._at(ptr) if ptr != 0
    end
    def write_file(file)
        DFHack.vmethod_call(self, 16, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 20, file, loadversion) ; nil
    end
end

class AbstractBuildingDarkTowerst < AbstractBuilding
    sizeof 188

    rtti_classname :abstract_building_dark_towerst

    field(:name, 80) {
        global :LanguageName
    }
end

class AbstractBuildingDungeonst < AbstractBuilding
    sizeof 240

    rtti_classname :abstract_building_dungeonst

    field(:name, 80) {
        global :LanguageName
    }
    field(:dungeon_type, 188) {
        class ::DFHack::AbstractBuildingDungeonst_TDungeonType < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :DUNGEON ; NUME[:DUNGEON] = 0
            ENUM[1] = :SEWERS ; NUME[:SEWERS] = 1
            ENUM[2] = :CATACOMBS ; NUME[:CATACOMBS] = 2
        end

        number 16, true, nil, AbstractBuildingDungeonst_TDungeonType
    }
    field(:anon_1, 192) {
        number 32, true
    }
    field(:unk, 196) {
        global :AbstractBuildingUnk
    }
    field(:anon_2, 228) {
        number 32, true
    }
    field(:anon_3, 232) {
        number 32, true
    }
    field(:anon_4, 236) {
        number 32, true
    }
end

class AbstractBuildingKeepst < AbstractBuilding
    sizeof 188

    rtti_classname :abstract_building_keepst

    field(:name, 80) {
        global :LanguageName
    }
end

class AbstractBuildingMarketst < AbstractBuilding
    sizeof 188

    rtti_classname :abstract_building_marketst

    field(:name, 80) {
        global :LanguageName
    }
end

class AbstractBuildingMeadHallst < AbstractBuilding
    sizeof 220

    rtti_classname :abstract_building_mead_hallst

    field(:name, 80) {
        global :LanguageName
    }
    field(:item1, 188) {
        global :SiteBuildingItem
    }
    field(:item2, 204) {
        global :SiteBuildingItem
    }
end

class AbstractBuildingTemplest < AbstractBuilding
    sizeof 196

    rtti_classname :abstract_building_templest

    field(:deity, 80) {
        number 32, true, -1
    }
    def deity_tg ; df.world.history.figures.binsearch(deity) ; end
    field(:religion, 84) {
        number 32, true, -1
    }
    def religion_tg ; df.world.entities.all.binsearch(religion) ; end
    field(:name, 88) {
        global :LanguageName
    }
end

class AbstractBuildingTombst < AbstractBuilding
    sizeof 224

    rtti_classname :abstract_building_tombst

    field(:name, 80) {
        global :LanguageName
    }
    field(:unk, 188) {
        global :AbstractBuildingUnk
    }
    field(:anon_1, 220) {
        number 32, true
    }
end

class AbstractBuildingUnderworldSpirest < AbstractBuilding
    sizeof 192

    rtti_classname :abstract_building_underworld_spirest

    field(:unk_50, 80) {
        stl_string
    }
    field(:unk_6c, 108) {
        stl_string
    }
    field(:unk_88, 136) {
        number 32, true
    }
    field(:unk_8c, 140) {
        number 32, true
    }
    field(:unk_90, 144) {
        number 32, true
    }
    field(:unk_94, 148) {
        number 32, true
    }
    field(:unk_98, 152) {
        number 32, true
    }
    field(:unk_9c, 156) {
        number 32, true
    }
    field(:unk_a0, 160) {
        number 32, true
    }
    field(:unk_a4, 164) {
        number 32, true
    }
    field(:unk_a8, 168) {
        number 32, true
    }
    field(:unk_ac, 172) {
        number 32, true
    }
    field(:unk_b0, 176) {
        number 16, true
    }
    field(:unk_b4, 180) {
        number 32, true
    }
    field(:unk_b8, 184) {
        number 16, true
    }
    field(:unk_ba, 186) {
        number 8, true
    }
    field(:unk_bc, 188) {
        number 32, true
    }
end

class AbstractBuildingUnk < MemHack::Compound
    sizeof 32

    field(:anon_1, 0) {
        stl_vector(4) {
            pointer {
                compound(:AbstractBuildingUnk_TAnon1) {
                    sizeof 32

                    field(:anon_1, 0) {
                        number 32, true
                    }
                    field(:race, 4) {
                        number 32, true, -1
                    }
                    def race_tg ; df.world.raws.creatures.all[race] ; end
                    field(:anon_2, 8) {
                        number 32, true
                    }
                    field(:anon_3, 12) {
                        number 32, true
                    }
                    field(:anon_4, 16) {
                        number 32, true
                    }
                    field(:anon_5, 20) {
                        number 32, true
                    }
                    field(:anon_6, 24) {
                        number 32, true
                    }
                    field(:anon_7, 28) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:histfigs, 16) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def histfigs_tg ; histfigs.map { |i| df.world.history.figures.binsearch(i) } ; end
end

class ActiveScriptVarst < MemHack::Compound
    sizeof 32

    rtti_classname :active_script_varst

    field(:name, 4) {
        stl_string
    }
    def setColor()
        DFHack.vmethod_call(self, 0) ; nil
    end
    def formatString(output, format)
        DFHack.vmethod_call(self, 4, output, format) ; nil
    end
    def getValue(int_value, ref_value)
        DFHack.vmethod_call(self, 8, int_value, ref_value) ; nil
    end
    def setValue(var)
        DFHack.vmethod_call(self, 12, var) ; nil
    end
    def removeUnit(ref_value)
        DFHack.vmethod_call(self, 16, ref_value) ; nil
    end
    def write_file(file)
        DFHack.vmethod_call(self, 20, file) ; nil
    end
    def read_file(file, load_version)
        DFHack.vmethod_call(self, 24, file, load_version) ; nil
    end
end

class ActiveScriptVarLongst < ActiveScriptVarst
    sizeof 36

    rtti_classname :active_script_var_longst

    field(:value, 32) {
        number 32, true
    }
end

class ActiveScriptVarUnitst < ActiveScriptVarst
    sizeof 36

    rtti_classname :active_script_var_unitst

    field(:unit, 32) {
        pointer {
            global :Unit
        }
    }
end

class ActivityEntry < MemHack::Compound
    sizeof 32

    field(:id, 0) {
        number 32, true
    }
    field(:type, 4) {
        number 16, true
    }
    field(:events, 8) {
        stl_vector(4) {
            pointer {
                global :ActivityEvent
            }
        }
    }
    field(:next_event_id, 24) {
        number 32, true
    }
    field(:army_controller, 28) {
        number 32, true, -1
    }
    def army_controller_tg ; df.world.army_controllers.all.binsearch(army_controller) ; end
end

class ActivityEvent < MemHack::Compound
    sizeof 20

    rtti_classname :activity_eventst

    field(:event_id, 4) {
        number 32, true
    }
    field(:activity_id, 8) {
        number 32, true, -1
    }
    def activity_tg ; df.world.activities.all.binsearch(activity_id) ; end
    field(:parent_event_id, 12) {
        number 32, true, -1
    }
    field(:flags, 16) {
        compound(:ActivityEvent_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:dismissed, 0) { bit 0 }
            field(:squad, 0) { bit 1 }
        }
    }
    def getType()
        ActivityEventType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(file)
        DFHack.vmethod_call(self, 4, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 8, file, loadversion) ; nil
    end
    def isEmpty()
        val = DFHack.vmethod_call(self, 16)
        (val & 1) != 0
    end
    def getParticipantInfo()
        ptr = DFHack.vmethod_call(self, 28)
        class << self
            global :ActivityEventParticipants
        end._at(ptr) if ptr != 0
    end
    def dismiss(children_too)
        DFHack.vmethod_call(self, 32, children_too) ; nil
    end
    def removeParticipant(histfig, unit, arg2)
        DFHack.vmethod_call(self, 40, histfig, unit, arg2) ; nil
    end
    def process(arg0, arg1, arg2)
        DFHack.vmethod_call(self, 44, arg0, arg1, arg2) ; nil
    end
    def checkDrillInvalid(arg0)
        val = DFHack.vmethod_call(self, 48, arg0)
    end
    def decUniformLock(arg0)
        val = DFHack.vmethod_call(self, 52, arg0)
        (val & 1) != 0
    end
    def getSquadEventType()
        SquadEventType.sym(DFHack.vmethod_call(self, 56))
    end
    def setDemoSkill(skill)
        DFHack.vmethod_call(self, 60, JobSkill.int(skill)) ; nil
    end
    def setSkillDemoTimers(wait_countdown, train_rounds, train_countdown)
        DFHack.vmethod_call(self, 64, wait_countdown, train_rounds, train_countdown) ; nil
    end
    def adjustOrganizeCounter(amount)
        DFHack.vmethod_call(self, 68, amount) ; nil
    end
    def getOrganizer(hist_figure_id, unit_id)
        DFHack.vmethod_call(self, 72, hist_figure_id, unit_id) ; nil
    end
    def getBuilding()
        ptr = DFHack.vmethod_call(self, 76)
        class << self
            number 32, true
        end._at(ptr) if ptr != 0
    end
    def isSparring()
        val = DFHack.vmethod_call(self, 80)
        (val & 1) != 0
    end
    def getUniformType()
        val = DFHack.vmethod_call(self, 84)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def getName(arg0, str)
        DFHack.vmethod_call(self, 88, arg0, str) ; nil
    end
end

class ActivityEventCombatTrainingst < ActivityEvent
    sizeof 108

    rtti_classname :activity_event_combat_trainingst

    field(:participants, 20) {
        global :ActivityEventParticipants
    }
    field(:building_id, 92) {
        number 32, true, -1
    }
    def building_tg ; df.world.buildings.all.binsearch(building_id) ; end
    field(:hist_figure_id, 96) {
        number 32, true, -1
    }
    def hist_figure_tg ; df.world.history.figures.binsearch(hist_figure_id) ; end
    field(:unit_id, 100) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
    field(:organize_counter, 104) {
        number 32, true
    }
end

class ActivityEventConflictst < ActivityEvent
    sizeof 48

    rtti_classname :activity_event_conflictst

    field(:anon_1, 20) {
        stl_vector(4) {
            pointer {
                compound(:ActivityEventConflictst_TAnon1) {
                    sizeof 60

                    field(:id, 0) {
                        number 32, true
                    }
                    field(:anon_1, 4) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:anon_2, 20) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:anon_3, 36) {
                        stl_vector(4) {
                            pointer {
                                compound(:ActivityEventConflictst_TAnon1_TAnon3) {
                                    sizeof 8

                                    field(:anon_1, 0) {
                                        number 32, true
                                    }
                                    field(:anon_2, 4) {
                                        number 32, true
                                    }
                                }
                            }
                        }
                    }
                    field(:anon_4, 52) {
                        number 32, true
                    }
                    field(:anon_5, 56) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:anon_2, 36) {
        number 32, true
    }
    field(:anon_3, 40) {
        number 32, true
    }
    field(:anon_4, 44) {
        number 32, true
    }
end

class ActivityEventConversationst < ActivityEvent
    sizeof 520

    rtti_classname :activity_event_conversationst

    field(:anon_1, 20) {
        stl_vector(4) {
            pointer {
                compound(:ActivityEventConversationst_TAnon1) {
                    sizeof 8

                    field(:anon_1, 0) {
                        number 32, true
                    }
                    field(:anon_2, 4) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:anon_2, 36) {
        number 32, true
    }
    field(:unk1, 40) {
        global :EntityEvent
    }
    field(:anon_3, 80) {
        number 32, true
    }
    field(:anon_4, 84) {
        number 32, true
    }
    field(:anon_5, 88) {
        number 32, true
    }
    field(:anon_6, 92) {
        number 32, true
    }
    field(:anon_7, 96) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_8, 112) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_9, 128) {
        stl_vector(4) {
            pointer {
                compound(:ActivityEventConversationst_TAnon9) {
                    sizeof 88

                    field(:anon_1, 0) {
                        number 32, true
                    }
                    field(:anon_2, 4) {
                        number 32, true
                    }
                    field(:anon_3, 8) {
                        number 32, true
                    }
                    field(:anon_4, 12) {
                        global :EntityEvent
                    }
                    field(:anon_5, 52) {
                        number 32, true
                    }
                    field(:anon_6, 56) {
                        number 16, true
                    }
                    field(:anon_7, 58) {
                        number 16, true
                    }
                    field(:anon_8, 60) {
                        number 16, true
                    }
                    field(:anon_9, 64) {
                        number 32, true
                    }
                    field(:anon_10, 68) {
                        number 32, true
                    }
                    field(:anon_11, 72) {
                        number 32, true
                    }
                    field(:anon_12, 76) {
                        number 32, true
                    }
                    field(:anon_13, 80) {
                        number 32, true
                    }
                    field(:unk_v4014_1, 84) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:anon_10, 144) {
        number 32, true
    }
    field(:anon_11, 148) {
        number 32, true
    }
    field(:anon_12, 152) {
        number 32, true
    }
    field(:anon_13, 156) {
        number 32, true
    }
    field(:unk2, 160) {
        compound(:ActivityEventConversationst_TUnk2) {
            field(:anon_1, 0) {
                stl_vector
            }
            field(:anon_2, 16) {
                number 32, true
            }
            field(:anon_3, 20) {
                number 32, true
            }
            field(:anon_4, 24) {
                stl_vector
            }
            field(:anon_5, 40) {
                stl_vector
            }
            field(:anon_6, 56) {
                stl_vector
            }
            field(:anon_7, 72) {
                stl_vector
            }
            field(:anon_8, 88) {
                stl_vector
            }
            field(:anon_9, 104) {
                stl_vector
            }
            field(:anon_10, 120) {
                stl_vector
            }
            field(:anon_11, 136) {
                stl_vector
            }
            field(:anon_12, 152) {
                stl_vector
            }
            field(:anon_13, 168) {
                stl_vector
            }
            field(:anon_14, 184) {
                stl_vector
            }
            field(:anon_15, 200) {
                stl_vector
            }
            field(:anon_16, 216) {
                stl_vector
            }
            field(:anon_17, 232) {
                stl_vector
            }
            field(:anon_18, 248) {
                number 32, true
            }
            field(:anon_19, 252) {
                number 32, true
            }
            field(:anon_20, 256) {
                number 32, true
            }
            field(:anon_21, 260) {
                number 32, true
            }
            field(:anon_22, 264) {
                number 32, true
            }
            field(:anon_23, 268) {
                number 32, true
            }
            field(:anon_24, 272) {
                number 32, true
            }
            field(:anon_25, 276) {
                number 32, true
            }
            field(:anon_26, 280) {
                number 32, true
            }
            field(:anon_27, 284) {
                number 32, true
            }
            field(:anon_28, 288) {
                number 32, true
            }
            field(:anon_29, 292) {
                number 32, true
            }
        }
    }
    field(:anon_14, 456) {
        stl_vector(4) {
            pointer {
                global :TalkChoice
            }
        }
    }
    field(:anon_15, 472) {
        number 32, true, -1
    }
    field(:anon_16, 476) {
        number 32, true
    }
    field(:anon_17, 480) {
        number 32, true
    }
    field(:anon_18, 484) {
        number 32, true
    }
    field(:anon_19, 488) {
        number 32, true
    }
    field(:anon_20, 492) {
        number 32, true
    }
    field(:anon_21, 496) {
        number 32, true
    }
    field(:anon_22, 500) {
        number 32, true
    }
    field(:anon_23, 504) {
        number 32, true
    }
    field(:anon_24, 508) {
        number 32, true
    }
    field(:anon_25, 512) {
        number 32, true
    }
    field(:anon_26, 516) {
        number 32, true
    }
end

class ActivityEventGuardst < ActivityEvent
    sizeof 48

    rtti_classname :activity_event_guardst

    field(:anon_1, 20) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_2, 36) {
        number 16, true
    }
    field(:anon_3, 38) {
        number 16, true
    }
    field(:anon_4, 40) {
        number 16, true
    }
    field(:anon_5, 44) {
        number 32, true
    }
end

class ActivityEventHarassmentst < ActivityEvent
    sizeof 76

    rtti_classname :activity_event_harassmentst

    field(:anon_1, 20) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_2, 36) {
        stl_vector(4) {
            pointer {
                compound(:ActivityEventHarassmentst_TAnon2) {
                    sizeof 72

                    field(:anon_1, 0) {
                        number 32, true
                    }
                    field(:anon_2, 4) {
                        static_array(3, 4) {
                            number 32, true
                        }
                    }
                    field(:anon_3, 16) {
                        number 32, true
                    }
                    field(:anon_4, 20) {
                        number 32, true
                    }
                    field(:anon_5, 24) {
                        number 32, true
                    }
                    field(:anon_6, 28) {
                        number 32, true
                    }
                    field(:anon_7, 32) {
                        number 32, true
                    }
                    field(:anon_8, 36) {
                        number 32, true
                    }
                    field(:anon_9, 40) {
                        number 32, true
                    }
                    field(:anon_10, 44) {
                        number 32, true
                    }
                    field(:anon_11, 48) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:anon_12, 64) {
                        number 32, true
                    }
                    field(:anon_13, 68) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:anon_3, 52) {
        number 32, true
    }
    field(:anon_4, 56) {
        number 32, true
    }
    field(:anon_5, 60) {
        number 32, true
    }
    field(:anon_6, 64) {
        number 32, true
    }
    field(:anon_7, 68) {
        number 32, true
    }
    field(:anon_8, 72) {
        number 32, true
    }
end

class ActivityEventIndividualSkillDrillst < ActivityEvent
    sizeof 100

    rtti_classname :activity_event_individual_skill_drillst

    field(:participants, 20) {
        global :ActivityEventParticipants
    }
    field(:building_id, 92) {
        number 32, true, -1
    }
    def building_tg ; df.world.buildings.all.binsearch(building_id) ; end
    field(:countdown, 96) {
        number 32, true, 3000
    }
end

class ActivityEventParticipants < MemHack::Compound
    sizeof 72

    field(:histfigs, 0) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def histfigs_tg ; histfigs.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:units, 16) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def units_tg ; units.map { |i| df.world.units.all.binsearch(i) } ; end
    field(:free_histfigs, 32) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def free_histfigs_tg ; free_histfigs.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:free_units, 48) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def free_units_tg ; free_units.map { |i| df.world.units.all.binsearch(i) } ; end
    field(:activity_id, 64) {
        number 32, true, -1
    }
    def activity_tg ; df.world.activities.all.binsearch(activity_id) ; end
    field(:event_id, 68) {
        number 32, true
    }
end

class ActivityEventRangedPracticest < ActivityEvent
    sizeof 100

    rtti_classname :activity_event_ranged_practicest

    field(:participants, 20) {
        global :ActivityEventParticipants
    }
    field(:building_id, 92) {
        number 32, true, -1
    }
    def building_tg ; df.world.buildings.all.binsearch(building_id) ; end
    field(:uniform_lock, 96) {
        number 32, true
    }
end

class ActivityEventReunionst < ActivityEvent
    sizeof 72

    rtti_classname :activity_event_reunionst

    field(:anon_1, 20) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_2, 36) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_3, 52) {
        number 32, true
    }
    field(:anon_4, 56) {
        number 32, true
    }
    field(:anon_5, 60) {
        number 32, true
    }
    field(:anon_6, 64) {
        number 32, true
    }
    field(:anon_7, 68) {
        number 32, true
    }
end

class ActivityEventSkillDemonstrationst < ActivityEvent
    sizeof 124

    rtti_classname :activity_event_skill_demonstrationst

    field(:participants, 20) {
        global :ActivityEventParticipants
    }
    field(:building_id, 92) {
        number 32, true, -1
    }
    def building_tg ; df.world.buildings.all.binsearch(building_id) ; end
    field(:hist_figure_id, 96) {
        number 32, true, -1
    }
    def hist_figure_tg ; df.world.history.figures.binsearch(hist_figure_id) ; end
    field(:unit_id, 100) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
    field(:skill, 104) {
        number 16, true, nil, JobSkill
    }
    field(:organize_counter, 108) {
        number 32, true
    }
    field(:wait_countdown, 112) {
        number 32, true, 100
    }
    field(:train_rounds, 116) {
        number 32, true, 15
    }
    field(:train_countdown, 120) {
        number 32, true, 20
    }
end

class ActivityEventSparringst < ActivityEvent
    sizeof 116

    rtti_classname :activity_event_sparringst

    field(:participants, 20) {
        global :ActivityEventParticipants
    }
    field(:building_id, 92) {
        number 32, true, -1
    }
    def building_tg ; df.world.buildings.all.binsearch(building_id) ; end
    field(:groups, 96) {
        stl_vector(4) {
            pointer {
                compound(:ActivityEventSparringst_TGroups) {
                    sizeof 24

                    field(:units, 0) {
                        stl_vector(4) {
                            number 32, true, -1
                        }
                    }
                    def units_tg ; units.map { |i| df.world.units.all.binsearch(i) } ; end
                    field(:countdown, 16) {
                        number 32, true, 3000
                    }
                    field(:building_id, 20) {
                        number 32, true, -1
                    }
                    def building_tg ; df.world.buildings.all.binsearch(building_id) ; end
                }
            }
        }
    }
    field(:countdown, 112) {
        number 32, true, 3000
    }
end

class ActivityEventTrainingSessionst < ActivityEvent
    sizeof 92

    rtti_classname :activity_event_training_sessionst

    field(:participants, 20) {
        global :ActivityEventParticipants
    }
end

class ActivityInfo < MemHack::Compound
    sizeof 28

    field(:id, 0) {
        number 32, true
    }
    field(:unit_actor, 4) {
        pointer {
            global :Unit
        }
    }
    field(:unit_noble, 8) {
        pointer {
            global :Unit
        }
    }
    field(:place, 12) {
        pointer {
            global :Building
        }
    }
    field(:flags, 16) {
        compound(:ActivityInfo_TFlags) {
            field(:_whole, 0) {
                number 16, false
            }
            field(:next_step, 0) { bit 0 }
            field(:checked_building, 0) { bit 1 }
            field(:add_delay, 0) { bit 2 }
            field(:topic_discussed, 0) { bit 3 }
            field(:meeting_done, 0) { bit 4 }
        }
    }
    field(:unk3, 18) {
        number 8, true
    }
    field(:delay, 20) {
        number 16, true
    }
    field(:tree_quota, 24) {
        number 32, true
    }
end

class AdventureLogItem < MemHack::Compound
    sizeof 104

    field(:object, 0) {
        pointer {
        }
    }
    field(:str1, 4) {
        stl_string
    }
    field(:str2, 32) {
        stl_string
    }
    field(:str3, 60) {
        stl_string
    }
    field(:info, 88) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
end

class AdventureMovementOption < MemHack::Compound
    sizeof 4

    rtti_classname :adventure_movement_optionst

end

class AnnouncementFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:DO_MEGA, 0) { bit 0 }
    field(:PAUSE, 0) { bit 1 }
    field(:RECENTER, 0) { bit 2 }
    field(:A_DISPLAY, 0) { bit 3 }
    field(:D_DISPLAY, 0) { bit 4 }
    field(:UNIT_COMBAT_REPORT, 0) { bit 5 }
    field(:UNIT_COMBAT_REPORT_ALL_ACTIVE, 0) { bit 6 }
end

class Announcements < MemHack::Compound
    sizeof 1196

    field(:flags, 0) {
        static_array(299, 4, AnnouncementType) {
            global :AnnouncementFlags
        }
    }
end

class ArmorProperties < MemHack::Compound
    sizeof 20

    field(:flags, 0) {
        df_flagarray(ArmorGeneralFlags)
    }
    field(:layer, 8) {
        number 32, true
    }
    field(:layer_size, 12) {
        number 16, true
    }
    field(:layer_permit, 14) {
        number 16, true
    }
    field(:coverage, 16) {
        number 16, true
    }
end

class Army < MemHack::Compound
    sizeof 212

    field(:id, 0) {
        number 32, true
    }
    field(:unk_pos1, 4) {
        global :Coord
    }
    field(:unk_pos2, 10) {
        global :Coord
    }
    field(:unk_10, 16) {
        number 16, true
    }
    field(:unk_14, 20) {
        number 32, true
    }
    field(:unk_18, 24) {
        number 32, true
    }
    field(:unk_1c, 28) {
        stl_vector(4) {
            pointer {
                compound(:Army_TUnk1c) {
                    sizeof 72

                    field(:unk_0, 0) {
                        number 32, true
                    }
                    field(:unk_4, 4) {
                        number 32, true
                    }
                    field(:unk_8, 8) {
                        number 32, true
                    }
                    field(:unk_c, 12) {
                        number 32, true
                    }
                    field(:unk_10, 16) {
                        number 32, true
                    }
                    field(:unk_14, 20) {
                        number 32, true
                    }
                    field(:unk_18, 24) {
                        number 32, true
                    }
                    field(:unk_1c, 28) {
                        number 32, true, -1000000
                    }
                    field(:unk_20, 32) {
                        number 32, true, -1000000
                    }
                    field(:unk_24, 36) {
                        number 32, true, -1000000
                    }
                    field(:unk_28, 40) {
                        number 32, true
                    }
                    field(:unk_2c, 44) {
                        number 32, true
                    }
                    field(:unk_30, 48) {
                        number 32, true
                    }
                    field(:unk_34, 52) {
                        number 32, true
                    }
                    field(:unk_38, 56) {
                        stl_vector
                    }
                }
            }
        }
    }
    field(:unk_2c, 44) {
        stl_vector(4) {
            pointer {
                compound(:Army_TUnk2c) {
                    sizeof 44

                    field(:unk_0, 0) {
                        number 32, true
                    }
                    field(:unk_4, 4) {
                        number 32, true
                    }
                    field(:unk_8, 8) {
                        number 32, true
                    }
                    field(:unk_c, 12) {
                        number 32, true
                    }
                    field(:unk_10, 16) {
                        number 32, true
                    }
                    field(:unk_14, 20) {
                        number 32, true
                    }
                    field(:unk_18, 24) {
                        number 32, true
                    }
                    field(:unk_1c, 28) {
                        number 32, true
                    }
                    field(:unk_20, 32) {
                        number 32, true
                    }
                    field(:unk_24, 36) {
                        number 32, true
                    }
                    field(:unk_28, 40) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:unk_3c, 60) {
        number 32, true
    }
    field(:controller_id, 64) {
        number 32, true, -1
    }
    def controller_tg ; df.world.army_controllers.all.binsearch(controller_id) ; end
    field(:controller, 68) {
        pointer {
            global :ArmyController
        }
    }
    field(:unk_48, 72) {
        df_flagarray
    }
    field(:unk_pos_x, 80) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_pos_y, 96) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_70, 112) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_80, 128) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_90, 144) {
        number 32, true
    }
    field(:unk_94, 148) {
        number 32, true
    }
    field(:unk_98, 152) {
        number 32, true
    }
    field(:unk_9c, 156) {
        number 32, true
    }
    field(:unk_a0, 160) {
        number 32, true
    }
    field(:unk_a4, 164) {
        number 32, true
    }
    field(:unk_a8, 168) {
        stl_vector
    }
    field(:creature_class, 184) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:item_type, 200) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 202) {
        number 16, true, -1
    }
    field(:mat_type, 204) {
        number 16, true, -1
    }
    field(:mat_index, 208) {
        number 32, true
    }
end

class ArmyController < MemHack::Compound
    sizeof 96

    field(:id, 0) {
        number 32, true
    }
    field(:entity_id, 4) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
    field(:unk_8, 8) {
        number 32, true
    }
    field(:pos_x, 12) {
        number 32, true
    }
    field(:pos_y, 16) {
        number 32, true
    }
    field(:unk_14, 20) {
        number 32, true
    }
    field(:unk_18, 24) {
        number 32, true
    }
    field(:unk_1c, 28) {
        stl_vector
    }
    field(:year, 44) {
        number 32, true
    }
    field(:year_tick, 48) {
        number 32, true
    }
    field(:unk_34, 52) {
        number 32, true
    }
    field(:unk_38, 56) {
        number 32, true
    }
    field(:unk_3c, 60) {
        number 32, true
    }
    field(:unk_40, 64) {
        number 32, true
    }
    field(:unk_44, 68) {
        stl_vector
    }
    field(:unk_54, 84) {
        number 32, true
    }
    field(:unk_58, 88) {
        pointer {
        }
    }
    field(:unk_5c, 92) {
        number 32, true
    }
end

class ArtImage < MemHack::Compound
    sizeof 188

    field(:elements, 0) {
        stl_vector(4) {
            pointer {
                global :ArtImageElement
            }
        }
    }
    field(:properties, 16) {
        stl_vector(4) {
            pointer {
                global :ArtImageProperty
            }
        }
    }
    field(:event, 32) {
        number 32, true, -1
    }
    def event_tg ; df.world.history.events.binsearch(event) ; end
    field(:name, 36) {
        global :LanguageName
    }
    field(:spec_ref_type, 144) {
        number 32, true, nil, SpecificRefType
    }
    field(:mat_type, 148) {
        number 16, true, -1
    }
    field(:mat_index, 152) {
        number 32, true
    }
    field(:quality, 156) {
        number 16, true, nil, ItemQuality
    }
    field(:artist, 160) {
        number 32, true, -1
    }
    def artist_tg ; df.world.history.figures.binsearch(artist) ; end
    field(:site, 164) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:anon_1, 168) {
        pointer {
            global :GeneralRef
        }
    }
    field(:year, 172) {
        number 32, true
    }
    field(:anon_2, 176) {
        number 32, true
    }
    field(:id, 180) {
        number 32, true, -1
    }
    def id_tg ; df.world.art_image_chunks.binsearch(id) ; end
    field(:subid, 184) {
        number 16, true, -1
    }
end

class ArtImageChunk < MemHack::Compound
    sizeof 2004

    field(:id, 0) {
        number 32, true
    }
    field(:images, 4) {
        static_array(500, 4) {
            pointer {
                global :ArtImage
            }
        }
    }
end

class ArtImageElement < MemHack::Compound
    sizeof 8

    rtti_classname :art_image_elementst

    field(:count, 4) {
        number 32, true
    }
    def write_file(file)
        DFHack.vmethod_call(self, 0, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 4, file, loadversion) ; nil
    end
    def getType()
        ArtImageElementType.sym(DFHack.vmethod_call(self, 8))
    end
    def setID(iD)
        DFHack.vmethod_call(self, 12, iD) ; nil
    end
    def clone()
        ptr = DFHack.vmethod_call(self, 20)
        class << self
            global :ArtImageElement
        end._at(ptr) if ptr != 0
    end
    def getSymbol(sym, arg1)
        DFHack.vmethod_call(self, 24, sym, arg1) ; nil
    end
    def getName1(arg0, arg1, arg2)
        DFHack.vmethod_call(self, 28, arg0, arg1, arg2) ; nil
    end
    def getName2(arg0, arg1)
        DFHack.vmethod_call(self, 32, arg0, arg1) ; nil
    end
    def getColorAndShape(colors, shapes)
        DFHack.vmethod_call(self, 40, colors, shapes) ; nil
    end
end

class ArtImageElementCreaturest < ArtImageElement
    sizeof 20

    rtti_classname :art_image_element_creaturest

    field(:race, 8) {
        number 32, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:caste, 12) {
        number 16, true
    }
    field(:histfig, 16) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
end

class ArtImageElementItemst < ArtImageElement
    sizeof 24

    rtti_classname :art_image_element_itemst

    field(:item_type, 8) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 10) {
        number 16, true, -1
    }
    field(:mat_type, 12) {
        number 16, true, -1
    }
    field(:mat_index, 14) {
        number 16, true
    }
    field(:flags, 16) {
        global :ItemFlags
    }
    field(:item_id, 20) {
        number 32, true, -1
    }
    def item_tg ; df.world.items.all.binsearch(item_id) ; end
end

class ArtImageElementPlantst < ArtImageElement
    sizeof 12

    rtti_classname :art_image_element_plantst

    field(:plant_id, 8) {
        number 32, true, -1
    }
    def plant_tg ; df.world.raws.plants.all[plant_id] ; end
end

class ArtImageElementShapest < ArtImageElement
    sizeof 16

    rtti_classname :art_image_element_shapest

    field(:shape_id, 8) {
        number 32, true, -1
    }
    def shape_tg ; df.world.raws.language.shapes[shape_id] ; end
    field(:anon_1, 12) {
        number 16, true
    }
end

class ArtImageElementTreest < ArtImageElement
    sizeof 12

    rtti_classname :art_image_element_treest

    field(:plant_id, 8) {
        number 32, true, -1
    }
    def plant_tg ; df.world.raws.plants.all[plant_id] ; end
end

class ArtImageProperty < MemHack::Compound
    sizeof 12

    rtti_classname :art_image_propertyst

    field(:flags, 4) {
        df_flagarray
    }
    def write_file(file)
        DFHack.vmethod_call(self, 0, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 4, file, loadversion) ; nil
    end
    def getType()
        ArtImagePropertyType.sym(DFHack.vmethod_call(self, 8))
    end
    def clone()
        ptr = DFHack.vmethod_call(self, 16)
        class << self
            global :ArtImageElement
        end._at(ptr) if ptr != 0
    end
    def getName(arg0, arg1, arg2)
        DFHack.vmethod_call(self, 20, arg0, arg1, arg2) ; nil
    end
end

class ArtImagePropertyIntransitiveVerbst < ArtImageProperty
    sizeof 20

    rtti_classname :art_image_property_intransitive_verbst

    field(:anon_1, 12) {
        number 32, true
    }
    field(:verb, 16) {
        number 16, true, nil, ArtImagePropertyVerb
    }
end

class ArtImagePropertyTransitiveVerbst < ArtImageProperty
    sizeof 24

    rtti_classname :art_image_property_transitive_verbst

    field(:subject, 12) {
        number 32, true
    }
    field(:object, 16) {
        number 32, true
    }
    field(:verb, 20) {
        number 16, true, nil, ArtImagePropertyVerb
    }
end

class ArtImageRef < MemHack::Compound
    sizeof 16

    field(:id, 0) {
        number 32, true, -1
    }
    def id_tg ; df.world.art_image_chunks.binsearch(id) ; end
    field(:subid, 4) {
        number 16, true, -1
    }
    field(:civ_id, 8) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ_id) ; end
    field(:site_id, 12) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
end

class ArtifactRecord < MemHack::Compound
    sizeof 136

    field(:id, 0) {
        number 32, true
    }
    field(:name, 4) {
        global :LanguageName
    }
    field(:flags, 112) {
        df_flagarray
    }
    field(:item, 120) {
        pointer {
            global :Item
        }
    }
    field(:anon_1, 124) {
        number 32, true
    }
    field(:anon_2, 128) {
        number 32, true
    }
    field(:anon_3, 132) {
        number 32, true
    }
end

class AssignTradeStatus < MemHack::Compound
    sizeof 20

    field(:item, 0) {
        pointer {
            global :Item
        }
    }
    field(:distance, 4) {
        number 32, true
    }
    field(:status, 8) {
        class ::DFHack::AssignTradeStatus_TStatus < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[-2] = :RemoveTrading ; NUME[:RemoveTrading] = -2
            ENUM[-1] = :RemovePending ; NUME[:RemovePending] = -1
            ENUM[0] = :None ; NUME[:None] = 0
            ENUM[1] = :AddPending ; NUME[:AddPending] = 1
            ENUM[2] = :Pending ; NUME[:Pending] = 2
            ENUM[3] = :Trading ; NUME[:Trading] = 3
        end

        number 8, true, nil, AssignTradeStatus_TStatus
    }
    field(:unk, 9) {
        number 8, true, nil, BooleanEnum
    }
    field(:value, 12) {
        number 32, true
    }
    field(:weight, 16) {
        number 32, true
    }
end

class BlockBurrow < MemHack::Compound
    sizeof 40

    field(:id, 0) {
        number 32, true, -1
    }
    def id_tg ; df.ui.burrows.list.binsearch(id) ; end
    field(:tile_bitmask, 4) {
        global :TileBitmask
    }
    field(:link, 36) {
        pointer {
            global :BlockBurrowLink
        }
    }
end

class BlockBurrowLink < MemHack::Compound
    sizeof 12

    field(:item, 0) {
        pointer {
            global :BlockBurrow
        }
    }
    field(:prev, 4) {
        pointer {
            global :BlockBurrowLink
        }
    }
    field(:next, 8) {
        pointer {
            global :BlockBurrowLink
        }
    }
end

class BlockFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:designated, 0) { bit 0 }
    field(:update_temperature, 0) { bit 1 }
    field(:update_liquid, 0) { bit 2 }
    field(:update_liquid_twice, 0) { bit 3 }
    field(:repath_on_freeze, 0) { bit 4 }
    field(:repath_on_melt, 0) { bit 5 }
    field(:has_aquifer, 0) { bit 6 }
    field(:check_aquifer, 0) { bit 7 }
end

class BlockSquareEvent < MemHack::Compound
    sizeof 4

    rtti_classname :block_square_eventst

    def getType()
        BlockSquareEventType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(file)
        DFHack.vmethod_call(self, 4, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 8, file, loadversion) ; nil
    end
    def isEmpty()
        val = DFHack.vmethod_call(self, 12)
        (val & 1) != 0
    end
    def checkTemperature(x, y, temperature)
        DFHack.vmethod_call(self, 20, x, y, temperature) ; nil
    end
end

class BlockSquareEventDesignationPriorityst < BlockSquareEvent
    sizeof 1028

    rtti_classname :block_square_event_designation_priorityst

    field(:priority, 4) {
        static_array(16, 64) {
            static_array(16, 4) {
                number 32, true
            }
        }
    }
end

class BlockSquareEventFrozenLiquidst < BlockSquareEvent
    sizeof 772

    rtti_classname :block_square_event_frozen_liquidst

    field(:tiles, 4) {
        static_array(16, 32) {
            static_array(16, 2) {
                number 16, true, nil, Tiletype
            }
        }
    }
    field(:liquid_type, 516) {
        static_array(16, 16) {
            static_array(16, 1) {
                number 8, true, nil, TileLiquid
            }
        }
    }
end

class BlockSquareEventGrassst < BlockSquareEvent
    sizeof 264

    rtti_classname :block_square_event_grassst

    field(:plant_index, 4) {
        number 32, true, -1
    }
    def plant_index_tg ; df.world.raws.plants.all[plant_index] ; end
    field(:amount, 8) {
        static_array(16, 16) {
            static_array(16, 1) {
                number 8, true
            }
        }
    }
end

class BlockSquareEventItemSpatterst < BlockSquareEvent
    sizeof 1304

    rtti_classname :block_square_event_item_spatterst

    field(:item_type, 4) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 6) {
        number 16, true, -1
    }
    field(:mattype, 8) {
        number 16, true, -1
    }
    field(:matindex, 12) {
        number 32, true
    }
    field(:unk1, 16) {
        number 32, true
    }
    field(:amount, 20) {
        static_array(16, 64) {
            static_array(16, 4) {
                number 32, true
            }
        }
    }
    field(:unk2, 1044) {
        static_array(16, 16) {
            static_array(16, 1) {
                number 8, true
            }
        }
    }
    field(:temp1, 1300) {
        number 16, false
    }
    field(:temp2, 1302) {
        number 16, false
    }
end

class BlockSquareEventMaterialSpatterst < BlockSquareEvent
    sizeof 276

    rtti_classname :block_square_event_material_spatterst

    field(:mat_type, 4) {
        number 16, true, -1
    }
    field(:mat_index, 8) {
        number 32, true
    }
    field(:mat_state, 12) {
        number 16, true
    }
    field(:amount, 14) {
        static_array(16, 16) {
            static_array(16, 1) {
                number 8, false
            }
        }
    }
    field(:min_temperature, 270) {
        number 16, false
    }
    field(:max_temperature, 272) {
        number 16, false
    }
end

class BlockSquareEventMineralst < BlockSquareEvent
    sizeof 44

    rtti_classname :block_square_event_mineralst

    field(:inorganic_mat, 4) {
        number 32, true, -1
    }
    def inorganic_mat_tg ; df.world.raws.inorganics[inorganic_mat] ; end
    field(:tile_bitmask, 8) {
        global :TileBitmask
    }
    field(:flags, 40) {
        compound(:BlockSquareEventMineralst_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:discovered, 0) { bit 0 }
            field(:cluster, 0) { bit 1 }
            field(:vein, 0) { bit 2 }
            field(:cluster_small, 0) { bit 3 }
            field(:cluster_one, 0) { bit 4 }
        }
    }
end

class BlockSquareEventSpoorst < BlockSquareEvent
    sizeof 4876

    rtti_classname :block_square_event_spoorst

    field(:anon_1, 4) {
        static_array(16, 32) {
            static_array(16, 2) {
                number 16, true
            }
        }
    }
    field(:anon_2, 516) {
        static_array(16, 16) {
            static_array(16, 1) {
                number 8, true
            }
        }
    }
    field(:anon_3, 772) {
        static_array(16, 64) {
            static_array(16, 4) {
                number 32, true
            }
        }
    }
    field(:anon_4, 1796) {
        static_array(16, 64) {
            static_array(16, 4) {
                number 32, true
            }
        }
    }
    field(:anon_5, 2820) {
        static_array(16, 64) {
            static_array(16, 4) {
                number 32, true
            }
        }
    }
    field(:anon_6, 3844) {
        static_array(16, 64) {
            static_array(16, 4) {
                number 32, true
            }
        }
    }
    field(:anon_7, 4868) {
        number 32, true
    }
    field(:anon_8, 4872) {
        number 32, true
    }
end

class BlockSquareEventWorldConstructionst < BlockSquareEvent
    sizeof 40

    rtti_classname :block_square_event_world_constructionst

    field(:construction_id, 4) {
        number 32, true, -1
    }
    def construction_tg ; df.world.world_data.constructions.list.binsearch(construction_id) ; end
    field(:tile_bitmask, 8) {
        global :TileBitmask
    }
end

class BodyAppearanceModifier < MemHack::Compound
    sizeof 124

    field(:type, 0) {
        number 16, true, nil, AppearanceModifierType
    }
    field(:ranges, 4) {
        static_array(7, 4) {
            number 32, true
        }
    }
    field(:desc_range, 32) {
        static_array(6, 4) {
            number 32, true
        }
    }
    field(:anon_1, 56) {
        number 32, true
    }
    field(:anon_2, 60) {
        number 16, true
    }
    field(:anon_3, 64) {
        number 32, true
    }
    field(:anon_4, 68) {
        number 32, true
    }
    field(:anon_5, 72) {
        number 32, true
    }
    field(:anon_6, 76) {
        number 32, true
    }
    field(:importance, 80) {
        number 32, true
    }
    field(:noun, 84) {
        stl_string
    }
    field(:anon_7, 112) {
        number 16, true
    }
    field(:anon_8, 114) {
        number 16, true
    }
    field(:id, 116) {
        number 32, true
    }
    field(:id2, 120) {
        number 32, true
    }
end

class BodyComponentInfo < MemHack::Compound
    sizeof 128

    field(:body_part_status, 0) {
        stl_vector(4) {
            global :BodyPartStatus
        }
    }
    field(:numbered_masks, 16) {
        stl_vector(4) {
            number 32, false
        }
    }
    field(:nonsolid_remaining, 32) {
        stl_vector(4) {
            number 32, false
        }
    }
    field(:layer_status, 48) {
        stl_vector(4) {
            global :BodyLayerStatus
        }
    }
    field(:layer_wound_area, 64) {
        stl_vector(4) {
            number 32, false
        }
    }
    field(:layer_cut_fraction, 80) {
        stl_vector(4) {
            number 32, false
        }
    }
    field(:layer_dent_fraction, 96) {
        stl_vector(4) {
            number 32, false
        }
    }
    field(:layer_effect_fraction, 112) {
        stl_vector(4) {
            number 32, false
        }
    }
end

class BodyDetailPlan < MemHack::Compound
    sizeof 428

    field(:id, 0) {
        stl_string
    }
    field(:add_material_name, 28) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:add_material_template, 44) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:add_tissue_name, 60) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:add_tissue_template, 76) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:unk5c, 92) {
        stl_vector
    }
    field(:unk6c, 108) {
        stl_vector
    }
    field(:unk7c, 124) {
        stl_vector
    }
    field(:bp_layers_selection, 140) {
        stl_vector
    }
    field(:bp_layers_criteria, 156) {
        stl_vector
    }
    field(:bp_layers_tissue, 172) {
        stl_vector
    }
    field(:bp_layers_thickness, 188) {
        stl_vector
    }
    field(:bp_layers_position, 204) {
        stl_vector
    }
    field(:bp_layers_over_under, 220) {
        stl_vector
    }
    field(:bp_relsize_selection, 236) {
        stl_vector
    }
    field(:bp_relsize_criteria, 252) {
        stl_vector
    }
    field(:bp_relsize_value, 268) {
        stl_vector
    }
    field(:bp_position_selection, 284) {
        stl_vector
    }
    field(:bp_position_criteria, 300) {
        stl_vector
    }
    field(:bp_position_value, 316) {
        stl_vector
    }
    field(:bp_relation_selection_1, 332) {
        stl_vector
    }
    field(:bp_relation_criteria_1, 348) {
        stl_vector
    }
    field(:bp_relation_value_1, 364) {
        stl_vector
    }
    field(:bp_relation_selection_2, 380) {
        stl_vector
    }
    field(:bp_relation_criteria_2, 396) {
        stl_vector
    }
    field(:bp_relation_extent, 412) {
        stl_vector
    }
end

class BodyLayerStatus < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:gone, 0) { bit 0 }
    field(:leaking, 0) { bit 1 }
end

class BodyPartLayerRaw < MemHack::Compound
    sizeof 108

    field(:layer_name, 0) {
        stl_string
    }
    field(:tissue_id, 28) {
        number 32, true, -1
    }
    field(:flags, 32) {
        df_flagarray(BodyPartLayerFlags)
    }
    field(:part_fraction, 40) {
        number 32, true
    }
    field(:healing_rate, 44) {
        number 32, true
    }
    field(:vascular, 48) {
        number 32, true
    }
    field(:pain_receptors, 52) {
        number 32, true
    }
    field(:unk6, 56) {
        number 32, true
    }
    field(:unk7, 60) {
        number 16, true
    }
    field(:bp_modifiers, 64) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    field(:layer_id, 80) {
        number 32, true
    }
    field(:parent_idx, 84) {
        number 32, true, -1
    }
    field(:parent_layer_id, 88) {
        number 32, true
    }
    field(:layer_depth, 92) {
        number 32, true
    }
    field(:leak_barrier_id, 96) {
        number 32, true
    }
    field(:nonsolid_id, 100) {
        number 32, true
    }
    field(:styleable_id, 104) {
        number 32, true
    }
end

class BodyPartRaw < MemHack::Compound
    sizeof 180

    field(:token, 0) {
        stl_string
    }
    field(:category, 28) {
        stl_string
    }
    field(:con_part_id, 56) {
        number 16, true
    }
    field(:flags, 60) {
        df_flagarray(BodyPartRawFlags)
    }
    field(:layers, 68) {
        stl_vector(4) {
            pointer {
                global :BodyPartLayerRaw
            }
        }
    }
    field(:fraction_total, 84) {
        number 32, true
    }
    field(:fraction_base, 88) {
        number 32, true
    }
    field(:fraction_fat, 92) {
        number 32, true
    }
    field(:fraction_muscle, 96) {
        number 32, true
    }
    field(:relsize, 100) {
        number 32, true
    }
    field(:number, 104) {
        number 32, true
    }
    field(:unk7b, 108) {
        number 16, true
    }
    field(:name_singular, 112) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:name_plural, 128) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:bp_relation_part_id, 144) {
        pointer {
            stl_vector(2) {
                number 16, true
            }
        }
    }
    field(:bp_relation_code, 148) {
        pointer {
            stl_vector(2) {
                number 16, true
            }
        }
    }
    field(:bp_relation_coverage, 152) {
        pointer {
            stl_vector(2) {
                number 16, true
            }
        }
    }
    field(:min_temp, 156) {
        number 16, false
    }
    field(:max_temp, 158) {
        number 16, false
    }
    field(:temp_factor, 160) {
        number 16, false
    }
    field(:numbered_idx, 164) {
        number 32, true, -1
    }
    field(:insulation_fat, 168) {
        number 16, true
    }
    field(:insulation_muscle, 170) {
        number 16, true
    }
    field(:insulation_base, 172) {
        number 16, true
    }
    field(:clothing_item_id, 176) {
        number 32, true, -1
    }
end

class BodyPartStatus < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:on_fire, 0) { bit 0 }
    field(:missing, 0) { bit 1 }
    field(:organ_loss, 0) { bit 2 }
    field(:organ_damage, 0) { bit 3 }
    field(:muscle_loss, 0) { bit 4 }
    field(:muscle_damage, 0) { bit 5 }
    field(:bone_loss, 0) { bit 6 }
    field(:bone_damage, 0) { bit 7 }
    field(:skin_damage, 0) { bit 8 }
    field(:motor_nerve_severed, 0) { bit 9 }
    field(:sensory_nerve_severed, 0) { bit 10 }
    field(:spilled_guts, 0) { bit 11 }
    field(:has_splint, 0) { bit 12 }
    field(:has_bandage, 0) { bit 13 }
    field(:has_plaster_cast, 0) { bit 14 }
    field(:grime, 0) { bits 15, 3 }
    field(:severed_or_jammed, 0) { bit 18 }
    field(:under_shell, 0) { bit 19 }
    field(:is_shell, 0) { bit 20 }
    field(:unk19, 0) { bit 21 }
    field(:unk20, 0) { bit 22 }
end

class BodyPartTemplate < MemHack::Compound
    sizeof 164

    field(:id, 0) {
        stl_string
    }
    field(:con, 28) {
        stl_string
    }
    field(:category, 56) {
        stl_string
    }
    field(:con_cat, 84) {
        stl_string
    }
    field(:contype, 112) {
        number 16, true, nil, BodyPartTemplateContype
    }
    field(:flags, 116) {
        df_flagarray(BodyPartTemplateFlags)
    }
    field(:default_relsize, 124) {
        number 32, true
    }
    field(:number, 128) {
        number 32, true
    }
    field(:name_singular, 132) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:name_plural, 148) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
end

class BodySizeInfo < MemHack::Compound
    sizeof 24

    field(:size_cur, 0) {
        number 32, true
    }
    field(:size_base, 4) {
        number 32, true
    }
    field(:area_cur, 8) {
        number 32, true
    }
    field(:area_base, 12) {
        number 32, true
    }
    field(:length_cur, 16) {
        number 32, true
    }
    field(:length_base, 20) {
        number 32, true
    }
end

class BodyTemplate < MemHack::Compound
    sizeof 44

    field(:id, 0) {
        stl_string
    }
    field(:parts, 28) {
        stl_vector(4) {
            pointer {
                global :BodyPartTemplate
            }
        }
    }
end

class BpAppearanceModifier < MemHack::Compound
    sizeof 156

    field(:type, 0) {
        number 16, true, nil, AppearanceModifierType
    }
    field(:ranges, 4) {
        static_array(7, 4) {
            number 32, true
        }
    }
    field(:desc_range, 32) {
        static_array(6, 4) {
            number 32, true
        }
    }
    field(:anon_1, 56) {
        number 32, true
    }
    field(:anon_2, 60) {
        number 16, true
    }
    field(:anon_3, 64) {
        number 32, true
    }
    field(:anon_4, 68) {
        number 32, true
    }
    field(:anon_5, 72) {
        number 32, true
    }
    field(:anon_6, 76) {
        number 32, true
    }
    field(:importance, 80) {
        number 32, true
    }
    field(:noun, 84) {
        stl_string
    }
    field(:single_plural, 112) {
        number 16, true
    }
    field(:unk1, 114) {
        number 16, true
    }
    field(:id1, 116) {
        number 32, true
    }
    field(:body_parts, 120) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:tissue_layer, 136) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:id, 152) {
        number 32, true
    }
end

class BuildReqChoicest < MemHack::Compound
    sizeof 8

    rtti_classname :build_req_choicest

    field(:distance, 4) {
        number 32, true
    }
    def getType()
        BuildReqChoiceType.sym(DFHack.vmethod_call(self, 0))
    end
    def getName(str)
        DFHack.vmethod_call(self, 4, str) ; nil
    end
    def isCandidate(item_id)
        val = DFHack.vmethod_call(self, 12, item_id)
        (val & 1) != 0
    end
    def getUsedCount()
        val = DFHack.vmethod_call(self, 20)
    end
    def getNumCandidates()
        val = DFHack.vmethod_call(self, 24)
    end
end

class BuildReqChoiceGenst < BuildReqChoicest
    sizeof 40

    rtti_classname :build_req_choice_genst

    field(:item_type, 8) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 10) {
        number 16, true, -1
    }
    field(:mat_type, 12) {
        number 16, true, -1
    }
    field(:mat_index, 16) {
        number 32, true
    }
    field(:candidates, 20) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:used_count, 36) {
        number 32, true
    }
end

class BuildReqChoiceSpecst < BuildReqChoicest
    sizeof 16

    rtti_classname :build_req_choice_specst

    field(:candidate, 8) {
        pointer {
            global :Item
        }
    }
    field(:candidate_id, 12) {
        number 32, true
    }
end

class Building < MemHack::Compound
    sizeof 244

    rtti_classname :buildingst

    field(:x1, 4) {
        number 32, true
    }
    field(:y1, 8) {
        number 32, true
    }
    field(:centerx, 12) {
        number 32, true
    }
    field(:x2, 16) {
        number 32, true
    }
    field(:y2, 20) {
        number 32, true
    }
    field(:centery, 24) {
        number 32, true
    }
    field(:z, 28) {
        number 32, true
    }
    field(:flags, 32) {
        global :BuildingFlags
    }
    field(:mat_type, 36) {
        number 16, true, -1
    }
    field(:mat_index, 40) {
        number 32, true, -1
    }
    field(:room, 44) {
        global :BuildingExtents
    }
    field(:age, 64) {
        number 32, true
    }
    field(:race, 68) {
        number 16, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:id, 72) {
        number 32, true, -1
    }
    field(:jobs, 76) {
        stl_vector(4) {
            pointer {
                global :Job
            }
        }
    }
    field(:specific_refs, 92) {
        stl_vector(4) {
            pointer {
                global :SpecificRef
            }
        }
    }
    field(:general_refs, 108) {
        stl_vector(4) {
            pointer {
                global :GeneralRef
            }
        }
    }
    field(:is_room, 124) {
        number 8, true, nil, BooleanEnum
    }
    field(:children, 128) {
        stl_vector(4) {
            pointer {
                global :Building
            }
        }
    }
    field(:parents, 144) {
        stl_vector(4) {
            pointer {
                global :Building
            }
        }
    }
    field(:owner_id, 160) {
        number 32, true, -1
    }
    def owner_tg ; df.world.units.all.binsearch(owner_id) ; end
    field(:owner, 164) {
        pointer {
            global :Unit
        }
    }
    field(:job_claim_suppress, 168) {
        stl_vector(4) {
            pointer {
                compound(:Building_TJobClaimSuppress) {
                    sizeof 8

                    field(:unit, 0) {
                        pointer {
                            global :Unit
                        }
                    }
                    field(:timer, 4) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:name, 184) {
        stl_string
    }
    field(:activities, 212) {
        stl_vector(4) {
            pointer {
                compound(:Building_TActivities) {
                    sizeof 8

                    field(:activity_id, 0) {
                        number 32, true, -1
                    }
                    def activity_tg ; df.world.activities.all.binsearch(activity_id) ; end
                    field(:event_id, 4) {
                        number 32, true, -1
                    }
                }
            }
        }
    }
    field(:world_data_id, 228) {
        number 32, true, -1
    }
    def world_data_tg ; df.world.world_data.object_data.binsearch(world_data_id) ; end
    field(:world_data_subid, 232) {
        number 32, true, -1
    }
    field(:unk_v40_2, 236) {
        number 32, true, -1
    }
    field(:unk_v40_3, 240) {
        number 32, true, -1
    }
    def getCustomType()
        val = DFHack.vmethod_call(self, 0)
    end
    def setCustomType(type)
        DFHack.vmethod_call(self, 4, type) ; nil
    end
    def countHospitalSupplies(supplies)
        DFHack.vmethod_call(self, 8, supplies) ; nil
    end
    def getStockpileLinks()
        ptr = DFHack.vmethod_call(self, 12)
        class << self
            global :StockpileLinks
        end._at(ptr) if ptr != 0
    end
    def detachWorldData()
        DFHack.vmethod_call(self, 16) ; nil
    end
    def canLinkToStockpile()
        val = DFHack.vmethod_call(self, 20)
        (val & 1) != 0
    end
    def getUsers()
        ptr = DFHack.vmethod_call(self, 24)
        class << self
            global :BuildingUsers
        end._at(ptr) if ptr != 0
    end
    def moveBuilding(delta_x, delta_y, delta_z)
        DFHack.vmethod_call(self, 28, delta_x, delta_y, delta_z) ; nil
    end
    def initOccupancy(abs_x, abs_y)
        DFHack.vmethod_call(self, 32, abs_x, abs_y) ; nil
    end
    def setFillTimer(arg0, arg1)
        DFHack.vmethod_call(self, 36, JobType.int(arg0), arg1) ; nil
    end
    def isOnFire()
        val = DFHack.vmethod_call(self, 40)
        (val & 1) != 0
    end
    def isUnpowered()
        val = DFHack.vmethod_call(self, 44)
        (val & 1) != 0
    end
    def canCollapse()
        val = DFHack.vmethod_call(self, 48)
        (val & 1) != 0
    end
    def getPassableOccupancy()
        val = DFHack.vmethod_call(self, 52)
        val & ((1 << 32) - 1)
    end
    def getImpassableOccupancy()
        val = DFHack.vmethod_call(self, 56)
        val & ((1 << 32) - 1)
    end
    def isPowerSource()
        val = DFHack.vmethod_call(self, 60)
        (val & 1) != 0
    end
    def updateFromWeather()
        DFHack.vmethod_call(self, 64) ; nil
    end
    def updateTemperature()
        DFHack.vmethod_call(self, 68) ; nil
    end
    def updateItems()
        DFHack.vmethod_call(self, 72) ; nil
    end
    def updateTempFromTile(temp, arg1, arg2)
        DFHack.vmethod_call(self, 76, temp, arg1, arg2) ; nil
    end
    def isNormalFurniture()
        val = DFHack.vmethod_call(self, 80)
        (val & 1) != 0
    end
    def isFarmPlot()
        val = DFHack.vmethod_call(self, 84)
        (val & 1) != 0
    end
    def getWorkshopProfile()
        ptr = DFHack.vmethod_call(self, 88)
        class << self
            global :WorkshopProfile
        end._at(ptr) if ptr != 0
    end
    def getMachineInfo()
        ptr = DFHack.vmethod_call(self, 92)
        class << self
            global :MachineInfo
        end._at(ptr) if ptr != 0
    end
    def getPowerInfo(power_info)
        DFHack.vmethod_call(self, 96, power_info) ; nil
    end
    def canConnectToMachine(arg0)
        val = DFHack.vmethod_call(self, 100, arg0)
        (val & 1) != 0
    end
    def getType()
        BuildingType.sym(DFHack.vmethod_call(self, 104))
    end
    def getSubtype()
        val = DFHack.vmethod_call(self, 108)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def setSubtype(subtype)
        DFHack.vmethod_call(self, 112, subtype) ; nil
    end
    def isActual()
        val = DFHack.vmethod_call(self, 116)
        (val & 1) != 0
    end
    def isCoffin2()
        val = DFHack.vmethod_call(self, 120)
        (val & 1) != 0
    end
    def updateAction()
        DFHack.vmethod_call(self, 124) ; nil
    end
    def isStatueOrRestraint()
        val = DFHack.vmethod_call(self, 128)
        (val & 1) != 0
    end
    def setMaterialAmount(arg0)
        DFHack.vmethod_call(self, 132, arg0) ; nil
    end
    def setBuildStage(stage)
        DFHack.vmethod_call(self, 136, stage) ; nil
    end
    def getBuildStage()
        val = DFHack.vmethod_call(self, 140)
    end
    def getMaxBuildStage()
        val = DFHack.vmethod_call(self, 144)
    end
    def getArchitectureValue()
        val = DFHack.vmethod_call(self, 148)
    end
    def isSettingOccupancy()
        val = DFHack.vmethod_call(self, 152)
        (val & 1) != 0
    end
    def isActual2()
        val = DFHack.vmethod_call(self, 156)
        (val & 1) != 0
    end
    def isExtentShaped()
        val = DFHack.vmethod_call(self, 160)
        (val & 1) != 0
    end
    def updateOccupancy(abs_x, abs_y)
        DFHack.vmethod_call(self, 164, abs_x, abs_y) ; nil
    end
    def getRoomValue(arg0)
        val = DFHack.vmethod_call(self, 168, arg0)
    end
    def getPersonalValue(arg0)
        val = DFHack.vmethod_call(self, 172, arg0)
    end
    def canBeRoom()
        val = DFHack.vmethod_call(self, 176)
        (val & 1) != 0
    end
    def getConstructionValue()
        val = DFHack.vmethod_call(self, 180)
    end
    def queueDestroy()
        DFHack.vmethod_call(self, 184) ; nil
    end
    def isImpassableTile(rel_x, rel_y)
        val = DFHack.vmethod_call(self, 188, rel_x, rel_y)
        (val & 1) != 0
    end
    def getFreeCapacity(subtract_pending_jobs)
        val = DFHack.vmethod_call(self, 192, subtract_pending_jobs)
    end
    def canStoreItem(arg0, subtract_pending_jobs)
        val = DFHack.vmethod_call(self, 196, arg0, subtract_pending_jobs)
        (val & 1) != 0
    end
    def getName(name)
        DFHack.vmethod_call(self, 200, name) ; nil
    end
    def getNameColor()
        DFHack.vmethod_call(self, 204) ; nil
    end
    def initFarmSeasons()
        DFHack.vmethod_call(self, 208) ; nil
    end
    def initBurialFlags()
        DFHack.vmethod_call(self, 212) ; nil
    end
    def clearBurialFlags()
        DFHack.vmethod_call(self, 216) ; nil
    end
    def clearBurialFlags2()
        DFHack.vmethod_call(self, 220) ; nil
    end
    def getClutterLevel()
        val = DFHack.vmethod_call(self, 224)
    end
    def needsDesign()
        val = DFHack.vmethod_call(self, 228)
        (val & 1) != 0
    end
    def canUseForMood(arg0)
        val = DFHack.vmethod_call(self, 232, JobType.int(arg0))
        (val & 1) != 0
    end
    def canBeRoomSubset()
        val = DFHack.vmethod_call(self, 236)
        (val & 1) != 0
    end
    def isCoffin()
        val = DFHack.vmethod_call(self, 240)
        (val & 1) != 0
    end
    def canUseSpouseRoom()
        val = DFHack.vmethod_call(self, 244)
        (val & 1) != 0
    end
    def canMakeRoom()
        val = DFHack.vmethod_call(self, 248)
        (val & 1) != 0
    end
    def isJusticeRestraint()
        val = DFHack.vmethod_call(self, 252)
        (val & 1) != 0
    end
    def detachRestrainedUnit(arg0)
        DFHack.vmethod_call(self, 256, arg0) ; nil
    end
    def write_file(file)
        DFHack.vmethod_call(self, 260, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 264, file, loadversion) ; nil
    end
    def isImpassableAtCreation()
        val = DFHack.vmethod_call(self, 268)
        (val & 1) != 0
    end
    def categorize(in_play)
        DFHack.vmethod_call(self, 272, in_play) ; nil
    end
    def uncategorize()
        DFHack.vmethod_call(self, 276) ; nil
    end
    def getBaseValue()
        val = DFHack.vmethod_call(self, 280)
    end
    def setTriggerState(new_state)
        DFHack.vmethod_call(self, 284, new_state) ; nil
    end
    def checkAdvmodeLocked()
        DFHack.vmethod_call(self, 288) ; nil
    end
    def drawAdvmodeUnlockUI()
        DFHack.vmethod_call(self, 292) ; nil
    end
    def advmodeUnlock(arg0)
        DFHack.vmethod_call(self, 296, arg0) ; nil
    end
    def needsMagma()
        val = DFHack.vmethod_call(self, 300)
        (val & 1) != 0
    end
    def removeUses(noscatter, lost)
        DFHack.vmethod_call(self, 304, noscatter, lost) ; nil
    end
    def deconstructItems(noscatter, lost)
        DFHack.vmethod_call(self, 308, noscatter, lost) ; nil
    end
    def cleanupMap()
        DFHack.vmethod_call(self, 312) ; nil
    end
    def isFireSafe(fire_type)
        val = DFHack.vmethod_call(self, 316, fire_type)
        (val & 1) != 0
    end
    def fillSidebarMenu()
        DFHack.vmethod_call(self, 320) ; nil
    end
    def isForbidden()
        val = DFHack.vmethod_call(self, 324)
        (val & 1) != 0
    end
    def isHidden()
        val = DFHack.vmethod_call(self, 332)
        (val & 1) != 0
    end
    def isVisibleInUI()
        val = DFHack.vmethod_call(self, 336)
        (val & 1) != 0
    end
    def isVisibleInViewport(viewport)
        val = DFHack.vmethod_call(self, 340, viewport)
        (val & 1) != 0
    end
    def getDrawExtents(buffer)
        DFHack.vmethod_call(self, 344, buffer) ; nil
    end
    def drawBuilding(buffer, z_offset)
        DFHack.vmethod_call(self, 348, buffer, z_offset) ; nil
    end
    def setSquadUse(squad, arg1)
        DFHack.vmethod_call(self, 352, squad, arg1) ; nil
    end
    def getSquads()
        ptr = DFHack.vmethod_call(self, 356)
        class << self
            stl_vector(4) {
                pointer {
                    global :BuildingSquadUse
                }
            }
        end._at(ptr) if ptr != 0
    end
    def getSpecificSquad()
        val = DFHack.vmethod_call(self, 360)
    end
    def getSpecificPosition()
        val = DFHack.vmethod_call(self, 364)
    end
    def setSpecificSquadPos(arg0, arg1)
        DFHack.vmethod_call(self, 368, arg0, arg1) ; nil
    end
    def clearSpecificSquad()
        DFHack.vmethod_call(self, 372) ; nil
    end
end

class BuildingActual < Building
    sizeof 268

    rtti_classname :building_actualst

    field(:construction_stage, 244) {
        number 16, true
    }
    field(:contained_items, 248) {
        stl_vector(4) {
            pointer {
                compound(:BuildingActual_TContainedItems) {
                    sizeof 8

                    field(:item, 0) {
                        pointer {
                            global :Item
                        }
                    }
                    field(:use_mode, 4) {
                        number 16, true
                    }
                }
            }
        }
    }
    field(:design, 264) {
        pointer {
            global :BuildingDesign
        }
    }
    def isDestroyedByItemRemoval()
        val = DFHack.vmethod_call(self, 380)
        (val & 1) != 0
    end
end

class BuildingAnimaltrapst < BuildingActual
    sizeof 272

    rtti_classname :building_animaltrapst

    field(:bait_type, 268) {
        number 16, true, -1
    }
    field(:fill_timer, 270) {
        number 16, true
    }
end

class BuildingArcherytargetst < BuildingActual
    sizeof 272

    rtti_classname :building_archerytargetst

    field(:archery_direction, 268) {
        class ::DFHack::BuildingArcherytargetst_TArcheryDirection < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :TopToBottom ; NUME[:TopToBottom] = 0
            ENUM[1] = :BottomToTop ; NUME[:BottomToTop] = 1
            ENUM[2] = :LeftToRight ; NUME[:LeftToRight] = 2
            ENUM[3] = :RightToLeft ; NUME[:RightToLeft] = 3
        end

        number 8, true, nil, BuildingArcherytargetst_TArcheryDirection
    }
end

class BuildingArmorstandst < BuildingActual
    sizeof 296

    rtti_classname :building_armorstandst

    field(:unk_c0, 268) {
        number 16, true
    }
    field(:squads, 272) {
        stl_vector(4) {
            pointer {
                global :BuildingSquadUse
            }
        }
    }
    field(:specific_squad, 288) {
        number 32, true, -1
    }
    def specific_squad_tg ; df.world.squads.all.binsearch(specific_squad) ; end
    field(:specific_position, 292) {
        number 32, true, -1
    }
end

class BuildingAxleHorizontalst < BuildingActual
    sizeof 280

    rtti_classname :building_axle_horizontalst

    field(:machine, 268) {
        global :MachineInfo
    }
    field(:is_vertical, 276) {
        number 8, true, nil, BooleanEnum
    }
end

class BuildingAxleVerticalst < BuildingActual
    sizeof 276

    rtti_classname :building_axle_verticalst

    field(:machine, 268) {
        global :MachineInfo
    }
end

class BuildingBarsFloorst < BuildingActual
    sizeof 272

    rtti_classname :building_bars_floorst

    field(:gate_flags, 268) {
        global :GateFlags
    }
    field(:timer, 270) {
        number 8, true
    }
end

class BuildingBarsVerticalst < BuildingActual
    sizeof 272

    rtti_classname :building_bars_verticalst

    field(:gate_flags, 268) {
        global :GateFlags
    }
    field(:timer, 270) {
        number 8, true
    }
end

class BuildingBedst < BuildingActual
    sizeof 328

    rtti_classname :building_bedst

    field(:anon_1, 268) {
        compound(:BuildingBedst_TAnon1) {
            field(:_whole, 0) {
                number 16, false
            }
            field(:barracks, 0) { bit 0 }
            field(:dormitory, 0) { bit 1 }
        }
    }
    field(:squads, 272) {
        stl_vector(4) {
            pointer {
                global :BuildingSquadUse
            }
        }
    }
    field(:specific_squad, 288) {
        number 32, true, -1
    }
    def specific_squad_tg ; df.world.squads.all.binsearch(specific_squad) ; end
    field(:specific_position, 292) {
        number 32, true, -1
    }
    field(:users, 296) {
        global :BuildingUsers
    }
end

class BuildingBoxst < BuildingActual
    sizeof 296

    rtti_classname :building_boxst

    field(:anon_1, 268) {
        number 16, true
    }
    field(:squads, 272) {
        stl_vector(4) {
            pointer {
                global :BuildingSquadUse
            }
        }
    }
    field(:specific_squad, 288) {
        number 32, true, -1
    }
    def specific_squad_tg ; df.world.squads.all.binsearch(specific_squad) ; end
    field(:specific_position, 292) {
        number 32, true, -1
    }
end

class BuildingBridgest < BuildingActual
    sizeof 276

    rtti_classname :building_bridgest

    field(:gate_flags, 268) {
        global :GateFlags
    }
    field(:timer, 270) {
        number 8, true
    }
    field(:direction, 271) {
        class ::DFHack::BuildingBridgest_TDirection < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[-1] = :Retracting ; NUME[:Retracting] = -1
            ENUM[0] = :Left ; NUME[:Left] = 0
            ENUM[1] = :Right ; NUME[:Right] = 1
            ENUM[2] = :Up ; NUME[:Up] = 2
            ENUM[3] = :Down ; NUME[:Down] = 3
        end

        number 8, true, nil, BuildingBridgest_TDirection
    }
    field(:material_amount, 272) {
        number 32, true
    }
end

class BuildingCabinetst < BuildingActual
    sizeof 296

    rtti_classname :building_cabinetst

    field(:anon_1, 268) {
        number 16, true
    }
    field(:squads, 272) {
        stl_vector(4) {
            pointer {
                global :BuildingSquadUse
            }
        }
    }
    field(:specific_squad, 288) {
        number 32, true, -1
    }
    def specific_squad_tg ; df.world.squads.all.binsearch(specific_squad) ; end
    field(:specific_position, 292) {
        number 32, true, -1
    }
end

class BuildingCagest < BuildingActual
    sizeof 304

    rtti_classname :building_cagest

    field(:assigned_units, 268) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def assigned_units_tg ; assigned_units.map { |i| df.world.units.all.binsearch(i) } ; end
    field(:assigned_items, 284) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def assigned_items_tg ; assigned_items.map { |i| df.world.items.all.binsearch(i) } ; end
    field(:cage_flags, 300) {
        compound(:BuildingCagest_TCageFlags) {
            field(:_whole, 0) {
                number 16, false
            }
            field(:triggered, 0) { bit 0 }
        }
    }
    field(:fill_timer, 302) {
        number 16, true
    }
end

class BuildingChainst < BuildingActual
    sizeof 280

    rtti_classname :building_chainst

    field(:assigned, 268) {
        pointer {
            global :Unit
        }
    }
    field(:chained, 272) {
        pointer {
            global :Unit
        }
    }
    field(:chain_flags, 276) {
        compound(:BuildingChainst_TChainFlags) {
            field(:_whole, 0) {
                number 16, false
            }
            field(:triggered, 0) { bit 0 }
        }
    }
end

class BuildingChairst < BuildingActual
    sizeof 304

    rtti_classname :building_chairst

    field(:anon_1, 268) {
        number 16, true
    }
    field(:users, 272) {
        global :BuildingUsers
    }
end

class BuildingCivzonest < Building
    sizeof 388

    rtti_classname :building_civzonest

    field(:assigned_units, 244) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def assigned_units_tg ; assigned_units.map { |i| df.world.units.all.binsearch(i) } ; end
    field(:assigned_items, 260) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def assigned_items_tg ; assigned_items.map { |i| df.world.items.all.binsearch(i) } ; end
    field(:type, 276) {
        number 32, true, nil, CivzoneType
    }
    field(:zone_flags, 280) {
        compound(:BuildingCivzonest_TZoneFlags) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:water_source, 0) { bit 0 }
            field(:garbage_dump, 0) { bit 1 }
            field(:sand, 0) { bit 2 }
            field(:active, 0) { bit 3 }
            field(:fishing, 0) { bit 4 }
            field(:pit_pond, 0) { bit 5 }
            field(:meeting_area, 0) { bit 6 }
            field(:hospital, 0) { bit 7 }
            field(:pen_pasture, 0) { bit 8 }
            field(:clay, 0) { bit 9 }
            field(:animal_training, 0) { bit 10 }
            field(:gather, 0) { bit 11 }
        }
    }
    field(:anon_1, 284) {
        number 32, true, -1
    }
    field(:abstract_building_id, 288) {
        number 32, true, -1
    }
    field(:anon_2, 292) {
        number 32, true, -1
    }
    field(:anon_3, 296) {
        number 32, true, -1
    }
    field(:zone_num, 300) {
        number 32, true, -1
    }
    field(:anon_4, 304) {
        number 32, true
    }
    field(:pit_flags, 308) {
        compound(:BuildingCivzonest_TPitFlags) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:is_pond, 0) { bit 0 }
        }
    }
    field(:fill_timer, 312) {
        number 16, true
    }
    field(:hospital, 316) {
        global :HospitalSupplies
    }
    field(:gather_flags, 380) {
        compound(:BuildingCivzonest_TGatherFlags) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:pick_trees, 0) { bit 0 }
            field(:pick_shrubs, 0) { bit 1 }
            field(:gather_fallen, 0) { bit 2 }
        }
    }
    field(:unk_v4014_1, 384) {
        number 32, true
    }
end

class BuildingCoffinst < BuildingActual
    sizeof 272

    rtti_classname :building_coffinst

    field(:burial_mode, 268) {
        compound(:BuildingCoffinst_TBurialMode) {
            field(:_whole, 0) {
                number 16, false
            }
            field(:allow_burial, 0) { bit 0 }
            field(:no_pets, 0) { bit 1 }
            field(:no_citizens, 0) { bit 2 }
        }
    }
end

class BuildingConstructionst < BuildingActual
    sizeof 272

    rtti_classname :building_constructionst

    field(:type, 268) {
        number 16, true, nil, ConstructionType
    }
end

class BuildingDef < MemHack::Compound
    sizeof 16504

    rtti_classname :building_defst

    field(:code, 4) {
        stl_string
    }
    field(:id, 32) {
        number 32, true
    }
    field(:name, 36) {
        stl_string
    }
    field(:building_type, 64) {
        number 32, true, nil, BuildingType
    }
    field(:building_subtype, 68) {
        number 32, true
    }
    field(:name_color, 72) {
        static_array(3, 2) {
            number 16, true
        }
    }
    field(:tile, 78) {
        static_array(4, 961) {
            static_array(31, 31) {
                static_array(31, 1) {
                    number 8, false
                }
            }
        }
    }
    field(:tile_color, 3922) {
        static_array(3, 3844) {
            static_array(4, 961) {
                static_array(31, 31) {
                    static_array(31, 1) {
                        number 8, false
                    }
                }
            }
        }
    }
    field(:tile_block, 15454) {
        static_array(31, 31) {
            static_array(31, 1) {
                number 8, false
            }
        }
    }
    field(:build_key, 16416) {
        number 32, true
    }
    field(:needs_magma, 16420) {
        number 8, true, nil, BooleanEnum
    }
    field(:build_items, 16424) {
        stl_vector(4) {
            pointer {
                global :BuildingDefItem
            }
        }
    }
    field(:dim_x, 16440) {
        number 32, true
    }
    field(:dim_y, 16444) {
        number 32, true
    }
    field(:workloc_x, 16448) {
        number 32, true
    }
    field(:workloc_y, 16452) {
        number 32, true
    }
    field(:build_labors, 16456) {
        stl_vector(4) {
            number 32, true, nil, UnitLabor
        }
    }
    field(:labor_description, 16472) {
        stl_string
    }
    field(:build_stages, 16500) {
        number 32, true
    }
    def parseRaws(arg0, arg1, arg2, arg3)
        DFHack.vmethod_call(self, 0, arg0, arg1, arg2, arg3) ; nil
    end
    def categorize()
        DFHack.vmethod_call(self, 4) ; nil
    end
    def finalize()
        DFHack.vmethod_call(self, 8) ; nil
    end
end

class BuildingDefFurnacest < BuildingDef
    sizeof 16504

    rtti_classname :building_def_furnacest

end

class BuildingDefItem < MemHack::Compound
    sizeof 268

    field(:item_type, 0) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 2) {
        number 16, true, -1
    }
    field(:mat_type, 4) {
        number 16, true, -1
    }
    field(:mat_index, 6) {
        number 16, true, -1
    }
    field(:reaction_class, 8) {
        stl_string
    }
    field(:has_material_reaction_product, 36) {
        stl_string
    }
    field(:flags1, 64) {
        global :JobItemFlags1
    }
    field(:flags2, 68) {
        global :JobItemFlags2
    }
    field(:flags3, 72) {
        global :JobItemFlags3
    }
    field(:flags4, 76) {
        number 32, false
    }
    field(:flags5, 80) {
        number 32, false
    }
    field(:metal_ore, 84) {
        number 32, true, -1
    }
    def metal_ore_tg ; df.world.raws.inorganics[metal_ore] ; end
    field(:min_dimension, 88) {
        number 32, true
    }
    field(:quantity, 92) {
        number 32, true
    }
    field(:has_tool_use, 96) {
        number 16, true, nil, ToolUses
    }
    field(:item_str, 100) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:material_str, 156) {
        static_array(3, 28) {
            stl_string
        }
    }
    field(:metal_ore_str, 240) {
        stl_string
    }
end

class BuildingDefWorkshopst < BuildingDef
    sizeof 16504

    rtti_classname :building_def_workshopst

end

class BuildingDesign < MemHack::Compound
    sizeof 48

    field(:architect, 0) {
        number 32, true, -1
    }
    def architect_tg ; df.world.history.figures.binsearch(architect) ; end
    field(:unk2, 4) {
        number 32, true, -1
    }
    field(:design_skill, 8) {
        number 16, true
    }
    field(:builder1, 12) {
        number 32, true, -1
    }
    def builder1_tg ; df.world.history.figures.binsearch(builder1) ; end
    field(:unk5, 16) {
        number 32, true, -1
    }
    field(:build_skill, 20) {
        number 16, true
    }
    field(:build_timer1, 22) {
        number 16, true
    }
    field(:builder2, 24) {
        number 32, true, -1
    }
    def builder2_tg ; df.world.history.figures.binsearch(builder2) ; end
    field(:build_timer2, 28) {
        number 16, true
    }
    field(:quality1, 30) {
        number 16, true, nil, ItemQuality
    }
    field(:quality2, 32) {
        number 16, true, nil, ItemQuality
    }
    field(:flags, 36) {
        compound(:BuildingDesign_TFlags) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:rough, 0) { bit 0 }
            field(:built, 0) { bit 1 }
            field(:designed, 0) { bit 2 }
        }
    }
    field(:hitpoints, 40) {
        number 32, true
    }
    field(:max_hitpoints, 44) {
        number 32, true
    }
end

class BuildingDoorst < BuildingActual
    sizeof 272

    rtti_classname :building_doorst

    field(:door_flags, 268) {
        global :DoorFlags
    }
    field(:close_timer, 270) {
        number 16, true
    }
end

class BuildingDrawbuffer < MemHack::Compound
    sizeof 3852

    field(:tile, 0) {
        static_array(31, 31) {
            static_array(31, 1) {
                number 8, false
            }
        }
    }
    field(:fore, 961) {
        static_array(31, 31) {
            static_array(31, 1) {
                number 8, true
            }
        }
    }
    field(:back, 1922) {
        static_array(31, 31) {
            static_array(31, 1) {
                number 8, true
            }
        }
    }
    field(:bright, 2883) {
        static_array(31, 31) {
            static_array(31, 1) {
                number 8, true
            }
        }
    }
    field(:x1, 3844) {
        number 16, true
    }
    field(:x2, 3846) {
        number 16, true
    }
    field(:y1, 3848) {
        number 16, true
    }
    field(:y2, 3850) {
        number 16, true
    }
end

class BuildingExtents < MemHack::Compound
    sizeof 20

    field(:extents, 0) {
        pointer_ary(1) {
            number 8, false
        }
    }
    field(:x, 4) {
        number 32, true
    }
    field(:y, 8) {
        number 32, true
    }
    field(:width, 12) {
        number 32, true
    }
    field(:height, 16) {
        number 32, true
    }
end

class BuildingFarmplotst < BuildingActual
    sizeof 300

    rtti_classname :building_farmplotst

    field(:plant_id, 268) {
        static_array(4, 2) {
            number 16, true, -1
        }
    }
    field(:material_amount, 276) {
        number 32, true
    }
    field(:seasonal_fertilize, 280) {
        number 32, true
    }
    field(:anon_1, 284) {
        number 8, true, -1
    }
    field(:current_fertilization, 288) {
        number 32, true
    }
    field(:max_fertilization, 292) {
        number 32, true
    }
    field(:terrain_purge_timer, 296) {
        number 16, true, 500
    }
end

class BuildingFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:exists, 0) { bit 0 }
    field(:site_blocked, 0) { bit 1 }
    field(:room_collision, 0) { bit 2 }
    field(:justice, 0) { bit 4 }
    field(:almost_deleted, 0) { bit 5 }
    field(:in_update, 0) { bit 6 }
    field(:from_worldgen, 0) { bit 7 }
end

class BuildingFloodgatest < BuildingActual
    sizeof 272

    rtti_classname :building_floodgatest

    field(:gate_flags, 268) {
        global :GateFlags
    }
    field(:timer, 270) {
        number 8, true
    }
end

class BuildingFurnacest < BuildingActual
    sizeof 380

    rtti_classname :building_furnacest

    field(:melt_remainder, 268) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_108, 284) {
        number 16, true
    }
    field(:type, 286) {
        number 16, true, nil, FurnaceType
    }
    field(:profile, 288) {
        global :WorkshopProfile
    }
    field(:links, 312) {
        global :StockpileLinks
    }
    field(:custom_type, 376) {
        number 32, true, -1
    }
    def custom_type_tg ; df.world.raws.buildings.all.binsearch(custom_type) ; end
end

class BuildingGearAssemblyst < BuildingActual
    sizeof 280

    rtti_classname :building_gear_assemblyst

    field(:machine, 268) {
        global :MachineInfo
    }
    field(:gear_flags, 276) {
        compound(:BuildingGearAssemblyst_TGearFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:disengaged, 0) { bit 0 }
        }
    }
end

class BuildingGrateFloorst < BuildingActual
    sizeof 272

    rtti_classname :building_grate_floorst

    field(:gate_flags, 268) {
        global :GateFlags
    }
    field(:timer, 270) {
        number 8, true
    }
end

class BuildingGrateWallst < BuildingActual
    sizeof 272

    rtti_classname :building_grate_wallst

    field(:gate_flags, 268) {
        global :GateFlags
    }
    field(:timer, 270) {
        number 8, true
    }
end

class BuildingHatchst < BuildingActual
    sizeof 272

    rtti_classname :building_hatchst

    field(:door_flags, 268) {
        global :DoorFlags
    }
    field(:close_timer, 270) {
        number 16, true
    }
end

class BuildingHivest < BuildingActual
    sizeof 288

    rtti_classname :building_hivest

    field(:hive_flags, 268) {
        global :HiveFlags
    }
    field(:split_timer, 272) {
        number 32, true
    }
    field(:activity_timer, 276) {
        number 32, true
    }
    field(:install_timer, 280) {
        number 32, true
    }
    field(:gather_timer, 284) {
        number 32, true
    }
end

class BuildingNestBoxst < BuildingActual
    sizeof 276

    rtti_classname :building_nest_boxst

    field(:claimed_by, 268) {
        number 32, true, -1
    }
    def claimed_by_tg ; df.world.units.all.binsearch(claimed_by) ; end
    field(:anon_1, 272) {
        number 32, true
    }
end

class BuildingNestst < BuildingActual
    sizeof 268

    rtti_classname :building_nestst

end

class BuildingRoadst < BuildingActual
    sizeof 268

    rtti_classname :building_roadst

end

class BuildingRoadDirtst < BuildingRoadst
    sizeof 272

    rtti_classname :building_road_dirtst

    field(:material_amount, 268) {
        number 32, true
    }
end

class BuildingRoadPavedst < BuildingRoadst
    sizeof 276

    rtti_classname :building_road_pavedst

    field(:material_amount, 268) {
        number 32, true
    }
    field(:terrain_purge_timer, 272) {
        number 16, true, 500
    }
end

class BuildingRollersst < BuildingActual
    sizeof 284

    rtti_classname :building_rollersst

    field(:machine, 268) {
        global :MachineInfo
    }
    field(:direction, 276) {
        number 32, true, nil, ScrewPumpDirection
    }
    field(:speed, 280) {
        number 32, true, 50000
    }
end

class BuildingScrewPumpst < BuildingActual
    sizeof 280

    rtti_classname :building_screw_pumpst

    field(:machine, 268) {
        global :MachineInfo
    }
    field(:pump_energy, 276) {
        number 8, false
    }
    field(:direction, 277) {
        number 8, true, nil, ScrewPumpDirection
    }
    field(:pump_manually, 278) {
        number 8, true, nil, BooleanEnum
    }
end

class BuildingShopst < BuildingActual
    sizeof 280

    rtti_classname :building_shopst

    field(:owner, 268) {
        pointer {
            global :Unit
        }
    }
    field(:timer, 272) {
        number 32, true
    }
    field(:shop_flags, 276) {
        compound(:BuildingShopst_TShopFlags) {
            field(:_whole, 0) {
                number 16, true, 1
            }
            field(:for_sale, 0) { bit 0 }
        }
    }
    field(:type, 278) {
        number 16, true, nil, ShopType
    }
end

class BuildingSiegeenginest < BuildingActual
    sizeof 276

    rtti_classname :building_siegeenginest

    field(:type, 268) {
        number 16, true, nil, SiegeengineType
    }
    field(:facing, 270) {
        class ::DFHack::BuildingSiegeenginest_TFacing < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :Left ; NUME[:Left] = 0
            ENUM[1] = :Up ; NUME[:Up] = 1
            ENUM[2] = :Right ; NUME[:Right] = 2
            ENUM[3] = :Down ; NUME[:Down] = 3
        end

        number 8, true, nil, BuildingSiegeenginest_TFacing
    }
    field(:action, 271) {
        class ::DFHack::BuildingSiegeenginest_TAction < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :NotInUse ; NUME[:NotInUse] = 0
            ENUM[1] = :PrepareToFire ; NUME[:PrepareToFire] = 1
            ENUM[2] = :FireAtWill ; NUME[:FireAtWill] = 2
        end

        number 8, true, nil, BuildingSiegeenginest_TAction
    }
    field(:fire_timer, 272) {
        number 8, true
    }
    field(:fill_timer, 274) {
        number 16, true
    }
end

class BuildingSlabst < BuildingActual
    sizeof 272

    rtti_classname :building_slabst

    field(:anon_1, 268) {
        number 16, true
    }
end

class BuildingSquadUse < MemHack::Compound
    sizeof 8

    field(:squad_id, 0) {
        number 32, true, -1
    }
    def squad_tg ; df.world.squads.all.binsearch(squad_id) ; end
    field(:mode, 4) {
        global :SquadUseFlags
    }
end

class BuildingStatuest < BuildingActual
    sizeof 272

    rtti_classname :building_statuest

    field(:anon_1, 268) {
        number 16, true
    }
end

class BuildingStockpilest < Building
    sizeof 1644

    rtti_classname :building_stockpilest

    field(:settings, 244) {
        global :StockpileSettings
    }
    field(:max_barrels, 1484) {
        number 16, true
    }
    field(:max_bins, 1486) {
        number 16, true
    }
    field(:max_wheelbarrows, 1488) {
        number 16, true
    }
    field(:container_type, 1492) {
        stl_vector(2) {
            number 16, true, nil, ItemType
        }
    }
    field(:container_item_id, 1508) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def container_item_tg ; container_item_id.map { |i| df.world.items.all.binsearch(i) } ; end
    field(:container_x, 1524) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:container_y, 1540) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:links, 1556) {
        global :StockpileLinks
    }
    field(:use_links_only, 1620) {
        number 32, true
    }
    field(:stockpile_number, 1624) {
        number 32, true, -1
    }
    field(:linked_stops, 1628) {
        stl_vector(4) {
            pointer {
                global :HaulingStop
            }
        }
    }
end

class BuildingSupportst < BuildingActual
    sizeof 272

    rtti_classname :building_supportst

    field(:support_flags, 268) {
        compound(:BuildingSupportst_TSupportFlags) {
            field(:_whole, 0) {
                number 16, false
            }
            field(:triggered, 0) { bit 0 }
        }
    }
end

class BuildingTablest < BuildingActual
    sizeof 304

    rtti_classname :building_tablest

    field(:table_flags, 268) {
        compound(:BuildingTablest_TTableFlags) {
            field(:_whole, 0) {
                number 16, true
            }
            field(:meeting_hall, 0) { bit 0 }
        }
    }
    field(:users, 272) {
        global :BuildingUsers
    }
end

class BuildingTractionBenchst < BuildingActual
    sizeof 304

    rtti_classname :building_traction_benchst

    field(:anon_1, 268) {
        number 16, true
    }
    field(:users, 272) {
        global :BuildingUsers
    }
end

class BuildingTradedepotst < BuildingActual
    sizeof 276

    rtti_classname :building_tradedepotst

    field(:trade_flags, 268) {
        compound(:BuildingTradedepotst_TTradeFlags) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:trader_requested, 0) { bit 0 }
            field(:anyone_can_trade, 0) { bit 1 }
        }
    }
    field(:accessible, 272) {
        number 8, true
    }
end

class BuildingTrapst < BuildingActual
    sizeof 444

    rtti_classname :building_trapst

    field(:trap_type, 268) {
        number 16, true, nil, TrapType
    }
    field(:state, 270) {
        number 8, false
    }
    field(:ready_timeout, 272) {
        number 16, true
    }
    field(:fill_timer, 274) {
        number 16, true
    }
    field(:stop_flags, 276) {
        compound(:BuildingTrapst_TStopFlags) {
            field(:_whole, 0) {
                number 16, false
            }
            field(:disabled, 0) { bit 0 }
            field(:disabling, 0) { bit 1 }
            field(:enabling, 0) { bit 2 }
        }
    }
    field(:linked_mechanisms, 280) {
        stl_vector(4) {
            pointer {
                global :Item
            }
        }
    }
    field(:observed_by_civs, 296) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def observed_by_civs_tg ; observed_by_civs.map { |i| df.world.entities.all.binsearch(i) } ; end
    field(:profile, 312) {
        global :WorkshopProfile
    }
    field(:links, 336) {
        global :StockpileLinks
    }
    field(:plate_info, 400) {
        global :PressurePlateInfo
    }
    field(:friction, 424) {
        number 32, true, 50000
    }
    field(:use_dump, 428) {
        number 32, true
    }
    field(:dump_x_shift, 432) {
        number 32, true
    }
    field(:dump_y_shift, 436) {
        number 32, true
    }
    field(:stop_trigger_timer, 440) {
        number 8, true
    }
end

class BuildingUsers < MemHack::Compound
    sizeof 32

    field(:unit, 0) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def unit_tg ; unit.map { |i| df.world.units.all.binsearch(i) } ; end
    field(:mode, 16) {
        stl_vector(2) {
            number 16, true
        }
    }
end

class BuildingWagonst < BuildingActual
    sizeof 268

    rtti_classname :building_wagonst

end

class BuildingWaterWheelst < BuildingActual
    sizeof 280

    rtti_classname :building_water_wheelst

    field(:machine, 268) {
        global :MachineInfo
    }
    field(:is_vertical, 276) {
        number 8, true, nil, BooleanEnum
    }
    field(:gives_power, 277) {
        number 8, true, nil, BooleanEnum
    }
end

class BuildingWeaponrackst < BuildingActual
    sizeof 292

    rtti_classname :building_weaponrackst

    field(:unk_c0, 268) {
        number 16, true
    }
    field(:squads, 272) {
        stl_vector(4) {
            pointer {
                global :BuildingSquadUse
            }
        }
    }
    field(:specific_squad, 288) {
        number 32, true, -1
    }
    def specific_squad_tg ; df.world.squads.all.binsearch(specific_squad) ; end
end

class BuildingWeaponst < BuildingActual
    sizeof 272

    rtti_classname :building_weaponst

    field(:gate_flags, 268) {
        global :GateFlags
    }
    field(:timer, 270) {
        number 8, true
    }
end

class BuildingWellst < BuildingActual
    sizeof 280

    rtti_classname :building_wellst

    field(:well_flags, 268) {
        compound(:BuildingWellst_TWellFlags) {
            field(:_whole, 0) {
                number 16, true
            }
            field(:lowering, 0) { bit 0 }
            field(:just_raised, 0) { bit 1 }
        }
    }
    field(:anon_1, 270) {
        number 8, true
    }
    field(:bucket_z, 272) {
        number 16, true
    }
    field(:bucket_timer, 274) {
        number 8, true
    }
    field(:check_water_timer, 276) {
        number 16, true
    }
end

class BuildingWindmillst < BuildingActual
    sizeof 288

    rtti_classname :building_windmillst

    field(:machine, 268) {
        global :MachineInfo
    }
    field(:orient_angle, 276) {
        number 16, true, -1
    }
    field(:orient_mode, 278) {
        number 16, true
    }
    field(:is_working, 280) {
        number 16, true
    }
    field(:visual_rotated, 282) {
        number 8, true, nil, BooleanEnum
    }
    field(:rotate_timer, 284) {
        number 16, true
    }
    field(:orient_timer, 286) {
        number 16, true
    }
end

class BuildingWindowst < BuildingActual
    sizeof 272

    rtti_classname :building_windowst

    field(:anon_1, 268) {
        number 16, true
    }
end

class BuildingWindowGemst < BuildingWindowst
    sizeof 272

    rtti_classname :building_window_gemst

end

class BuildingWindowGlassst < BuildingWindowst
    sizeof 272

    rtti_classname :building_window_glassst

end

class BuildingWorkshopst < BuildingActual
    sizeof 372

    rtti_classname :building_workshopst

    field(:type, 268) {
        number 16, true, nil, WorkshopType
    }
    field(:profile, 272) {
        global :WorkshopProfile
    }
    field(:links, 296) {
        global :StockpileLinks
    }
    field(:machine, 360) {
        global :MachineInfo
    }
    field(:custom_type, 368) {
        number 32, true, -1
    }
    def custom_type_tg ; df.world.raws.buildings.all.binsearch(custom_type) ; end
end

class Burrow < MemHack::Compound
    sizeof 108

    field(:id, 0) {
        number 32, true
    }
    field(:name, 4) {
        stl_string
    }
    field(:tile, 32) {
        number 8, false
    }
    field(:fg_color, 34) {
        number 16, true
    }
    field(:bg_color, 36) {
        number 16, true
    }
    field(:block_x, 40) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:block_y, 56) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:block_z, 72) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:units, 88) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def units_tg ; units.map { |i| df.world.units.all.binsearch(i) } ; end
    field(:anon_1, 104) {
        number 32, true
    }
end

class Campfire < MemHack::Compound
    sizeof 12

    field(:pos, 0) {
        global :Coord
    }
    field(:timer, 8) {
        number 32, true
    }
end

class CaravanState < MemHack::Compound
    sizeof 8428

    field(:total_capacity, 0) {
        number 32, true
    }
    field(:anon_1, 4) {
        number 32, true
    }
    field(:trade_state, 8) {
        number 8, true
    }
    field(:depot_notified, 9) {
        number 8, true
    }
    field(:time_remaining, 10) {
        number 16, true
    }
    field(:entity, 12) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity) ; end
    field(:activity_stats, 16) {
        global :EntityActivityStatistics
    }
    field(:flags, 8360) {
        compound(:CaravanState_TFlags) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:check_cleanup, 0) { bit 0 }
            field(:casualty, 0) { bit 1 }
            field(:hardship, 0) { bit 2 }
            field(:communicate, 0) { bit 3 }
            field(:seized, 0) { bit 4 }
            field(:offended, 0) { bit 5 }
            field(:announce, 0) { bit 6 }
        }
    }
    field(:import_value, 8364) {
        number 32, true
    }
    field(:export_value_total, 8368) {
        number 32, true
    }
    field(:export_value_personal, 8372) {
        number 32, true
    }
    field(:offer_value, 8376) {
        number 32, true
    }
    field(:animals, 8380) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def animals_tg ; animals.map { |i| df.world.units.all.binsearch(i) } ; end
    field(:sell_prices, 8396) {
        pointer {
            global :EntitySellPrices
        }
    }
    field(:buy_prices, 8400) {
        pointer {
            global :EntityBuyPrices
        }
    }
    field(:goods, 8404) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def goods_tg ; goods.map { |i| df.world.items.all.binsearch(i) } ; end
    field(:anon_2, 8420) {
        number 32, true
    }
    field(:anon_3, 8424) {
        pointer {
        }
    }
end

class CasteAttack < MemHack::Compound
    sizeof 324

    field(:name, 0) {
        stl_string
    }
    field(:verb_3rd, 28) {
        stl_string
    }
    field(:verb_2nd, 56) {
        stl_string
    }
    field(:flags, 84) {
        compound(:CasteAttack_TFlags) {
            field(:_whole, 0) {
                number 16, false
            }
            field(:with, 0) { bit 0 }
            field(:latch, 0) { bit 1 }
            field(:main, 0) { bit 2 }
            field(:edge, 0) { bit 3 }
        }
    }
    field(:specialattack_type, 88) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:specialattack_mat_type, 104) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:specialattack_mat_index, 120) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:specialattack_mat_state, 136) {
        stl_vector(2) {
            global :MatterState
        }
    }
    field(:specialattack_temp_mat, 152) {
        static_array(3, 16) {
            stl_vector(4) {
                pointer {
                    stl_string
                }
            }
        }
    }
    field(:specialattack_min, 200) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:specialattack_max, 216) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:contact_perc, 232) {
        number 32, true
    }
    field(:penetration_perc, 236) {
        number 32, true
    }
    field(:unk_v40_1, 240) {
        number 16, true
    }
    field(:unk_v40_2, 242) {
        number 16, true
    }
    field(:body_part_idx, 244) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:tissue_layer_idx, 260) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:skill, 276) {
        number 16, true, nil, JobSkill
    }
    field(:velocity_modifier, 280) {
        number 32, true
    }
    field(:specialattack_interaction_tmp_name, 284) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:specialattack_interaction_id, 300) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_v40_3, 316) {
        number 32, true
    }
    field(:unk_v40_4, 320) {
        number 32, true
    }
end

class CasteBodyInfo < MemHack::Compound
    sizeof 324

    field(:body_parts, 0) {
        stl_vector(4) {
            pointer {
                global :BodyPartRaw
            }
        }
    }
    field(:attacks, 16) {
        stl_vector(4) {
            pointer {
                global :CasteAttack
            }
        }
    }
    field(:interactions, 32) {
        stl_vector(4) {
            pointer {
                compound(:CasteBodyInfo_TInteractions) {
                    sizeof 588

                    field(:type, 0) {
                        number 32, true
                    }
                    field(:unk, 4) {
                        compound(:CasteBodyInfo_TInteractions_TUnk) {
                            field(:bp_required_type, 0) {
                                stl_vector(4) {
                                    pointer {
                                        stl_string
                                    }
                                }
                            }
                            field(:bp_required_name, 16) {
                                stl_vector(4) {
                                    pointer {
                                        stl_string
                                    }
                                }
                            }
                            field(:anon_1, 32) {
                                stl_string
                            }
                            field(:anon_2, 60) {
                                stl_string
                            }
                            field(:material_str0, 88) {
                                stl_string
                            }
                            field(:material_str1, 116) {
                                stl_string
                            }
                            field(:material_str2, 144) {
                                stl_string
                            }
                            field(:material_breath, 172) {
                                number 16, true, nil, BreathAttackType
                            }
                            field(:verb_2nd, 176) {
                                stl_string
                            }
                            field(:verb_3rd, 204) {
                                stl_string
                            }
                            field(:verb_ext, 232) {
                                stl_string
                            }
                            field(:anon_3, 260) {
                                stl_string
                            }
                            field(:anon_4, 288) {
                                stl_string
                            }
                            field(:anon_5, 316) {
                                stl_string
                            }
                            field(:anon_6, 344) {
                                stl_string
                            }
                            field(:interaction_type, 372) {
                                stl_string
                            }
                            field(:anon_7, 400) {
                                number 32, true
                            }
                            field(:usage_hint, 404) {
                                stl_vector(4) {
                                    global :InteractionSourceUsageHint
                                }
                            }
                            field(:location_hint, 420) {
                                stl_vector(4) {
                                    global :InteractionEffectLocationHint
                                }
                            }
                            field(:anon_8, 436) {
                                number 32, true
                            }
                            field(:anon_9, 440) {
                                stl_vector(4) {
                                    pointer {
                                    }
                                }
                            }
                            field(:anon_10, 456) {
                                stl_vector(4) {
                                    number 32, true
                                }
                            }
                            field(:anon_11, 472) {
                                stl_vector(4) {
                                    number 32, true
                                }
                            }
                            field(:anon_12, 488) {
                                stl_vector(4) {
                                    pointer {
                                    }
                                }
                            }
                            field(:anon_13, 504) {
                                stl_vector(4) {
                                    number 32, true
                                }
                            }
                            field(:anon_14, 520) {
                                stl_vector
                            }
                            field(:anon_15, 536) {
                                stl_vector
                            }
                            field(:adv_name, 552) {
                                stl_string
                            }
                            field(:wait_period, 580) {
                                number 32, true
                            }
                        }
                    }
                }
            }
        }
    }
    field(:extra_butcher_objects, 48) {
        stl_vector(4) {
            pointer {
                compound(:CasteBodyInfo_TExtraButcherObjects) {
                    sizeof 192

                    field(:anon_1, 0) {
                        number 16, true
                    }
                    field(:anon_2, 4) {
                        stl_string
                    }
                    field(:anon_3, 32) {
                        number 32, true
                    }
                    field(:anon_4, 36) {
                        stl_string
                    }
                    field(:anon_5, 64) {
                        stl_string
                    }
                    field(:anon_6, 92) {
                        stl_string
                    }
                    field(:anon_7, 120) {
                        stl_string
                    }
                    field(:anon_8, 148) {
                        stl_string
                    }
                    field(:anon_9, 176) {
                        number 16, true
                    }
                    field(:anon_10, 178) {
                        number 16, true
                    }
                    field(:anon_11, 180) {
                        number 16, true
                    }
                    field(:anon_12, 184) {
                        number 32, true
                    }
                    field(:anon_13, 188) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:total_relsize, 64) {
        number 32, true
    }
    field(:layer_part, 68) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:layer_idx, 84) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:numbered_masks, 100) {
        stl_vector(4) {
            number 32, false
        }
    }
    field(:layer_nonsolid, 116) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    field(:nonsolid_layers, 132) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    field(:flags, 148) {
        compound(:CasteBodyInfo_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:unk0, 0) { bit 0 }
        }
    }
    field(:gait_info, 152) {
        static_array(5, 16, GaitType) {
            stl_vector(4) {
                pointer {
                    global :GaitInfo
                }
            }
        }
    }
    field(:materials, 232) {
        global :MaterialVecRef
    }
    field(:fraction_total, 264) {
        number 32, true
    }
    field(:fraction_base, 268) {
        number 32, true
    }
    field(:fraction_fat, 272) {
        number 32, true
    }
    field(:fraction_muscle, 276) {
        number 32, true
    }
    field(:unk_v40_2, 280) {
        static_array(11, 4) {
            number 32, true
        }
    }
end

class CasteClothingItem < MemHack::Compound
    sizeof 68

    field(:body_part_id, 0) {
        number 16, true
    }
    field(:unk_4, 4) {
        number 32, true
    }
    field(:item, 8) {
        static_array(3, 4) {
            pointer {
                global :Item
            }
        }
    }
    field(:unk_14, 20) {
        static_array(3, 4) {
            number 32, true
        }
    }
    field(:size, 32) {
        static_array(3, 4) {
            number 32, true
        }
    }
    field(:permit, 44) {
        static_array(3, 4) {
            number 32, true
        }
    }
    field(:unk_38, 56) {
        static_array(3, 4) {
            number 32, true
        }
    }
end

class CasteRaw < MemHack::Compound
    sizeof 13164

    field(:caste_id, 0) {
        stl_string
    }
    field(:caste_name, 28) {
        static_array(3, 28) {
            stl_string
        }
    }
    field(:vermin_bite_txt, 112) {
        stl_string
    }
    field(:gnawer_txt, 140) {
        stl_string
    }
    field(:baby_name, 168) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:child_name, 224) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:itemcorpse_str, 280) {
        static_array(5, 28) {
            stl_string
        }
    }
    field(:remains, 420) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:description, 476) {
        stl_string
    }
    field(:mannerisms, 504) {
        static_array(17, 28) {
            stl_string
        }
    }
    field(:caste_tile, 980) {
        number 8, false
    }
    field(:caste_soldier_tile, 981) {
        number 8, false
    }
    field(:caste_alttile, 982) {
        number 8, false
    }
    field(:caste_soldier_alttile, 983) {
        number 8, false
    }
    field(:caste_glowtile, 984) {
        number 8, false
    }
    field(:homeotherm, 986) {
        number 16, false
    }
    field(:min_temp, 988) {
        number 16, false
    }
    field(:max_temp, 990) {
        number 16, false
    }
    field(:fixed_temp, 992) {
        number 16, false
    }
    field(:caste_color, 994) {
        static_array(3, 2) {
            number 16, true
        }
    }
    field(:misc, 1000) {
        compound(:CasteRaw_TMisc) {
            field(:litter_size_min, 0) {
                number 16, true
            }
            field(:litter_size_max, 2) {
                number 16, true
            }
            field(:penetratepower, 4) {
                number 16, true
            }
            field(:vermin_bite_chance, 6) {
                number 16, true
            }
            field(:grasstrample, 8) {
                number 16, true
            }
            field(:buildingdestroyer, 10) {
                number 16, true
            }
            field(:itemcorpse_itemtype, 12) {
                number 16, true, nil, ItemType
            }
            field(:itemcorpse_itemsubtype, 14) {
                number 16, true
            }
            field(:itemcorpse_materialtype, 16) {
                number 16, true, -1
            }
            field(:itemcorpse_materialindex, 18) {
                number 16, true
            }
            field(:itemcorpse_quality, 20) {
                number 16, true
            }
            field(:remains_color, 22) {
                static_array(3, 2) {
                    number 16, true
                }
            }
            field(:difficulty, 28) {
                number 16, true
            }
            field(:caste_glowcolor, 30) {
                static_array(3, 2) {
                    number 16, true
                }
            }
            field(:beach_frequency, 36) {
                number 16, true
            }
            field(:clutch_size_min, 38) {
                number 16, true
            }
            field(:clutch_size_max, 40) {
                number 16, true
            }
            field(:vision_arc_min, 42) {
                number 16, true
            }
            field(:vision_arc_max, 44) {
                number 16, true
            }
            field(:speed, 48) {
                number 32, true
            }
            field(:modvalue, 52) {
                number 32, true
            }
            field(:petvalue, 56) {
                number 32, true
            }
            field(:milkable, 60) {
                number 32, true
            }
            field(:viewrange, 64) {
                number 32, true
            }
            field(:maxage_min, 68) {
                number 32, true
            }
            field(:maxage_max, 72) {
                number 32, true
            }
            field(:baby_age, 76) {
                number 32, true
            }
            field(:child_age, 80) {
                number 32, true
            }
            field(:swim_speed, 84) {
                number 32, true
            }
            field(:trade_capacity, 88) {
                number 32, true
            }
            field(:unk4, 92) {
                number 32, true
            }
            field(:pop_ratio, 96) {
                number 32, true
            }
            field(:adult_size, 100) {
                number 32, true
            }
            field(:bone_mat, 104) {
                number 32, true, -1
            }
            field(:bone_matidx, 108) {
                number 32, true
            }
            field(:fish_mat_index, 112) {
                number 32, true, -1
            }
            field(:egg_mat_index, 116) {
                number 32, true, -1
            }
            field(:attack_trigger, 120) {
                static_array(3, 4) {
                    number 32, true
                }
            }
            field(:egg_size, 132) {
                number 32, true
            }
            field(:grazer, 136) {
                number 32, true
            }
            field(:petvalue_divisor, 140) {
                number 32, true
            }
            field(:prone_to_rage, 144) {
                number 32, true
            }
            field(:unk6, 148) {
                static_array(29, 4) {
                    number 32, true
                }
            }
        }
    }
    field(:personality, 1264) {
        compound(:CasteRaw_TPersonality) {
            field(:a, 0) {
                static_array(50, 2, PersonalityFacetType) {
                    number 16, true
                }
            }
            field(:b, 100) {
                static_array(50, 2, PersonalityFacetType) {
                    number 16, true
                }
            }
            field(:c, 200) {
                static_array(50, 2, PersonalityFacetType) {
                    number 16, true
                }
            }
        }
    }
    field(:flags, 1564) {
        df_flagarray(CasteRawFlags)
    }
    field(:index, 1572) {
        number 32, true
    }
    field(:body_info, 1576) {
        global :CasteBodyInfo
    }
    field(:caste_speech_1, 1900) {
        stl_vector
    }
    field(:caste_speech_2, 1916) {
        stl_vector
    }
    field(:skill_rates, 1932) {
        static_array(4, 472) {
            static_array(118, 4, JobSkill) {
                number 32, true
            }
        }
    }
    field(:attributes, 3820) {
        compound(:CasteRaw_TAttributes) {
            field(:phys_att_range, 0) {
                static_array(6, 28, PhysicalAttributeType) {
                    static_array(7, 4) {
                        number 32, true
                    }
                }
            }
            field(:ment_att_range, 168) {
                static_array(13, 28, MentalAttributeType) {
                    static_array(7, 4) {
                        number 32, true
                    }
                }
            }
            field(:phys_att_rates, 532) {
                static_array(6, 16, PhysicalAttributeType) {
                    static_array(4, 4) {
                        number 32, true
                    }
                }
            }
            field(:ment_att_rates, 628) {
                static_array(13, 16, MentalAttributeType) {
                    static_array(4, 4) {
                        number 32, true
                    }
                }
            }
            field(:phys_att_cap_perc, 836) {
                static_array(6, 4, PhysicalAttributeType) {
                    number 32, true
                }
            }
            field(:ment_att_cap_perc, 860) {
                static_array(13, 4, MentalAttributeType) {
                    number 32, true
                }
            }
        }
    }
    field(:gender, 4732) {
        number 8, true
    }
    field(:orientation_male, 4736) {
        static_array(3, 4) {
            number 32, true
        }
    }
    field(:orientation_female, 4748) {
        static_array(3, 4) {
            number 32, true
        }
    }
    field(:body_size_1, 4760) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:body_size_2, 4776) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:body_appearance_modifiers, 4792) {
        stl_vector(4) {
            pointer {
                global :BodyAppearanceModifier
            }
        }
    }
    field(:bp_appearance, 4808) {
        compound(:CasteRaw_TBpAppearance) {
            field(:modifiers, 0) {
                stl_vector(4) {
                    pointer {
                        global :BpAppearanceModifier
                    }
                }
            }
            field(:modifier_idx, 16) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            field(:part_idx, 32) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            field(:layer_idx, 48) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            field(:style_part_idx, 64) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            field(:style_layer_idx, 80) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            field(:style_list_idx, 96) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
        }
    }
    field(:color_modifiers, 4920) {
        stl_vector(4) {
            pointer {
                global :ColorModifierRaw
            }
        }
    }
    field(:tissue_styles, 4936) {
        stl_vector(4) {
            pointer {
                global :TissueStyleRaw
            }
        }
    }
    field(:shearable_tissue_layer, 4952) {
        stl_vector(4) {
            pointer {
                compound(:CasteRaw_TShearableTissueLayer) {
                    sizeof 56

                    field(:unk_0, 0) {
                        number 8, true
                    }
                    field(:unk_1, 1) {
                        number 8, true
                    }
                    field(:length, 4) {
                        number 32, true
                    }
                    field(:part_idx, 8) {
                        stl_vector(2) {
                            number 16, true
                        }
                    }
                    field(:layer_idx, 24) {
                        stl_vector(2) {
                            number 16, true
                        }
                    }
                    field(:bp_modifiers_idx, 40) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                }
            }
        }
    }
    field(:unk16a, 4968) {
        static_array(4, 16) {
            stl_vector
        }
    }
    field(:unk16b, 5032) {
        static_array(4, 16) {
            stl_vector
        }
    }
    field(:unk18, 5096) {
        static_array(2, 4) {
            number 32, true
        }
    }
    field(:natural_skill_id, 5104) {
        stl_vector(2) {
            global :JobSkill
        }
    }
    field(:natural_skill_exp, 5120) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:natural_skill_lvl, 5136) {
        stl_vector(4) {
            global :SkillRating
        }
    }
    field(:caste_profession_name, 5152) {
        compound(:CasteRaw_TCasteProfessionName) {
            field(:singular, 0) {
                static_array(112, 28, Profession) {
                    stl_string
                }
            }
            field(:plural, 3136) {
                static_array(112, 28, Profession) {
                    stl_string
                }
            }
        }
    }
    field(:extracts, 11424) {
        compound(:CasteRaw_TExtracts) {
            field(:extract_mat, 0) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:extract_matidx, 16) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:extract_str, 32) {
                static_array(3, 16) {
                    stl_vector(4) {
                        pointer {
                            stl_string
                        }
                    }
                }
            }
            field(:milkable_mat, 80) {
                number 16, true
            }
            field(:milkable_matidx, 84) {
                number 32, true
            }
            field(:milkable_str, 88) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:webber_mat, 172) {
                number 16, true
            }
            field(:webber_matidx, 176) {
                number 32, true
            }
            field(:webber_str, 180) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:vermin_bite_mat, 264) {
                number 16, true
            }
            field(:vermin_bite_matidx, 268) {
                number 32, true
            }
            field(:vermin_bite_chance, 272) {
                number 16, true
            }
            field(:vermin_bite_str, 276) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:tendons_mat, 360) {
                number 16, true
            }
            field(:tendons_matidx, 364) {
                number 32, true
            }
            field(:tendons_str, 368) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:tendons_heal, 452) {
                number 32, true
            }
            field(:ligaments_mat, 456) {
                number 16, true
            }
            field(:ligaments_matidx, 460) {
                number 32, true
            }
            field(:ligaments_str, 464) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:ligaments_heal, 548) {
                number 32, true
            }
            field(:blood_state, 552) {
                number 16, true
            }
            field(:blood_mat, 554) {
                number 16, true
            }
            field(:blood_matidx, 556) {
                number 32, true
            }
            field(:blood_str, 560) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:pus_state, 644) {
                number 16, true
            }
            field(:pus_mat, 646) {
                number 16, true
            }
            field(:pus_matidx, 648) {
                number 32, true
            }
            field(:pus_str, 652) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:egg_material_mattype, 736) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:egg_material_matindex, 752) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:egg_material_str, 768) {
                static_array(3, 16) {
                    stl_vector(4) {
                        pointer {
                            stl_string
                        }
                    }
                }
            }
            field(:lays_unusual_eggs_itemtype, 816) {
                stl_vector(2) {
                    number 16, true, nil, ItemType
                }
            }
            field(:lays_unusual_eggs_itemsubtype, 832) {
                stl_vector
            }
            field(:lays_unusual_eggs_mattype, 848) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:lays_unusual_eggs_matindex, 864) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:lays_unusual_eggs_str, 880) {
                static_array(5, 16) {
                    stl_vector(4) {
                        pointer {
                            stl_string
                        }
                    }
                }
            }
        }
    }
    field(:secretion, 12384) {
        stl_vector(4) {
            pointer {
                compound(:CasteRaw_TSecretion) {
                    sizeof 132

                    field(:mat_type, 0) {
                        number 16, true, -1
                    }
                    field(:mat_index, 4) {
                        number 32, true
                    }
                    field(:mat_state, 8) {
                        number 16, true, nil, MatterState
                    }
                    field(:mat_type_str, 12) {
                        stl_string
                    }
                    field(:mat_index_str, 40) {
                        stl_string
                    }
                    field(:unk_44, 68) {
                        stl_string
                    }
                    field(:body_part_id, 96) {
                        stl_vector(2) {
                            number 16, true, -1
                        }
                    }
                    field(:layer_id, 112) {
                        stl_vector(2) {
                            number 16, true, -1
                        }
                    }
                    field(:cause, 128) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:creature_class, 12400) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:unknown2, 12416) {
        compound(:CasteRaw_TUnknown2) {
            field(:gobble_vermin_class, 0) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:gobble_vermin_creature_1, 16) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:gobble_vermin_creature_2, 32) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:infect_all, 48) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def infect_all_tg ; infect_all.map { |i| df.world.raws.syndromes.all[i] } ; end
            field(:infect_local, 64) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def infect_local_tg ; infect_local.map { |i| df.world.raws.syndromes.all[i] } ; end
            field(:unk23f, 80) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:unk23g, 96) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:unk24_flags, 112) {
                df_flagarray
            }
            field(:unk25_flags, 120) {
                df_flagarray
            }
            field(:armor_sizes, 128) {
                static_array(4, 16) {
                    static_array(4, 4) {
                        number 32, true
                    }
                }
            }
            field(:pants_sizes, 192) {
                static_array(4, 4) {
                    number 32, true
                }
            }
            field(:helm_size, 208) {
                number 32, true
            }
            field(:shield_sizes, 212) {
                static_array(4, 4) {
                    number 32, true
                }
            }
            field(:shoes_sizes, 228) {
                static_array(4, 4) {
                    number 32, true
                }
            }
            field(:gloves_sizes, 244) {
                static_array(4, 4) {
                    number 32, true
                }
            }
            field(:materials, 260) {
                global :MaterialVecRef
            }
            field(:unk_2f20, 292) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:unk_2f30, 308) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:unk_2f40, 324) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:unk_2f50, 340) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:mat_type, 356) {
                number 16, true, -1
            }
            field(:mat_index, 360) {
                number 32, true
            }
        }
    }
    field(:habit_num, 12780) {
        static_array(2, 4) {
            number 32, true
        }
    }
    field(:habit_1, 12788) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:habit_2, 12804) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:lair_1, 12820) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:lair_2, 12836) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:lair_characteristic_1, 12852) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:lair_characteristic_2, 12868) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:lair_hunter_speech, 12884) {
        static_array(2, 16) {
            stl_vector
        }
    }
    field(:unk29, 12916) {
        static_array(2, 16) {
            stl_vector
        }
    }
    field(:specific_food, 12948) {
        static_array(2, 16) {
            stl_vector
        }
    }
    field(:sound, 12980) {
        stl_vector(4) {
            pointer {
            }
        }
    }
    field(:sound_alert, 12996) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:sound_peaceful_intermittent, 13012) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    field(:anon_1, 13028) {
        stl_vector(4) {
            pointer {
            }
        }
    }
    field(:smell_trigger, 13044) {
        number 32, true
    }
    field(:odor_level, 13048) {
        number 32, true
    }
    field(:odor_string, 13052) {
        stl_string
    }
    field(:low_light_vision, 13080) {
        number 32, true
    }
    field(:sense_creature_class_1, 13084) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:sense_creature_class_2, 13100) {
        stl_vector(1) {
            number 8, true
        }
    }
    field(:sense_creature_class_3, 13116) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:sense_creature_class_4, 13132) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:sense_creature_class_5, 13148) {
        stl_vector(2) {
            number 16, true
        }
    }
end

class CaveColumn < MemHack::Compound
    sizeof 12

    rtti_classname :cave_columnst

    field(:anon_1, 4) {
        number 16, true
    }
    field(:anon_2, 6) {
        number 16, true
    }
    field(:anon_3, 8) {
        number 16, true, 30000
    }
    field(:anon_4, 10) {
        number 8, true
    }
    def write_file(file)
        DFHack.vmethod_call(self, 0, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 4, file, loadversion) ; nil
    end
end

class CaveColumnLink < MemHack::Compound
    sizeof 12

    field(:item, 0) {
        pointer {
            global :CaveColumn
        }
    }
    field(:prev, 4) {
        pointer {
            global :CaveColumnLink
        }
    }
    field(:next, 8) {
        pointer {
            global :CaveColumnLink
        }
    }
end

class CaveColumnRectangle < MemHack::Compound
    sizeof 72

    rtti_classname :cave_column_rectanglest

    field(:anon_1, 4) {
        number 32, true
    }
    field(:anon_2, 8) {
        number 16, true
    }
    field(:anon_3, 10) {
        number 16, true
    }
    field(:anon_4, 12) {
        number 16, true
    }
    field(:anon_5, 14) {
        number 16, true
    }
    field(:anon_6, 16) {
        number 16, true
    }
    field(:anon_7, 20) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_8, 36) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_9, 52) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_10, 68) {
        number 32, true
    }
    def write_file(file)
        DFHack.vmethod_call(self, 0, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 4, file, loadversion) ; nil
    end
end

class CieAddTagMask1 < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:EXTRAVISION, 0) { bit 0 }
    field(:OPPOSED_TO_LIFE, 0) { bit 1 }
    field(:NOT_LIVING, 0) { bit 2 }
    field(:NOEXERT, 0) { bit 3 }
    field(:NOPAIN, 0) { bit 4 }
    field(:NOBREATHE, 0) { bit 5 }
    field(:HAS_BLOOD, 0) { bit 6 }
    field(:NOSTUN, 0) { bit 7 }
    field(:NONAUSEA, 0) { bit 8 }
    field(:NO_DIZZINESS, 0) { bit 9 }
    field(:NO_FEVERS, 0) { bit 10 }
    field(:TRANCES, 0) { bit 11 }
    field(:NOEMOTION, 0) { bit 12 }
    field(:LIKES_FIGHTING, 0) { bit 13 }
    field(:PARALYZEIMMUNE, 0) { bit 14 }
    field(:NOFEAR, 0) { bit 15 }
    field(:NO_EAT, 0) { bit 16 }
    field(:NO_DRINK, 0) { bit 17 }
    field(:NO_SLEEP, 0) { bit 18 }
    field(:MISCHIEVOUS, 0) { bit 19 }
    field(:NO_PHYS_ATT_GAIN, 0) { bit 20 }
    field(:NO_PHYS_ATT_RUST, 0) { bit 21 }
    field(:NOTHOUGHT, 0) { bit 22 }
    field(:NO_THOUGHT_CENTER_FOR_MOVEMENT, 0) { bit 23 }
    field(:CAN_SPEAK, 0) { bit 24 }
    field(:CAN_LEARN, 0) { bit 25 }
    field(:UTTERANCES, 0) { bit 26 }
    field(:CRAZED, 0) { bit 27 }
    field(:BLOODSUCKER, 0) { bit 28 }
    field(:NO_CONNECTIONS_FOR_MOVEMENT, 0) { bit 29 }
    field(:SUPERNATURAL, 0) { bit 30 }
end

class CieAddTagMask2 < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:NO_AGING, 0) { bit 0 }
    field(:MORTAL, 0) { bit 1 }
    field(:STERILE, 0) { bit 2 }
    field(:FIT_FOR_ANIMATION, 0) { bit 3 }
    field(:FIT_FOR_RESURRECTION, 0) { bit 4 }
end

class CoinBatch < MemHack::Compound
    sizeof 36

    field(:year, 0) {
        number 32, true
    }
    field(:mat_type, 4) {
        number 16, true, -1
    }
    field(:mat_index, 8) {
        number 32, true
    }
    field(:entity, 12) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity) ; end
    field(:ruler, 16) {
        number 32, true, -1
    }
    def ruler_tg ; df.world.history.figures.binsearch(ruler) ; end
    field(:image_front, 20) {
        compound(:CoinBatch_TImageFront) {
            field(:id, 0) {
                number 32, true, -1
            }
            def id_tg ; df.world.art_image_chunks.binsearch(id) ; end
            field(:subid, 4) {
                number 16, true, -1
            }
        }
    }
    field(:image_back, 28) {
        compound(:CoinBatch_TImageBack) {
            field(:id, 0) {
                number 32, true, -1
            }
            def id_tg ; df.world.art_image_chunks.binsearch(id) ; end
            field(:subid, 4) {
                number 16, true, -1
            }
        }
    }
end

class ColorModifierRaw < MemHack::Compound
    sizeof 152

    field(:pattern_index, 0) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def pattern_index_tg ; pattern_index.map { |i| df.world.raws.language.patterns[i] } ; end
    field(:pattern_frequency, 16) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:body_part_id, 32) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:tissue_layer_id, 48) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:unk5, 64) {
        number 16, true
    }
    field(:start_date, 68) {
        number 32, true
    }
    field(:end_date, 72) {
        number 32, true
    }
    field(:unk6, 76) {
        number 32, true
    }
    field(:part, 80) {
        stl_string
    }
    field(:unk_6c, 108) {
        number 16, true
    }
    field(:unk_6e, 110) {
        number 16, true
    }
    field(:unk_70, 112) {
        number 32, true
    }
    field(:id, 116) {
        number 32, true
    }
    field(:unk_78, 120) {
        stl_vector(4) {
            pointer {
            }
        }
    }
    field(:unk_88, 136) {
        stl_vector(4) {
            pointer {
            }
        }
    }
end

class Construction < MemHack::Compound
    sizeof 20

    field(:pos, 0) {
        global :Coord
    }
    field(:item_type, 6) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 8) {
        number 16, true, -1
    }
    field(:mat_type, 10) {
        number 16, true, -1
    }
    field(:mat_index, 12) {
        number 32, true
    }
    field(:flags, 16) {
        global :ConstructionFlags
    }
    field(:original_tile, 18) {
        number 16, true, nil, Tiletype
    }
end

class ConstructionFlags < MemHack::Compound
    field(:_whole, 0) {
        number 8, false
    }
    field(:no_build_item, 0) { bit 0 }
    field(:top_of_wall, 0) { bit 1 }
end

class Conversation < MemHack::Compound
    sizeof 208

    field(:conv_title, 0) {
        stl_string
    }
    field(:state, 28) {
        class ::DFHack::Conversation_TState < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :Started ; NUME[:Started] = 0
            ENUM[1] = :Active ; NUME[:Active] = 1
            ENUM[2] = :Finished ; NUME[:Finished] = 2
            ENUM[3] = :Quit ; NUME[:Quit] = 3
        end

        number 32, true, nil, Conversation_TState
    }
    field(:talk_choices, 32) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:unk_30, 48) {
        number 32, true, -1
    }
    def unk_30_tg ; df.world.units.all.binsearch(unk_30) ; end
    field(:unk_34, 52) {
        number 32, true, -1
    }
    def unk_34_tg ; df.world.history.figures.binsearch(unk_34) ; end
    field(:unk_38, 56) {
        number 32, true
    }
    field(:unk_3c, 60) {
        number 32, true, -1
    }
    def unk_3c_tg ; df.world.units.all.binsearch(unk_3c) ; end
    field(:unk_40, 64) {
        number 32, true, -1
    }
    def unk_40_tg ; df.world.history.figures.binsearch(unk_40) ; end
    field(:unk_44, 68) {
        number 32, true
    }
    field(:unk_48, 72) {
        number 32, true, -1
    }
    def unk_48_tg ; df.world.units.all.binsearch(unk_48) ; end
    field(:unk_4c, 76) {
        number 32, true, -1
    }
    def unk_4c_tg ; df.world.history.figures.binsearch(unk_4c) ; end
    field(:unk_50, 80) {
        number 32, true
    }
    field(:unk_54, 84) {
        stl_vector(4) {
            pointer {
                global :NemesisRecord
            }
        }
    }
    field(:unk_64, 100) {
        stl_vector(4) {
            pointer {
                global :HistoricalEntity
            }
        }
    }
    field(:unk_74, 116) {
        number 8, true
    }
    field(:unk_78, 120) {
        number 32, true
    }
    field(:unk_7c, 124) {
        number 32, true
    }
    field(:unk_80, 128) {
        number 16, true
    }
    field(:unk_84, 132) {
        stl_vector
    }
    field(:unk_94, 148) {
        stl_vector
    }
    field(:unk_a4, 164) {
        stl_vector
    }
    field(:location, 180) {
        pointer {
            global :Building
        }
    }
    field(:unk_b8, 184) {
        number 8, true
    }
    field(:unk_bc, 188) {
        number 32, true
    }
    field(:speech, 192) {
        stl_vector(4) {
            pointer {
                compound(:Conversation_TSpeech) {
                    sizeof 36

                    field(:text, 0) {
                        stl_vector(4) {
                            pointer {
                                stl_string
                            }
                        }
                    }
                    field(:speaker, 16) {
                        number 32, true, -1
                    }
                    def speaker_tg ; df.world.units.all.binsearch(speaker) ; end
                    field(:unk_14, 20) {
                        number 32, true
                    }
                    field(:unk_18, 24) {
                        number 32, true
                    }
                    field(:fg, 28) {
                        number 16, true
                    }
                    field(:bg, 30) {
                        number 16, true
                    }
                    field(:bright, 32) {
                        number 16, true
                    }
                }
            }
        }
    }
end

class Coord < MemHack::Compound
    sizeof 6

    field(:x, 0) {
        number 16, true, -30000
    }
    field(:y, 2) {
        number 16, true, -30000
    }
    field(:z, 4) {
        number 16, true, -30000
    }
end

class Coord2d < MemHack::Compound
    sizeof 4

    field(:x, 0) {
        number 16, true, -30000
    }
    field(:y, 2) {
        number 16, true, -30000
    }
end

class Coord2dPath < MemHack::Compound
    sizeof 32

    field(:x, 0) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:y, 16) {
        stl_vector(2) {
            number 16, true
        }
    }
end

class CoordPath < MemHack::Compound
    sizeof 48

    field(:x, 0) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:y, 16) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:z, 32) {
        stl_vector(2) {
            number 16, true
        }
    }
end

class CreatureGraphicsAppointment < MemHack::Compound
    sizeof 84

    field(:token, 0) {
        stl_string
    }
    field(:texpos, 28) {
        static_array(6, 4, CreatureGraphicsRole) {
            number 32, true
        }
    }
    field(:texpos_gs, 52) {
        static_array(6, 4, CreatureGraphicsRole) {
            number 32, true
        }
    }
    field(:add_color, 76) {
        static_array(6, 1, CreatureGraphicsRole) {
            number 8, true, nil, BooleanEnum
        }
    }
end

class CreatureInteractionEffect < MemHack::Compound
    sizeof 108

    rtti_classname :creature_interaction_effectst

    field(:flags, 4) {
        global :CreatureInteractionEffectFlags
    }
    field(:prob, 8) {
        number 32, true
    }
    field(:start, 12) {
        number 32, true
    }
    field(:peak, 16) {
        number 32, true
    }
    field(:end, 20) {
        number 32, true
    }
    field(:syn_id, 24) {
        number 32, true, -1
    }
    def syn_tg ; df.world.raws.syndromes.all[syn_id] ; end
    field(:id, 28) {
        number 32, true
    }
    field(:syn_index, 32) {
        number 32, true
    }
    field(:moon_phase_min, 36) {
        number 32, true
    }
    field(:moon_phase_max, 40) {
        number 32, true
    }
    field(:counter_trigger, 44) {
        compound(:CreatureInteractionEffect_TCounterTrigger) {
            field(:counter, 0) {
                stl_vector(4) {
                    number 32, true, nil, MiscTraitType
                }
            }
            field(:minval, 16) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:maxval, 32) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:required, 48) {
                stl_vector(4) {
                    number 32, true
                }
            }
        }
    }
    def getType()
        CreatureInteractionEffectType.sym(DFHack.vmethod_call(self, 0))
    end
    def clone()
        ptr = DFHack.vmethod_call(self, 4)
        class << self
            global :CreatureInteractionEffect
        end._at(ptr) if ptr != 0
    end
    def doAction(arg0, arg1, arg2, intensity, bp_index, bp_layer, arg6)
        DFHack.vmethod_call(self, 12, arg0, arg1, arg2, intensity, bp_index, bp_layer, arg6) ; nil
    end
    def isUntargeted()
        val = DFHack.vmethod_call(self, 16)
        (val & 1) != 0
    end
    def getTargetModes()
        ptr = DFHack.vmethod_call(self, 20)
        class << self
            stl_vector(2) {
                number 16, true, nil, CreatureInteractionEffectTargetMode
            }
        end._at(ptr) if ptr != 0
    end
    def getTargetKeys()
        ptr = DFHack.vmethod_call(self, 24)
        class << self
            stl_vector(4) {
                pointer {
                    stl_string
                }
            }
        end._at(ptr) if ptr != 0
    end
    def getTargetTissues()
        ptr = DFHack.vmethod_call(self, 28)
        class << self
            stl_vector(4) {
                pointer {
                    stl_string
                }
            }
        end._at(ptr) if ptr != 0
    end
    def checkAddFlag1(arg0)
        val = DFHack.vmethod_call(self, 32, arg0)
        (val & 1) != 0
    end
    def setBodyMatInteractionName(arg0)
        DFHack.vmethod_call(self, 36, arg0) ; nil
    end
    def parseSynAcquireType(type)
        DFHack.vmethod_call(self, 40, type) ; nil
    end
    def setBodyTransform(race, caste)
        DFHack.vmethod_call(self, 44, race, caste) ; nil
    end
    def addPeriodic(arg0, arg1, arg2)
        DFHack.vmethod_call(self, 48, arg0, arg1, arg2) ; nil
    end
    def addCounterTrigger(arg0, arg1, arg2, arg3)
        DFHack.vmethod_call(self, 52, arg0, arg1, arg2, arg3) ; nil
    end
end

class CreatureInteractionEffectAddSimpleFlagst < CreatureInteractionEffect
    sizeof 116

    rtti_classname :creature_interaction_effect_add_simple_flagst

    field(:tags1, 108) {
        global :CieAddTagMask1
    }
    field(:tags2, 112) {
        global :CieAddTagMask2
    }
end

class CreatureInteractionEffectBleedingst < CreatureInteractionEffect
    sizeof 160

    rtti_classname :creature_interaction_effect_bleedingst

    field(:sev, 108) {
        number 32, true
    }
    field(:target, 112) {
        global :CreatureInteractionEffectTarget
    }
end

class CreatureInteractionEffectBlistersst < CreatureInteractionEffect
    sizeof 160

    rtti_classname :creature_interaction_effect_blistersst

    field(:sev, 108) {
        number 32, true
    }
    field(:target, 112) {
        global :CreatureInteractionEffectTarget
    }
end

class CreatureInteractionEffectBodyMatInteractionst < CreatureInteractionEffect
    sizeof 176

    rtti_classname :creature_interaction_effect_body_mat_interactionst

    field(:unk_6c, 108) {
        stl_string
    }
    field(:unk_88, 136) {
        number 32, true
    }
    field(:unk_8c, 140) {
        number 32, true
    }
    field(:unk_90, 144) {
        number 32, true
    }
    field(:unk_94, 148) {
        stl_string
    }
end

class CreatureInteractionEffectBodyTransformationst < CreatureInteractionEffect
    sizeof 176

    rtti_classname :creature_interaction_effect_body_transformationst

    field(:chance, 108) {
        number 32, true
    }
    field(:race_str, 112) {
        stl_string
    }
    field(:caste_str, 140) {
        stl_string
    }
    field(:race, 168) {
        number 32, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:caste, 172) {
        number 16, true, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
end

class CreatureInteractionEffectBpAppearanceModifierst < CreatureInteractionEffect
    sizeof 164

    rtti_classname :creature_interaction_effect_bp_appearance_modifierst

    field(:unk_6c, 108) {
        number 16, true
    }
    field(:value, 112) {
        number 32, true
    }
    field(:target, 116) {
        global :CreatureInteractionEffectTarget
    }
end

class CreatureInteractionEffectBruisingst < CreatureInteractionEffect
    sizeof 160

    rtti_classname :creature_interaction_effect_bruisingst

    field(:sev, 108) {
        number 32, true
    }
    field(:target, 112) {
        global :CreatureInteractionEffectTarget
    }
end

class CreatureInteractionEffectCanDoInteractionst < CreatureInteractionEffect
    sizeof 692

    rtti_classname :creature_interaction_effect_can_do_interactionst

    field(:unk_6c, 108) {
        stl_vector
    }
    field(:unk_7c, 124) {
        stl_vector
    }
    field(:unk_8c, 140) {
        stl_string
    }
    field(:unk_a8, 168) {
        stl_string
    }
    field(:unk_c4, 196) {
        stl_string
    }
    field(:unk_v40_1, 224) {
        stl_string
    }
    field(:unk_v40_2, 252) {
        stl_string
    }
    field(:unk_e0, 280) {
        number 16, true
    }
    field(:unk_e2, 282) {
    }
    field(:verb, 284) {
        static_array(3, 28) {
            stl_string
        }
    }
    field(:unk_138, 368) {
        stl_string
    }
    field(:unk_154, 396) {
        stl_string
    }
    field(:unk_170, 424) {
        stl_string
    }
    field(:unk_18c, 452) {
        stl_string
    }
    field(:interaction_name, 480) {
        stl_string
    }
    field(:type_id, 508) {
        number 32, true, -1
    }
    def type_tg ; df.world.raws.interactions.binsearch(type_id) ; end
    field(:unk_1c8, 512) {
        stl_vector
    }
    field(:unk_1d8, 528) {
        stl_vector
    }
    field(:unk_1e8, 544) {
        number 32, true
    }
    field(:unk_1ec, 548) {
        stl_vector(4) {
            pointer {
            }
        }
    }
    field(:unk_1fc, 564) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_20c, 580) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_21c, 596) {
        stl_vector
    }
    field(:unk_22c, 612) {
        stl_vector
    }
    field(:unk_23c, 628) {
        stl_vector
    }
    field(:unk_24c, 644) {
        stl_vector
    }
    field(:name, 660) {
        stl_string
    }
    field(:usage_delay, 688) {
        number 32, true
    }
end

class CreatureInteractionEffectCoughBloodst < CreatureInteractionEffect
    sizeof 112

    rtti_classname :creature_interaction_effect_cough_bloodst

    field(:sev, 108) {
        number 32, true
    }
end

class CreatureInteractionEffectDisplayNamest < CreatureInteractionEffect
    sizeof 196

    rtti_classname :creature_interaction_effect_display_namest

    field(:name, 108) {
        stl_string
    }
    field(:name_plural, 136) {
        stl_string
    }
    field(:name_adj, 164) {
        stl_string
    }
    field(:anon_1, 192) {
        number 32, true
    }
end

class CreatureInteractionEffectDisplaySymbolst < CreatureInteractionEffect
    sizeof 116

    rtti_classname :creature_interaction_effect_display_symbolst

    field(:tile, 108) {
        number 32, true
    }
    field(:color, 112) {
        number 32, true
    }
end

class CreatureInteractionEffectDizzinessst < CreatureInteractionEffect
    sizeof 112

    rtti_classname :creature_interaction_effect_dizzinessst

    field(:sev, 108) {
        number 32, true
    }
end

class CreatureInteractionEffectDrowsinessst < CreatureInteractionEffect
    sizeof 112

    rtti_classname :creature_interaction_effect_drowsinessst

    field(:sev, 108) {
        number 32, true
    }
end

class CreatureInteractionEffectFeverst < CreatureInteractionEffect
    sizeof 112

    rtti_classname :creature_interaction_effect_feverst

    field(:sev, 108) {
        number 32, true
    }
end

class CreatureInteractionEffectFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:SIZE_DELAYS, 0) { bit 0 }
    field(:SIZE_DILUTES, 0) { bit 1 }
    field(:VASCULAR_ONLY, 0) { bit 2 }
    field(:MUSCULAR_ONLY, 0) { bit 3 }
    field(:RESISTABLE, 0) { bit 4 }
    field(:LOCALIZED, 0) { bit 5 }
    field(:MOON_PHASE, 0) { bit 6 }
    field(:COUNTER_TRIGGER, 0) { bit 7 }
end

class CreatureInteractionEffectFlashSymbolst < CreatureInteractionEffect
    sizeof 124

    rtti_classname :creature_interaction_effect_flash_symbolst

    field(:sym_color, 108) {
        static_array(4, 1) {
            number 8, false
        }
    }
    field(:period, 112) {
        number 32, true
    }
    field(:time, 116) {
        number 32, true
    }
    field(:unk_78, 120) {
        number 32, true
    }
end

class CreatureInteractionEffectImpairFunctionst < CreatureInteractionEffect
    sizeof 160

    rtti_classname :creature_interaction_effect_impair_functionst

    field(:sev, 108) {
        number 32, true
    }
    field(:target, 112) {
        global :CreatureInteractionEffectTarget
    }
end

class CreatureInteractionEffectMaterialForceAdjustst < CreatureInteractionEffect
    sizeof 208

    rtti_classname :creature_interaction_effect_material_force_adjustst

    field(:unk_6c, 108) {
        stl_string
    }
    field(:unk_88, 136) {
        stl_string
    }
    field(:unk_a4, 164) {
        stl_string
    }
    field(:mat_type, 192) {
        number 16, true, -1
    }
    field(:mat_index, 196) {
        number 32, true
    }
    field(:fraction_mul, 200) {
        number 32, true
    }
    field(:fraction_div, 204) {
        number 32, true
    }
end

class CreatureInteractionEffectMentAttChangest < CreatureInteractionEffect
    sizeof 212

    rtti_classname :creature_interaction_effect_ment_att_changest

    field(:ment_att_perc, 108) {
        static_array(13, 4, MentalAttributeType) {
            number 32, true
        }
    }
    field(:ment_att_add, 160) {
        static_array(13, 4, MentalAttributeType) {
            number 32, true
        }
    }
end

class CreatureInteractionEffectNauseast < CreatureInteractionEffect
    sizeof 112

    rtti_classname :creature_interaction_effect_nauseast

    field(:sev, 108) {
        number 32, true
    }
end

class CreatureInteractionEffectNecrosisst < CreatureInteractionEffect
    sizeof 160

    rtti_classname :creature_interaction_effect_necrosisst

    field(:sev, 108) {
        number 32, true
    }
    field(:target, 112) {
        global :CreatureInteractionEffectTarget
    }
end

class CreatureInteractionEffectNumbnessst < CreatureInteractionEffect
    sizeof 160

    rtti_classname :creature_interaction_effect_numbnessst

    field(:sev, 108) {
        number 32, true
    }
    field(:target, 112) {
        global :CreatureInteractionEffectTarget
    }
end

class CreatureInteractionEffectOozingst < CreatureInteractionEffect
    sizeof 160

    rtti_classname :creature_interaction_effect_oozingst

    field(:sev, 108) {
        number 32, true
    }
    field(:target, 112) {
        global :CreatureInteractionEffectTarget
    }
end

class CreatureInteractionEffectPainst < CreatureInteractionEffect
    sizeof 160

    rtti_classname :creature_interaction_effect_painst

    field(:sev, 108) {
        number 32, true
    }
    field(:target, 112) {
        global :CreatureInteractionEffectTarget
    }
end

class CreatureInteractionEffectParalysisst < CreatureInteractionEffect
    sizeof 160

    rtti_classname :creature_interaction_effect_paralysisst

    field(:sev, 108) {
        number 32, true
    }
    field(:target, 112) {
        global :CreatureInteractionEffectTarget
    }
end

class CreatureInteractionEffectPhysAttChangest < CreatureInteractionEffect
    sizeof 156

    rtti_classname :creature_interaction_effect_phys_att_changest

    field(:phys_att_perc, 108) {
        static_array(6, 4, PhysicalAttributeType) {
            number 32, true
        }
    }
    field(:phys_att_add, 132) {
        static_array(6, 4, PhysicalAttributeType) {
            number 32, true
        }
    }
end

class CreatureInteractionEffectRemoveSimpleFlagst < CreatureInteractionEffect
    sizeof 116

    rtti_classname :creature_interaction_effect_remove_simple_flagst

    field(:tags1, 108) {
        global :CieAddTagMask1
    }
    field(:tags2, 112) {
        global :CieAddTagMask2
    }
end

class CreatureInteractionEffectSenseCreatureClassst < CreatureInteractionEffect
    sizeof 144

    rtti_classname :creature_interaction_effect_sense_creature_classst

    field(:class_name, 108) {
        stl_string
    }
    field(:unk_88, 136) {
        number 8, true
    }
    field(:unk_8a, 138) {
        number 16, true
    }
    field(:unk_8c, 140) {
        number 16, true
    }
    field(:unk_8e, 142) {
        number 16, true
    }
end

class CreatureInteractionEffectSkillRollAdjustst < CreatureInteractionEffect
    sizeof 116

    rtti_classname :creature_interaction_effect_skill_roll_adjustst

    field(:multiplier, 108) {
        number 32, true
    }
    field(:chance, 112) {
        number 32, true
    }
end

class CreatureInteractionEffectSpeedChangest < CreatureInteractionEffect
    sizeof 116

    rtti_classname :creature_interaction_effect_speed_changest

    field(:bonus_add, 108) {
        number 32, true
    }
    field(:bonus_perc, 112) {
        number 32, true
    }
end

class CreatureInteractionEffectSwellingst < CreatureInteractionEffect
    sizeof 160

    rtti_classname :creature_interaction_effect_swellingst

    field(:sev, 108) {
        number 32, true
    }
    field(:target, 112) {
        global :CreatureInteractionEffectTarget
    }
end

class CreatureInteractionEffectTarget < MemHack::Compound
    sizeof 48

    field(:mode, 0) {
        stl_vector(2) {
            number 16, true, nil, CreatureInteractionEffectTargetMode
        }
    }
    field(:key, 16) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:tissue, 32) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
end

class CreatureInteractionEffectUnconsciousnessst < CreatureInteractionEffect
    sizeof 112

    rtti_classname :creature_interaction_effect_unconsciousnessst

    field(:sev, 108) {
        number 32, true
    }
end

class CreatureInteractionEffectVomitBloodst < CreatureInteractionEffect
    sizeof 112

    rtti_classname :creature_interaction_effect_vomit_bloodst

    field(:sev, 108) {
        number 32, true
    }
end

class CreatureRaw < MemHack::Compound
    sizeof 14236

    field(:creature_id, 0) {
        stl_string
    }
    field(:name, 28) {
        static_array(3, 28) {
            stl_string
        }
    }
    field(:general_baby_name, 112) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:general_child_name, 168) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:creature_tile, 224) {
        number 8, false
    }
    field(:creature_soldier_tile, 225) {
        number 8, false
    }
    field(:alttile, 226) {
        number 8, false
    }
    field(:soldier_alttile, 227) {
        number 8, false
    }
    field(:glowtile, 228) {
        number 8, false
    }
    field(:temperature1, 230) {
        number 16, false
    }
    field(:temperature2, 232) {
        number 16, false
    }
    field(:frequency, 234) {
        number 16, true
    }
    field(:population_number, 236) {
        static_array(2, 2) {
            number 16, true
        }
    }
    field(:cluster_number, 240) {
        static_array(2, 2) {
            number 16, true
        }
    }
    field(:triggerable_group, 244) {
        static_array(2, 2) {
            number 16, true
        }
    }
    field(:color, 248) {
        static_array(3, 2) {
            number 16, true
        }
    }
    field(:glowcolor, 254) {
        static_array(3, 2) {
            number 16, true
        }
    }
    field(:adultsize, 260) {
        number 32, true
    }
    field(:prefstring, 264) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:sphere, 280) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:caste, 296) {
        stl_vector(4) {
            pointer {
                global :CasteRaw
            }
        }
    }
    field(:pop_ratio, 312) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:flags, 328) {
        df_flagarray(CreatureRawFlags)
    }
    field(:graphics, 336) {
        compound(:CreatureRaw_TGraphics) {
            field(:texpos, 0) {
                static_array(6, 4, CreatureGraphicsRole) {
                    number 32, true
                }
            }
            field(:texpos_gs, 24) {
                static_array(6, 4, CreatureGraphicsRole) {
                    number 32, true
                }
            }
            field(:entity_link_texpos, 48) {
                static_array(6, 60, CreatureGraphicsRole) {
                    static_array(15, 4, HistfigEntityLinkType) {
                        number 32, true
                    }
                }
            }
            field(:entity_link_texpos_gs, 408) {
                static_array(6, 60, CreatureGraphicsRole) {
                    static_array(15, 4, HistfigEntityLinkType) {
                        number 32, true
                    }
                }
            }
            field(:site_link_texpos, 768) {
                static_array(6, 28, CreatureGraphicsRole) {
                    static_array(7, 4, HistfigSiteLinkType) {
                        number 32, true
                    }
                }
            }
            field(:site_link_texpos_gs, 936) {
                static_array(6, 28, CreatureGraphicsRole) {
                    static_array(7, 4, HistfigSiteLinkType) {
                        number 32, true
                    }
                }
            }
            field(:profession_texpos, 1104) {
                static_array(6, 448, CreatureGraphicsRole) {
                    static_array(112, 4, Profession) {
                        number 32, true
                    }
                }
            }
            field(:profession_texpos_gs, 3792) {
                static_array(6, 448, CreatureGraphicsRole) {
                    static_array(112, 4, Profession) {
                        number 32, true
                    }
                }
            }
            field(:add_color, 6480) {
                static_array(6, 1, CreatureGraphicsRole) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:entity_link_add_color, 6486) {
                static_array(6, 15, CreatureGraphicsRole) {
                    static_array(15, 1, HistfigEntityLinkType) {
                        number 8, true, nil, BooleanEnum
                    }
                }
            }
            field(:site_link_add_color, 6576) {
                static_array(6, 7, CreatureGraphicsRole) {
                    static_array(7, 1, HistfigSiteLinkType) {
                        number 8, true, nil, BooleanEnum
                    }
                }
            }
            field(:profession_add_color, 6618) {
                static_array(6, 112, CreatureGraphicsRole) {
                    static_array(112, 1, Profession) {
                        number 8, true, nil, BooleanEnum
                    }
                }
            }
            field(:appointments, 7292) {
                stl_vector(4) {
                    pointer {
                        global :CreatureGraphicsAppointment
                    }
                }
            }
        }
    }
    field(:speech1, 7644) {
        stl_vector(1) {
            number 8, true
        }
    }
    field(:speech2, 7660) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:speech3, 7676) {
        stl_vector
    }
    field(:material, 7692) {
        stl_vector(4) {
            pointer {
                global :Material
            }
        }
    }
    field(:tissue, 7708) {
        stl_vector(4) {
            pointer {
                global :Tissue
            }
        }
    }
    field(:profession_name, 7724) {
        compound(:CreatureRaw_TProfessionName) {
            field(:singular, 0) {
                static_array(112, 28, Profession) {
                    stl_string
                }
            }
            field(:plural, 3136) {
                static_array(112, 28, Profession) {
                    stl_string
                }
            }
        }
    }
    field(:underground_layer_min, 13996) {
        number 32, true
    }
    field(:underground_layer_max, 14000) {
        number 32, true
    }
    field(:modifier_class, 14004) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:modifier_num_patterns, 14020) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:hive_product, 14036) {
        compound(:CreatureRaw_THiveProduct) {
            field(:number, 0) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:time, 16) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:item_type, 32) {
                stl_vector(2) {
                    number 16, true, nil, ItemType
                }
            }
            field(:item_subtype, 48) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:material, 64) {
                global :MaterialVecRef
            }
            field(:tmpstr, 96) {
                static_array(5, 16) {
                    stl_vector(4) {
                        pointer {
                            stl_string
                        }
                    }
                }
            }
        }
    }
    field(:source_hfid, 14212) {
        number 32, true, -1
    }
    def source_hfid_tg ; df.world.history.figures.binsearch(source_hfid) ; end
    field(:next_modifier_id, 14216) {
        number 32, true
    }
    field(:raws, 14220) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
end

class CreatureVariation < MemHack::Compound
    sizeof 140

    field(:id, 0) {
        stl_string
    }
    field(:cv_convert_tag, 28) {
        stl_vector(4) {
            pointer {
                global :CreatureVariationConvertTag
            }
        }
    }
    field(:cv_new_tag, 44) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:cv_remove_tag, 60) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:cv_unk_tag, 76) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:unk_v40_1, 92) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:unk_v40_2, 108) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_v40_3, 124) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
end

class CreatureVariationConvertTag < MemHack::Compound
    sizeof 116

    field(:cvct_master, 0) {
        stl_string
    }
    field(:cvct_target, 28) {
        stl_string
    }
    field(:cvct_replacement, 56) {
        stl_string
    }
    field(:unk_v40_1, 84) {
        number 32, true, -1
    }
    field(:unk_v40_2, 88) {
        stl_string
    }
end

class Crime < MemHack::Compound
    sizeof 80

    field(:id, 0) {
        number 32, true
    }
    field(:mode, 4) {
        class ::DFHack::Crime_TMode < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :ProductionOrderViolation ; NUME[:ProductionOrderViolation] = 0
            ENUM[1] = :ExportViolation ; NUME[:ExportViolation] = 1
            ENUM[2] = :JobOrderViolation ; NUME[:JobOrderViolation] = 2
            ENUM[3] = :ConspiracyToSlowLabor ; NUME[:ConspiracyToSlowLabor] = 3
            ENUM[4] = :Murder ; NUME[:Murder] = 4
            ENUM[5] = :DisorderlyBehavior ; NUME[:DisorderlyBehavior] = 5
            ENUM[6] = :BuildingDestruction ; NUME[:BuildingDestruction] = 6
            ENUM[7] = :Vandalism ; NUME[:Vandalism] = 7
            ENUM[8] = :Theft ; NUME[:Theft] = 8
            ENUM[9] = :Robbery ; NUME[:Robbery] = 9
            ENUM[10] = :BloodDrinking ; NUME[:BloodDrinking] = 10
        end

        number 32, true, nil, Crime_TMode
    }
    field(:punishment, 8) {
        compound(:Crime_TPunishment) {
            field(:hammerstrikes, 0) {
                number 32, true
            }
            field(:prison_time, 4) {
                number 32, true
            }
            field(:give_beating, 8) {
                number 32, true
            }
        }
    }
    field(:criminal, 20) {
        number 32, true, -1
    }
    def criminal_tg ; df.world.units.all.binsearch(criminal) ; end
    field(:convicted, 24) {
        number 32, true, -1
    }
    def convicted_tg ; df.world.units.all.binsearch(convicted) ; end
    field(:victim, 28) {
        number 32, true, -1
    }
    def victim_tg ; df.world.units.all.binsearch(victim) ; end
    field(:flags, 32) {
        compound(:Crime_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:sentenced, 0) { bit 0 }
            field(:discovered, 0) { bit 1 }
            field(:needs_trial, 0) { bit 2 }
        }
    }
    field(:death_id, 36) {
        number 32, true, -1
    }
    def death_tg ; df.world.incidents.all.binsearch(death_id) ; end
    field(:event_year, 40) {
        number 32, true
    }
    field(:event_time, 44) {
        number 32, true
    }
    field(:discovered_year, 48) {
        number 32, true
    }
    field(:discovered_time, 52) {
        number 32, true
    }
    field(:site, 56) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:entity, 60) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity) ; end
    field(:anon_1, 64) {
        stl_vector(4) {
            pointer {
                compound(:Crime_TAnon1) {
                    sizeof 36

                    field(:death_id, 0) {
                        number 32, true, -1
                    }
                    def death_tg ; df.world.incidents.all.binsearch(death_id) ; end
                    field(:crime_id, 4) {
                        number 32, true, -1
                    }
                    def crime_tg ; df.world.crimes.all.binsearch(crime_id) ; end
                    field(:unk1, 8) {
                        number 32, true
                    }
                    field(:event_year, 12) {
                        number 32, true
                    }
                    field(:event_time, 16) {
                        number 32, true
                    }
                    field(:witness, 20) {
                        number 32, true, -1
                    }
                    def witness_tg ; df.world.units.all.binsearch(witness) ; end
                    field(:accuses, 24) {
                        number 32, true, -1
                    }
                    def accuses_tg ; df.world.units.all.binsearch(accuses) ; end
                    field(:report_year, 28) {
                        number 32, true
                    }
                    field(:report_time, 32) {
                        number 32, true
                    }
                }
            }
        }
    }
end

class CulturalIdentity < MemHack::Compound
    sizeof 252

    field(:id, 0) {
        number 32, true
    }
    field(:site_id, 4) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
    field(:civ_id, 8) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ_id) ; end
    field(:unk_c, 12) {
        stl_vector(4) {
            pointer {
                compound(:CulturalIdentity_TUnkC) {
                    sizeof 72

                    field(:group_id, 0) {
                        number 32, true, -1
                    }
                    def group_tg ; df.world.entities.all.binsearch(group_id) ; end
                    field(:unk_4, 4) {
                        number 32, true, -1
                    }
                    field(:unk_8, 8) {
                        number 32, true, -1
                    }
                    field(:unk_c, 12) {
                        number 32, true, -1
                    }
                    field(:unk_10, 16) {
                        number 32, true, -1
                    }
                    field(:unk_14, 20) {
                        number 32, true, -1
                    }
                    field(:unk_18, 24) {
                        number 32, true, -1
                    }
                    field(:unk_1c, 28) {
                        number 32, true
                    }
                    field(:unk_20, 32) {
                        number 32, true
                    }
                    field(:unk_24, 36) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:unk_34, 52) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:unk_44, 68) {
                        number 32, true, 100
                    }
                }
            }
        }
    }
    field(:unk_1c, 28) {
        static_array(22, 2) {
            number 16, true
        }
    }
    field(:unk_48, 72) {
        static_array(32, 4) {
            number 32, true
        }
    }
    field(:unk_c8, 200) {
        stl_vector(4) {
            pointer {
                global :EntityEvent
            }
        }
    }
    field(:unk_d8, 216) {
        number 32, true
    }
    field(:unk_dc, 220) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_ec, 236) {
        number 32, true
    }
    field(:unk_f0, 240) {
        number 32, true
    }
    field(:unk_f4, 244) {
        number 32, true
    }
    field(:unk_f8, 248) {
        number 32, true
    }
end

class CurseAttrChange < MemHack::Compound
    sizeof 152

    field(:phys_att_perc, 0) {
        static_array(6, 4, PhysicalAttributeType) {
            number 32, true
        }
    }
    field(:phys_att_add, 24) {
        static_array(6, 4, PhysicalAttributeType) {
            number 32, true
        }
    }
    field(:ment_att_perc, 48) {
        static_array(13, 4, MentalAttributeType) {
            number 32, true
        }
    }
    field(:ment_att_add, 100) {
        static_array(13, 4, MentalAttributeType) {
            number 32, true
        }
    }
end

class DInit < MemHack::Compound
    sizeof 372

    field(:flags1, 0) {
        df_flagarray(DInitFlags1)
    }
    field(:nickname, 8) {
        static_array(10, 4, GameType) {
            number 32, true, nil, DInitNickname
        }
    }
    field(:sky_tile, 48) {
        number 8, false
    }
    field(:sky_color, 50) {
        static_array(3, 2) {
            number 16, true
        }
    }
    field(:chasm_tile, 56) {
        number 8, false
    }
    field(:pillar_tile, 57) {
        number 8, false
    }
    field(:track_tiles, 58) {
        static_array(15, 1) {
            number 8, false
        }
    }
    field(:track_tile_invert, 73) {
        static_array(15, 1) {
            number 8, false
        }
    }
    field(:track_ramp_tiles, 88) {
        static_array(15, 1) {
            number 8, false
        }
    }
    field(:track_ramp_invert, 103) {
        static_array(15, 1) {
            number 8, false
        }
    }
    field(:tree_tiles, 118) {
        static_array(104, 1) {
            number 8, false
        }
    }
    field(:chasm_color, 222) {
        static_array(3, 2) {
            number 16, true
        }
    }
    field(:wound_color, 228) {
        compound(:DInit_TWoundColor) {
            field(:none, 0) {
                static_array(3, 2) {
                    number 16, true
                }
            }
            field(:minor, 6) {
                static_array(3, 2) {
                    number 16, true
                }
            }
            field(:inhibited, 12) {
                static_array(3, 2) {
                    number 16, true
                }
            }
            field(:function_loss, 18) {
                static_array(3, 2) {
                    number 16, true
                }
            }
            field(:broken, 24) {
                static_array(3, 2) {
                    number 16, true
                }
            }
            field(:missing, 30) {
                static_array(3, 2) {
                    number 16, true
                }
            }
        }
    }
    field(:idlers, 264) {
        number 16, true, nil, DInitIdlers
    }
    field(:show_embark_tunnel, 266) {
        number 16, true, nil, DInitTunnel
    }
    field(:flags2, 268) {
        df_flagarray(DInitFlags2)
    }
    field(:display_length, 276) {
        number 32, true
    }
    field(:adventurer_z_view, 280) {
        number 32, true, nil, DInitZView
    }
    field(:adventurer_z_view_size, 284) {
        number 32, true
    }
    field(:flags3, 288) {
        df_flagarray(DInitFlags3)
    }
    field(:population_cap, 296) {
        number 32, true
    }
    field(:strict_population_cap, 300) {
        number 32, true
    }
    field(:baby_cap_absolute, 304) {
        number 32, true
    }
    field(:baby_cap_percent, 308) {
        number 32, true
    }
    field(:specific_seed_cap, 312) {
        number 32, true
    }
    field(:fortress_seed_cap, 316) {
        number 32, true
    }
    field(:path_cost, 320) {
        static_array(4, 4) {
            number 32, true
        }
    }
    field(:embark_rect, 336) {
        static_array(2, 2) {
            number 16, true
        }
    }
    field(:store_dist, 340) {
        compound(:DInit_TStoreDist) {
            field(:item_decrease, 0) {
                number 16, true
            }
            field(:seed_combine, 2) {
                number 16, true
            }
            field(:bucket_combine, 4) {
                number 16, true
            }
            field(:barrel_combine, 6) {
                number 16, true
            }
            field(:bin_combine, 8) {
                number 16, true
            }
        }
    }
    field(:set_labor_lists, 350) {
        static_array(2, 2) {
            number 16, true
        }
    }
    field(:graze_coefficient, 356) {
        number 32, true
    }
    field(:flags4, 360) {
        df_flagarray(DInitFlags4)
    }
    field(:post_prepare_embark_confirmation, 368) {
        number 32, true, nil, DInitEmbarkConfirm
    }
end

class DeepVeinHollow < MemHack::Compound
    sizeof 64

    field(:anon_1, 0) {
        number 8, true
    }
    field(:anon_2, 4) {
        number 32, true
    }
    field(:tiles, 8) {
        global :CoordPath
    }
    field(:pos, 56) {
        global :Coord
    }
end

class DescriptorColor < MemHack::Compound
    sizeof 104

    field(:id, 0) {
        stl_string
    }
    field(:word_unk, 28) {
        stl_vector
    }
    field(:words, 44) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def words_tg ; words.map { |i| df.world.raws.language.words[i] } ; end
    field(:name, 60) {
        stl_string
    }
    field(:color, 88) {
        number 8, true
    }
    field(:bold, 89) {
        number 8, true
    }
    field(:red, 92) {
        float
    }
    field(:green, 96) {
        float
    }
    field(:blue, 100) {
        float
    }
end

class DescriptorPattern < MemHack::Compound
    sizeof 64

    field(:id, 0) {
        stl_string
    }
    field(:colors, 28) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    def colors_tg ; colors.map { |i| df.world.raws.language.colors[i] } ; end
    field(:pattern, 44) {
        number 16, true, nil, PatternType
    }
    field(:cp_color, 48) {
        stl_vector
    }
end

class DescriptorShape < MemHack::Compound
    sizeof 140

    field(:id, 0) {
        stl_string
    }
    field(:word_unk, 28) {
        stl_vector
    }
    field(:words, 44) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def words_tg ; words.map { |i| df.world.raws.language.words[i] } ; end
    field(:name, 60) {
        stl_string
    }
    field(:name_plural, 88) {
        stl_string
    }
    field(:adj, 116) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:gems_use, 132) {
        compound(:DescriptorShape_TGemsUse) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:noun, 0) { bit 0 }
            field(:adj, 0) { bit 1 }
            field(:adj_noun, 0) { bit 2 }
        }
    }
    field(:tile, 136) {
        number 8, false
    }
end

class DfhackMaterialCategory < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:plant, 0) { bit 0 }
    field(:wood, 0) { bit 1 }
    field(:cloth, 0) { bit 2 }
    field(:silk, 0) { bit 3 }
    field(:leather, 0) { bit 4 }
    field(:bone, 0) { bit 5 }
    field(:shell, 0) { bit 6 }
    field(:wood2, 0) { bit 7 }
    field(:soap, 0) { bit 8 }
    field(:tooth, 0) { bit 9 }
    field(:horn, 0) { bit 10 }
    field(:pearl, 0) { bit 11 }
    field(:yarn, 0) { bit 12 }
    field(:metal, 0) { bit 13 }
    field(:stone, 0) { bit 14 }
    field(:sand, 0) { bit 15 }
    field(:glass, 0) { bit 16 }
    field(:clay, 0) { bit 17 }
    field(:milk, 0) { bit 18 }
end

class DipscriptInfo < MemHack::Compound
    sizeof 92

    field(:id, 0) {
        number 32, true
    }
    field(:script_file, 4) {
        stl_string
    }
    field(:script_steps, 32) {
        stl_vector(4) {
            pointer {
                global :ScriptStepst
            }
        }
    }
    field(:script_vars, 48) {
        stl_vector(4) {
            pointer {
                global :ScriptVarst
            }
        }
    }
    field(:code, 64) {
        stl_string
    }
end

class DipscriptPopup < MemHack::Compound
    sizeof 12

    field(:meeting_holder, 0) {
        pointer {
            global :Unit
        }
    }
    field(:activity, 4) {
        pointer {
            global :ActivityInfo
        }
    }
    field(:flags, 8) {
        compound(:DipscriptPopup_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:close_screen, 0) { bit 0 }
            field(:new_screen, 0) { bit 1 }
        }
    }
end

class DoorFlags < MemHack::Compound
    field(:_whole, 0) {
        number 16, false
    }
    field(:forbidden, 0) { bit 0 }
    field(:internal, 0) { bit 1 }
    field(:taken_by_invaders, 0) { bit 2 }
    field(:used_by_intruder, 0) { bit 3 }
    field(:closed, 0) { bit 4 }
    field(:operated_by_mechanisms, 0) { bit 5 }
    field(:pet_passable, 0) { bit 6 }
end

class DyeInfo < MemHack::Compound
    sizeof 20

    field(:mat_type, 0) {
        number 16, true, -1
    }
    field(:mat_index, 4) {
        number 32, true
    }
    field(:dyer, 8) {
        number 32, true, -1
    }
    def dyer_tg ; df.world.history.figures.binsearch(dyer) ; end
    field(:quality, 12) {
        number 16, true, nil, ItemQuality
    }
    field(:skill_rating, 14) {
        number 16, true, nil, SkillRating
    }
    field(:anon_1, 16) {
        number 32, true
    }
end

class EffectInfo < MemHack::Compound
    sizeof 28

    field(:id, 0) {
        number 32, true
    }
    field(:anon_1, 4) {
        pointer {
            global :Job
        }
    }
    field(:type, 8) {
        number 16, true
    }
    field(:foreground, 10) {
        number 16, true
    }
    field(:background, 12) {
        number 16, true
    }
    field(:bright, 14) {
        number 8, true
    }
    field(:pos, 16) {
        global :Coord
    }
    field(:timer, 24) {
        number 32, true
    }
end

class EmbarkItemChoice < MemHack::Compound
    sizeof 1712

    field(:list, 0) {
        static_array(107, 16, EntitySellCategory) {
            stl_vector(4) {
                pointer {
                    compound(:EmbarkItemChoice_TList) {
                        sizeof 16

                        field(:item_type, 0) {
                            number 16, true, nil, ItemType
                        }
                        field(:item_subtype, 2) {
                            number 16, true, -1
                        }
                        field(:mattype, 4) {
                            number 16, true, -1
                        }
                        field(:matindex, 8) {
                            number 32, true
                        }
                        field(:unk_c, 12) {
                            number 8, true
                        }
                    }
                }
            }
        }
    }
end

class EmbarkLocation < MemHack::Compound
    sizeof 52

    field(:region_pos, 0) {
        global :Coord2d
    }
    field(:reclaim_site, 4) {
        number 16, true, -1
    }
    def reclaim_site_tg ; df.world.world_data.sites.binsearch(reclaim_site) ; end
    field(:reclaim_idx, 6) {
        number 16, true
    }
    field(:biome_rgn, 8) {
        global :Coord2dPath
    }
    field(:embark_pos_min, 40) {
        global :Coord2d
    }
    field(:embark_pos_max, 44) {
        global :Coord2d
    }
    field(:embark_biome_rgn, 48) {
        global :Coord2d
    }
end

class Enabler < MemHack::Compound
    sizeof 540

    field(:fullscreen, 0) {
        number 8, true, nil, BooleanEnum
    }
    field(:overridden_grid_sizes, 4) {
        stl_deque(8) {
            compound(:Enabler_TOverriddenGridSizes) {
                field(:anon_1, 0) {
                    number 32, true
                }
                field(:anon_2, 4) {
                    number 32, true
                }
            }
        }
    }
    field(:renderer, 28) {
        pointer {
            global :Renderer
        }
    }
    field(:calculated_fps, 32) {
        number 32, true
    }
    field(:calculated_gfps, 36) {
        number 32, true
    }
    field(:frame_timings, 40) {
        stl_deque(4) {
            number 32, true
        }
    }
    field(:gframe_timings, 64) {
        stl_deque(4) {
            number 32, true
        }
    }
    field(:frame_sum, 88) {
        number 32, true
    }
    field(:gframe_sum, 92) {
        number 32, true
    }
    field(:frame_last, 96) {
        number 32, true
    }
    field(:gframe_last, 100) {
        number 32, true
    }
    field(:fps, 104) {
        float
    }
    field(:gfps, 108) {
        float
    }
    field(:fps_per_gfps, 112) {
        float
    }
    field(:last_tick, 116) {
        number 32, false
    }
    field(:outstanding_frames, 120) {
        float
    }
    field(:outstanding_gframes, 124) {
        float
    }
    field(:async_frames, 128) {
        number 32, false
    }
    field(:async_paused, 132) {
        number 8, true, nil, BooleanEnum
    }
    field(:async_tobox, 136) {
        compound(:Enabler_TAsyncTobox) {
            field(:sem, 0) {
                pointer {
                }
            }
            field(:queue, 4) {
                stl_deque(8) {
                    compound(:Enabler_TAsyncTobox_TQueue) {
                        field(:cmd, 0) {
                            class ::DFHack::Enabler_TAsyncTobox_TQueue_TCmd < MemHack::Enum
                                ENUM = Hash.new
                                NUME = Hash.new
                                ENUM[0] = :Pause ; NUME[:Pause] = 0
                                ENUM[1] = :Start ; NUME[:Start] = 1
                                ENUM[2] = :Render ; NUME[:Render] = 2
                                ENUM[3] = :Inc ; NUME[:Inc] = 3
                                ENUM[4] = :SetFps ; NUME[:SetFps] = 4
                            end

                            number 32, true, nil, Enabler_TAsyncTobox_TQueue_TCmd
                        }
                        field(:val, 4) {
                            number 32, true
                        }
                    }
                }
            }
            field(:sem_fill, 28) {
                pointer {
                }
            }
        }
    }
    field(:async_frombox, 168) {
        compound(:Enabler_TAsyncFrombox) {
            field(:sem, 0) {
                pointer {
                }
            }
            field(:queue, 4) {
                stl_deque(12) {
                    compound(:Enabler_TAsyncFrombox_TQueue) {
                        field(:msg, 0) {
                            class ::DFHack::Enabler_TAsyncFrombox_TQueue_TMsg < MemHack::Enum
                                ENUM = Hash.new
                                NUME = Hash.new
                                ENUM[0] = :Quit ; NUME[:Quit] = 0
                                ENUM[1] = :Complete ; NUME[:Complete] = 1
                                ENUM[2] = :SetFps ; NUME[:SetFps] = 2
                                ENUM[3] = :SetGfps ; NUME[:SetGfps] = 3
                                ENUM[4] = :PushResize ; NUME[:PushResize] = 4
                                ENUM[5] = :PopResize ; NUME[:PopResize] = 5
                                ENUM[6] = :ResetTextures ; NUME[:ResetTextures] = 6
                            end

                            number 32, true, nil, Enabler_TAsyncFrombox_TQueue_TMsg
                        }
                        field(:fps, 4) {
                            number 32, true
                        }
                        field(:x, 4) {
                            number 32, true
                        }
                        field(:y, 8) {
                            number 32, true
                        }
                    }
                }
            }
            field(:sem_fill, 28) {
                pointer {
                }
            }
        }
    }
    field(:async_zoom, 200) {
        compound(:Enabler_TAsyncZoom) {
            field(:sem, 0) {
                pointer {
                }
            }
            field(:queue, 4) {
                stl_deque(4) {
                    number 32, true, nil, ZoomCommands
                }
            }
            field(:sem_fill, 28) {
                pointer {
                }
            }
        }
    }
    field(:async_fromcomplete, 232) {
        pointer {
        }
    }
    field(:renderer_threadid, 236) {
        number 32, false
    }
    field(:command_line, 240) {
        stl_string
    }
    field(:ccolor, 268) {
        static_array(16, 12) {
            static_array(3, 4) {
                float
            }
        }
    }
    field(:flag, 460) {
        compound(:Enabler_TFlag) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:render, 0) { bit 0 }
            field(:maxfps, 0) { bit 1 }
        }
    }
    field(:mouse_lbut, 464) {
        number 8, true
    }
    field(:mouse_rbut, 465) {
        number 8, true
    }
    field(:mouse_lbut_down, 466) {
        number 8, true
    }
    field(:mouse_rbut_down, 467) {
        number 8, true
    }
    field(:mouse_lbut_lift, 468) {
        number 8, true
    }
    field(:mouse_rbut_lift, 469) {
        number 8, true
    }
    field(:tracking_on, 470) {
        number 8, true
    }
    field(:textures, 472) {
        compound(:Enabler_TTextures) {
            field(:raws, 0) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:uploaded, 16) {
                number 8, true, nil, BooleanEnum
            }
            field(:gl_catalog, 20) {
                number 32, false
            }
            field(:gl_texpos, 24) {
                pointer {
                }
            }
        }
    }
    field(:sync, 500) {
        number 32, true
    }
    field(:text_system, 504) {
        stl_vector(4) {
            pointer {
            }
        }
    }
    field(:simticks, 520) {
        compound(:Enabler_TSimticks) {
            field(:sem, 0) {
                pointer {
                }
            }
            field(:value, 4) {
                number 32, true
            }
        }
    }
    field(:gputicks, 528) {
        compound(:Enabler_TGputicks) {
            field(:sem, 0) {
                pointer {
                }
            }
            field(:value, 4) {
                number 32, true
            }
        }
    }
    field(:clock, 536) {
        number 32, false
    }
end

class Engraving < MemHack::Compound
    sizeof 44

    field(:artist, 0) {
        number 32, true, -1
    }
    def artist_tg ; df.world.history.figures.binsearch(artist) ; end
    field(:masterpiece_event, 4) {
        number 32, true, -1
    }
    def masterpiece_event_tg ; df.world.history.events.binsearch(masterpiece_event) ; end
    field(:skill_rating, 8) {
        number 32, true, nil, SkillRating
    }
    field(:pos, 12) {
        global :Coord
    }
    field(:flags, 20) {
        global :EngravingFlags
    }
    field(:tile, 24) {
        number 8, true
    }
    field(:art_id, 28) {
        number 32, true, -1
    }
    def art_tg ; df.world.art_image_chunks.binsearch(art_id) ; end
    field(:art_subid, 32) {
        number 16, true, -1
    }
    field(:quality, 34) {
        number 16, true, nil, ItemQuality
    }
    field(:unk1, 36) {
        number 32, true, -1
    }
    field(:unk2, 40) {
        number 32, true, -1
    }
end

class EngravingFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:floor, 0) { bit 0 }
    field(:west, 0) { bit 1 }
    field(:east, 0) { bit 2 }
    field(:north, 0) { bit 3 }
    field(:south, 0) { bit 4 }
    field(:hidden, 0) { bit 5 }
    field(:northwest, 0) { bit 6 }
    field(:northeast, 0) { bit 7 }
    field(:southwest, 0) { bit 8 }
    field(:southeast, 0) { bit 9 }
end

class EntityActivityStatistics < MemHack::Compound
    sizeof 8344

    field(:food, 0) {
        compound(:EntityActivityStatistics_TFood) {
            field(:total, 0) {
                number 32, true
            }
            field(:meat, 4) {
                number 32, true
            }
            field(:fish, 8) {
                number 32, true
            }
            field(:other, 12) {
                number 32, true
            }
            field(:seeds, 16) {
                number 32, true
            }
            field(:plant, 20) {
                number 32, true
            }
            field(:drink, 24) {
                number 32, true
            }
        }
    }
    field(:unit_counts, 28) {
        static_array(152, 2, Profession) {
            number 16, true
        }
    }
    field(:population, 332) {
        number 16, true
    }
    field(:anon_1, 334) {
        number 16, true
    }
    field(:anon_2, 336) {
        number 16, true
    }
    field(:anon_3, 338) {
        number 16, true
    }
    field(:trained_animals, 340) {
        number 16, true
    }
    field(:other_animals, 342) {
        number 16, true
    }
    field(:anon_4, 344) {
        number 16, true
    }
    field(:anon_5, 348) {
        number 32, true
    }
    field(:item_counts, 352) {
        static_array(112, 4, ItemType) {
            number 32, true
        }
    }
    field(:created_weapons, 800) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:wealth, 816) {
        compound(:EntityActivityStatistics_TWealth) {
            field(:total, 0) {
                number 32, true
            }
            field(:weapons, 4) {
                number 32, true
            }
            field(:armor, 8) {
                number 32, true
            }
            field(:furniture, 12) {
                number 32, true
            }
            field(:other, 16) {
                number 32, true
            }
            field(:architecture, 20) {
                number 32, true
            }
            field(:displayed, 24) {
                number 32, true
            }
            field(:held, 28) {
                number 32, true
            }
            field(:imported, 32) {
                number 32, true
            }
            field(:anon_1, 36) {
                number 32, true
            }
            field(:exported, 40) {
                number 32, true
            }
        }
    }
    field(:recent_jobs, 860) {
        static_array(7, 1040) {
            static_array(260, 4, JobType) {
                number 32, true
            }
        }
    }
    field(:excavated_tiles, 8140) {
        number 32, true
    }
    field(:death_history, 8144) {
        static_array(5, 4) {
            number 32, true
        }
    }
    field(:insanity_history, 8164) {
        static_array(5, 4) {
            number 32, true
        }
    }
    field(:execution_history, 8184) {
        static_array(5, 4) {
            number 32, true
        }
    }
    field(:noble_death_history, 8204) {
        static_array(5, 4) {
            number 32, true
        }
    }
    field(:total_deaths, 8224) {
        number 32, true
    }
    field(:total_insanities, 8228) {
        number 32, true
    }
    field(:total_executions, 8232) {
        number 32, true
    }
    field(:num_artifacts, 8236) {
        number 32, true
    }
    field(:anon_6, 8240) {
        number 32, true
    }
    field(:discovered_creature_foods, 8244) {
        stl_vector(1) {
            number 8, true, nil, BooleanEnum
        }
    }
    field(:discovered_creatures, 8260) {
        stl_vector(1) {
            number 8, true, nil, BooleanEnum
        }
    }
    field(:discovered_plant_foods, 8276) {
        stl_vector(1) {
            number 8, true, nil, BooleanEnum
        }
    }
    field(:discovered_plants, 8292) {
        stl_vector(1) {
            number 8, true, nil, BooleanEnum
        }
    }
    field(:discovered_water_features, 8308) {
        number 16, true
    }
    field(:discovered_subterranean_features, 8310) {
        number 16, true
    }
    field(:discovered_chasm_features, 8312) {
        number 16, true
    }
    field(:discovered_magma_features, 8314) {
        number 16, true
    }
    field(:discovered_feature_layers, 8316) {
        number 16, true
    }
    field(:migrant_wave_idx, 8320) {
        number 32, true
    }
    field(:found_minerals, 8324) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def found_minerals_tg ; found_minerals.map { |i| df.world.raws.inorganics[i] } ; end
    field(:found_misc, 8340) {
        compound(:EntityActivityStatistics_TFoundMisc) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:deep_special, 0) { bit 0 }
        }
    }
end

class EntityBuyPrices < MemHack::Compound
    sizeof 20

    field(:items, 0) {
        pointer {
            global :EntityBuyRequests
        }
    }
    field(:price, 4) {
        stl_vector(4) {
            number 32, true
        }
    }
end

class EntityBuyRequests < MemHack::Compound
    sizeof 96

    field(:item_type, 0) {
        stl_vector(2) {
            number 16, true, nil, ItemType
        }
    }
    field(:item_subtype, 16) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:unk_20, 32) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:unk_30, 48) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:mat_cats, 64) {
        stl_vector(4) {
            global :JobMaterialCategory
        }
    }
    field(:priority, 80) {
        stl_vector(1) {
            number 8, true
        }
    }
end

class EntityClaimMask < MemHack::Compound
    sizeof 8

    field(:map, 0) {
        pointer_ary(4) {
            pointer_ary(32) {
                compound(:EntityClaimMask_TMap) {
                    sizeof 32

                    field(:entities, 0) {
                        stl_vector(4) {
                            number 32, true, -1
                        }
                    }
                    def entities_tg ; entities.map { |i| df.world.entities.all.binsearch(i) } ; end
                    field(:region_masks, 16) {
                        stl_vector(4) {
                            pointer {
                                static_array(16, 16) {
                                    static_array(16, 1) {
                                        number 8, false
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    field(:width, 4) {
        number 16, true
    }
    field(:height, 6) {
        number 16, true
    }
end

class EntityEntityLink < MemHack::Compound
    sizeof 12

    field(:type, 0) {
        number 16, true, nil, EntityEntityLinkType
    }
    field(:target, 4) {
        number 32, true, -1
    }
    def target_tg ; df.world.entities.all.binsearch(target) ; end
    field(:strength, 8) {
        number 16, true
    }
end

class EntityEvent < MemHack::Compound
    sizeof 40

    field(:data, 0) {
        compound(:EntityEvent_TData) {
            field(:invasion, 0) {
                compound(:EntityEvent_TData_TInvasion) {
                    field(:entity_id, 0) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:site_id, 4) {
                        number 32, true, -1
                    }
                    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
                    field(:anon_1, 8) {
                        number 32, true
                    }
                    field(:anon_2, 12) {
                        number 32, true
                    }
                }
            }
            field(:abduction, 0) {
                compound(:EntityEvent_TData_TAbduction) {
                    field(:histfig_id, 0) {
                        number 32, true, -1
                    }
                    def histfig_tg ; df.world.history.figures.binsearch(histfig_id) ; end
                    field(:anon_1, 4) {
                        number 32, true
                    }
                    field(:anon_2, 8) {
                        number 32, true
                    }
                    field(:anon_3, 12) {
                        number 32, true
                    }
                }
            }
            field(:incident, 0) {
                compound(:EntityEvent_TData_TIncident) {
                    field(:incident_id, 0) {
                        number 32, true, -1
                    }
                    def incident_tg ; df.world.incidents.all.binsearch(incident_id) ; end
                    field(:anon_1, 4) {
                        number 32, true
                    }
                }
            }
            field(:occupation, 0) {
                compound(:EntityEvent_TData_TOccupation) {
                    field(:site_id, 0) {
                        number 32, true, -1
                    }
                    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
                    field(:entity_id, 4) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:anon_1, 8) {
                        number 32, true
                    }
                    field(:anon_2, 12) {
                        number 32, true
                    }
                }
            }
            field(:beast, 0) {
                compound(:EntityEvent_TData_TBeast) {
                    field(:histfig_id, 0) {
                        number 32, true, -1
                    }
                    def histfig_tg ; df.world.history.figures.binsearch(histfig_id) ; end
                    field(:site_id, 4) {
                        number 32, true, -1
                    }
                    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
                    field(:region_id, 8) {
                        number 32, true, -1
                    }
                    def region_tg ; df.world.world_data.regions[region_id] ; end
                }
            }
            field(:group, 0) {
                compound(:EntityEvent_TData_TGroup) {
                    field(:entity_id, 0) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:site_id, 4) {
                        number 32, true, -1
                    }
                    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
                }
            }
            field(:harass, 0) {
                compound(:EntityEvent_TData_THarass) {
                    field(:entity_id, 0) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:site_id, 4) {
                        number 32, true, -1
                    }
                    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
                    field(:anon_1, 8) {
                        number 32, true
                    }
                }
            }
            field(:flee, 0) {
                compound(:EntityEvent_TData_TFlee) {
                    field(:entity_id, 0) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:site_id, 4) {
                        number 32, true, -1
                    }
                    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
                    field(:anon_1, 8) {
                        number 32, true
                    }
                    field(:anon_2, 12) {
                        number 32, true
                    }
                }
            }
            field(:abandon, 0) {
                compound(:EntityEvent_TData_TAbandon) {
                    field(:entity_id, 0) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:site_id, 4) {
                        number 32, true, -1
                    }
                    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
                    field(:anon_1, 8) {
                        number 32, true
                    }
                }
            }
            field(:reclaimed, 0) {
                compound(:EntityEvent_TData_TReclaimed) {
                    field(:entity_id, 0) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:site_id, 4) {
                        number 32, true, -1
                    }
                    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
                    field(:anon_1, 8) {
                        number 32, true
                    }
                    field(:anon_2, 12) {
                        number 32, true
                    }
                }
            }
            field(:founded, 0) {
                compound(:EntityEvent_TData_TFounded) {
                    field(:entity_id, 0) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:site_id, 4) {
                        number 32, true, -1
                    }
                    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
                    field(:anon_1, 8) {
                        number 32, true
                    }
                    field(:anon_2, 12) {
                        number 32, true
                    }
                }
            }
            field(:reclaiming, 0) {
                compound(:EntityEvent_TData_TReclaiming) {
                    field(:entity_id, 0) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:site_id, 4) {
                        number 32, true, -1
                    }
                    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
                    field(:anon_1, 8) {
                        number 32, true
                    }
                    field(:anon_2, 12) {
                        number 32, true
                    }
                }
            }
            field(:founding, 0) {
                compound(:EntityEvent_TData_TFounding) {
                    field(:entity_id, 0) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:region_id, 4) {
                        number 32, true, -1
                    }
                    def region_tg ; df.world.world_data.regions[region_id] ; end
                    field(:anon_1, 8) {
                        number 32, true
                    }
                    field(:anon_2, 12) {
                        number 32, true
                    }
                }
            }
            field(:leave, 0) {
                compound(:EntityEvent_TData_TLeave) {
                    field(:entity_id, 0) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:site_id, 4) {
                        number 32, true, -1
                    }
                    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
                }
            }
            field(:insurrection, 0) {
                compound(:EntityEvent_TData_TInsurrection) {
                    field(:site_id, 0) {
                        number 32, true, -1
                    }
                    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
                    field(:entity_id, 4) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                }
            }
            field(:insurrection_end, 0) {
                compound(:EntityEvent_TData_TInsurrectionEnd) {
                    field(:site_id, 0) {
                        number 32, true, -1
                    }
                    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
                    field(:entity_id, 4) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:result, 8) {
                        number 32, true
                    }
                }
            }
            field(:succession, 0) {
                compound(:EntityEvent_TData_TSuccession) {
                    field(:histfig_id, 0) {
                        number 32, true, -1
                    }
                    def histfig_tg ; df.world.history.figures.binsearch(histfig_id) ; end
                    field(:anon_1, 4) {
                        number 32, true
                    }
                    field(:entity_id, 8) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:position_assignment_id, 12) {
                        number 32, true
                    }
                }
            }
            field(:claim, 0) {
                compound(:EntityEvent_TData_TClaim) {
                    field(:entity_id, 0) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:site_id, 4) {
                        number 32, true, -1
                    }
                    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
                    field(:anon_1, 8) {
                        number 32, true
                    }
                }
            }
            field(:accept_tribute_offer, 0) {
                compound(:EntityEvent_TData_TAcceptTributeOffer) {
                    field(:entity1_id, 0) {
                        number 32, true, -1
                    }
                    def entity1_tg ; df.world.entities.all.binsearch(entity1_id) ; end
                    field(:anon_1, 4) {
                        number 32, true
                    }
                    field(:entity2_id, 8) {
                        number 32, true, -1
                    }
                    def entity2_tg ; df.world.entities.all.binsearch(entity2_id) ; end
                    field(:anon_2, 12) {
                        number 32, true
                    }
                }
            }
            field(:refuse_tribute_offer, 0) {
                compound(:EntityEvent_TData_TRefuseTributeOffer) {
                    field(:entity1_id, 0) {
                        number 32, true, -1
                    }
                    def entity1_tg ; df.world.entities.all.binsearch(entity1_id) ; end
                    field(:anon_1, 4) {
                        number 32, true
                    }
                    field(:entity2_id, 8) {
                        number 32, true, -1
                    }
                    def entity2_tg ; df.world.entities.all.binsearch(entity2_id) ; end
                    field(:anon_2, 12) {
                        number 32, true
                    }
                }
            }
            field(:accept_tribute_demand, 0) {
                compound(:EntityEvent_TData_TAcceptTributeDemand) {
                    field(:entity1_id, 0) {
                        number 32, true, -1
                    }
                    def entity1_tg ; df.world.entities.all.binsearch(entity1_id) ; end
                    field(:anon_1, 4) {
                        number 32, true
                    }
                    field(:entity2_id, 8) {
                        number 32, true, -1
                    }
                    def entity2_tg ; df.world.entities.all.binsearch(entity2_id) ; end
                    field(:anon_2, 12) {
                        number 32, true
                    }
                }
            }
            field(:refuse_tribute_demand, 0) {
                compound(:EntityEvent_TData_TRefuseTributeDemand) {
                    field(:entity1_id, 0) {
                        number 32, true, -1
                    }
                    def entity1_tg ; df.world.entities.all.binsearch(entity1_id) ; end
                    field(:anon_1, 4) {
                        number 32, true
                    }
                    field(:entity2_id, 8) {
                        number 32, true, -1
                    }
                    def entity2_tg ; df.world.entities.all.binsearch(entity2_id) ; end
                    field(:anon_2, 12) {
                        number 32, true
                    }
                }
            }
            field(:accept_peace_offer, 0) {
                compound(:EntityEvent_TData_TAcceptPeaceOffer) {
                    field(:entity1_id, 0) {
                        number 32, true, -1
                    }
                    def entity1_tg ; df.world.entities.all.binsearch(entity1_id) ; end
                    field(:anon_1, 4) {
                        number 32, true
                    }
                    field(:entity2_id, 8) {
                        number 32, true, -1
                    }
                    def entity2_tg ; df.world.entities.all.binsearch(entity2_id) ; end
                    field(:anon_2, 12) {
                        number 32, true
                    }
                }
            }
            field(:refuse_peace_offer, 0) {
                compound(:EntityEvent_TData_TRefusePeaceOffer) {
                    field(:entity1_id, 0) {
                        number 32, true, -1
                    }
                    def entity1_tg ; df.world.entities.all.binsearch(entity1_id) ; end
                    field(:anon_1, 4) {
                        number 32, true
                    }
                    field(:entity2_id, 8) {
                        number 32, true, -1
                    }
                    def entity2_tg ; df.world.entities.all.binsearch(entity2_id) ; end
                    field(:anon_2, 12) {
                        number 32, true
                    }
                }
            }
            field(:cease_tribute_offer, 0) {
                compound(:EntityEvent_TData_TCeaseTributeOffer) {
                    field(:entity1_id, 0) {
                        number 32, true, -1
                    }
                    def entity1_tg ; df.world.entities.all.binsearch(entity1_id) ; end
                    field(:anon_1, 4) {
                        number 32, true
                    }
                    field(:entity2_id, 8) {
                        number 32, true, -1
                    }
                    def entity2_tg ; df.world.entities.all.binsearch(entity2_id) ; end
                    field(:anon_2, 12) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:year, 16) {
        number 32, true
    }
    field(:year_tick, 20) {
        number 32, true
    }
    field(:anon_1, 24) {
        number 32, true
    }
    field(:anon_2, 28) {
        number 32, true
    }
    field(:anon_3, 32) {
        number 32, true
    }
    field(:type, 36) {
        number 32, true, nil, EntityEventType
    }
end

class EntityPopulation < MemHack::Compound
    sizeof 192

    field(:name, 0) {
        global :LanguageName
    }
    field(:races, 108) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    def races_tg ; races.map { |i| df.world.raws.creatures.all[i] } ; end
    field(:counts, 124) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk3, 140) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk4, 156) {
        stl_vector(4) {
            pointer {
                global :EntityPopulationUnk4
            }
        }
    }
    field(:unk5, 172) {
        number 32, true
    }
    field(:unk6, 176) {
        number 32, true
    }
    field(:id, 180) {
        number 32, true
    }
    field(:flags, 184) {
        number 32, true
    }
    field(:civ_id, 188) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ_id) ; end
end

class EntityPopulationUnk4 < MemHack::Compound
    sizeof 48

    field(:anon_1, 0) {
        stl_vector(4) {
            pointer {
                compound(:EntityPopulationUnk4_TAnon1) {
                    sizeof 12

                    field(:idx, 0) {
                        number 32, true
                    }
                    field(:unk1, 4) {
                        number 32, true
                    }
                    field(:unk2, 8) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:anon_2, 16) {
        stl_vector
    }
    field(:anon_3, 32) {
        stl_vector(4) {
            pointer {
                compound(:EntityPopulationUnk4_TAnon3) {
                    sizeof 8

                    field(:idx, 0) {
                        number 32, true
                    }
                    field(:unk1, 4) {
                        number 32, true
                    }
                }
            }
        }
    }
end

class EntityPosition < MemHack::Compound
    sizeof 716

    field(:code, 0) {
        stl_string
    }
    field(:id, 28) {
        number 32, true
    }
    field(:flags, 32) {
        df_flagarray(EntityPositionFlags)
    }
    field(:allowed_creature, 40) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def allowed_creature_tg ; allowed_creature.map { |i| df.world.raws.creatures.all[i] } ; end
    field(:allowed_class, 56) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:rejected_creature, 72) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def rejected_creature_tg ; rejected_creature.map { |i| df.world.raws.creatures.all[i] } ; end
    field(:rejected_class, 88) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:name, 104) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:name_female, 160) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:name_male, 216) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:spouse, 272) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:spouse_female, 328) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:spouse_male, 384) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:squad, 440) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:land_name, 496) {
        stl_string
    }
    field(:squad_size, 524) {
        number 16, true
    }
    field(:commander_id, 528) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:commander_civ, 544) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def commander_civ_tg ; commander_civ.map { |i| df.world.entities.all.binsearch(i) } ; end
    field(:commander_types, 560) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:land_holder, 576) {
        number 16, true
    }
    field(:requires_population, 578) {
        number 16, true
    }
    field(:anon_1, 580) {
        number 16, true
    }
    field(:precedence, 584) {
        number 32, true, 30001
    }
    field(:replaced_by, 588) {
        number 32, true, -1
    }
    field(:number, 592) {
        number 16, true, 1
    }
    field(:appointed_by, 596) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:appointed_by_civ, 612) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def appointed_by_civ_tg ; appointed_by_civ.map { |i| df.world.entities.all.binsearch(i) } ; end
    field(:succession_by_position, 628) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:responsibilities, 644) {
        static_array(25, 1, EntityPositionResponsibility) {
            number 8, true, nil, BooleanEnum
        }
    }
    field(:color, 670) {
        static_array(3, 2) {
            number 16, true
        }
    }
    field(:required_boxes, 676) {
        number 32, true
    }
    field(:required_cabinets, 680) {
        number 32, true
    }
    field(:required_racks, 684) {
        number 32, true
    }
    field(:required_stands, 688) {
        number 32, true
    }
    field(:required_office, 692) {
        number 32, true
    }
    field(:required_bedroom, 696) {
        number 32, true
    }
    field(:required_dining, 700) {
        number 32, true
    }
    field(:required_tomb, 704) {
        number 32, true
    }
    field(:mandate_max, 708) {
        number 32, true
    }
    field(:demand_max, 712) {
        number 32, true
    }
end

class EntityPositionAssignment < MemHack::Compound
    sizeof 60

    field(:id, 0) {
        number 32, true
    }
    field(:histfig, 4) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:histfig2, 8) {
        number 32, true, -1
    }
    def histfig2_tg ; df.world.history.figures.binsearch(histfig2) ; end
    field(:position_id, 12) {
        number 32, true, -1
    }
    field(:flags, 16) {
        df_flagarray
    }
    field(:squad_id, 24) {
        number 32, true, -1
    }
    def squad_tg ; df.world.squads.all.binsearch(squad_id) ; end
    field(:anon_1, 28) {
        number 32, true, -1
    }
    field(:anon_2, 32) {
        number 32, true, -1
    }
    field(:anon_3, 36) {
        number 32, true, -1
    }
    field(:anon_4, 40) {
        number 32, true, -1
    }
    field(:anon_5, 44) {
        stl_vector
    }
end

class EntityPositionRaw < MemHack::Compound
    sizeof 820

    field(:code, 0) {
        stl_string
    }
    field(:id, 28) {
        number 32, true
    }
    field(:flags, 32) {
        df_flagarray(EntityPositionRawFlags)
    }
    field(:allowed_creature_str, 40) {
        static_array(2, 16) {
            stl_vector(4) {
                pointer {
                    stl_string
                }
            }
        }
    }
    field(:allowed_creature, 72) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def allowed_creature_tg ; allowed_creature.map { |i| df.world.raws.creatures.all[i] } ; end
    field(:allowed_class, 88) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:rejected_creature_str, 104) {
        static_array(2, 16) {
            stl_vector(4) {
                pointer {
                    stl_string
                }
            }
        }
    }
    field(:rejected_creature, 136) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def rejected_creature_tg ; rejected_creature.map { |i| df.world.raws.creatures.all[i] } ; end
    field(:rejected_class, 152) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:name, 168) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:name_female, 224) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:name_male, 280) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:spouse, 336) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:spouse_female, 392) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:spouse_male, 448) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:squad, 504) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:land_name, 560) {
        stl_string
    }
    field(:squad_size, 588) {
        number 16, true
    }
    field(:commander_str, 592) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:commander_id, 608) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:commander_types, 624) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:land_holder, 640) {
        number 16, true
    }
    field(:number, 642) {
        number 16, true
    }
    field(:execution_skill, 644) {
        number 16, true, nil, JobSkill
    }
    field(:precedence, 648) {
        number 32, true
    }
    field(:replaced_by_str, 652) {
        stl_string
    }
    field(:replaced_by, 680) {
        number 32, true
    }
    field(:appointed_by_str, 684) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:appointed_by, 700) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:succession_by_position_str, 716) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:succession_by_position, 732) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:responsibilities, 748) {
        static_array(25, 1, EntityPositionResponsibility) {
            number 8, true, nil, BooleanEnum
        }
    }
    field(:color, 774) {
        static_array(3, 2) {
            number 16, true
        }
    }
    field(:required_boxes, 780) {
        number 32, true
    }
    field(:required_cabinets, 784) {
        number 32, true
    }
    field(:required_racks, 788) {
        number 32, true
    }
    field(:required_stands, 792) {
        number 32, true
    }
    field(:required_office, 796) {
        number 32, true
    }
    field(:required_bedroom, 800) {
        number 32, true
    }
    field(:required_dining, 804) {
        number 32, true
    }
    field(:required_tomb, 808) {
        number 32, true
    }
    field(:mandate_max, 812) {
        number 32, true
    }
    field(:demand_max, 816) {
        number 32, true
    }
end

class EntityRaw < MemHack::Compound
    sizeof 8588

    field(:code, 0) {
        stl_string
    }
    field(:anon_1, 28) {
        number 32, true
    }
    field(:anon_2, 32) {
        stl_vector
    }
    field(:creature_ids, 48) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    def creature_tgs ; creature_ids.map { |i| df.world.raws.creatures.all[i] } ; end
    field(:creatures, 64) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:equipment, 80) {
        compound(:EntityRaw_TEquipment) {
            field(:digger_id, 0) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def digger_tg ; digger_id.map { |i| df.world.raws.itemdefs.weapons[i] } ; end
            field(:weapon_id, 16) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def weapon_tg ; weapon_id.map { |i| df.world.raws.itemdefs.weapons[i] } ; end
            field(:armor_id, 32) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def armor_tg ; armor_id.map { |i| df.world.raws.itemdefs.armor[i] } ; end
            field(:ammo_id, 48) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def ammo_tg ; ammo_id.map { |i| df.world.raws.itemdefs.ammo[i] } ; end
            field(:helm_id, 64) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def helm_tg ; helm_id.map { |i| df.world.raws.itemdefs.helms[i] } ; end
            field(:gloves_id, 80) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def gloves_tg ; gloves_id.map { |i| df.world.raws.itemdefs.gloves[i] } ; end
            field(:shoes_id, 96) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def shoes_tg ; shoes_id.map { |i| df.world.raws.itemdefs.shoes[i] } ; end
            field(:pants_id, 112) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def pants_tg ; pants_id.map { |i| df.world.raws.itemdefs.pants[i] } ; end
            field(:shield_id, 128) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def shield_tg ; shield_id.map { |i| df.world.raws.itemdefs.shields[i] } ; end
            field(:trapcomp_id, 144) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def trapcomp_tg ; trapcomp_id.map { |i| df.world.raws.itemdefs.trapcomps[i] } ; end
            field(:toy_id, 160) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def toy_tg ; toy_id.map { |i| df.world.raws.itemdefs.toys[i] } ; end
            field(:instrument_id, 176) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def instrument_tg ; instrument_id.map { |i| df.world.raws.itemdefs.instruments[i] } ; end
            field(:tool_id, 192) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def tool_tg ; tool_id.map { |i| df.world.raws.itemdefs.tools[i] } ; end
            field(:siegeammo_id, 208) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def siegeammo_tg ; siegeammo_id.map { |i| df.world.raws.itemdefs.siege_ammo[i] } ; end
            field(:armor_rarity, 224) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:helm_rarity, 240) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:gloves_rarity, 256) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:shoes_rarity, 272) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:pants_rarity, 288) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:digger_str, 304) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:weapon_str, 320) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:armor_str, 336) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:ammo_str, 352) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:helm_str, 368) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:gloves_str, 384) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:shoes_str, 400) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:pants_str, 416) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:shield_str, 432) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:trapcomp_str, 448) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:toy_str, 464) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:instrument_str, 480) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:siegeammo_str, 496) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:tool_str, 512) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
        }
    }
    field(:currency_value, 608) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:flags, 624) {
        df_flagarray(EntityRawFlags)
    }
    field(:translation, 632) {
        stl_string
    }
    field(:symbols, 660) {
        compound(:EntityRaw_TSymbols) {
            field(:symbols1, 0) {
                static_array(14, 192) {
                    global :LanguageWordTable
                }
            }
            field(:symbols2, 2688) {
                static_array(14, 192) {
                    global :LanguageWordTable
                }
            }
            field(:select_symbol, 5376) {
                static_array(14, 16) {
                    stl_vector(4) {
                        pointer {
                            stl_string
                        }
                    }
                }
            }
            field(:subselect_symbol, 5600) {
                static_array(14, 16) {
                    stl_vector(4) {
                        pointer {
                            stl_string
                        }
                    }
                }
            }
            field(:cull_symbol, 5824) {
                static_array(14, 16) {
                    stl_vector(4) {
                        pointer {
                            stl_string
                        }
                    }
                }
            }
        }
    }
    field(:sphere_alignment, 6708) {
        static_array(130, 4, SphereType) {
            number 32, true
        }
    }
    field(:art_facet_modifier, 7228) {
        static_array(4, 4, ArtFacetType) {
            number 32, true
        }
    }
    field(:art_image_element_modifier, 7244) {
        static_array(5, 4, ArtImageElementType) {
            number 32, true
        }
    }
    field(:item_improvement_modifier, 7264) {
        static_array(11, 4, ImprovementType) {
            number 32, true
        }
    }
    field(:adventure_tier, 7308) {
        number 32, true
    }
    field(:friendly_color, 7312) {
        static_array(3, 2) {
            number 16, true
        }
    }
    field(:default_site_type, 7320) {
        number 32, true
    }
    field(:likes_site, 7324) {
        static_array(11, 1, SiteType) {
            number 8, true
        }
    }
    field(:tolerates_site, 7335) {
        static_array(11, 1, SiteType) {
            number 8, true
        }
    }
    field(:biome_support, 7348) {
        static_array(51, 4, BiomeType) {
            number 32, true
        }
    }
    field(:start_biome, 7552) {
        static_array(51, 1, BiomeType) {
            number 8, true
        }
    }
    field(:settlement_biome, 7603) {
        static_array(51, 1, BiomeType) {
            number 8, true
        }
    }
    field(:active_season, 7654) {
        static_array(4, 1) {
            number 8, true
        }
    }
    field(:progress_trigger, 7658) {
        compound(:EntityRaw_TProgressTrigger) {
            field(:population, 0) {
                number 16, true
            }
            field(:production, 2) {
                number 16, true
            }
            field(:trade, 4) {
                number 16, true
            }
            field(:pop_siege, 6) {
                number 16, true
            }
            field(:prod_siege, 8) {
                number 16, true
            }
            field(:trade_siege, 10) {
                number 16, true
            }
        }
    }
    field(:ethic, 7670) {
        static_array(22, 2, EthicType) {
            number 16, true, nil, EthicResponse
        }
    }
    field(:values, 7716) {
        static_array(32, 4, ValueType) {
            number 32, true
        }
    }
    field(:max_site_pop_number, 7844) {
        number 32, true
    }
    field(:max_pop_number, 7848) {
        number 32, true
    }
    field(:max_starting_civ_number, 7852) {
        number 32, true
    }
    field(:religion, 7856) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:religion_sphere, 7872) {
        stl_vector(2) {
            number 16, true, nil, SphereType
        }
    }
    field(:jobs, 7888) {
        compound(:EntityRaw_TJobs) {
            field(:permitted_job, 0) {
                static_array(112, 1, Profession) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:permitted_labor, 112) {
                static_array(94, 1, UnitLabor) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:permitted_skill, 206) {
                static_array(118, 1, JobSkill) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:world_construction, 324) {
                static_array(4, 1, WorldConstructionType) {
                    number 8, true, nil, BooleanEnum
                }
            }
        }
    }
    field(:positions, 8216) {
        stl_vector(4) {
            pointer {
                global :EntityPositionRaw
            }
        }
    }
    field(:variable_positions, 8232) {
        static_array(25, 1, EntityPositionResponsibility) {
            number 8, true
        }
    }
    field(:site_variable_positions, 8257) {
        static_array(25, 1, EntityPositionResponsibility) {
            number 8, true
        }
    }
    field(:tissue_styles, 8284) {
        stl_vector(4) {
            pointer {
                compound(:EntityRaw_TTissueStyles) {
                    sizeof 52

                    field(:name, 0) {
                        stl_string
                    }
                    field(:preferred_shapings, 28) {
                        stl_vector(2) {
                            number 16, true
                        }
                    }
                    field(:maintain_length_min, 44) {
                        number 32, true
                    }
                    field(:maintain_length_max, 48) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:workshops, 8300) {
        compound(:EntityRaw_TWorkshops) {
            field(:permitted_building_str, 0) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:permitted_building_id, 16) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def permitted_building_tg ; permitted_building_id.map { |i| df.world.raws.buildings.all.binsearch(i) } ; end
            field(:permitted_reaction_str, 32) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:permitted_reaction_id, 48) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def permitted_reaction_tg ; permitted_reaction_id.map { |i| df.world.raws.reactions[i] } ; end
        }
    }
    field(:land_holder_trigger, 8364) {
        compound(:EntityRaw_TLandHolderTrigger) {
            field(:num, 0) {
                static_array(10, 4) {
                    number 32, true
                }
            }
            field(:population, 40) {
                static_array(10, 4) {
                    number 32, true
                }
            }
            field(:wealth, 80) {
                static_array(10, 4) {
                    number 32, true
                }
            }
        }
    }
    field(:banditry, 8484) {
        number 32, true
    }
    field(:gem_shapes_str, 8488) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:stone_shapes_str, 8504) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:gem_shapes, 8520) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def gem_shapes_tg ; gem_shapes.map { |i| df.world.raws.language.shapes[i] } ; end
    field(:stone_shapes, 8536) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def stone_shapes_tg ; stone_shapes.map { |i| df.world.raws.language.shapes[i] } ; end
    field(:source_hfid, 8552) {
        number 32, true, -1
    }
    def source_hfid_tg ; df.world.history.figures.binsearch(source_hfid) ; end
    field(:currency_str1, 8556) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:currency_str2, 8572) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
end

class EntityRecipe < MemHack::Compound
    sizeof 68

    field(:subtype, 0) {
        number 16, true, -1
    }
    def subtype_tg ; df.world.raws.itemdefs.food[subtype] ; end
    field(:item_types, 4) {
        stl_vector(2) {
            number 16, true, nil, ItemType
        }
    }
    field(:item_subtypes, 20) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:mat_types, 36) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:mat_indices, 52) {
        stl_vector(2) {
            number 16, true
        }
    }
end

class EntitySellPrices < MemHack::Compound
    sizeof 1716

    field(:items, 0) {
        pointer {
            global :EntitySellRequests
        }
    }
    field(:price, 4) {
        static_array(107, 16, EntitySellCategory) {
            stl_vector(4) {
                number 32, true
            }
        }
    }
end

class EntitySellRequests < MemHack::Compound
    sizeof 1712

    field(:priority, 0) {
        static_array(107, 16, EntitySellCategory) {
            stl_vector(1) {
                number 8, true
            }
        }
    }
end

class EntitySiteLink < MemHack::Compound
    sizeof 68

    field(:anon_1, 0) {
        number 32, true
    }
    field(:anon_2, 4) {
        number 32, true
    }
    field(:anon_3, 8) {
        number 32, true
    }
    field(:anon_4, 12) {
        number 32, true
    }
    field(:anon_5, 16) {
        number 32, true
    }
    field(:anon_6, 20) {
        number 32, true
    }
    field(:anon_7, 24) {
        number 32, true
    }
    field(:anon_8, 28) {
        number 32, true
    }
    field(:anon_9, 32) {
        number 32, true, 100
    }
    field(:anon_10, 36) {
        number 32, true
    }
    field(:anon_11, 40) {
        number 32, true
    }
    field(:anon_12, 44) {
        stl_vector(4) {
            pointer {
                compound(:EntitySiteLink_TAnon12) {
                    sizeof 8

                    field(:anon_1, 0) {
                        number 32, true, -1
                    }
                    field(:anon_2, 4) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:anon_13, 60) {
        number 32, true
    }
    field(:anon_14, 64) {
        number 32, true
    }
end

class EntityTissueStyle < MemHack::Compound
    sizeof 72

    field(:name, 0) {
        stl_string
    }
    field(:preferred_shapings, 28) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_1, 44) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:maintain_length_min, 60) {
        number 32, true
    }
    field(:maintain_length_max, 64) {
        number 32, true
    }
    field(:id, 68) {
        number 32, true
    }
end

class EntityUniform < MemHack::Compound
    sizeof 376

    field(:id, 0) {
        number 32, true
    }
    field(:unk_4, 4) {
        number 16, true
    }
    field(:uniform_item_types, 8) {
        static_array(7, 16, UniformCategory) {
            stl_vector(2) {
                number 16, true, nil, ItemType
            }
        }
    }
    field(:uniform_item_subtypes, 120) {
        static_array(7, 16, UniformCategory) {
            stl_vector(2) {
                number 16, true, -1
            }
        }
    }
    field(:uniform_item_info, 232) {
        static_array(7, 16, UniformCategory) {
            stl_vector(4) {
                pointer {
                    global :EntityUniformItem
                }
            }
        }
    }
    field(:name, 344) {
        stl_string
    }
    field(:flags, 372) {
        global :UniformFlags
    }
end

class EntityUniformItem < MemHack::Compound
    sizeof 32

    field(:random_dye, 0) {
        number 8, true
    }
    field(:armorlevel, 1) {
        number 8, true
    }
    field(:item_color, 2) {
        number 16, true, -1
    }
    def item_color_tg ; df.world.raws.language.colors[item_color] ; end
    field(:art_image_id, 4) {
        number 32, true
    }
    field(:art_image_subid, 8) {
        number 16, true
    }
    field(:image_thread_color, 10) {
        number 16, true, -1
    }
    def image_thread_color_tg ; df.world.raws.language.colors[image_thread_color] ; end
    field(:image_material_class, 12) {
        number 16, true, nil, EntityMaterialCategory
    }
    field(:maker_race, 14) {
        number 16, true
    }
    field(:indiv_choice, 16) {
        global :UniformIndivChoice
    }
    field(:mattype, 20) {
        number 16, true, -1
    }
    field(:matindex, 24) {
        number 32, true
    }
    field(:material_class, 28) {
        number 16, true, nil, EntityMaterialCategory
    }
end

class Feature < MemHack::Compound
    sizeof 92

    rtti_classname :featurest

    field(:population, 4) {
        stl_vector(4) {
            pointer {
                global :WorldPopulation
            }
        }
    }
    field(:anon_1, 20) {
        number 32, true
    }
    field(:anon_2, 24) {
        number 16, true
    }
    field(:embark_pos, 28) {
        global :Coord2dPath
    }
    field(:min_map_z, 60) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:max_map_z, 76) {
        stl_vector(2) {
            number 16, true
        }
    }
    def getType()
        FeatureType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(file)
        DFHack.vmethod_call(self, 4, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 8, file, loadversion) ; nil
    end
end

class FeatureAlteration < MemHack::Compound
    sizeof 4

    rtti_classname :feature_alterationst

    def getType()
        FeatureAlterationType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(file)
        DFHack.vmethod_call(self, 4, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 8, file, loadversion) ; nil
    end
end

class FeatureAlterationNewLavaFillZst < FeatureAlteration
    sizeof 8

    rtti_classname :feature_alteration_new_lava_fill_zst

    field(:magma_fill_z, 4) {
        number 32, true
    }
end

class FeatureAlterationNewPopMaxst < FeatureAlteration
    sizeof 12

    rtti_classname :feature_alteration_new_pop_maxst

    field(:anon_1, 4) {
        number 32, true
    }
    field(:anon_2, 8) {
        number 32, true
    }
end

class FeatureCavest < Feature
    sizeof 92

    rtti_classname :feature_cavest

end

class FeatureDeepSpecialTubest < Feature
    sizeof 92

    rtti_classname :feature_deep_special_tubest

end

class FeatureDeepSurfacePortalst < Feature
    sizeof 92

    rtti_classname :feature_deep_surface_portalst

end

class FeatureInit < MemHack::Compound
    sizeof 40

    rtti_classname :feature_initst

    field(:flags, 4) {
        df_flagarray(FeatureInitFlags)
    }
    field(:alterations, 12) {
        stl_vector(4) {
            pointer {
                global :FeatureAlteration
            }
        }
    }
    field(:start_x, 28) {
        number 16, true
    }
    field(:start_y, 30) {
        number 16, true
    }
    field(:end_x, 32) {
        number 16, true
    }
    field(:end_y, 34) {
        number 16, true
    }
    field(:start_depth, 36) {
        number 16, true
    }
    field(:end_depth, 38) {
        number 16, true
    }
    def getType()
        FeatureType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(file, arg1)
        DFHack.vmethod_call(self, 4, file, arg1) ; nil
    end
    def read_file(file, loadversion, arg2)
        DFHack.vmethod_call(self, 8, file, loadversion, arg2) ; nil
    end
    def createFeature()
        ptr = DFHack.vmethod_call(self, 12)
        class << self
            global :Feature
        end._at(ptr) if ptr != 0
    end
    def recreateFeature()
        ptr = DFHack.vmethod_call(self, 16)
        class << self
            global :Feature
        end._at(ptr) if ptr != 0
    end
    def destroyFeature()
        DFHack.vmethod_call(self, 20) ; nil
    end
    def getFeature()
        ptr = DFHack.vmethod_call(self, 24)
        class << self
            global :Feature
        end._at(ptr) if ptr != 0
    end
    def getMaterial(mat_type, mat_index)
        DFHack.vmethod_call(self, 32, mat_type, mat_index) ; nil
    end
    def getColor(foreground, background, bright)
        DFHack.vmethod_call(self, 52, foreground, background, bright) ; nil
    end
    def getName(name)
        DFHack.vmethod_call(self, 56, name) ; nil
    end
    def isWater()
        val = DFHack.vmethod_call(self, 60)
        (val & 1) != 0
    end
    def isSubterranean()
        val = DFHack.vmethod_call(self, 64)
        (val & 1) != 0
    end
    def isMagma()
        val = DFHack.vmethod_call(self, 68)
        (val & 1) != 0
    end
    def isChasm()
        val = DFHack.vmethod_call(self, 72)
        (val & 1) != 0
    end
    def isLayer()
        val = DFHack.vmethod_call(self, 76)
        (val & 1) != 0
    end
    def getLayer()
        val = DFHack.vmethod_call(self, 84)
    end
end

class FeatureInitCavest < FeatureInit
    sizeof 44

    rtti_classname :feature_init_cavest

    field(:feature, 40) {
        pointer {
            global :FeatureCavest
        }
    }
end

class FeatureInitDeepSpecialTubest < FeatureInit
    sizeof 52

    rtti_classname :feature_init_deep_special_tubest

    field(:mat_type, 40) {
        number 16, true, -1
    }
    field(:mat_index, 44) {
        number 32, true
    }
    field(:feature, 48) {
        pointer {
            global :FeatureDeepSpecialTubest
        }
    }
end

class FeatureInitDeepSurfacePortalst < FeatureInit
    sizeof 52

    rtti_classname :feature_init_deep_surface_portalst

    field(:mat_type, 40) {
        number 16, true, -1
    }
    field(:mat_index, 44) {
        number 32, true
    }
    field(:feature, 48) {
        pointer {
            global :FeatureDeepSurfacePortalst
        }
    }
end

class FeatureInitMagmaCoreFromLayerst < FeatureInit
    sizeof 48

    rtti_classname :feature_init_magma_core_from_layerst

    field(:layer, 40) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:feature, 44) {
        pointer {
            global :FeatureMagmaCoreFromLayerst
        }
    }
end

class FeatureInitMagmaPoolst < FeatureInit
    sizeof 44

    rtti_classname :feature_init_magma_poolst

    field(:feature, 40) {
        pointer {
            global :FeatureMagmaPoolst
        }
    }
end

class FeatureInitOutdoorRiverst < FeatureInit
    sizeof 44

    rtti_classname :feature_init_outdoor_riverst

    field(:feature, 40) {
        pointer {
            global :FeatureOutdoorRiverst
        }
    }
end

class FeatureInitPitst < FeatureInit
    sizeof 44

    rtti_classname :feature_init_pitst

    field(:feature, 40) {
        pointer {
            global :FeaturePitst
        }
    }
end

class FeatureInitSubterraneanFromLayerst < FeatureInit
    sizeof 48

    rtti_classname :feature_init_subterranean_from_layerst

    field(:layer, 40) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:feature, 44) {
        pointer {
            global :FeatureSubterraneanFromLayerst
        }
    }
end

class FeatureInitUnderworldFromLayerst < FeatureInit
    sizeof 56

    rtti_classname :feature_init_underworld_from_layerst

    field(:layer, 40) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:mat_type, 44) {
        number 16, true, -1
    }
    field(:mat_index, 48) {
        number 32, true
    }
    field(:feature, 52) {
        pointer {
            global :FeatureUnderworldFromLayerst
        }
    }
end

class FeatureInitVolcanost < FeatureInit
    sizeof 44

    rtti_classname :feature_init_volcanost

    field(:feature, 40) {
        pointer {
            global :FeatureVolcanost
        }
    }
end

class FeatureMagmaCoreFromLayerst < Feature
    sizeof 92

    rtti_classname :feature_magma_core_from_layerst

end

class FeatureMagmaPoolst < Feature
    sizeof 96

    rtti_classname :feature_magma_poolst

    field(:magma_fill_z, 92) {
        number 32, true
    }
end

class FeatureOutdoorRiverst < Feature
    sizeof 92

    rtti_classname :feature_outdoor_riverst

end

class FeaturePitst < Feature
    sizeof 92

    rtti_classname :feature_pitst

end

class FeatureSubterraneanFromLayerst < Feature
    sizeof 92

    rtti_classname :feature_subterranean_from_layerst

end

class FeatureUnderworldFromLayerst < Feature
    sizeof 92

    rtti_classname :feature_underworld_from_layerst

end

class FeatureVolcanost < Feature
    sizeof 96

    rtti_classname :feature_volcanost

    field(:magma_fill_z, 92) {
        number 32, true
    }
end

class FileCompressorst < MemHack::Compound
    sizeof 224

    field(:compressed, 0) {
        number 8, true, nil, BooleanEnum
    }
    field(:f, 8) {
    }
    field(:in_buffer, 192) {
        pointer_ary(1) {
            number 8, false
        }
    }
    field(:in_buffersize, 196) {
        number 32, true
    }
    field(:in_buffer_amount_loaded, 200) {
        number 32, true
    }
    field(:in_buffer_position, 204) {
        number 32, true
    }
    field(:out_buffer, 208) {
        pointer_ary(1) {
            number 8, false
        }
    }
    field(:out_buffersize, 212) {
        number 32, true
    }
    field(:out_buffer_amount_written, 216) {
        number 32, true
    }
end

class Fire < MemHack::Compound
    sizeof 16

    field(:pos, 0) {
        global :Coord
    }
    field(:timer, 6) {
        number 16, true
    }
    field(:temperature, 8) {
        number 16, false
    }
    field(:unk1, 10) {
        number 16, false
    }
    field(:unk2, 12) {
        number 16, false
    }
    field(:unk3, 14) {
        number 16, false
    }
end

class FlowGuide < MemHack::Compound
    sizeof 12

    rtti_classname :flow_guidest

    field(:id, 4) {
        number 32, true
    }
    field(:unk_8, 8) {
        number 8, true
    }
    def getType()
        FlowGuideType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(file)
        DFHack.vmethod_call(self, 8, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 12, file, loadversion) ; nil
    end
end

class FlowGuideItemCloudst < FlowGuide
    sizeof 124

    rtti_classname :flow_guide_item_cloudst

    field(:item_type, 12) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 14) {
        number 16, true, -1
    }
    field(:mattype, 16) {
        number 16, true, -1
    }
    field(:matindex, 20) {
        number 32, true
    }
    field(:unk_18, 24) {
        number 32, true
    }
    field(:unk_1c, 28) {
        number 32, true
    }
    field(:anon_1, 32) {
        static_array(15, 6) {
            global :Coord
        }
    }
end

class FlowGuideTrailingFlowst < FlowGuide
    sizeof 104

    rtti_classname :flow_guide_trailing_flowst

    field(:anon_1, 12) {
        static_array(15, 6) {
            global :Coord
        }
    }
end

class FlowInfo < MemHack::Compound
    sizeof 28

    field(:type, 0) {
        number 16, true, nil, FlowType
    }
    field(:mat_type, 2) {
        number 16, true, -1
    }
    field(:mat_index, 4) {
        number 32, true, -1
    }
    field(:density, 8) {
        number 16, true
    }
    field(:pos, 10) {
        global :Coord
    }
    field(:dest, 16) {
        global :Coord
    }
    field(:expanding, 22) {
        number 8, true, 1, BooleanEnum
    }
    field(:reuse, 23) {
        number 8, true, nil, BooleanEnum
    }
    field(:guide_id, 24) {
        number 32, true, -1
    }
    def guide_tg ; df.world.flow_guides.all.binsearch(guide_id) ; end
end

class FlowReusePool < MemHack::Compound
    sizeof 8

    field(:reuse_idx, 0) {
        number 32, true, -1
    }
    field(:flags, 4) {
        compound(:FlowReusePool_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:active, 0) { bit 0 }
        }
    }
end

class GaitInfo < MemHack::Compound
    sizeof 32

    field(:action_string_idx, 0) {
        number 32, true, -1
    }
    def action_string_tgx ; df.world.raws.creatures.action_strings[action_string_idx] ; end
    field(:full_speed, 4) {
        number 32, true
    }
    field(:buildup_time, 8) {
        number 32, true
    }
    field(:turn_max, 12) {
        number 32, true
    }
    field(:start_speed, 16) {
        number 32, true
    }
    field(:energy_use, 20) {
        number 32, true
    }
    field(:flags, 24) {
        compound(:GaitInfo_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:layers_slow, 0) { bit 0 }
            field(:strength, 0) { bit 1 }
            field(:agility, 0) { bit 2 }
        }
    }
    field(:stealth_slows, 28) {
        number 32, true
    }
end

class GateFlags < MemHack::Compound
    field(:_whole, 0) {
        number 16, false
    }
    field(:closed, 0) { bit 0 }
    field(:closing, 0) { bit 1 }
    field(:opening, 0) { bit 2 }
    field(:collapsing, 0) { bit 3 }
    field(:has_support, 0) { bit 4 }
end

class GeneralRef < MemHack::Compound
    sizeof 4

    rtti_classname :general_refst

    def write_file(file)
        DFHack.vmethod_call(self, 0, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 4, file, loadversion) ; nil
    end
    def getType()
        GeneralRefType.sym(DFHack.vmethod_call(self, 8))
    end
    def getItem()
        ptr = DFHack.vmethod_call(self, 12)
        class << self
            global :Item
        end._at(ptr) if ptr != 0
    end
    def getUnit()
        ptr = DFHack.vmethod_call(self, 16)
        class << self
            global :Unit
        end._at(ptr) if ptr != 0
    end
    def getProjectile()
        ptr = DFHack.vmethod_call(self, 20)
        class << self
            global :Projectile
        end._at(ptr) if ptr != 0
    end
    def getBuilding()
        ptr = DFHack.vmethod_call(self, 24)
        class << self
            global :Building
        end._at(ptr) if ptr != 0
    end
    def getEntity()
        ptr = DFHack.vmethod_call(self, 28)
        class << self
            global :HistoricalEntity
        end._at(ptr) if ptr != 0
    end
    def getArtifact()
        ptr = DFHack.vmethod_call(self, 32)
        class << self
            global :ArtifactRecord
        end._at(ptr) if ptr != 0
    end
    def getNemesis()
        ptr = DFHack.vmethod_call(self, 36)
        class << self
            global :NemesisRecord
        end._at(ptr) if ptr != 0
    end
    def setID(arg0)
        DFHack.vmethod_call(self, 40, arg0) ; nil
    end
    def getID()
        val = DFHack.vmethod_call(self, 44)
    end
    def setLocation(arg0, arg1, arg2)
        DFHack.vmethod_call(self, 48, arg0, arg1, arg2) ; nil
    end
    def getLocation(arg0, arg1, arg2)
        DFHack.vmethod_call(self, 52, arg0, arg1, arg2) ; nil
    end
    def clone()
        ptr = DFHack.vmethod_call(self, 60)
        class << self
            global :GeneralRef
        end._at(ptr) if ptr != 0
    end
    def getSecretName(str)
        DFHack.vmethod_call(self, 68, str) ; nil
    end
end

class GeneralRefAbstractBuildingst < GeneralRef
    sizeof 12

    rtti_classname :general_ref_abstract_buildingst

    field(:site_id, 4) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
    field(:building_id, 8) {
        number 32, true, -1
    }
end

class GeneralRefArtifact < GeneralRef
    sizeof 8

    rtti_classname :general_ref_artifactst

    field(:artifact_id, 4) {
        number 32, true, -1
    }
    def artifact_tg ; df.world.artifacts.all.binsearch(artifact_id) ; end
end

class GeneralRefBuilding < GeneralRef
    sizeof 8

    rtti_classname :general_ref_buildingst

    field(:building_id, 4) {
        number 32, true, -1
    }
    def building_tg ; df.world.buildings.all.binsearch(building_id) ; end
end

class GeneralRefBuildingCagedst < GeneralRefBuilding
    sizeof 8

    rtti_classname :general_ref_building_cagedst

end

class GeneralRefBuildingChainst < GeneralRefBuilding
    sizeof 8

    rtti_classname :general_ref_building_chainst

end

class GeneralRefBuildingCivzoneAssignedst < GeneralRefBuilding
    sizeof 8

    rtti_classname :general_ref_building_civzone_assignedst

end

class GeneralRefBuildingDestinationst < GeneralRefBuilding
    sizeof 8

    rtti_classname :general_ref_building_destinationst

end

class GeneralRefBuildingHolderst < GeneralRefBuilding
    sizeof 8

    rtti_classname :general_ref_building_holderst

end

class GeneralRefBuildingNestBoxst < GeneralRefBuilding
    sizeof 8

    rtti_classname :general_ref_building_nest_boxst

end

class GeneralRefBuildingTriggerst < GeneralRefBuilding
    sizeof 8

    rtti_classname :general_ref_building_triggerst

end

class GeneralRefBuildingTriggertargetst < GeneralRefBuilding
    sizeof 8

    rtti_classname :general_ref_building_triggertargetst

end

class GeneralRefBuildingUseTarget1st < GeneralRefBuilding
    sizeof 8

    rtti_classname :general_ref_building_use_target_1st

end

class GeneralRefBuildingUseTarget2st < GeneralRefBuilding
    sizeof 8

    rtti_classname :general_ref_building_use_target_2st

end

class GeneralRefBuildingWellTag < GeneralRefBuilding
    sizeof 12

    rtti_classname :general_ref_building_well_tagst

    field(:direction, 8) {
        number 8, true
    }
end

class GeneralRefCoinbatch < GeneralRef
    sizeof 8

    rtti_classname :general_ref_coinbatchst

    field(:batch, 4) {
        number 32, true
    }
end

class GeneralRefItem < GeneralRef
    sizeof 8

    rtti_classname :general_ref_itemst

    field(:item_id, 4) {
        number 32, true, -1
    }
    def item_tg ; df.world.items.all.binsearch(item_id) ; end
end

class GeneralRefContainedInItemst < GeneralRefItem
    sizeof 8

    rtti_classname :general_ref_contained_in_itemst

end

class GeneralRefContainsItemst < GeneralRefItem
    sizeof 8

    rtti_classname :general_ref_contains_itemst

end

class GeneralRefUnit < GeneralRef
    sizeof 8

    rtti_classname :general_ref_unitst

    field(:unit_id, 4) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
end

class GeneralRefContainsUnitst < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_contains_unitst

end

class GeneralRefCreaturest < GeneralRef
    sizeof 24

    rtti_classname :general_ref_creaturest

    field(:race, 4) {
        number 32, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:caste, 8) {
        number 32, true, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
    field(:anon_1, 12) {
        number 32, true
    }
    field(:anon_2, 16) {
        number 32, true
    }
    field(:flags, 20) {
        compound(:GeneralRefCreaturest_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:animated_corpse, 0) { bit 0 }
            field(:ghostly, 0) { bit 1 }
        }
    }
end

class GeneralRefEntity < GeneralRef
    sizeof 8

    rtti_classname :general_ref_entityst

    field(:entity_id, 4) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
end

class GeneralRefEntityArtImage < GeneralRef
    sizeof 12

    rtti_classname :general_ref_entity_art_imagest

    field(:entity_id, 4) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
    field(:index, 8) {
        number 32, true
    }
end

class GeneralRefEntityItemownerst < GeneralRefEntity
    sizeof 8

    rtti_classname :general_ref_entity_itemownerst

end

class GeneralRefEntityOfferedst < GeneralRefEntity
    sizeof 8

    rtti_classname :general_ref_entity_offeredst

end

class GeneralRefEntityPopst < GeneralRef
    sizeof 20

    rtti_classname :general_ref_entity_popst

    field(:anon_1, 4) {
        number 32, true
    }
    field(:race, 8) {
        number 32, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:anon_2, 12) {
        number 32, true
    }
    field(:flags, 16) {
        compound(:GeneralRefEntityPopst_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:animated_corpse, 0) { bit 0 }
            field(:ghostly, 0) { bit 1 }
        }
    }
end

class GeneralRefEntityStolenst < GeneralRefEntity
    sizeof 8

    rtti_classname :general_ref_entity_stolenst

end

class GeneralRefFeatureLayerst < GeneralRef
    sizeof 8

    rtti_classname :general_ref_feature_layerst

    field(:underground_region_id, 4) {
        number 32, true, -1
    }
    def underground_region_tg ; df.world.world_data.underground_regions[underground_region_id] ; end
end

class GeneralRefHistoricalEventst < GeneralRef
    sizeof 8

    rtti_classname :general_ref_historical_eventst

    field(:event_id, 4) {
        number 32, true, -1
    }
    def event_tg ; df.world.history.events.binsearch(event_id) ; end
end

class GeneralRefHistoricalFigurest < GeneralRef
    sizeof 8

    rtti_classname :general_ref_historical_figurest

    field(:hist_figure_id, 4) {
        number 32, true, -1
    }
    def hist_figure_tg ; df.world.history.figures.binsearch(hist_figure_id) ; end
end

class GeneralRefInteractionst < GeneralRef
    sizeof 20

    rtti_classname :general_ref_interactionst

    field(:anon_1, 4) {
        number 32, true
    }
    field(:anon_2, 8) {
        number 32, true
    }
    field(:anon_3, 12) {
        number 32, true
    }
    field(:anon_4, 16) {
        number 32, true
    }
end

class GeneralRefIsArtifactst < GeneralRefArtifact
    sizeof 8

    rtti_classname :general_ref_is_artifactst

end

class GeneralRefNemesis < GeneralRef
    sizeof 8

    rtti_classname :general_ref_nemesisst

    field(:nemesis_id, 4) {
        number 32, true, -1
    }
    def nemesis_tg ; df.world.nemesis.all.binsearch(nemesis_id) ; end
end

class GeneralRefIsNemesisst < GeneralRefNemesis
    sizeof 8

    rtti_classname :general_ref_is_nemesisst

end

class GeneralRefItemType < GeneralRef
    sizeof 16

    rtti_classname :general_ref_item_typest

    field(:type, 4) {
        number 32, true, nil, ItemType
    }
    field(:subtype, 8) {
        number 32, true, -1
    }
    field(:mat_type, 12) {
        number 16, true, -1
    }
    field(:mat_index, 14) {
        number 16, true, -1
    }
end

class GeneralRefLocationst < GeneralRef
    sizeof 16

    rtti_classname :general_ref_locationst

    field(:anon_1, 4) {
        number 32, true
    }
    field(:anon_2, 8) {
        number 32, true
    }
    field(:anon_3, 12) {
        number 32, true
    }
end

class GeneralRefMapsquare < GeneralRef
    sizeof 12

    rtti_classname :general_ref_mapsquarest

    field(:tiletype, 4) {
        number 16, true, nil, Tiletype
    }
    field(:mat_type, 6) {
        number 16, true, -1
    }
    field(:mat_index, 8) {
        number 32, true, -1
    }
end

class GeneralRefProjectile < GeneralRef
    sizeof 8

    rtti_classname :general_ref_projectilest

    field(:projectile_id, 4) {
        number 32, true, -1
    }
end

class GeneralRefSitest < GeneralRef
    sizeof 8

    rtti_classname :general_ref_sitest

    field(:site_id, 4) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
end

class GeneralRefSpherest < GeneralRef
    sizeof 8

    rtti_classname :general_ref_spherest

    field(:sphere_type, 4) {
        number 16, true, nil, SphereType
    }
end

class GeneralRefSubregionst < GeneralRef
    sizeof 8

    rtti_classname :general_ref_subregionst

    field(:region_id, 4) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region_id] ; end
end

class GeneralRefUnitBeateest < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_beateest

end

class GeneralRefUnitCageest < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_cageest

end

class GeneralRefUnitFoodreceiverst < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_foodreceiverst

end

class GeneralRefUnitHolderst < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_holderst

end

class GeneralRefUnitInfantst < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_infantst

end

class GeneralRefUnitItemownerst < GeneralRefUnit
    sizeof 12

    rtti_classname :general_ref_unit_itemownerst

    field(:flags, 8) {
        compound(:GeneralRefUnitItemownerst_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:litter, 0) { bit 0 }
        }
    }
end

class GeneralRefUnitKidnapeest < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_kidnapeest

end

class GeneralRefUnitMilkeest < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_milkeest

end

class GeneralRefUnitPatientst < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_patientst

end

class GeneralRefUnitReporteest < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_reporteest

end

class GeneralRefUnitRiderst < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_riderst

end

class GeneralRefUnitSheareest < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_sheareest

end

class GeneralRefUnitSlaughtereest < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_slaughtereest

end

class GeneralRefUnitSuckeest < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_suckeest

end

class GeneralRefUnitTradebringerst < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_tradebringerst

end

class GeneralRefUnitTraineest < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_traineest

end

class GeneralRefUnitWorkerst < GeneralRefUnit
    sizeof 8

    rtti_classname :general_ref_unit_workerst

end

class GlowingBarrier < MemHack::Compound
    sizeof 32

    field(:anon_1, 0) {
        number 8, true
    }
    field(:anon_2, 4) {
        number 32, true
    }
    field(:buildings, 8) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def buildings_tg ; buildings.map { |i| df.world.buildings.all.binsearch(i) } ; end
    field(:pos, 24) {
        global :Coord
    }
end

class Graphic < MemHack::Compound
    sizeof 896

    field(:screenx, 0) {
        number 32, true
    }
    field(:screeny, 4) {
        number 32, true
    }
    field(:screenf, 8) {
        number 8, true
    }
    field(:screenb, 9) {
        number 8, true
    }
    field(:screenbright, 10) {
        number 8, true
    }
    field(:screen, 12) {
        pointer_ary(1) {
            number 8, false
        }
    }
    field(:screentexpos, 16) {
        pointer_ary(4) {
            number 32, true
        }
    }
    field(:screentexpos_addcolor, 20) {
        pointer_ary(1) {
            number 8, true
        }
    }
    field(:screentexpos_grayscale, 24) {
        pointer_ary(1) {
            number 8, false
        }
    }
    field(:screentexpos_cf, 28) {
        pointer_ary(1) {
            number 8, false
        }
    }
    field(:screentexpos_cbr, 32) {
        pointer_ary(1) {
            number 8, false
        }
    }
    field(:clipx, 36) {
        static_array(2, 4) {
            number 32, true
        }
    }
    field(:clipy, 44) {
        static_array(2, 4) {
            number 32, true
        }
    }
    field(:tex_pos, 52) {
        static_array(1, 4) {
            number 32, true
        }
    }
    field(:rect_id, 56) {
        number 32, true
    }
    field(:print_time, 64) {
        static_array(100, 8) {
            number 64, true
        }
    }
    field(:print_index, 864) {
        number 32, true
    }
    field(:display_frames, 868) {
        number 8, true
    }
    field(:force_full_display_count, 870) {
        number 16, true
    }
    field(:original_rect, 872) {
        number 8, true
    }
    field(:dimx, 876) {
        number 32, true
    }
    field(:dimy, 880) {
        number 32, true
    }
    field(:mouse_x, 884) {
        number 32, true
    }
    field(:mouse_y, 888) {
        number 32, true
    }
    field(:screen_limit, 892) {
        pointer {
            number 8, false
        }
    }
end

class HaulingRoute < MemHack::Compound
    sizeof 80

    field(:id, 0) {
        number 32, true
    }
    field(:name, 4) {
        stl_string
    }
    field(:stops, 32) {
        stl_vector(4) {
            pointer {
                global :HaulingStop
            }
        }
    }
    field(:vehicle_ids, 48) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def vehicle_tgs ; vehicle_ids.map { |i| df.world.vehicles.all.binsearch(i) } ; end
    field(:vehicle_stops, 64) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
end

class HaulingStop < MemHack::Compound
    sizeof 1320

    field(:id, 0) {
        number 32, true
    }
    field(:name, 4) {
        stl_string
    }
    field(:pos, 32) {
        global :Coord
    }
    field(:settings, 40) {
        global :StockpileSettings
    }
    field(:conditions, 1280) {
        stl_vector(4) {
            pointer {
                global :StopDepartCondition
            }
        }
    }
    field(:stockpiles, 1296) {
        stl_vector(4) {
            pointer {
                global :RouteStockpileLink
            }
        }
    }
    field(:time_waiting, 1312) {
        number 32, true
    }
    field(:cart_id, 1316) {
        number 32, true, -1
    }
    def cart_tg ; df.world.items.all.binsearch(cart_id) ; end
end

class HealthViewBits1 < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:bleeding_heavy, 0) { bit 0 }
    field(:bleeding, 0) { bit 1 }
    field(:pale, 0) { bit 2 }
    field(:blood_loss_severe, 0) { bit 3 }
    field(:faint, 0) { bit 4 }
    field(:blood_loss, 0) { bit 5 }
    field(:paralyzed, 0) { bit 6 }
    field(:paralyzed_partially, 0) { bit 7 }
    field(:sluggish, 0) { bit 8 }
    field(:numb_completely, 0) { bit 9 }
    field(:numb_partially, 0) { bit 10 }
    field(:numb_slightly, 0) { bit 11 }
    field(:fever_serious, 0) { bit 12 }
    field(:fever_moderate, 0) { bit 13 }
    field(:fever_slight, 0) { bit 14 }
    field(:pain_extreme, 0) { bit 15 }
    field(:pain_moderate, 0) { bit 16 }
    field(:pain_slight, 0) { bit 17 }
    field(:exhausted, 0) { bit 18 }
    field(:overexerted, 0) { bit 19 }
    field(:tired, 0) { bit 20 }
    field(:stunned, 0) { bit 21 }
    field(:dizzy, 0) { bit 22 }
    field(:drowning, 0) { bit 23 }
    field(:winded, 0) { bit 24 }
    field(:nauseous, 0) { bit 25 }
    field(:drowsy_very, 0) { bit 26 }
    field(:drowsy, 0) { bit 27 }
    field(:dehydrated, 0) { bit 28 }
    field(:thirsty, 0) { bit 29 }
    field(:starving, 0) { bit 30 }
    field(:hungry, 0) { bit 31 }
end

class HealthViewBits2 < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:breathe_cant, 0) { bit 0 }
    field(:breathe_trouble, 0) { bit 1 }
    field(:vision_lost, 0) { bit 2 }
    field(:vision_impaired, 0) { bit 3 }
    field(:vision_impaired2, 0) { bit 4 }
    field(:stand_cant, 0) { bit 5 }
    field(:stand_impaired, 0) { bit 6 }
    field(:grasp_cant, 0) { bit 7 }
    field(:grasp_impaired, 0) { bit 8 }
    field(:fly_cant, 0) { bit 9 }
    field(:fly_impaired, 0) { bit 10 }
    field(:motor_nerve, 0) { bit 11 }
    field(:sensory_nerve, 0) { bit 12 }
    field(:spilled, 0) { bit 13 }
    field(:artery_major, 0) { bit 14 }
    field(:artery, 0) { bit 15 }
    field(:tendon_torn, 0) { bit 16 }
    field(:tendon_strain, 0) { bit 17 }
    field(:tendon_bruise, 0) { bit 18 }
    field(:ligament_torn, 0) { bit 19 }
    field(:ligament_sprain, 0) { bit 20 }
    field(:ligament_bruise, 0) { bit 21 }
    field(:fracture_compound, 0) { bit 22 }
    field(:fracture_overlap, 0) { bit 23 }
    field(:need_setting, 0) { bit 24 }
    field(:tissue_broken, 0) { bit 25 }
    field(:tissue_part_broken, 0) { bit 26 }
    field(:damage_heavy, 0) { bit 27 }
    field(:damage_moderate, 0) { bit 28 }
    field(:damage_light, 0) { bit 29 }
    field(:pain_extreme, 0) { bit 30 }
    field(:pain_moderate, 0) { bit 31 }
end

class HealthViewBits3 < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:pain_minor, 0) { bit 0 }
    field(:swell_extreme, 0) { bit 1 }
    field(:swell_medium, 0) { bit 2 }
    field(:swell_minor, 0) { bit 3 }
    field(:infection, 0) { bit 4 }
    field(:rq_diagnosis, 0) { bit 5 }
    field(:rq_crutch, 0) { bit 6 }
    field(:inoperable_rot, 0) { bit 7 }
    field(:rq_cleaning, 0) { bit 8 }
    field(:rq_surgery, 0) { bit 9 }
    field(:rq_suture, 0) { bit 10 }
    field(:rq_setting, 0) { bit 11 }
    field(:rq_dressing, 0) { bit 12 }
    field(:rq_traction, 0) { bit 13 }
    field(:rq_immobilize, 0) { bit 14 }
end

class HistfigEntityLink < MemHack::Compound
    sizeof 12

    rtti_classname :histfig_entity_linkst

    field(:entity_id, 4) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
    field(:link_strength, 8) {
        number 16, true
    }
    def getType()
        HistfigEntityLinkType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(file)
        DFHack.vmethod_call(self, 8, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 12, file, loadversion) ; nil
    end
    def getPosition()
        val = DFHack.vmethod_call(self, 24)
    end
    def getPositionStartYear()
        val = DFHack.vmethod_call(self, 28)
    end
    def getPositionEndYear()
        val = DFHack.vmethod_call(self, 32)
    end
    def generate_xml(arg0, arg1)
        DFHack.vmethod_call(self, 36, arg0, arg1) ; nil
    end
end

class HistfigEntityLinkCriminalst < HistfigEntityLink
    sizeof 12

    rtti_classname :histfig_entity_link_criminalst

end

class HistfigEntityLinkEnemyst < HistfigEntityLink
    sizeof 12

    rtti_classname :histfig_entity_link_enemyst

end

class HistfigEntityLinkFormerMemberst < HistfigEntityLink
    sizeof 12

    rtti_classname :histfig_entity_link_former_memberst

end

class HistfigEntityLinkFormerMercenaryst < HistfigEntityLink
    sizeof 12

    rtti_classname :histfig_entity_link_former_mercenaryst

end

class HistfigEntityLinkFormerPositionst < HistfigEntityLink
    sizeof 24

    rtti_classname :histfig_entity_link_former_positionst

    field(:assignment_id, 12) {
        number 32, true, -1
    }
    field(:start_year, 16) {
        number 32, true
    }
    field(:end_year, 20) {
        number 32, true
    }
end

class HistfigEntityLinkFormerPrisonerst < HistfigEntityLink
    sizeof 12

    rtti_classname :histfig_entity_link_former_prisonerst

end

class HistfigEntityLinkFormerSlavest < HistfigEntityLink
    sizeof 12

    rtti_classname :histfig_entity_link_former_slavest

end

class HistfigEntityLinkFormerSquadst < HistfigEntityLink
    sizeof 24

    rtti_classname :histfig_entity_link_former_squadst

    field(:squad_id, 12) {
        number 32, true
    }
    field(:start_year, 16) {
        number 32, true
    }
    field(:end_year, 20) {
        number 32, true
    }
end

class HistfigEntityLinkMemberst < HistfigEntityLink
    sizeof 12

    rtti_classname :histfig_entity_link_memberst

end

class HistfigEntityLinkMercenaryst < HistfigEntityLink
    sizeof 12

    rtti_classname :histfig_entity_link_mercenaryst

end

class HistfigEntityLinkPositionClaimst < HistfigEntityLink
    sizeof 20

    rtti_classname :histfig_entity_link_position_claimst

    field(:assignment_id, 12) {
        number 32, true, -1
    }
    field(:start_year, 16) {
        number 32, true
    }
end

class HistfigEntityLinkPositionst < HistfigEntityLink
    sizeof 20

    rtti_classname :histfig_entity_link_positionst

    field(:assignment_id, 12) {
        number 32, true, -1
    }
    field(:start_year, 16) {
        number 32, true
    }
end

class HistfigEntityLinkPrisonerst < HistfigEntityLink
    sizeof 12

    rtti_classname :histfig_entity_link_prisonerst

end

class HistfigEntityLinkSlavest < HistfigEntityLink
    sizeof 12

    rtti_classname :histfig_entity_link_slavest

end

class HistfigEntityLinkSquadst < HistfigEntityLink
    sizeof 24

    rtti_classname :histfig_entity_link_squadst

    field(:squad_id, 12) {
        number 32, true
    }
    field(:squad_position, 16) {
        number 32, true
    }
    field(:start_year, 20) {
        number 32, true
    }
end

class HistfigHfLink < MemHack::Compound
    sizeof 12

    rtti_classname :histfig_hf_linkst

    field(:target_hf, 4) {
        number 32, true, -1
    }
    def target_hf_tg ; df.world.history.figures.binsearch(target_hf) ; end
    field(:link_strength, 8) {
        number 16, true
    }
    def getType()
        HistfigHfLinkType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(file)
        DFHack.vmethod_call(self, 8, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 12, file, loadversion) ; nil
    end
end

class HistfigHfLinkApprenticest < HistfigHfLink
    sizeof 12

    rtti_classname :histfig_hf_link_apprenticest

end

class HistfigHfLinkChildst < HistfigHfLink
    sizeof 12

    rtti_classname :histfig_hf_link_childst

end

class HistfigHfLinkCompanionst < HistfigHfLink
    sizeof 20

    rtti_classname :histfig_hf_link_companionst

    field(:anon_1, 12) {
        number 32, true
    }
    field(:anon_2, 16) {
        number 32, true
    }
end

class HistfigHfLinkDeityst < HistfigHfLink
    sizeof 12

    rtti_classname :histfig_hf_link_deityst

end

class HistfigHfLinkFatherst < HistfigHfLink
    sizeof 12

    rtti_classname :histfig_hf_link_fatherst

end

class HistfigHfLinkImprisonerst < HistfigHfLink
    sizeof 12

    rtti_classname :histfig_hf_link_imprisonerst

end

class HistfigHfLinkLoverst < HistfigHfLink
    sizeof 12

    rtti_classname :histfig_hf_link_loverst

end

class HistfigHfLinkMasterst < HistfigHfLink
    sizeof 12

    rtti_classname :histfig_hf_link_masterst

end

class HistfigHfLinkMotherst < HistfigHfLink
    sizeof 12

    rtti_classname :histfig_hf_link_motherst

end

class HistfigHfLinkPrisonerst < HistfigHfLink
    sizeof 12

    rtti_classname :histfig_hf_link_prisonerst

end

class HistfigHfLinkSpousest < HistfigHfLink
    sizeof 12

    rtti_classname :histfig_hf_link_spousest

end

class HistfigSiteLink < MemHack::Compound
    sizeof 16

    rtti_classname :histfig_site_linkst

    field(:site, 4) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:sub_id, 8) {
        number 32, true
    }
    field(:entity, 12) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity) ; end
    def getType()
        HistfigSiteLinkType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(file)
        DFHack.vmethod_call(self, 8, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 12, file, loadversion) ; nil
    end
end

class HistfigSiteLinkHangoutst < HistfigSiteLink
    sizeof 16

    rtti_classname :histfig_site_link_hangoutst

end

class HistfigSiteLinkHomeSiteAbstractBuildingst < HistfigSiteLink
    sizeof 16

    rtti_classname :histfig_site_link_home_site_abstract_buildingst

end

class HistfigSiteLinkHomeSiteRealizationBuildingst < HistfigSiteLink
    sizeof 16

    rtti_classname :histfig_site_link_home_site_realization_buildingst

end

class HistfigSiteLinkHomeSiteRealizationSulst < HistfigSiteLink
    sizeof 16

    rtti_classname :histfig_site_link_home_site_realization_sulst

end

class HistfigSiteLinkLairst < HistfigSiteLink
    sizeof 16

    rtti_classname :histfig_site_link_lairst

end

class HistfigSiteLinkSeatOfPowerst < HistfigSiteLink
    sizeof 16

    rtti_classname :histfig_site_link_seat_of_powerst

end

class HistoricalEntity < MemHack::Compound
    sizeof 5076

    field(:type, 0) {
        number 16, true, nil, HistoricalEntityType
    }
    field(:id, 4) {
        number 32, true
    }
    field(:entity_raw, 8) {
        pointer {
            global :EntityRaw
        }
    }
    field(:save_file_id, 12) {
        number 32, true
    }
    field(:next_member_idx, 16) {
        number 16, true
    }
    field(:name, 20) {
        global :LanguageName
    }
    field(:race, 128) {
        number 16, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:flags, 132) {
        compound(:HistoricalEntity_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:foreign_civ, 0) { bit 0 }
            field(:named_civ, 0) { bit 1 }
            field(:unk2, 0) { bit 2 }
            field(:unk3, 0) { bit 3 }
            field(:unk4, 0) { bit 4 }
            field(:worshipping, 0) { bit 5 }
        }
    }
    field(:entity_links, 136) {
        stl_vector(4) {
            pointer {
                global :EntityEntityLink
            }
        }
    }
    field(:site_links, 152) {
        stl_vector(4) {
            pointer {
                global :EntitySiteLink
            }
        }
    }
    field(:histfig_ids, 168) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def histfig_tgs ; histfig_ids.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:populations, 184) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def populations_tg ; populations.map { |i| df.world.entity_populations.binsearch(i) } ; end
    field(:nemesis_ids, 200) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def nemesis_tgs ; nemesis_ids.map { |i| df.world.nemesis.all.binsearch(i) } ; end
    field(:resources, 216) {
        compound(:HistoricalEntity_TResources) {
            field(:digger_type, 0) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def digger_type_tg ; digger_type.map { |i| df.world.raws.itemdefs.weapons[i] } ; end
            field(:weapon_type, 16) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def weapon_type_tg ; weapon_type.map { |i| df.world.raws.itemdefs.weapons[i] } ; end
            field(:training_weapon_type, 32) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def training_weapon_type_tg ; training_weapon_type.map { |i| df.world.raws.itemdefs.weapons[i] } ; end
            field(:armor_type, 48) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def armor_type_tg ; armor_type.map { |i| df.world.raws.itemdefs.armor[i] } ; end
            field(:ammo_type, 64) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def ammo_type_tg ; ammo_type.map { |i| df.world.raws.itemdefs.ammo[i] } ; end
            field(:helm_type, 80) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def helm_type_tg ; helm_type.map { |i| df.world.raws.itemdefs.helms[i] } ; end
            field(:gloves_type, 96) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def gloves_type_tg ; gloves_type.map { |i| df.world.raws.itemdefs.gloves[i] } ; end
            field(:shoes_type, 112) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def shoes_type_tg ; shoes_type.map { |i| df.world.raws.itemdefs.shoes[i] } ; end
            field(:pants_type, 128) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def pants_type_tg ; pants_type.map { |i| df.world.raws.itemdefs.pants[i] } ; end
            field(:shield_type, 144) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def shield_type_tg ; shield_type.map { |i| df.world.raws.itemdefs.shields[i] } ; end
            field(:trapcomp_type, 160) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def trapcomp_type_tg ; trapcomp_type.map { |i| df.world.raws.itemdefs.trapcomps[i] } ; end
            field(:toy_type, 176) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def toy_type_tg ; toy_type.map { |i| df.world.raws.itemdefs.toys[i] } ; end
            field(:instrument_type, 192) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def instrument_type_tg ; instrument_type.map { |i| df.world.raws.itemdefs.instruments[i] } ; end
            field(:siegeammo_type, 208) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def siegeammo_type_tg ; siegeammo_type.map { |i| df.world.raws.itemdefs.siege_ammo[i] } ; end
            field(:tool_type, 224) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def tool_type_tg ; tool_type.map { |i| df.world.raws.itemdefs.tools[i] } ; end
            field(:metal, 240) {
                compound(:HistoricalEntity_TResources_TMetal) {
                    field(:pick, 0) {
                        global :MaterialVecRef
                    }
                    field(:weapon, 32) {
                        global :MaterialVecRef
                    }
                    field(:ranged, 64) {
                        global :MaterialVecRef
                    }
                    field(:ammo, 96) {
                        global :MaterialVecRef
                    }
                    field(:ammo2, 128) {
                        global :MaterialVecRef
                    }
                    field(:armor, 160) {
                        global :MaterialVecRef
                    }
                    field(:anvil, 192) {
                        global :MaterialVecRef
                    }
                }
            }
            field(:organic, 464) {
                compound(:HistoricalEntity_TResources_TOrganic) {
                    field(:leather, 0) {
                        global :MaterialVecRef
                    }
                    field(:fiber, 32) {
                        global :MaterialVecRef
                    }
                    field(:silk, 64) {
                        global :MaterialVecRef
                    }
                    field(:wool, 96) {
                        global :MaterialVecRef
                    }
                    field(:wood, 128) {
                        global :MaterialVecRef
                    }
                }
            }
            field(:metals, 624) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def metals_tg ; metals.map { |i| df.world.raws.inorganics[i] } ; end
            field(:stones, 640) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def stones_tg ; stones.map { |i| df.world.raws.inorganics[i] } ; end
            field(:gems, 656) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def gems_tg ; gems.map { |i| df.world.raws.inorganics[i] } ; end
            field(:refuse, 672) {
                compound(:HistoricalEntity_TResources_TRefuse) {
                    field(:bone, 0) {
                        global :MaterialVecRef
                    }
                    field(:shell, 32) {
                        global :MaterialVecRef
                    }
                    field(:pearl, 64) {
                        global :MaterialVecRef
                    }
                    field(:ivory, 96) {
                        global :MaterialVecRef
                    }
                    field(:horn, 128) {
                        global :MaterialVecRef
                    }
                }
            }
            field(:misc_mat, 832) {
                compound(:HistoricalEntity_TResources_TMiscMat) {
                    field(:others, 0) {
                        global :MaterialVecRef
                    }
                    field(:glass, 32) {
                        global :MaterialVecRef
                    }
                    field(:sand, 64) {
                        global :MaterialVecRef
                    }
                    field(:clay, 96) {
                        global :MaterialVecRef
                    }
                    field(:crafts, 128) {
                        global :MaterialVecRef
                    }
                    field(:glass_unused, 160) {
                        global :MaterialVecRef
                    }
                    field(:barrels, 192) {
                        global :MaterialVecRef
                    }
                    field(:flasks, 224) {
                        global :MaterialVecRef
                    }
                    field(:quivers, 256) {
                        global :MaterialVecRef
                    }
                    field(:backpacks, 288) {
                        global :MaterialVecRef
                    }
                    field(:cages, 320) {
                        global :MaterialVecRef
                    }
                    field(:wood2, 352) {
                        global :MaterialVecRef
                    }
                    field(:rock_metal, 384) {
                        global :MaterialVecRef
                    }
                    field(:booze, 416) {
                        global :MaterialVecRef
                    }
                    field(:cheese, 448) {
                        global :MaterialVecRef
                    }
                    field(:powders, 480) {
                        global :MaterialVecRef
                    }
                    field(:extracts, 512) {
                        global :MaterialVecRef
                    }
                    field(:meat, 544) {
                        global :MaterialVecRef
                    }
                }
            }
            field(:fish_races, 1408) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def fish_races_tg ; fish_races.map { |i| df.world.raws.creatures.all[i] } ; end
            field(:fish_castes, 1424) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            field(:egg_races, 1440) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def egg_races_tg ; egg_races.map { |i| df.world.raws.creatures.all[i] } ; end
            field(:egg_castes, 1456) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            field(:plants, 1472) {
                global :MaterialVecRef
            }
            field(:tree_fruit_plants, 1504) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def tree_fruit_plants_tg ; tree_fruit_plants.map { |i| df.world.raws.plants.all[i] } ; end
            field(:tree_fruit_growths, 1520) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            field(:shrub_fruit_plants, 1536) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def shrub_fruit_plants_tg ; shrub_fruit_plants.map { |i| df.world.raws.plants.all[i] } ; end
            field(:shrub_fruit_growths, 1552) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            field(:seeds, 1568) {
                global :MaterialVecRef
            }
            field(:wood_products, 1600) {
                compound(:HistoricalEntity_TResources_TWoodProducts) {
                    field(:item_type, 0) {
                        stl_vector(2) {
                            number 16, true, nil, ItemType
                        }
                    }
                    field(:item_subtype, 16) {
                        stl_vector(2) {
                            number 16, true
                        }
                    }
                    field(:material, 32) {
                        global :MaterialVecRef
                    }
                }
            }
            field(:animals, 1664) {
                compound(:HistoricalEntity_TResources_TAnimals) {
                    field(:pet_races, 0) {
                        stl_vector(4) {
                            number 32, true, -1
                        }
                    }
                    def pet_races_tg ; pet_races.map { |i| df.world.raws.creatures.all[i] } ; end
                    field(:wagon_races, 16) {
                        stl_vector(4) {
                            number 32, true, -1
                        }
                    }
                    def wagon_races_tg ; wagon_races.map { |i| df.world.raws.creatures.all[i] } ; end
                    field(:pack_animal_races, 32) {
                        stl_vector(4) {
                            number 32, true, -1
                        }
                    }
                    def pack_animal_races_tg ; pack_animal_races.map { |i| df.world.raws.creatures.all[i] } ; end
                    field(:wagon_puller_races, 48) {
                        stl_vector(4) {
                            number 32, true, -1
                        }
                    }
                    def wagon_puller_races_tg ; wagon_puller_races.map { |i| df.world.raws.creatures.all[i] } ; end
                    field(:mount_races, 64) {
                        stl_vector(4) {
                            number 32, true, -1
                        }
                    }
                    def mount_races_tg ; mount_races.map { |i| df.world.raws.creatures.all[i] } ; end
                    field(:minion_races, 80) {
                        stl_vector(4) {
                            number 32, true, -1
                        }
                    }
                    def minion_races_tg ; minion_races.map { |i| df.world.raws.creatures.all[i] } ; end
                    field(:exotic_pet_races, 96) {
                        stl_vector(4) {
                            number 32, true, -1
                        }
                    }
                    def exotic_pet_races_tg ; exotic_pet_races.map { |i| df.world.raws.creatures.all[i] } ; end
                    field(:pet_castes, 112) {
                        stl_vector(2) {
                            number 16, true, -1
                        }
                    }
                    field(:wagon_castes, 128) {
                        stl_vector(2) {
                            number 16, true, -1
                        }
                    }
                    field(:pack_animal_castes, 144) {
                        stl_vector(2) {
                            number 16, true, -1
                        }
                    }
                    field(:wagon_puller_castes, 160) {
                        stl_vector(2) {
                            number 16, true, -1
                        }
                    }
                    field(:mount_castes, 176) {
                        stl_vector(2) {
                            number 16, true, -1
                        }
                    }
                    field(:minion_castes, 192) {
                        stl_vector(2) {
                            number 16, true, -1
                        }
                    }
                    field(:exotic_pet_castes, 208) {
                        stl_vector(2) {
                            number 16, true, -1
                        }
                    }
                }
            }
            field(:meat_fish_recipes, 1888) {
                stl_vector(4) {
                    pointer {
                        global :EntityRecipe
                    }
                }
            }
            field(:other_recipes, 1904) {
                stl_vector(4) {
                    pointer {
                        global :EntityRecipe
                    }
                }
            }
            field(:unk13, 1920) {
                static_array(3, 8) {
                    compound(:HistoricalEntity_TResources_TUnk13) {
                        field(:unk1, 0) {
                            number 16, true, -1
                        }
                        field(:unk2, 4) {
                            number 32, true
                        }
                    }
                }
            }
            field(:unk14, 1944) {
                stl_vector(4) {
                    pointer {
                        global :Item
                    }
                }
            }
            field(:unk15a, 1960) {
                number 16, true
            }
            field(:unk15b, 1962) {
                number 16, true
            }
            field(:ethic, 1964) {
                static_array(22, 2, EthicType) {
                    number 16, true, nil, EthicResponse
                }
            }
            field(:values, 2008) {
                static_array(32, 4, ValueType) {
                    number 32, true
                }
            }
            field(:art_image_types, 2136) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:art_image_ids, 2152) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:art_image_subids, 2168) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:discovered_creature_foods, 2184) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:discovered_creatures, 2200) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:discovered_plant_foods, 2216) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:discovered_plants, 2232) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:unk23, 2248) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:unk24, 2264) {
                stl_vector(2) {
                    number 16, true
                }
            }
        }
    }
    field(:uniforms, 2496) {
        stl_vector(4) {
            pointer {
                global :EntityUniform
            }
        }
    }
    field(:next_uniform_id, 2512) {
        number 32, true
    }
    field(:unknown1b, 2516) {
        compound(:HistoricalEntity_TUnknown1b) {
            field(:unk32b, 0) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:worship, 16) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def worship_tg ; worship.map { |i| df.world.history.figures.binsearch(i) } ; end
            field(:unk32d, 32) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:unk32e, 48) {
                stl_vector(4) {
                    pointer {
                        compound(:HistoricalEntity_TUnknown1b_TUnk32e) {
                            sizeof 60

                            field(:anon_1, 0) {
                                stl_vector(2) {
                                    number 16, true
                                }
                            }
                            field(:anon_2, 16) {
                                stl_vector(2) {
                                    number 16, true
                                }
                            }
                            field(:anon_3, 32) {
                                number 32, true
                            }
                            field(:anon_4, 36) {
                                number 32, true
                            }
                            field(:anon_5, 40) {
                                stl_vector(4) {
                                    number 32, true
                                }
                            }
                            field(:anon_6, 56) {
                                number 16, true
                            }
                            field(:anon_7, 58) {
                                number 16, true
                            }
                        }
                    }
                }
            }
            field(:diplomacy, 64) {
                stl_vector(4) {
                    pointer {
                        compound(:HistoricalEntity_TUnknown1b_TDiplomacy) {
                            sizeof 48

                            field(:group_id, 0) {
                                number 32, true, -1
                            }
                            def group_tg ; df.world.entities.all.binsearch(group_id) ; end
                            field(:relation, 4) {
                                number 16, true
                            }
                            field(:anon_1, 8) {
                                number 32, true
                            }
                            field(:anon_2, 12) {
                                stl_vector(4) {
                                    number 32, true
                                }
                            }
                            field(:anon_3, 28) {
                                stl_vector(4) {
                                    number 32, true
                                }
                            }
                            field(:anon_4, 44) {
                                number 32, true
                            }
                        }
                    }
                }
            }
            field(:unk33, 80) {
                number 16, true
            }
            field(:unk34a, 84) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:unk34b, 100) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:unk34c, 116) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:unk34d, 132) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:unk34e, 148) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def unk34e_tg ; unk34e.map { |i| df.world.history.figures.binsearch(i) } ; end
        }
    }
    field(:positions, 2680) {
        compound(:HistoricalEntity_TPositions) {
            field(:own, 0) {
                stl_vector(4) {
                    pointer {
                        global :EntityPosition
                    }
                }
            }
            field(:site, 16) {
                stl_vector(4) {
                    pointer {
                        global :EntityPosition
                    }
                }
            }
            field(:conquered_site, 32) {
                stl_vector(4) {
                    pointer {
                        global :EntityPosition
                    }
                }
            }
            field(:next_position_id, 48) {
                number 32, true
            }
            field(:assignments, 52) {
                stl_vector(4) {
                    pointer {
                        global :EntityPositionAssignment
                    }
                }
            }
            field(:next_assignment_id, 68) {
                number 32, true
            }
            field(:unk_v40_1, 72) {
                stl_vector(4) {
                    pointer {
                        global :EntityPositionAssignment
                    }
                }
            }
            field(:unk_v40_2, 88) {
                stl_vector(4) {
                    pointer {
                        global :EntityPositionAssignment
                    }
                }
            }
            field(:unk_v40_3, 104) {
                stl_vector(4) {
                    pointer {
                        global :EntityPositionAssignment
                    }
                }
            }
            field(:unk_v40_4, 120) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:unk_v40_5, 136) {
                stl_vector(4) {
                    number 32, true
                }
            }
        }
    }
    field(:tissue_styles, 2832) {
        compound(:HistoricalEntity_TTissueStyles) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :EntityTissueStyle
                    }
                }
            }
            field(:next_style_id, 16) {
                number 32, true
            }
        }
    }
    field(:squads, 2852) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def squads_tg ; squads.map { |i| df.world.squads.all.binsearch(i) } ; end
    field(:unknown1d, 2868) {
        compound(:HistoricalEntity_TUnknown1d) {
            field(:unk42, 0) {
                number 32, true
            }
            field(:unk43, 4) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:unk44, 20) {
                number 32, true
            }
            field(:unk44a, 24) {
                number 32, true
            }
            field(:unk44b, 28) {
                static_array(15, 4) {
                    number 32, true
                }
            }
        }
    }
    field(:training_knowledge, 2956) {
        pointer {
            compound(:HistoricalEntity_TTrainingKnowledge) {
                sizeof 32

                field(:level, 0) {
                    stl_vector(4) {
                        number 32, true, nil, TrainingKnowledgeLevel
                    }
                }
                field(:unk_10, 16) {
                    stl_vector(4) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:events, 2960) {
        stl_vector(4) {
            pointer {
                global :EntityEvent
            }
        }
    }
    field(:unk_v40_1a, 2976) {
        number 32, true
    }
    field(:unk_v40_1b, 2980) {
        number 32, true
    }
    field(:unk_v40_1c, 2984) {
        number 32, true
    }
    field(:unk_v40_1d, 2988) {
        number 32, true
    }
    field(:unk_v40_1e, 2992) {
        number 32, true
    }
    field(:meeting_events, 2996) {
        stl_vector(4) {
            pointer {
                global :MeetingEvent
            }
        }
    }
    field(:activity_stats, 3012) {
        pointer {
            global :EntityActivityStatistics
        }
    }
    field(:unknown1e, 3016) {
        compound(:HistoricalEntity_TUnknown1e) {
            field(:unk47, 0) {
                number 16, true
            }
            field(:unk48, 4) {
                number 32, true
            }
            field(:unk49a, 8) {
                number 32, true
            }
            field(:unk49b, 12) {
                number 32, true
            }
            field(:unk49c, 16) {
                number 32, true
            }
            field(:unk49d, 20) {
                static_array(10, 4) {
                    number 32, true
                }
            }
            field(:unk49e, 60) {
                number 32, true
            }
            field(:unk49f, 64) {
                number 32, true
            }
            field(:anon_1, 68) {
                number 32, true
            }
        }
    }
    field(:armies, 3088) {
        stl_vector(4) {
            pointer {
                global :Army
            }
        }
    }
    field(:army_controllers, 3104) {
        stl_vector(4) {
            pointer {
                global :ArmyController
            }
        }
    }
    field(:hist_figures, 3120) {
        stl_vector(4) {
            pointer {
                global :HistoricalFigure
            }
        }
    }
    field(:nemesis, 3136) {
        stl_vector(4) {
            pointer {
                global :NemesisRecord
            }
        }
    }
    field(:derived_resources, 3152) {
        compound(:HistoricalEntity_TDerivedResources) {
            field(:mill_cookable, 0) {
                global :MaterialVecRef
            }
            field(:mill_dye, 32) {
                global :MaterialVecRef
            }
            field(:armor_leather, 64) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def armor_leather_tg ; armor_leather.map { |i| df.world.raws.itemdefs.armor[i] } ; end
            field(:armor_chain, 80) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def armor_chain_tg ; armor_chain.map { |i| df.world.raws.itemdefs.armor[i] } ; end
            field(:armor_plate, 96) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def armor_plate_tg ; armor_plate.map { |i| df.world.raws.itemdefs.armor[i] } ; end
            field(:armor_under, 112) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def armor_under_tg ; armor_under.map { |i| df.world.raws.itemdefs.armor[i] } ; end
            field(:armor_over, 128) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def armor_over_tg ; armor_over.map { |i| df.world.raws.itemdefs.armor[i] } ; end
            field(:armor_cover, 144) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def armor_cover_tg ; armor_cover.map { |i| df.world.raws.itemdefs.armor[i] } ; end
            field(:pants_leather, 160) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def pants_leather_tg ; pants_leather.map { |i| df.world.raws.itemdefs.pants[i] } ; end
            field(:pants_chain, 176) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def pants_chain_tg ; pants_chain.map { |i| df.world.raws.itemdefs.pants[i] } ; end
            field(:pants_plate, 192) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def pants_plate_tg ; pants_plate.map { |i| df.world.raws.itemdefs.pants[i] } ; end
            field(:pants_under, 208) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def pants_under_tg ; pants_under.map { |i| df.world.raws.itemdefs.pants[i] } ; end
            field(:pants_over, 224) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def pants_over_tg ; pants_over.map { |i| df.world.raws.itemdefs.pants[i] } ; end
            field(:pants_cover, 240) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def pants_cover_tg ; pants_cover.map { |i| df.world.raws.itemdefs.pants[i] } ; end
            field(:helm_leather, 256) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def helm_leather_tg ; helm_leather.map { |i| df.world.raws.itemdefs.helms[i] } ; end
            field(:helm_chain, 272) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def helm_chain_tg ; helm_chain.map { |i| df.world.raws.itemdefs.helms[i] } ; end
            field(:helm_plate, 288) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def helm_plate_tg ; helm_plate.map { |i| df.world.raws.itemdefs.helms[i] } ; end
            field(:helm_under, 304) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def helm_under_tg ; helm_under.map { |i| df.world.raws.itemdefs.helms[i] } ; end
            field(:helm_over, 320) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def helm_over_tg ; helm_over.map { |i| df.world.raws.itemdefs.helms[i] } ; end
            field(:helm_cover, 336) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def helm_cover_tg ; helm_cover.map { |i| df.world.raws.itemdefs.helms[i] } ; end
            field(:shoes_leather, 352) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def shoes_leather_tg ; shoes_leather.map { |i| df.world.raws.itemdefs.shoes[i] } ; end
            field(:shoes_chain, 368) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def shoes_chain_tg ; shoes_chain.map { |i| df.world.raws.itemdefs.shoes[i] } ; end
            field(:shoes_plate, 384) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def shoes_plate_tg ; shoes_plate.map { |i| df.world.raws.itemdefs.shoes[i] } ; end
            field(:shoes_under, 400) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def shoes_under_tg ; shoes_under.map { |i| df.world.raws.itemdefs.shoes[i] } ; end
            field(:shoes_over, 416) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def shoes_over_tg ; shoes_over.map { |i| df.world.raws.itemdefs.shoes[i] } ; end
            field(:shoes_cover, 432) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def shoes_cover_tg ; shoes_cover.map { |i| df.world.raws.itemdefs.shoes[i] } ; end
            field(:gloves_leather, 448) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def gloves_leather_tg ; gloves_leather.map { |i| df.world.raws.itemdefs.gloves[i] } ; end
            field(:gloves_chain, 464) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def gloves_chain_tg ; gloves_chain.map { |i| df.world.raws.itemdefs.gloves[i] } ; end
            field(:gloves_plate, 480) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def gloves_plate_tg ; gloves_plate.map { |i| df.world.raws.itemdefs.gloves[i] } ; end
            field(:gloves_under, 496) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def gloves_under_tg ; gloves_under.map { |i| df.world.raws.itemdefs.gloves[i] } ; end
            field(:gloves_over, 512) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def gloves_over_tg ; gloves_over.map { |i| df.world.raws.itemdefs.gloves[i] } ; end
            field(:gloves_cover, 528) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def gloves_cover_tg ; gloves_cover.map { |i| df.world.raws.itemdefs.gloves[i] } ; end
        }
    }
    field(:assignments_by_type, 3696) {
        static_array(25, 16, EntityPositionResponsibility) {
            stl_vector(4) {
                pointer {
                    global :EntityPositionAssignment
                }
            }
        }
    }
    field(:claims, 4096) {
        compound(:HistoricalEntity_TClaims) {
            field(:areas, 0) {
                global :Coord2dPath
            }
            field(:unk1, 32) {
                global :Coord2dPath
            }
            field(:unk2, 64) {
                global :Coord2dPath
            }
        }
    }
    field(:children, 4192) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def children_tg ; children.map { |i| df.world.entities.all.binsearch(i) } ; end
    field(:unknown2, 4208) {
        compound(:HistoricalEntity_TUnknown2) {
            field(:metal_proficiency, 0) {
                number 32, true
            }
            field(:unk10, 4) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:resource_allotment, 20) {
                pointer {
                    global :ResourceAllotmentData
                }
            }
            field(:unk12a, 24) {
                number 16, true, -1
            }
            field(:unk12b, 26) {
                number 16, true
            }
            field(:unk13, 28) {
                number 8, true, nil, BooleanEnum
            }
            field(:unk14, 32) {
                number 32, true
            }
            field(:unk15, 36) {
                number 32, true
            }
            field(:unk16, 40) {
                number 32, true
            }
            field(:unk17, 44) {
                number 16, true
            }
            field(:unk18, 48) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:unk19, 64) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:unk20, 80) {
                number 16, true
            }
            field(:unk21, 84) {
                number 32, true
            }
            field(:unk22, 88) {
                number 32, true
            }
            field(:unk23, 92) {
                number 32, true
            }
            field(:unk24, 96) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:unk25, 112) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:unk26, 128) {
                static_array(177, 4) {
                    number 32, true
                }
            }
            field(:unk28, 836) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:unk29, 852) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
        }
    }
end

class HistoricalFigure < MemHack::Compound
    sizeof 280

    field(:profession, 0) {
        number 16, true, nil, Profession
    }
    field(:race, 2) {
        number 16, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:caste, 4) {
        number 16, true, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
    field(:sex, 6) {
        number 8, true
    }
    field(:orientation_flags, 8) {
        global :OrientationFlags
    }
    field(:appeared_year, 12) {
        number 32, true
    }
    field(:born_year, 16) {
        number 32, true
    }
    field(:born_seconds, 20) {
        number 32, true
    }
    field(:curse_year, 24) {
        number 32, true
    }
    field(:curse_seconds, 28) {
        number 32, true
    }
    field(:birth_year_bias, 32) {
        number 32, true
    }
    field(:birth_time_bias, 36) {
        number 32, true
    }
    field(:old_year, 40) {
        number 32, true
    }
    field(:old_seconds, 44) {
        number 32, true
    }
    field(:died_year, 48) {
        number 32, true
    }
    field(:died_seconds, 52) {
        number 32, true
    }
    field(:name, 56) {
        global :LanguageName
    }
    field(:civ_id, 164) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ_id) ; end
    field(:population_id, 168) {
        number 32, true, -1
    }
    def population_tg ; df.world.entity_populations.binsearch(population_id) ; end
    field(:breed_id, 172) {
        number 32, true
    }
    field(:cultural_identity, 176) {
        number 32, true, -1
    }
    def cultural_identity_tg ; df.world.cultural_identities.all.binsearch(cultural_identity) ; end
    field(:flags, 180) {
        df_flagarray(HistfigFlags)
    }
    field(:unit_id, 188) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
    field(:unit_id2, 192) {
        number 32, true, -1
    }
    def unit_tg2 ; df.world.units.all.binsearch(unit_id2) ; end
    field(:id, 196) {
        number 32, true
    }
    field(:unk4, 200) {
        number 32, true
    }
    field(:entity_links, 204) {
        stl_vector(4) {
            pointer {
                global :HistfigEntityLink
            }
        }
    }
    field(:site_links, 220) {
        stl_vector(4) {
            pointer {
                global :HistfigSiteLink
            }
        }
    }
    field(:histfig_links, 236) {
        stl_vector(4) {
            pointer {
                global :HistfigHfLink
            }
        }
    }
    field(:info, 252) {
        pointer {
            global :HistoricalFigureInfo
        }
    }
    field(:worldgen, 256) {
        compound(:HistoricalFigure_TWorldgen) {
            field(:unk_0, 0) {
                pointer {
                    global :WorldSite
                }
            }
            field(:unk_4, 4) {
                pointer {
                    global :LanguageName
                }
            }
            field(:unk_8, 8) {
                pointer {
                    global :WorldUndergroundRegion
                }
            }
            field(:unk_c, 12) {
                pointer {
                    compound(:HistoricalFigure_TWorldgen_TUnkC) {
                        sizeof 16

                        field(:unk_0, 0) {
                            df_array(1) {
                                number 8, false
                            }
                        }
                        field(:unk_8, 8) {
                            df_array(2) {
                                number 16, true
                            }
                        }
                    }
                }
            }
            field(:unk_10, 16) {
                number 32, true
            }
        }
    }
    field(:unk_v4019_1, 276) {
        number 32, true, -1
    }
end

class HistoricalFigureInfo < MemHack::Compound
    sizeof 52

    field(:spheres, 0) {
        pointer {
            stl_vector(2) {
                number 16, true, nil, SphereType
            }
        }
    }
    field(:skills, 4) {
        pointer {
            compound(:HistoricalFigureInfo_TSkills) {
                sizeof 68

                field(:skills, 0) {
                    stl_vector(2) {
                        number 16, true, nil, JobSkill
                    }
                }
                field(:points, 16) {
                    stl_vector(4) {
                        number 32, true
                    }
                }
                field(:unk_20, 32) {
                    stl_vector(2) {
                        number 16, true
                    }
                }
                field(:unk_30, 48) {
                    stl_vector(4) {
                        number 32, true
                    }
                }
                field(:unk_60, 64) {
                    number 16, true
                }
            }
        }
    }
    field(:pets, 8) {
        pointer {
            stl_vector(2) {
                number 16, true, -1
            }
        }
    }
    field(:personality, 12) {
        pointer {
            global :UnitPersonality
        }
    }
    field(:masterpieces, 16) {
        pointer {
            compound(:HistoricalFigureInfo_TMasterpieces) {
                sizeof 32

                field(:events, 0) {
                    stl_vector(4) {
                        number 32, true, -1
                    }
                }
                def events_tg ; events.map { |i| df.world.history.events.binsearch(i) } ; end
                field(:events2, 16) {
                    stl_vector(4) {
                        number 32, true, -1
                    }
                }
                def events2_tg ; events2.map { |i| df.world.history.events.binsearch(i) } ; end
            }
        }
    }
    field(:unk_14, 20) {
        pointer {
            compound(:HistoricalFigureInfo_TUnk14) {
                sizeof 52

                field(:unk_0, 0) {
                    number 16, true
                }
                field(:site, 4) {
                    number 32, true, -1
                }
                def site_tg ; df.world.world_data.sites.binsearch(site) ; end
                field(:region_id, 8) {
                    number 32, true, -1
                }
                def region_tg ; df.world.world_data.regions[region_id] ; end
                field(:beast_id, 12) {
                    number 32, true, -1
                }
                field(:anon_1, 16) {
                    number 32, true
                }
                field(:anon_2, 20) {
                    number 32, true
                }
                field(:anon_3, 24) {
                    number 32, true
                }
                field(:anon_4, 28) {
                    number 32, true
                }
                field(:anon_5, 32) {
                    number 32, true
                }
                field(:region, 36) {
                    global :Coord2d
                }
                field(:unk_14, 40) {
                    number 8, true
                }
                field(:unk_18, 44) {
                    number 32, true
                }
                field(:unk_1c, 48) {
                    number 32, true
                }
            }
        }
    }
    field(:kills, 24) {
        pointer {
            global :HistoricalKills
        }
    }
    field(:wounds, 28) {
        pointer {
            compound(:HistoricalFigureInfo_TWounds) {
                sizeof 48

                field(:events, 0) {
                    stl_vector(4) {
                        number 32, true, -1
                    }
                }
                def events_tg ; events.map { |i| df.world.history.events.binsearch(i) } ; end
                field(:status, 16) {
                    stl_bit_vector
                }
                field(:anon_1, 36) {
                    number 32, true
                }
                field(:anon_2, 40) {
                    number 32, true
                }
                field(:anon_3, 44) {
                    number 32, true
                }
            }
        }
    }
    field(:secret, 32) {
        pointer {
            compound(:HistoricalFigureInfo_TSecret) {
                sizeof 164

                field(:interactions, 0) {
                    stl_vector(4) {
                        pointer {
                            global :Interaction
                        }
                    }
                }
                field(:unk_10, 16) {
                    number 32, true
                }
                field(:anon_1, 20) {
                    stl_vector(4) {
                        number 32, true
                    }
                }
                field(:anon_2, 36) {
                    stl_vector(4) {
                        number 32, true
                    }
                }
                field(:anon_3, 52) {
                    stl_vector(4) {
                        pointer {
                            compound(:HistoricalFigureInfo_TSecret_TAnon3) {
                                sizeof 24

                                field(:anon_1, 0) {
                                    number 32, true
                                }
                                field(:anon_2, 4) {
                                    number 32, true
                                }
                                field(:anon_3, 8) {
                                    number 32, true
                                }
                                field(:anon_4, 12) {
                                    number 32, true
                                }
                                field(:anon_5, 16) {
                                    number 32, true
                                }
                                field(:anon_6, 20) {
                                    number 32, true
                                }
                            }
                        }
                    }
                }
                field(:anon_4, 68) {
                    stl_vector(4) {
                        pointer {
                            global :EntityEvent
                        }
                    }
                }
                field(:anon_5, 84) {
                    stl_vector(4) {
                        number 32, true
                    }
                }
                field(:anon_6, 100) {
                    stl_vector(4) {
                        number 32, true
                    }
                }
                field(:anon_7, 116) {
                    stl_vector(4) {
                        number 32, true
                    }
                }
                field(:anon_8, 132) {
                    stl_vector(4) {
                        number 32, true
                    }
                }
                field(:anon_9, 148) {
                    stl_vector(4) {
                        pointer {
                            compound(:HistoricalFigureInfo_TSecret_TAnon9) {
                                sizeof 56

                                field(:anon_1, 0) {
                                    number 32, true
                                }
                                field(:anon_2, 4) {
                                    number 32, true
                                }
                                field(:anon_3, 8) {
                                    stl_vector(4) {
                                        number 32, true
                                    }
                                }
                                field(:anon_4, 24) {
                                    stl_vector(4) {
                                        number 32, true
                                    }
                                }
                                field(:anon_5, 40) {
                                    stl_vector(4) {
                                        number 32, true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    field(:curse, 36) {
        pointer {
            compound(:HistoricalFigureInfo_TCurse) {
                sizeof 256

                field(:active_interactions, 0) {
                    stl_vector(4) {
                        pointer {
                            global :Interaction
                        }
                    }
                }
                field(:active_effects, 16) {
                    stl_vector(4) {
                        pointer {
                            global :InteractionEffect
                        }
                    }
                }
                field(:can_do, 32) {
                    stl_vector(4) {
                        pointer {
                            global :Interaction
                        }
                    }
                }
                field(:unk_30, 48) {
                    number 32, true
                }
                field(:unk_34, 52) {
                    number 32, true
                }
                field(:unk_38, 56) {
                    number 32, true
                }
                field(:unk_3c, 60) {
                    number 32, true
                }
                field(:unk_40, 64) {
                    number 8, true
                }
                field(:name, 68) {
                    stl_string
                }
                field(:name_plural, 96) {
                    stl_string
                }
                field(:name_adjective, 124) {
                    stl_string
                }
                field(:race, 152) {
                    number 32, true, -1
                }
                def race_tg ; df.world.raws.creatures.all[race] ; end
                field(:caste, 156) {
                    number 16, true, -1
                }
                def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
                field(:unk_a0, 160) {
                    stl_vector(4) {
                        number 32, true
                    }
                }
                field(:unk_b0, 176) {
                    stl_vector(4) {
                        number 32, true
                    }
                }
                field(:unk_c0, 192) {
                    stl_vector(4) {
                        number 32, true
                    }
                }
                field(:unk_d0, 208) {
                    number 32, true
                }
                field(:unk_d4, 212) {
                    number 32, true
                }
                field(:unk_d8, 216) {
                    number 32, true
                }
                field(:unk_dc, 220) {
                    number 32, true
                }
                field(:unk_e0, 224) {
                    stl_string
                }
                field(:unk_fc, 252) {
                    number 32, true
                }
            }
        }
    }
    field(:books, 40) {
        pointer {
            stl_vector(4) {
                pointer {
                    global :ArtifactRecord
                }
            }
        }
    }
    field(:reputation, 44) {
        pointer {
            compound(:HistoricalFigureInfo_TReputation) {
                sizeof 56

                field(:wanted, 0) {
                    stl_vector(4) {
                        pointer {
                            compound(:HistoricalFigureInfo_TReputation_TWanted) {
                                sizeof 48

                                field(:entity_id, 0) {
                                    number 32, true, -1
                                }
                                def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                                field(:anon_1, 4) {
                                    stl_vector(4) {
                                        number 32, true
                                    }
                                }
                                field(:anon_2, 20) {
                                    stl_vector(4) {
                                        number 32, true
                                    }
                                }
                                field(:discovered_year, 36) {
                                    number 32, true
                                }
                                field(:discovered_time, 40) {
                                    number 32, true
                                }
                                field(:unsolved_murders, 44) {
                                    number 32, true
                                }
                            }
                        }
                    }
                }
                field(:anon_1, 16) {
                    stl_vector(4) {
                        pointer {
                            compound(:HistoricalFigureInfo_TReputation_TAnon1) {
                                sizeof 48

                                field(:entity_id, 0) {
                                    number 32, true, -1
                                }
                                def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                                field(:anon_1, 4) {
                                    stl_vector(4) {
                                        number 32, true
                                    }
                                }
                                field(:anon_2, 20) {
                                    stl_vector(4) {
                                        number 32, true
                                    }
                                }
                                field(:discovered_year, 36) {
                                    number 32, true
                                }
                                field(:discovered_time, 40) {
                                    number 32, true
                                }
                                field(:unsolved_murders, 44) {
                                    number 32, true
                                }
                            }
                        }
                    }
                }
                field(:cur_identity, 32) {
                    number 32, true, -1
                }
                def cur_identity_tg ; df.world.identities.all.binsearch(cur_identity) ; end
                field(:all_identities, 36) {
                    stl_vector(4) {
                        number 32, true, -1
                    }
                }
                def all_identities_tg ; all_identities.map { |i| df.world.identities.all.binsearch(i) } ; end
                field(:anon_2, 52) {
                    number 32, true
                }
            }
        }
    }
    field(:relationships, 48) {
        pointer {
            compound(:HistoricalFigureInfo_TRelationships) {
                sizeof 32

                field(:anon_1, 0) {
                    stl_vector(4) {
                        pointer {
                            compound(:HistoricalFigureInfo_TRelationships_TAnon1) {
                                sizeof 68

                                field(:anon_1, 0) {
                                    number 32, true, -1
                                }
                                def anon_1_tg ; df.world.history.figures.binsearch(anon_1) ; end
                                field(:anon_2, 4) {
                                    number 32, true
                                }
                                field(:anon_3, 8) {
                                    stl_vector(4) {
                                        number 32, true
                                    }
                                }
                                field(:anon_4, 24) {
                                    stl_vector(4) {
                                        number 32, true
                                    }
                                }
                                field(:anon_5, 40) {
                                    stl_vector(4) {
                                        number 32, true
                                    }
                                }
                                field(:anon_6, 56) {
                                    number 32, true
                                }
                                field(:anon_7, 60) {
                                    number 32, true
                                }
                                field(:anon_8, 64) {
                                    number 32, true
                                }
                            }
                        }
                    }
                }
                field(:identities, 16) {
                    stl_vector(4) {
                        number 32, true, -1
                    }
                }
                def identities_tg ; identities.map { |i| df.world.cultural_identities.all.binsearch(i) } ; end
            }
        }
    }
end

class HistoricalKills < MemHack::Compound
    sizeof 128

    field(:events, 0) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def events_tg ; events.map { |i| df.world.history.events.binsearch(i) } ; end
    field(:killed_race, 16) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    def killed_race_tg ; killed_race.map { |i| df.world.raws.creatures.all[i] } ; end
    field(:killed_caste, 32) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:unk_30, 48) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_40, 64) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:killed_site, 80) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def killed_site_tg ; killed_site.map { |i| df.world.world_data.sites.binsearch(i) } ; end
    field(:killed_undead, 96) {
        stl_vector(2) {
            compound(:HistoricalKills_TKilledUndead) {
                field(:_whole, 0) {
                    number 16, false
                }
                field(:skeletal, 0) { bit 0 }
                field(:zombie, 0) { bit 1 }
                field(:ghostly, 0) { bit 2 }
            }
        }
    }
    field(:killed_count, 112) {
        stl_vector(4) {
            number 32, true
        }
    }
end

class HistoryEra < MemHack::Compound
    sizeof 100

    field(:year, 0) {
        number 32, true
    }
    field(:title, 4) {
        compound(:HistoryEra_TTitle) {
            field(:type, 0) {
                number 16, true, nil, EraType
            }
            field(:histfig_1, 4) {
                number 32, true, -1
            }
            def histfig_1_tg ; df.world.history.figures.binsearch(histfig_1) ; end
            field(:histfig_2, 8) {
                number 32, true, -1
            }
            def histfig_2_tg ; df.world.history.figures.binsearch(histfig_2) ; end
            field(:ordinal, 12) {
                number 32, true
            }
            field(:name, 16) {
                stl_string
            }
            field(:percent, 44) {
                number 32, true
            }
        }
    }
    field(:details, 52) {
        compound(:HistoryEra_TDetails) {
            field(:living_powers, 0) {
                number 32, true
            }
            field(:living_megabeasts, 4) {
                number 32, true
            }
            field(:living_semimegabeasts, 8) {
                number 32, true
            }
            field(:power_hf1, 12) {
                number 32, true, -1
            }
            def power_hf1_tg ; df.world.history.figures.binsearch(power_hf1) ; end
            field(:power_hf2, 16) {
                number 32, true, -1
            }
            def power_hf2_tg ; df.world.history.figures.binsearch(power_hf2) ; end
            field(:power_hf3, 20) {
                number 32, true, -1
            }
            def power_hf3_tg ; df.world.history.figures.binsearch(power_hf3) ; end
            field(:civilized_races, 24) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:civilized_total, 40) {
                number 32, true
            }
            field(:civilized_mundane, 44) {
                number 32, true
            }
        }
    }
end

class HistoryEvent < MemHack::Compound
    sizeof 24

    rtti_classname :history_eventst

    field(:year, 4) {
        number 32, true
    }
    field(:seconds, 8) {
        number 32, true
    }
    field(:flags, 12) {
        df_flagarray
    }
    field(:id, 20) {
        number 32, true
    }
    def getType()
        HistoryEventType.sym(DFHack.vmethod_call(self, 0))
    end
    def getWarStatus(entity1, entity2)
        val = DFHack.vmethod_call(self, 4, entity1, entity2)
    end
    def getAngerModifier(entity1, entity2)
        val = DFHack.vmethod_call(self, 8, entity1, entity2)
    end
    def getHappinessModifier(entity1, entity2)
        val = DFHack.vmethod_call(self, 12, entity1, entity2)
    end
    def madeFirstContact(entity1, entity2, site)
        val = DFHack.vmethod_call(self, 16, entity1, entity2, site)
        (val & 1) != 0
    end
    def getKilledHistfigID(killer)
        val = DFHack.vmethod_call(self, 20, killer)
    end
    def wasHistfigKilled(victim)
        val = DFHack.vmethod_call(self, 24, victim)
        (val & 1) != 0
    end
    def wasHistfigRevived(histfig)
        val = DFHack.vmethod_call(self, 28, histfig)
        (val & 1) != 0
    end
    def getRelatedHistfigIDs(vec)
        DFHack.vmethod_call(self, 40, vec) ; nil
    end
    def getRelatedSiteIDs(vec)
        DFHack.vmethod_call(self, 44, vec) ; nil
    end
    def getRelatedSiteStructureIDs(vec1, vec2)
        DFHack.vmethod_call(self, 48, vec1, vec2) ; nil
    end
    def getRelatedArtifactIDs(vec)
        DFHack.vmethod_call(self, 52, vec) ; nil
    end
    def getRelatedRegionIDs(vec)
        DFHack.vmethod_call(self, 56, vec) ; nil
    end
    def getRelatedLayerIDs(vec)
        DFHack.vmethod_call(self, 60, vec) ; nil
    end
    def getRelatedEntityIDs(vec)
        DFHack.vmethod_call(self, 64, vec) ; nil
    end
    def isRelatedToHistfigID(histfig)
        val = DFHack.vmethod_call(self, 68, histfig)
        (val & 1) != 0
    end
    def isRelatedToSiteID(site)
        val = DFHack.vmethod_call(self, 72, site)
        (val & 1) != 0
    end
    def isRelatedToSiteStructure(site, structure)
        val = DFHack.vmethod_call(self, 76, site, structure)
        (val & 1) != 0
    end
    def isRelatedToArtifactID(artifact)
        val = DFHack.vmethod_call(self, 80, artifact)
        (val & 1) != 0
    end
    def isRelatedToRegionID(region)
        val = DFHack.vmethod_call(self, 84, region)
        (val & 1) != 0
    end
    def isRelatedToLayerID(region)
        val = DFHack.vmethod_call(self, 88, region)
        (val & 1) != 0
    end
    def isRelatedToEntityID(entity)
        val = DFHack.vmethod_call(self, 96, entity)
        (val & 1) != 0
    end
    def getSentence(str, context, unk1, unk2)
        DFHack.vmethod_call(self, 104, str, context, unk1, unk2) ; nil
    end
    def getPhrase(str, context, unk1, unk2)
        DFHack.vmethod_call(self, 108, str, context, unk1, unk2) ; nil
    end
    def populateArtImage(image)
        DFHack.vmethod_call(self, 112, image) ; nil
    end
    def generate_xml(arg0, arg1)
        DFHack.vmethod_call(self, 136, arg0, arg1) ; nil
    end
    def write_file(file)
        DFHack.vmethod_call(self, 140, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 144, file, loadversion) ; nil
    end
end

class HistoryEventAddHfEntityLinkst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_add_hf_entity_linkst

    field(:civ, 24) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ) ; end
    field(:histfig, 28) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:link_type, 32) {
        number 32, true, nil, HistfigEntityLinkType
    }
    field(:position_id, 36) {
        number 32, true
    }
end

class HistoryEventAddHfHfLinkst < HistoryEvent
    sizeof 36

    rtti_classname :history_event_add_hf_hf_linkst

    field(:hf, 24) {
        number 32, true, -1
    }
    def hf_tg ; df.world.history.figures.binsearch(hf) ; end
    field(:hf_target, 28) {
        number 32, true, -1
    }
    def hf_target_tg ; df.world.history.figures.binsearch(hf_target) ; end
    field(:type, 32) {
        number 32, true, nil, HistfigHfLinkType
    }
end

class HistoryEventAddHfSiteLinkst < HistoryEvent
    sizeof 44

    rtti_classname :history_event_add_hf_site_linkst

    field(:site, 24) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:structure, 28) {
        number 32, true, -1
    }
    field(:histfig, 32) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:civ, 36) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ) ; end
    field(:type, 40) {
        number 32, true, nil, HistfigSiteLinkType
    }
end

class HistoryEventAgreementConcludedst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_agreement_concludedst

    field(:agreement_id, 24) {
        number 32, true
    }
    field(:subject_id, 28) {
        number 32, true
    }
    field(:reason, 32) {
        number 32, true, nil, AgreementConclusionReason
    }
    field(:concluder_hf, 36) {
        number 32, true, -1
    }
    def concluder_hf_tg ; df.world.history.figures.binsearch(concluder_hf) ; end
end

class HistoryEventAgreementFormedst < HistoryEvent
    sizeof 28

    rtti_classname :history_event_agreement_formedst

    field(:agreement_id, 24) {
        number 32, true
    }
end

class HistoryEventAgreementsVoidedst < HistoryEvent
    sizeof 32

    rtti_classname :history_event_agreements_voidedst

    field(:source, 24) {
        number 32, true, -1
    }
    def source_tg ; df.world.entities.all.binsearch(source) ; end
    field(:destination, 28) {
        number 32, true, -1
    }
    def destination_tg ; df.world.entities.all.binsearch(destination) ; end
end

class HistoryEventArtifactCreatedst < HistoryEvent
    sizeof 44

    rtti_classname :history_event_artifact_createdst

    field(:artifact_id, 24) {
        number 32, true, -1
    }
    def artifact_tg ; df.world.artifacts.all.binsearch(artifact_id) ; end
    field(:unit_id, 28) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
    field(:hfid, 32) {
        number 32, true, -1
    }
    def hfid_tg ; df.world.history.figures.binsearch(hfid) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:flags2, 40) {
        number 32, false
    }
end

class HistoryEventArtifactDroppedst < HistoryEvent
    sizeof 48

    rtti_classname :history_event_artifact_droppedst

    field(:artifact, 24) {
        number 32, true, -1
    }
    def artifact_tg ; df.world.artifacts.all.binsearch(artifact) ; end
    field(:unit, 28) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit) ; end
    field(:histfig, 32) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:flags2, 40) {
        df_flagarray
    }
end

class HistoryEventArtifactFoundst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_artifact_foundst

    field(:artifact, 24) {
        number 32, true, -1
    }
    def artifact_tg ; df.world.artifacts.all.binsearch(artifact) ; end
    field(:unit, 28) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit) ; end
    field(:histfig, 32) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventArtifactHiddenst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_artifact_hiddenst

    field(:artifact, 24) {
        number 32, true, -1
    }
    def artifact_tg ; df.world.artifacts.all.binsearch(artifact) ; end
    field(:unit, 28) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit) ; end
    field(:histfig, 32) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventArtifactLostst < HistoryEvent
    sizeof 32

    rtti_classname :history_event_artifact_lostst

    field(:artifact, 24) {
        number 32, true, -1
    }
    def artifact_tg ; df.world.artifacts.all.binsearch(artifact) ; end
    field(:site, 28) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventArtifactPossessedst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_artifact_possessedst

    field(:artifact, 24) {
        number 32, true, -1
    }
    def artifact_tg ; df.world.artifacts.all.binsearch(artifact) ; end
    field(:unit, 28) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit) ; end
    field(:histfig, 32) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventArtifactRecoveredst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_artifact_recoveredst

    field(:artifact, 24) {
        number 32, true, -1
    }
    def artifact_tg ; df.world.artifacts.all.binsearch(artifact) ; end
    field(:unit, 28) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit) ; end
    field(:histfig, 32) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventArtifactStoredst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_artifact_storedst

    field(:artifact, 24) {
        number 32, true, -1
    }
    def artifact_tg ; df.world.artifacts.all.binsearch(artifact) ; end
    field(:unit, 28) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit) ; end
    field(:histfig, 32) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventAssumeIdentityst < HistoryEvent
    sizeof 36

    rtti_classname :history_event_assume_identityst

    field(:trickster, 24) {
        number 32, true, -1
    }
    def trickster_tg ; df.world.history.figures.binsearch(trickster) ; end
    field(:identity, 28) {
        number 32, true, -1
    }
    def identity_tg ; df.world.identities.all.binsearch(identity) ; end
    field(:target, 32) {
        number 32, true, -1
    }
    def target_tg ; df.world.entities.all.binsearch(target) ; end
end

class HistoryEventBodyAbusedst < HistoryEvent
    sizeof 88

    rtti_classname :history_event_body_abusedst

    field(:bodies, 24) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def bodies_tg ; bodies.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:anon_1, 40) {
        number 32, true
    }
    field(:civ, 44) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ) ; end
    field(:histfig, 48) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:site, 52) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region, 56) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 60) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:region_pos, 64) {
        global :Coord2d
    }
    field(:abuse_type, 68) {
        number 16, true
    }
    field(:props, 72) {
        compound(:HistoryEventBodyAbusedst_TProps) {
            field(:item, 0) {
                compound(:HistoryEventBodyAbusedst_TProps_TItem) {
                    field(:item_type, 0) {
                        number 16, true, nil, ItemType
                    }
                    field(:item_subtype, 4) {
                        number 32, true, -1
                    }
                    field(:mat_type, 8) {
                        number 16, true, -1
                    }
                    field(:mat_index, 12) {
                        number 32, true
                    }
                }
            }
            field(:structure, 0) {
                number 32, true, -1
            }
            field(:pile_type, 0) {
                number 32, true
            }
        }
    }
end

class HistoryEventChangeCreatureTypest < HistoryEvent
    sizeof 48

    rtti_classname :history_event_change_creature_typest

    field(:changee, 24) {
        number 32, true, -1
    }
    def changee_tg ; df.world.history.figures.binsearch(changee) ; end
    field(:changer, 28) {
        number 32, true, -1
    }
    def changer_tg ; df.world.history.figures.binsearch(changer) ; end
    field(:old_race, 32) {
        number 32, true, -1
    }
    def old_race_tg ; df.world.raws.creatures.all[old_race] ; end
    field(:old_caste, 36) {
        number 32, true, -1
    }
    def old_caste_tg ; df.world.raws.creatures.all[race_from].caste[old_caste] ; end
    field(:new_race, 40) {
        number 32, true, -1
    }
    def new_race_tg ; df.world.raws.creatures.all[new_race] ; end
    field(:new_caste, 44) {
        number 32, true, -1
    }
    def new_caste_tg ; df.world.raws.creatures.all[race_to].caste[new_caste] ; end
end

class HistoryEventChangeHfBodyStatest < HistoryEvent
    sizeof 52

    rtti_classname :history_event_change_hf_body_statest

    field(:histfig, 24) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:body_state, 28) {
        number 8, true, nil, HistfigBodyState
    }
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:structure, 36) {
        number 32, true, -1
    }
    field(:region, 40) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 44) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:region_pos, 48) {
        global :Coord2d
    }
end

class HistoryEventChangeHfJobst < HistoryEvent
    sizeof 44

    rtti_classname :history_event_change_hf_jobst

    field(:hfid, 24) {
        number 32, true, -1
    }
    def hfid_tg ; df.world.history.figures.binsearch(hfid) ; end
    field(:new_job, 28) {
        number 16, true, nil, Profession
    }
    field(:old_job, 30) {
        number 16, true, nil, Profession
    }
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region, 36) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 40) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
end

class HistoryEventChangeHfStatest < HistoryEvent
    sizeof 52

    rtti_classname :history_event_change_hf_statest

    field(:hfid, 24) {
        number 32, true, -1
    }
    def hfid_tg ; df.world.history.figures.binsearch(hfid) ; end
    field(:state, 28) {
        number 16, true
    }
    field(:substate, 32) {
        number 32, true
    }
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region, 40) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 44) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:region_pos, 48) {
        global :Coord2d
    }
end

class HistoryEventCollection < MemHack::Compound
    sizeof 64

    rtti_classname :history_event_collectionst

    field(:events, 4) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def events_tg ; events.map { |i| df.world.history.events.binsearch(i) } ; end
    field(:collections, 20) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def collections_tg ; collections.map { |i| df.world.history.event_collections.all.binsearch(i) } ; end
    field(:start_year, 36) {
        number 32, true
    }
    field(:end_year, 40) {
        number 32, true
    }
    field(:start_seconds, 44) {
        number 32, true
    }
    field(:end_seconds, 48) {
        number 32, true
    }
    field(:flags, 52) {
        df_flagarray
    }
    field(:id, 60) {
        number 32, true
    }
    def getType()
        HistoryEventCollectionType.sym(DFHack.vmethod_call(self, 0))
    end
    def generate_xml(arg0, arg1)
        DFHack.vmethod_call(self, 4, arg0, arg1) ; nil
    end
    def write_file(file)
        DFHack.vmethod_call(self, 8, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 12, file, loadversion) ; nil
    end
    def categorize()
        DFHack.vmethod_call(self, 16) ; nil
    end
    def uncategorize()
        DFHack.vmethod_call(self, 20) ; nil
    end
    def getName(string)
        DFHack.vmethod_call(self, 24, string) ; nil
    end
    def getRegionCoords(x, y)
        DFHack.vmethod_call(self, 28, x, y) ; nil
    end
    def getParent()
        val = DFHack.vmethod_call(self, 32)
    end
    def isBetweenEntities(defender_civ, attacker_civ)
        val = DFHack.vmethod_call(self, 40, defender_civ, attacker_civ)
    end
    def updateEndTime()
        DFHack.vmethod_call(self, 44) ; nil
    end
end

class HistoryEventCollectionAbductionst < HistoryEventCollection
    sizeof 144

    rtti_classname :history_event_collection_abductionst

    field(:parent_collection, 64) {
        number 32, true, -1
    }
    def parent_collection_tg ; df.world.history.event_collections.all.binsearch(parent_collection) ; end
    field(:region, 68) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 72) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:site, 76) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region_pos, 80) {
        global :Coord2d
    }
    field(:attacker_civ, 84) {
        number 32, true, -1
    }
    def attacker_civ_tg ; df.world.entities.all.binsearch(attacker_civ) ; end
    field(:defender_civ, 88) {
        number 32, true, -1
    }
    def defender_civ_tg ; df.world.entities.all.binsearch(defender_civ) ; end
    field(:snatcher_hf, 92) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def snatcher_hf_tg ; snatcher_hf.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:victim_hf, 108) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def victim_hf_tg ; victim_hf.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:anon_1, 124) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:ordinal, 140) {
        number 32, true
    }
end

class HistoryEventCollectionBattlest < HistoryEventCollection
    sizeof 436

    rtti_classname :history_event_collection_battlest

    field(:name, 64) {
        global :LanguageName
    }
    field(:parent_collection, 172) {
        number 32, true, -1
    }
    def parent_collection_tg ; df.world.history.event_collections.all.binsearch(parent_collection) ; end
    field(:region, 176) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 180) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:site, 184) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region_pos, 188) {
        global :Coord2d
    }
    field(:attacker_civ, 192) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def attacker_civ_tg ; attacker_civ.map { |i| df.world.entities.all.binsearch(i) } ; end
    field(:defender_civ, 208) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def defender_civ_tg ; defender_civ.map { |i| df.world.entities.all.binsearch(i) } ; end
    field(:attacker_hf, 224) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def attacker_hf_tg ; attacker_hf.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:defender_hf, 240) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def defender_hf_tg ; defender_hf.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:noncombat_hf, 256) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def noncombat_hf_tg ; noncombat_hf.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:attacker_squad_entity_pop, 272) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:attacker_squad_counts, 288) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:attacker_squad_deaths, 304) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:attacker_squad_races, 320) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def attacker_squad_races_tg ; attacker_squad_races.map { |i| df.world.raws.creatures.all[i] } ; end
    field(:attacker_squad_sites, 336) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def attacker_squad_sites_tg ; attacker_squad_sites.map { |i| df.world.world_data.sites.binsearch(i) } ; end
    field(:defender_squad_entity_pops, 352) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:defender_squad_counts, 368) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:defender_squad_deaths, 384) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:defender_squad_races, 400) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def defender_squad_races_tg ; defender_squad_races.map { |i| df.world.raws.creatures.all[i] } ; end
    field(:defender_squad_sites, 416) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def defender_squad_sites_tg ; defender_squad_sites.map { |i| df.world.world_data.sites.binsearch(i) } ; end
    field(:outcome, 432) {
        number 16, true
    }
end

class HistoryEventCollectionBeastAttackst < HistoryEventCollection
    sizeof 108

    rtti_classname :history_event_collection_beast_attackst

    field(:parent_collection, 64) {
        number 32, true, -1
    }
    def parent_collection_tg ; df.world.history.event_collections.all.binsearch(parent_collection) ; end
    field(:region, 68) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 72) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:site, 76) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region_pos, 80) {
        global :Coord2d
    }
    field(:defender_civ, 84) {
        number 32, true, -1
    }
    def defender_civ_tg ; df.world.entities.all.binsearch(defender_civ) ; end
    field(:attacker_hf, 88) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def attacker_hf_tg ; attacker_hf.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:ordinal, 104) {
        number 32, true
    }
end

class HistoryEventCollectionDuelst < HistoryEventCollection
    sizeof 100

    rtti_classname :history_event_collection_duelst

    field(:parent_collection, 64) {
        number 32, true, -1
    }
    def parent_collection_tg ; df.world.history.event_collections.all.binsearch(parent_collection) ; end
    field(:region, 68) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 72) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:site, 76) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region_pos, 80) {
        global :Coord2d
    }
    field(:attacker_hf, 84) {
        number 32, true, -1
    }
    def attacker_hf_tg ; df.world.history.figures.binsearch(attacker_hf) ; end
    field(:defender_hf, 88) {
        number 32, true, -1
    }
    def defender_hf_tg ; df.world.history.figures.binsearch(defender_hf) ; end
    field(:ordinal, 92) {
        number 32, true
    }
    field(:anon_1, 96) {
        number 8, true
    }
end

class HistoryEventCollectionInsurrectionst < HistoryEventCollection
    sizeof 76

    rtti_classname :history_event_collection_insurrectionst

    field(:site, 64) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:target_civ, 68) {
        number 32, true, -1
    }
    def target_civ_tg ; df.world.entities.all.binsearch(target_civ) ; end
    field(:ordinal, 72) {
        number 32, true
    }
end

class HistoryEventCollectionJourneyst < HistoryEventCollection
    sizeof 84

    rtti_classname :history_event_collection_journeyst

    field(:traveler_hf, 64) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def traveler_hf_tg ; traveler_hf.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:ordinal, 80) {
        number 32, true
    }
end

class HistoryEventCollectionSiteConqueredst < HistoryEventCollection
    sizeof 112

    rtti_classname :history_event_collection_site_conqueredst

    field(:parent_collection, 64) {
        number 32, true, -1
    }
    def parent_collection_tg ; df.world.history.event_collections.all.binsearch(parent_collection) ; end
    field(:site, 68) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:attacker_civ, 72) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def attacker_civ_tg ; attacker_civ.map { |i| df.world.entities.all.binsearch(i) } ; end
    field(:defender_civ, 88) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def defender_civ_tg ; defender_civ.map { |i| df.world.entities.all.binsearch(i) } ; end
    field(:anon_1, 104) {
        number 16, true
    }
    field(:ordinal, 108) {
        number 32, true
    }
end

class HistoryEventCollectionTheftst < HistoryEventCollection
    sizeof 304

    rtti_classname :history_event_collection_theftst

    field(:parent_collection, 64) {
        number 32, true, -1
    }
    def parent_collection_tg ; df.world.history.event_collections.all.binsearch(parent_collection) ; end
    field(:region, 68) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 72) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:site, 76) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region_pos, 80) {
        global :Coord2d
    }
    field(:thief_civ, 84) {
        number 32, true, -1
    }
    def thief_civ_tg ; df.world.entities.all.binsearch(thief_civ) ; end
    field(:victim_civ, 88) {
        number 32, true, -1
    }
    def victim_civ_tg ; df.world.entities.all.binsearch(victim_civ) ; end
    field(:thief_hf, 92) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def thief_hf_tg ; thief_hf.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:stolen_item_types, 108) {
        stl_vector(2) {
            number 16, true, nil, ItemType
        }
    }
    field(:stolen_item_subtypes, 124) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:stolen_mat_types, 140) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:stolen_mat_indices, 156) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:stolen_item_ids, 172) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def stolen_item_tgs ; stolen_item_ids.map { |i| df.world.items.all.binsearch(i) } ; end
    field(:anon_1, 188) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_2, 204) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_3, 220) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_4, 236) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_5, 252) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_6, 268) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_7, 284) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:ordinal, 300) {
        number 32, true
    }
end

class HistoryEventCollectionWarst < HistoryEventCollection
    sizeof 408

    rtti_classname :history_event_collection_warst

    field(:name, 64) {
        global :LanguageName
    }
    field(:attacker_civ, 172) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def attacker_civ_tg ; attacker_civ.map { |i| df.world.entities.all.binsearch(i) } ; end
    field(:defender_civ, 188) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def defender_civ_tg ; defender_civ.map { |i| df.world.entities.all.binsearch(i) } ; end
    field(:unk, 204) {
        compound(:HistoryEventCollectionWarst_TUnk) {
            field(:anon_1, 0) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_2, 16) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:anon_3, 32) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:anon_4, 48) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:anon_5, 64) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:anon_6, 80) {
                number 32, true
            }
            field(:ethics_unk1, 84) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:disputed_ethics, 100) {
                stl_vector(4) {
                    global :EthicType
                }
            }
            field(:ethics_unk3, 116) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:dispute_severities, 132) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:worst_severity, 148) {
                number 32, true
            }
            field(:anon_7, 152) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_8, 168) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:anon_9, 184) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:anon_10, 200) {
                number 32, true
            }
        }
    }
end

class HistoryEventContext < MemHack::Compound
    sizeof 16

    field(:anon_1, 0) {
        number 32, true
    }
    field(:anon_2, 4) {
        number 32, true
    }
    field(:histfig_id_talker, 8) {
        number 32, true, -1
    }
    def histfig_id_talker_tg ; df.world.history.figures.binsearch(histfig_id_talker) ; end
    field(:histfig_id_listener, 12) {
        number 32, true, -1
    }
    def histfig_id_listener_tg ; df.world.history.figures.binsearch(histfig_id_listener) ; end
end

class HistoryEventCreateEntityPositionst < HistoryEvent
    sizeof 44

    rtti_classname :history_event_create_entity_positionst

    field(:histfig, 24) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:civ, 28) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ) ; end
    field(:site_civ, 32) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:position, 36) {
        number 32, true
    }
    field(:reason, 40) {
        number 16, true
    }
end

class HistoryEventCreatedBuildingst < HistoryEvent
    sizeof 44

    rtti_classname :history_event_created_buildingst

    field(:civ, 24) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ) ; end
    field(:site_civ, 28) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:structure, 36) {
        number 32, true, -1
    }
    field(:builder_hf, 40) {
        number 32, true, -1
    }
    def builder_hf_tg ; df.world.history.figures.binsearch(builder_hf) ; end
end

class HistoryEventCreatedSitest < HistoryEvent
    sizeof 40

    rtti_classname :history_event_created_sitest

    field(:civ, 24) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ) ; end
    field(:site_civ, 28) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:builder_hf, 36) {
        number 32, true, -1
    }
    def builder_hf_tg ; df.world.history.figures.binsearch(builder_hf) ; end
end

class HistoryEventCreatedWorldConstructionst < HistoryEvent
    sizeof 48

    rtti_classname :history_event_created_world_constructionst

    field(:civ, 24) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ) ; end
    field(:site_civ, 28) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:construction, 32) {
        number 32, true
    }
    field(:master_construction, 36) {
        number 32, true
    }
    field(:site1, 40) {
        number 32, true, -1
    }
    def site1_tg ; df.world.world_data.sites.binsearch(site1) ; end
    field(:site2, 44) {
        number 32, true, -1
    }
    def site2_tg ; df.world.world_data.sites.binsearch(site2) ; end
end

class HistoryEventCreatureDevouredst < HistoryEvent
    sizeof 56

    rtti_classname :history_event_creature_devouredst

    field(:victim, 24) {
        number 32, true, -1
    }
    def victim_tg ; df.world.history.figures.binsearch(victim) ; end
    field(:race, 28) {
        number 32, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:caste, 32) {
        number 16, true, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
    field(:eater, 36) {
        number 32, true, -1
    }
    def eater_tg ; df.world.history.figures.binsearch(eater) ; end
    field(:entity, 40) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity) ; end
    field(:site, 44) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region, 48) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 52) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
end

class HistoryEventDiplomatLostst < HistoryEvent
    sizeof 36

    rtti_classname :history_event_diplomat_lostst

    field(:entity, 24) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity) ; end
    field(:involved, 28) {
        number 32, true, -1
    }
    def involved_tg ; df.world.entities.all.binsearch(involved) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventEntityActionst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_entity_actionst

    field(:entity, 24) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity) ; end
    field(:site, 28) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:structure, 32) {
        number 32, true, -1
    }
    field(:action, 36) {
        number 32, true, nil, EntityActionType
    }
end

class HistoryEventEntityCreatedst < HistoryEvent
    sizeof 36

    rtti_classname :history_event_entity_createdst

    field(:entity, 24) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity) ; end
    field(:site, 28) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:structure, 32) {
        number 32, true, -1
    }
end

class HistoryEventEntityIncorporatedst < HistoryEvent
    sizeof 36

    rtti_classname :history_event_entity_incorporatedst

    field(:migrant_entity, 24) {
        number 32, true, -1
    }
    def migrant_entity_tg ; df.world.entities.all.binsearch(migrant_entity) ; end
    field(:join_entity, 28) {
        number 32, true, -1
    }
    def join_entity_tg ; df.world.entities.all.binsearch(join_entity) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventEntityLawst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_entity_lawst

    field(:entity, 24) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity) ; end
    field(:histfig, 28) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:add_flags, 32) {
        number 32, true
    }
    field(:remove_flags, 36) {
        number 32, true
    }
end

class HistoryEventEntityRazedBuildingst < HistoryEvent
    sizeof 36

    rtti_classname :history_event_entity_razed_buildingst

    field(:civ, 24) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ) ; end
    field(:site, 28) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:structure, 32) {
        number 32, true, -1
    }
end

class HistoryEventFirstContactFailedst < HistoryEvent
    sizeof 36

    rtti_classname :history_event_first_contact_failedst

    field(:contactor, 24) {
        number 32, true, -1
    }
    def contactor_tg ; df.world.entities.all.binsearch(contactor) ; end
    field(:rejector, 28) {
        number 32, true, -1
    }
    def rejector_tg ; df.world.entities.all.binsearch(rejector) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventFirstContactst < HistoryEvent
    sizeof 36

    rtti_classname :history_event_first_contactst

    field(:contactor, 24) {
        number 32, true, -1
    }
    def contactor_tg ; df.world.entities.all.binsearch(contactor) ; end
    field(:contacted, 28) {
        number 32, true, -1
    }
    def contacted_tg ; df.world.entities.all.binsearch(contacted) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventHfActOnBuildingst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_hf_act_on_buildingst

    field(:action, 24) {
        number 32, true
    }
    field(:histfig, 28) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:structure, 36) {
        number 32, true, -1
    }
end

class HistoryEventHfAttackedSitest < HistoryEvent
    sizeof 40

    rtti_classname :history_event_hf_attacked_sitest

    field(:attacker_hf, 24) {
        number 32, true, -1
    }
    def attacker_hf_tg ; df.world.history.figures.binsearch(attacker_hf) ; end
    field(:defender_civ, 28) {
        number 32, true, -1
    }
    def defender_civ_tg ; df.world.entities.all.binsearch(defender_civ) ; end
    field(:site_civ, 32) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventHfConfrontedst < HistoryEvent
    sizeof 64

    rtti_classname :history_event_hf_confrontedst

    field(:target, 24) {
        number 32, true, -1
    }
    def target_tg ; df.world.history.figures.binsearch(target) ; end
    field(:accuser, 28) {
        number 32, true, -1
    }
    def accuser_tg ; df.world.history.figures.binsearch(accuser) ; end
    field(:reasons, 32) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:site, 48) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region, 52) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 56) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:region_pos, 60) {
        global :Coord2d
    }
end

class HistoryEventHfDestroyedSitest < HistoryEvent
    sizeof 40

    rtti_classname :history_event_hf_destroyed_sitest

    field(:attacker_hf, 24) {
        number 32, true, -1
    }
    def attacker_hf_tg ; df.world.history.figures.binsearch(attacker_hf) ; end
    field(:defender_civ, 28) {
        number 32, true, -1
    }
    def defender_civ_tg ; df.world.entities.all.binsearch(defender_civ) ; end
    field(:site_civ, 32) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventHfDoesInteractionst < HistoryEvent
    sizeof 52

    rtti_classname :history_event_hf_does_interactionst

    field(:doer, 24) {
        number 32, true, -1
    }
    def doer_tg ; df.world.history.figures.binsearch(doer) ; end
    field(:target, 28) {
        number 32, true, -1
    }
    def target_tg ; df.world.history.figures.binsearch(target) ; end
    field(:interaction, 32) {
        number 32, true, -1
    }
    def interaction_tg ; df.world.raws.interactions.binsearch(interaction) ; end
    field(:anon_1, 36) {
        number 32, true
    }
    field(:site, 40) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region, 44) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 48) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
end

class HistoryEventHfGainsSecretGoalst < HistoryEvent
    sizeof 32

    rtti_classname :history_event_hf_gains_secret_goalst

    field(:histfig, 24) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:goal, 28) {
        number 32, true, nil, GoalType
    }
end

class HistoryEventHfLearnsSecretst < HistoryEvent
    sizeof 44

    rtti_classname :history_event_hf_learns_secretst

    field(:student, 24) {
        number 32, true, -1
    }
    def student_tg ; df.world.history.figures.binsearch(student) ; end
    field(:teacher, 28) {
        number 32, true, -1
    }
    def teacher_tg ; df.world.history.figures.binsearch(teacher) ; end
    field(:artifact, 32) {
        number 32, true, -1
    }
    def artifact_tg ; df.world.artifacts.all.binsearch(artifact) ; end
    field(:interaction, 36) {
        number 32, true, -1
    }
    def interaction_tg ; df.world.raws.interactions.binsearch(interaction) ; end
    field(:anon_1, 40) {
        number 32, true
    }
end

class HistoryEventHfRazedBuildingst < HistoryEvent
    sizeof 36

    rtti_classname :history_event_hf_razed_buildingst

    field(:histfig, 24) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:site, 28) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:structure, 32) {
        number 32, true, -1
    }
end

class HistoryEventHistFigureAbductedst < HistoryEvent
    sizeof 44

    rtti_classname :history_event_hist_figure_abductedst

    field(:target, 24) {
        number 32, true, -1
    }
    def target_tg ; df.world.history.figures.binsearch(target) ; end
    field(:snatcher, 28) {
        number 32, true, -1
    }
    def snatcher_tg ; df.world.history.figures.binsearch(snatcher) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region, 36) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 40) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
end

class HistoryEventHistFigureDiedst < HistoryEvent
    sizeof 88

    rtti_classname :history_event_hist_figure_diedst

    field(:victim_hf, 24) {
        number 32, true, -1
    }
    def victim_hf_tg ; df.world.history.figures.binsearch(victim_hf) ; end
    field(:slayer_hf, 28) {
        number 32, true, -1
    }
    def slayer_hf_tg ; df.world.history.figures.binsearch(slayer_hf) ; end
    field(:slayer_race, 32) {
        number 32, true, -1
    }
    def slayer_race_tg ; df.world.raws.creatures.all[slayer_race] ; end
    field(:slayer_caste, 36) {
        number 32, true, -1
    }
    def slayer_caste_tg ; df.world.raws.creatures.all[slayer_race].caste[slayer_caste] ; end
    field(:weapon, 40) {
        global :HistoryHitItem
    }
    field(:site, 72) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:subregion, 76) {
        number 32, true, -1
    }
    def subregion_tg ; df.world.world_data.regions[subregion] ; end
    field(:feature_layer, 80) {
        number 32, true, -1
    }
    def feature_layer_tg ; df.world.world_data.underground_regions[feature_layer] ; end
    field(:death_cause, 84) {
        number 16, true, nil, DeathType
    }
end

class HistoryEventHistFigureNewPetst < HistoryEvent
    sizeof 72

    rtti_classname :history_event_hist_figure_new_petst

    field(:group, 24) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def group_tg ; group.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:pets, 40) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    def pets_tg ; pets.map { |i| df.world.raws.creatures.all[i] } ; end
    field(:site, 56) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region, 60) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 64) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:region_pos, 68) {
        global :Coord2d
    }
end

class HistoryEventHistFigureReachSummitst < HistoryEvent
    sizeof 52

    rtti_classname :history_event_hist_figure_reach_summitst

    field(:group, 24) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def group_tg ; group.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:region, 40) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 44) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:region_pos, 48) {
        global :Coord2d
    }
end

class HistoryEventHistFigureReunionst < HistoryEvent
    sizeof 72

    rtti_classname :history_event_hist_figure_reunionst

    field(:missing, 24) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def missing_tg ; missing.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:reunited_with, 40) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def reunited_with_tg ; reunited_with.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:assistant, 56) {
        number 32, true, -1
    }
    def assistant_tg ; df.world.history.figures.binsearch(assistant) ; end
    field(:site, 60) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region, 64) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 68) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
end

class HistoryEventHistFigureRevivedst < HistoryEvent
    sizeof 48

    rtti_classname :history_event_hist_figure_revivedst

    field(:histfig, 24) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:site, 28) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region, 32) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 36) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:ghost_type, 40) {
        number 16, true, nil, GhostType
    }
    field(:flags, 44) {
        number 32, true
    }
end

class HistoryEventHistFigureSimpleBattleEventst < HistoryEvent
    sizeof 72

    rtti_classname :history_event_hist_figure_simple_battle_eventst

    field(:group1, 24) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def group1_tg ; group1.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:group2, 40) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def group2_tg ; group2.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:site, 56) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region, 60) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 64) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:subtype, 68) {
        number 16, true, nil, HistoryEventSimpleBattleSubtype
    }
end

class HistoryEventHistFigureTravelst < HistoryEvent
    sizeof 60

    rtti_classname :history_event_hist_figure_travelst

    field(:group, 24) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def group_tg ; group.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:site, 40) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region, 44) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 48) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:reason, 52) {
        number 32, true
    }
    field(:region_pos, 56) {
        global :Coord2d
    }
end

class HistoryEventHistFigureWoundedst < HistoryEvent
    sizeof 56

    rtti_classname :history_event_hist_figure_woundedst

    field(:woundee, 24) {
        number 32, true, -1
    }
    def woundee_tg ; df.world.history.figures.binsearch(woundee) ; end
    field(:wounder, 28) {
        number 32, true, -1
    }
    def wounder_tg ; df.world.history.figures.binsearch(wounder) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:region, 36) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 40) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:woundee_race, 44) {
        number 32, true, -1
    }
    def woundee_race_tg ; df.world.raws.creatures.all[woundee_race] ; end
    field(:woundee_caste, 48) {
        number 16, true, -1
    }
    def woundee_caste_tg ; df.world.raws.creatures.all[victim_race].caste[woundee_caste] ; end
    field(:body_part, 50) {
        number 16, true
    }
    field(:injury_type, 52) {
        number 16, true
    }
    field(:part_lost, 54) {
        number 8, true
    }
end

class HistoryEventInsurrectionEndedst < HistoryEvent
    sizeof 36

    rtti_classname :history_event_insurrection_endedst

    field(:target_civ, 24) {
        number 32, true, -1
    }
    def target_civ_tg ; df.world.entities.all.binsearch(target_civ) ; end
    field(:site, 28) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:outcome, 32) {
        number 32, true, nil, InsurrectionOutcome
    }
end

class HistoryEventInsurrectionStartedst < HistoryEvent
    sizeof 32

    rtti_classname :history_event_insurrection_startedst

    field(:target_civ, 24) {
        number 32, true, -1
    }
    def target_civ_tg ; df.world.entities.all.binsearch(target_civ) ; end
    field(:site, 28) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventItemStolenst < HistoryEvent
    sizeof 72

    rtti_classname :history_event_item_stolenst

    field(:item_type, 24) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 26) {
        number 16, true, -1
    }
    field(:mattype, 28) {
        number 16, true, -1
    }
    field(:matindex, 32) {
        number 32, true
    }
    field(:item, 36) {
        number 32, true, -1
    }
    def item_tg ; df.world.items.all.binsearch(item) ; end
    field(:entity, 40) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity) ; end
    field(:histfig, 44) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:site, 48) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:structure, 52) {
        number 32, true, -1
    }
    field(:region, 56) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 60) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:region_pos, 64) {
        global :Coord2d
    }
    field(:anon_1, 68) {
        number 32, true
    }
end

class HistoryEventMasterpieceCreatedst < HistoryEvent
    sizeof 36

    rtti_classname :history_event_masterpiece_createdst

    field(:maker, 24) {
        number 32, true, -1
    }
    def maker_tg ; df.world.history.figures.binsearch(maker) ; end
    field(:maker_entity, 28) {
        number 32, true, -1
    }
    def maker_entity_tg ; df.world.entities.all.binsearch(maker_entity) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventMasterpieceCreatedArchConstructst < HistoryEventMasterpieceCreatedst
    sizeof 52

    rtti_classname :history_event_masterpiece_created_arch_constructst

    field(:anon_1, 36) {
        number 32, true
    }
    field(:building_type, 40) {
        number 16, true
    }
    field(:building_subtype, 42) {
        number 16, true
    }
    field(:building_custom, 44) {
        number 32, true
    }
    field(:anon_2, 48) {
        number 32, true
    }
end

class HistoryEventMasterpieceCreatedArchDesignst < HistoryEventMasterpieceCreatedst
    sizeof 52

    rtti_classname :history_event_masterpiece_created_arch_designst

    field(:anon_1, 36) {
        number 32, true
    }
    field(:building_type, 40) {
        number 16, true
    }
    field(:building_subtype, 42) {
        number 16, true
    }
    field(:building_custom, 44) {
        number 32, true
    }
    field(:anon_2, 48) {
        number 32, true
    }
end

class HistoryEventMasterpieceCreatedDyeItemst < HistoryEventMasterpieceCreatedst
    sizeof 64

    rtti_classname :history_event_masterpiece_created_dye_itemst

    field(:anon_1, 36) {
        number 32, true
    }
    field(:item_type, 40) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 42) {
        number 16, true, -1
    }
    field(:mat_type, 44) {
        number 16, true, -1
    }
    field(:mat_index, 48) {
        number 32, true
    }
    field(:anon_2, 52) {
        number 32, true
    }
    field(:dye_mat_type, 56) {
        number 16, true, -1
    }
    field(:dye_mat_index, 60) {
        number 32, true
    }
end

class HistoryEventMasterpieceCreatedEngravingst < HistoryEventMasterpieceCreatedst
    sizeof 48

    rtti_classname :history_event_masterpiece_created_engravingst

    field(:skill_rating, 36) {
        number 32, true, nil, SkillRating
    }
    field(:art_id, 40) {
        number 32, true, -1
    }
    def art_tg ; df.world.art_image_chunks.binsearch(art_id) ; end
    field(:art_subid, 44) {
        number 16, true, -1
    }
end

class HistoryEventMasterpieceCreatedFoodst < HistoryEventMasterpieceCreatedst
    sizeof 48

    rtti_classname :history_event_masterpiece_created_foodst

    field(:unk1, 36) {
        number 32, true
    }
    field(:item_subtype, 40) {
        number 16, true, -1
    }
    def item_subtype_tg ; df.world.raws.itemdefs.food[item_subtype] ; end
    field(:item_id, 44) {
        number 32, true, -1
    }
    def item_tg ; df.world.items.all.binsearch(item_id) ; end
end

class HistoryEventMasterpieceCreatedItemImprovementst < HistoryEventMasterpieceCreatedst
    sizeof 80

    rtti_classname :history_event_masterpiece_created_item_improvementst

    field(:anon_1, 36) {
        number 32, true
    }
    field(:item_type, 40) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 42) {
        number 16, true, -1
    }
    field(:mat_type, 44) {
        number 16, true, -1
    }
    field(:mat_index, 48) {
        number 32, true
    }
    field(:anon_2, 52) {
        number 32, true
    }
    field(:improvement_type, 56) {
        number 16, true, nil, ImprovementType
    }
    field(:improvement_subtype, 60) {
        number 32, true
    }
    field(:imp_mat_type, 64) {
        number 16, true, -1
    }
    field(:imp_mat_index, 68) {
        number 32, true
    }
    field(:art_id, 72) {
        number 32, true, -1
    }
    def art_tg ; df.world.art_image_chunks.binsearch(art_id) ; end
    field(:art_subid, 76) {
        number 16, true, -1
    }
end

class HistoryEventMasterpieceCreatedItemst < HistoryEventMasterpieceCreatedst
    sizeof 52

    rtti_classname :history_event_masterpiece_created_itemst

    field(:skill_used, 36) {
        number 32, true, nil, JobSkill
    }
    field(:item_type, 40) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 42) {
        number 16, true, -1
    }
    field(:mat_type, 44) {
        number 16, true, -1
    }
    field(:mat_index, 46) {
        number 16, true
    }
    field(:item_id, 48) {
        number 32, true, -1
    }
    def item_tg ; df.world.items.all.binsearch(item_id) ; end
end

class HistoryEventMasterpieceLostst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_masterpiece_lostst

    field(:creation_event, 24) {
        number 32, true, -1
    }
    def creation_event_tg ; df.world.history.events.binsearch(creation_event) ; end
    field(:histfig, 28) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:method, 36) {
        number 16, true, nil, MasterpieceLossType
    }
end

class HistoryEventMerchantst < HistoryEvent
    sizeof 44

    rtti_classname :history_event_merchantst

    field(:source, 24) {
        number 32, true, -1
    }
    def source_tg ; df.world.entities.all.binsearch(source) ; end
    field(:destination, 28) {
        number 32, true, -1
    }
    def destination_tg ; df.world.entities.all.binsearch(destination) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:flags2, 36) {
        df_flagarray
    }
end

class HistoryEventReclaimSitest < HistoryEvent
    sizeof 40

    rtti_classname :history_event_reclaim_sitest

    field(:civ, 24) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ) ; end
    field(:site_civ, 28) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:flags, 36) {
        number 32, true
    }
end

class HistoryEventRemoveHfEntityLinkst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_remove_hf_entity_linkst

    field(:civ, 24) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ) ; end
    field(:histfig, 28) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:link_type, 32) {
        number 32, true, nil, HistfigEntityLinkType
    }
    field(:position_id, 36) {
        number 32, true
    }
end

class HistoryEventRemoveHfHfLinkst < HistoryEvent
    sizeof 36

    rtti_classname :history_event_remove_hf_hf_linkst

    field(:hf, 24) {
        number 32, true, -1
    }
    def hf_tg ; df.world.history.figures.binsearch(hf) ; end
    field(:hf_target, 28) {
        number 32, true, -1
    }
    def hf_target_tg ; df.world.history.figures.binsearch(hf_target) ; end
    field(:type, 32) {
        number 32, true, nil, HistfigHfLinkType
    }
end

class HistoryEventRemoveHfSiteLinkst < HistoryEvent
    sizeof 44

    rtti_classname :history_event_remove_hf_site_linkst

    field(:site, 24) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:structure, 28) {
        number 32, true, -1
    }
    field(:histfig, 32) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig) ; end
    field(:civ, 36) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ) ; end
    field(:type, 40) {
        number 32, true, nil, HistfigSiteLinkType
    }
end

class HistoryEventReplacedBuildingst < HistoryEvent
    sizeof 44

    rtti_classname :history_event_replaced_buildingst

    field(:civ, 24) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ) ; end
    field(:site_civ, 28) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:old_structure, 36) {
        number 32, true, -1
    }
    field(:new_structure, 40) {
        number 32, true, -1
    }
end

class HistoryEventSiteDiedst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_site_diedst

    field(:civ, 24) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ) ; end
    field(:site_civ, 28) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:flags, 36) {
        number 32, true
    }
end

class HistoryEventSiteDisputest < HistoryEvent
    sizeof 44

    rtti_classname :history_event_site_disputest

    field(:dispute_type, 24) {
        number 32, true, nil, SiteDisputeType
    }
    field(:entity_1, 28) {
        number 32, true, -1
    }
    def entity_1_tg ; df.world.entities.all.binsearch(entity_1) ; end
    field(:entity_2, 32) {
        number 32, true, -1
    }
    def entity_2_tg ; df.world.entities.all.binsearch(entity_2) ; end
    field(:site_1, 36) {
        number 32, true, -1
    }
    def site_1_tg ; df.world.world_data.sites.binsearch(site_1) ; end
    field(:site_2, 40) {
        number 32, true, -1
    }
    def site_2_tg ; df.world.world_data.sites.binsearch(site_2) ; end
end

class HistoryEventSiteRetiredst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_site_retiredst

    field(:civ, 24) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ) ; end
    field(:site_civ, 28) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:flags, 36) {
        number 32, true
    }
end

class HistoryEventTopicagreementConcludedst < HistoryEvent
    sizeof 44

    rtti_classname :history_event_topicagreement_concludedst

    field(:source, 24) {
        number 32, true, -1
    }
    def source_tg ; df.world.entities.all.binsearch(source) ; end
    field(:destination, 28) {
        number 32, true, -1
    }
    def destination_tg ; df.world.entities.all.binsearch(destination) ; end
    field(:site, 32) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:topic, 36) {
        number 16, true, nil, MeetingTopic
    }
    field(:result, 40) {
        number 32, true
    }
end

class HistoryEventTopicagreementMadest < HistoryEvent
    sizeof 40

    rtti_classname :history_event_topicagreement_madest

    field(:topic, 24) {
        number 16, true, nil, MeetingTopic
    }
    field(:source, 28) {
        number 32, true, -1
    }
    def source_tg ; df.world.entities.all.binsearch(source) ; end
    field(:destination, 32) {
        number 32, true, -1
    }
    def destination_tg ; df.world.entities.all.binsearch(destination) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventTopicagreementRejectedst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_topicagreement_rejectedst

    field(:topic, 24) {
        number 16, true, nil, MeetingTopic
    }
    field(:source, 28) {
        number 32, true, -1
    }
    def source_tg ; df.world.entities.all.binsearch(source) ; end
    field(:destination, 32) {
        number 32, true, -1
    }
    def destination_tg ; df.world.entities.all.binsearch(destination) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventWarAttackedSitest < HistoryEvent
    sizeof 48

    rtti_classname :history_event_war_attacked_sitest

    field(:attacker_civ, 24) {
        number 32, true, -1
    }
    def attacker_civ_tg ; df.world.entities.all.binsearch(attacker_civ) ; end
    field(:defender_civ, 28) {
        number 32, true, -1
    }
    def defender_civ_tg ; df.world.entities.all.binsearch(defender_civ) ; end
    field(:site_civ, 32) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:attacker_general_hf, 40) {
        number 32, true, -1
    }
    def attacker_general_hf_tg ; df.world.history.figures.binsearch(attacker_general_hf) ; end
    field(:defender_general_hf, 44) {
        number 32, true, -1
    }
    def defender_general_hf_tg ; df.world.history.figures.binsearch(defender_general_hf) ; end
end

class HistoryEventWarDestroyedSitest < HistoryEvent
    sizeof 40

    rtti_classname :history_event_war_destroyed_sitest

    field(:attacker_civ, 24) {
        number 32, true, -1
    }
    def attacker_civ_tg ; df.world.entities.all.binsearch(attacker_civ) ; end
    field(:defender_civ, 28) {
        number 32, true, -1
    }
    def defender_civ_tg ; df.world.entities.all.binsearch(defender_civ) ; end
    field(:site_civ, 32) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventWarFieldBattlest < HistoryEvent
    sizeof 52

    rtti_classname :history_event_war_field_battlest

    field(:attacker_civ, 24) {
        number 32, true, -1
    }
    def attacker_civ_tg ; df.world.entities.all.binsearch(attacker_civ) ; end
    field(:defender_civ, 28) {
        number 32, true, -1
    }
    def defender_civ_tg ; df.world.entities.all.binsearch(defender_civ) ; end
    field(:region, 32) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region] ; end
    field(:layer, 36) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:region_pos, 40) {
        global :Coord2d
    }
    field(:attacker_general_hf, 44) {
        number 32, true, -1
    }
    def attacker_general_hf_tg ; df.world.history.figures.binsearch(attacker_general_hf) ; end
    field(:defender_general_hf, 48) {
        number 32, true, -1
    }
    def defender_general_hf_tg ; df.world.history.figures.binsearch(defender_general_hf) ; end
end

class HistoryEventWarPeaceAcceptedst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_war_peace_acceptedst

    field(:topic, 24) {
        number 16, true, nil, MeetingTopic
    }
    field(:source, 28) {
        number 32, true, -1
    }
    def source_tg ; df.world.entities.all.binsearch(source) ; end
    field(:destination, 32) {
        number 32, true, -1
    }
    def destination_tg ; df.world.entities.all.binsearch(destination) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventWarPeaceRejectedst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_war_peace_rejectedst

    field(:topic, 24) {
        number 16, true, nil, MeetingTopic
    }
    field(:source, 28) {
        number 32, true, -1
    }
    def source_tg ; df.world.entities.all.binsearch(source) ; end
    field(:destination, 32) {
        number 32, true, -1
    }
    def destination_tg ; df.world.entities.all.binsearch(destination) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventWarPlunderedSitest < HistoryEvent
    sizeof 40

    rtti_classname :history_event_war_plundered_sitest

    field(:attacker_civ, 24) {
        number 32, true, -1
    }
    def attacker_civ_tg ; df.world.entities.all.binsearch(attacker_civ) ; end
    field(:defender_civ, 28) {
        number 32, true, -1
    }
    def defender_civ_tg ; df.world.entities.all.binsearch(defender_civ) ; end
    field(:site_civ, 32) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventWarSiteNewLeaderst < HistoryEvent
    sizeof 60

    rtti_classname :history_event_war_site_new_leaderst

    field(:attacker_civ, 24) {
        number 32, true, -1
    }
    def attacker_civ_tg ; df.world.entities.all.binsearch(attacker_civ) ; end
    field(:new_site_civ, 28) {
        number 32, true, -1
    }
    def new_site_civ_tg ; df.world.entities.all.binsearch(new_site_civ) ; end
    field(:defender_civ, 32) {
        number 32, true, -1
    }
    def defender_civ_tg ; df.world.entities.all.binsearch(defender_civ) ; end
    field(:site_civ, 36) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:site, 40) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:new_leaders, 44) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def new_leaders_tg ; new_leaders.map { |i| df.world.history.figures.binsearch(i) } ; end
end

class HistoryEventWarSiteTakenOverst < HistoryEvent
    sizeof 44

    rtti_classname :history_event_war_site_taken_overst

    field(:attacker_civ, 24) {
        number 32, true, -1
    }
    def attacker_civ_tg ; df.world.entities.all.binsearch(attacker_civ) ; end
    field(:new_site_civ, 28) {
        number 32, true, -1
    }
    def new_site_civ_tg ; df.world.entities.all.binsearch(new_site_civ) ; end
    field(:defender_civ, 32) {
        number 32, true, -1
    }
    def defender_civ_tg ; df.world.entities.all.binsearch(defender_civ) ; end
    field(:site_civ, 36) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:site, 40) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryEventWarSiteTributeForcedst < HistoryEvent
    sizeof 40

    rtti_classname :history_event_war_site_tribute_forcedst

    field(:attacker_civ, 24) {
        number 32, true, -1
    }
    def attacker_civ_tg ; df.world.entities.all.binsearch(attacker_civ) ; end
    field(:defender_civ, 28) {
        number 32, true, -1
    }
    def defender_civ_tg ; df.world.entities.all.binsearch(defender_civ) ; end
    field(:site_civ, 32) {
        number 32, true, -1
    }
    def site_civ_tg ; df.world.entities.all.binsearch(site_civ) ; end
    field(:site, 36) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
end

class HistoryHitItem < MemHack::Compound
    sizeof 32

    field(:item, 0) {
        number 32, true, -1
    }
    def item_tg ; df.world.items.all.binsearch(item) ; end
    field(:item_type, 4) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 6) {
        number 16, true, -1
    }
    field(:mattype, 8) {
        number 16, true, -1
    }
    field(:matindex, 12) {
        number 32, true
    }
    field(:shooter_item, 16) {
        number 32, true, -1
    }
    def shooter_item_tg ; df.world.items.all.binsearch(shooter_item) ; end
    field(:shooter_item_type, 20) {
        number 16, true, nil, ItemType
    }
    field(:shooter_item_subtype, 22) {
        number 16, true, -1
    }
    field(:shooter_mattype, 24) {
        number 16, true, -1
    }
    field(:shooter_matindex, 28) {
        number 32, true
    }
end

class HiveFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:do_install, 0) { bit 0 }
    field(:do_gather, 0) { bit 1 }
    field(:ready_split, 0) { bit 2 }
end

class HospitalSupplies < MemHack::Compound
    sizeof 64

    field(:supplies_needed, 0) {
        compound(:HospitalSupplies_TSuppliesNeeded) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:splints, 0) { bit 0 }
            field(:thread, 0) { bit 1 }
            field(:cloth, 0) { bit 2 }
            field(:crutches, 0) { bit 3 }
            field(:plaster, 0) { bit 4 }
            field(:buckets, 0) { bit 5 }
            field(:soap, 0) { bit 6 }
        }
    }
    field(:max_splints, 4) {
        number 32, true, 5
    }
    field(:max_thread, 8) {
        number 32, true, 75000
    }
    field(:max_cloth, 12) {
        number 32, true, 50000
    }
    field(:max_crutches, 16) {
        number 32, true, 5
    }
    field(:max_plaster, 20) {
        number 32, true, 750
    }
    field(:max_buckets, 24) {
        number 32, true, 2
    }
    field(:max_soap, 28) {
        number 32, true, 750
    }
    field(:cur_splints, 32) {
        number 32, true
    }
    field(:cur_thread, 36) {
        number 32, true
    }
    field(:cur_cloth, 40) {
        number 32, true
    }
    field(:cur_crutches, 44) {
        number 32, true
    }
    field(:cur_plaster, 48) {
        number 32, true
    }
    field(:cur_buckets, 52) {
        number 32, true
    }
    field(:cur_soap, 56) {
        number 32, true
    }
    field(:supply_recheck_timer, 60) {
        number 32, true
    }
end

class Identity < MemHack::Compound
    sizeof 136

    field(:id, 0) {
        number 32, true
    }
    field(:name, 4) {
        global :LanguageName
    }
    field(:race, 112) {
        number 32, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:caste, 116) {
        number 16, true, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
    field(:histfig_id, 120) {
        number 32, true, -1
    }
    def histfig_tg ; df.world.history.figures.binsearch(histfig_id) ; end
    field(:unk_4c, 124) {
        number 32, true
    }
    field(:birth_year, 128) {
        number 32, true
    }
    field(:birth_second, 132) {
        number 32, true
    }
end

class Incident < MemHack::Compound
    sizeof 132

    field(:id, 0) {
        number 32, true
    }
    field(:unk_4, 4) {
        number 32, true
    }
    field(:witnesses, 8) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def witnesses_tg ; witnesses.map { |i| df.world.units.all.binsearch(i) } ; end
    field(:victim, 24) {
        number 32, true, -1
    }
    def victim_tg ; df.world.units.all.binsearch(victim) ; end
    field(:victim_hfid, 28) {
        number 32, true, -1
    }
    def victim_hfid_tg ; df.world.history.figures.binsearch(victim_hfid) ; end
    field(:victim_race, 32) {
        number 32, true, -1
    }
    def victim_race_tg ; df.world.raws.creatures.all[victim_race] ; end
    field(:victim_caste, 36) {
        number 32, true, -1
    }
    def victim_caste_tg ; df.world.raws.creatures.all[victim_race].caste[victim_caste] ; end
    field(:unk_v40_1b, 40) {
        number 32, true, -1
    }
    field(:unk_v40_1c, 44) {
        number 32, true, -1
    }
    field(:killer, 48) {
        number 32, true, -1
    }
    def killer_tg ; df.world.units.all.binsearch(killer) ; end
    field(:killer_hfid, 52) {
        number 32, true, -1
    }
    def killer_hfid_tg ; df.world.history.figures.binsearch(killer_hfid) ; end
    field(:killer_race, 56) {
        number 32, true, -1
    }
    def killer_race_tg ; df.world.raws.creatures.all[killer_race] ; end
    field(:killer_caste, 60) {
        number 32, true, -1
    }
    def killer_caste_tg ; df.world.raws.creatures.all[killer_race].caste[killer_caste] ; end
    field(:entity1, 64) {
        number 32, true, -1
    }
    def entity1_tg ; df.world.entities.all.binsearch(entity1) ; end
    field(:unk_v40_2c, 68) {
        number 32, true, -1
    }
    field(:crime_id, 72) {
        number 32, true, -1
    }
    def crime_tg ; df.world.crimes.all.binsearch(crime_id) ; end
    field(:site, 76) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site) ; end
    field(:unk_v40_3a, 80) {
        number 32, true, -1
    }
    field(:unk_v40_3b, 84) {
        number 32, true, -1
    }
    field(:entity, 88) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity) ; end
    field(:event_year, 92) {
        number 32, true
    }
    field(:event_time, 96) {
        number 32, true
    }
    field(:flags, 100) {
        compound(:Incident_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:announced_missing, 0) { bit 0 }
            field(:discovered, 0) { bit 1 }
            field(:unk2, 0) { bit 2 }
        }
    }
    field(:death_cause, 104) {
        number 16, true, nil, DeathType
    }
    field(:unk_6c, 108) {
        number 32, true
    }
    field(:unk_70, 112) {
        number 32, true
    }
    field(:world_x, 116) {
        number 32, true
    }
    field(:world_y, 120) {
        number 32, true
    }
    field(:world_z, 124) {
        number 32, true
    }
    field(:unk_80, 128) {
        number 32, true
    }
end

class Init < MemHack::Compound
    sizeof 4232

    field(:display, 0) {
        global :InitDisplay
    }
    field(:media, 40) {
        global :InitMedia
    }
    field(:input, 52) {
        global :InitInput
    }
    field(:font, 88) {
        global :InitFont
    }
    field(:window, 4224) {
        global :InitWindow
    }
end

class InitDisplay < MemHack::Compound
    sizeof 40

    field(:flag, 0) {
        df_flagarray(InitDisplayFlags)
    }
    field(:windowed, 8) {
        class ::DFHack::InitDisplay_TWindowed < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :True ; NUME[:True] = 0
            ENUM[1] = :False ; NUME[:False] = 1
            ENUM[2] = :Prompt ; NUME[:Prompt] = 2
        end

        number 32, true, nil, InitDisplay_TWindowed
    }
    field(:grid_x, 12) {
        number 32, true
    }
    field(:grid_y, 16) {
        number 32, true
    }
    field(:desired_fullscreen_width, 20) {
        number 32, true
    }
    field(:desired_fullscreen_height, 24) {
        number 32, true
    }
    field(:desired_windowed_width, 28) {
        number 32, true
    }
    field(:desired_windowed_height, 32) {
        number 32, true
    }
    field(:partial_print_count, 36) {
        number 8, true
    }
end

class InitFont < MemHack::Compound
    sizeof 4136

    field(:small_font_texpos, 0) {
        static_array(256, 4) {
            number 32, true
        }
    }
    field(:large_font_texpos, 1024) {
        static_array(256, 4) {
            number 32, true
        }
    }
    field(:small_font_datapos, 2048) {
        static_array(256, 4) {
            number 32, true
        }
    }
    field(:large_font_datapos, 3072) {
        static_array(256, 4) {
            number 32, true
        }
    }
    field(:small_font_adjx, 4096) {
        float
    }
    field(:small_font_adjy, 4100) {
        float
    }
    field(:large_font_adjx, 4104) {
        float
    }
    field(:large_font_adjy, 4108) {
        float
    }
    field(:small_font_dispx, 4112) {
        number 32, true
    }
    field(:small_font_dispy, 4116) {
        number 32, true
    }
    field(:large_font_dispx, 4120) {
        number 32, true
    }
    field(:large_font_dispy, 4124) {
        number 32, true
    }
    field(:use_ttf, 4128) {
        class ::DFHack::InitFont_TUseTtf < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :TTF_OFF ; NUME[:TTF_OFF] = 0
            ENUM[1] = :TTF_ON ; NUME[:TTF_ON] = 1
            ENUM[2] = :TTF_AUTO ; NUME[:TTF_AUTO] = 2
        end

        number 32, true, nil, InitFont_TUseTtf
    }
    field(:ttf_limit, 4132) {
        number 32, true
    }
end

class InitInput < MemHack::Compound
    sizeof 36

    field(:hold_time, 0) {
        number 32, true
    }
    field(:repeat_time, 4) {
        number 32, true
    }
    field(:macro_time, 8) {
        number 32, true
    }
    field(:pause_zoom_no_interface_ms, 12) {
        number 32, true
    }
    field(:flag, 16) {
        df_flagarray(InitInputFlags)
    }
    field(:zoom_speed, 24) {
        number 32, true
    }
    field(:repeat_accel_start, 28) {
        number 32, true
    }
    field(:repeat_accel_limit, 32) {
        number 32, true
    }
end

class InitMedia < MemHack::Compound
    sizeof 12

    field(:flag, 0) {
        df_flagarray(InitMediaFlags)
    }
    field(:volume, 8) {
        number 32, true
    }
end

class InitWindow < MemHack::Compound
    sizeof 8

    field(:flag, 0) {
        df_flagarray(InitWindowFlags)
    }
end

class InorganicRaw < MemHack::Compound
    sizeof 1724

    field(:id, 0) {
        stl_string
    }
    field(:str, 28) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:flags, 44) {
        df_flagarray(InorganicFlags)
    }
    field(:source_hfid, 52) {
        number 32, true, -1
    }
    def source_hfid_tg ; df.world.history.figures.binsearch(source_hfid) ; end
    field(:metal_ore, 56) {
        compound(:InorganicRaw_TMetalOre) {
            field(:str, 0) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:mat_index, 16) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def mat_index_tg ; mat_index.map { |i| df.world.raws.inorganics[i] } ; end
            field(:probability, 32) {
                stl_vector(2) {
                    number 16, true
                }
            }
        }
    }
    field(:thread_metal, 104) {
        compound(:InorganicRaw_TThreadMetal) {
            field(:str, 0) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:mat_index, 16) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def mat_index_tg ; mat_index.map { |i| df.world.raws.inorganics[i] } ; end
            field(:probability, 32) {
                stl_vector(2) {
                    number 16, true
                }
            }
        }
    }
    field(:economic_uses, 152) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def economic_uses_tg ; economic_uses.map { |i| df.world.raws.reactions[i] } ; end
    field(:environment_spec, 168) {
        compound(:InorganicRaw_TEnvironmentSpec) {
            field(:str, 0) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:mat_index, 16) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def mat_index_tg ; mat_index.map { |i| df.world.raws.inorganics[i] } ; end
            field(:inclusion_type, 32) {
                stl_vector(2) {
                    number 16, true, nil, InclusionType
                }
            }
            field(:probability, 48) {
                stl_vector(1) {
                    number 8, true
                }
            }
        }
    }
    field(:environment, 232) {
        compound(:InorganicRaw_TEnvironment) {
            field(:location, 0) {
                stl_vector(2) {
                    number 16, true, nil, EnvironmentType
                }
            }
            field(:type, 16) {
                stl_vector(2) {
                    number 16, true, nil, InclusionType
                }
            }
            field(:probability, 32) {
                stl_vector(1) {
                    number 8, true
                }
            }
        }
    }
    field(:unk2, 280) {
        number 32, true
    }
    field(:material, 284) {
        global :Material
    }
end

class Interaction < MemHack::Compound
    sizeof 108

    field(:name, 0) {
        stl_string
    }
    field(:id, 28) {
        number 32, true
    }
    field(:str, 32) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:flags, 48) {
        df_flagarray
    }
    field(:sources, 56) {
        stl_vector(4) {
            pointer {
                global :InteractionSource
            }
        }
    }
    field(:targets, 72) {
        stl_vector(4) {
            pointer {
                global :InteractionTarget
            }
        }
    }
    field(:effects, 88) {
        stl_vector(4) {
            pointer {
                global :InteractionEffect
            }
        }
    }
    field(:source_hfid, 104) {
        number 32, true, -1
    }
    def source_hfid_tg ; df.world.history.figures.binsearch(source_hfid) ; end
end

class InteractionEffect < MemHack::Compound
    sizeof 96

    rtti_classname :interaction_effectst

    field(:anon_1, 4) {
        number 32, true
    }
    field(:targets, 8) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:anon_2, 24) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:intermittent, 40) {
        number 32, true
    }
    field(:locations, 44) {
        stl_vector(4) {
            global :InteractionEffectLocationHint
        }
    }
    field(:flags, 60) {
        compound(:InteractionEffect_TFlags) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:IMMEDIATE, 0) { bit 0 }
        }
    }
    field(:anon_3, 64) {
        number 32, true
    }
    field(:arena_name, 68) {
        stl_string
    }
    def getType()
        InteractionEffectType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(arg0)
        DFHack.vmethod_call(self, 4, arg0) ; nil
    end
    def read_file(arg0, loadversion)
        DFHack.vmethod_call(self, 8, arg0, loadversion) ; nil
    end
    def parseRaws(arg0, arg1, arg2, arg3, arg4)
        DFHack.vmethod_call(self, 20, arg0, arg1, arg2, arg3, arg4) ; nil
    end
    def finalize(arg0)
        DFHack.vmethod_call(self, 24, arg0) ; nil
    end
end

class InteractionEffectAddSyndromest < InteractionEffect
    sizeof 116

    rtti_classname :interaction_effect_add_syndromest

    field(:anon_1, 96) {
        number 32, true
    }
    field(:anon_2, 100) {
        number 32, true
    }
    field(:anon_3, 104) {
        number 32, true
    }
    field(:anon_4, 108) {
        number 32, true
    }
    field(:anon_5, 112) {
        number 32, true
    }
end

class InteractionEffectAnimatest < InteractionEffect
    sizeof 116

    rtti_classname :interaction_effect_animatest

    field(:anon_1, 96) {
        number 32, true
    }
    field(:anon_2, 100) {
        number 32, true
    }
    field(:anon_3, 104) {
        number 32, true
    }
    field(:anon_4, 108) {
        number 32, true
    }
    field(:anon_5, 112) {
        number 32, true
    }
end

class InteractionEffectCleanst < InteractionEffect
    sizeof 108

    rtti_classname :interaction_effect_cleanst

    field(:grime_level, 96) {
        number 32, true
    }
    field(:syndrome_tag, 100) {
        global :SyndromeFlags
    }
    field(:anon_1, 104) {
        number 32, true
    }
end

class InteractionEffectContactst < InteractionEffect
    sizeof 100

    rtti_classname :interaction_effect_contactst

    field(:anon_1, 96) {
        number 32, true
    }
end

class InteractionEffectHidest < InteractionEffect
    sizeof 100

    rtti_classname :interaction_effect_hidest

    field(:anon_1, 96) {
        number 32, true
    }
end

class InteractionEffectMaterialEmissionst < InteractionEffect
    sizeof 100

    rtti_classname :interaction_effect_material_emissionst

    field(:anon_1, 96) {
        number 32, true
    }
end

class InteractionEffectResurrectst < InteractionEffect
    sizeof 116

    rtti_classname :interaction_effect_resurrectst

    field(:anon_1, 96) {
        number 32, true
    }
    field(:anon_2, 100) {
        number 32, true
    }
    field(:anon_3, 104) {
        number 32, true
    }
    field(:anon_4, 108) {
        number 32, true
    }
    field(:anon_5, 112) {
        number 32, true
    }
end

class InteractionInstance < MemHack::Compound
    sizeof 32

    field(:id, 0) {
        number 32, true
    }
    field(:anon_1, 4) {
        number 32, true
    }
    field(:anon_2, 8) {
        number 32, true
    }
    field(:anon_3, 12) {
        number 32, true
    }
    field(:anon_4, 16) {
        stl_vector(4) {
            number 32, true
        }
    }
end

class InteractionSource < MemHack::Compound
    sizeof 96

    rtti_classname :interaction_sourcest

    field(:anon_1, 4) {
        number 32, true
    }
    field(:frequency, 8) {
        number 32, true
    }
    field(:name, 12) {
        stl_string
    }
    field(:hist_string_1, 40) {
        stl_string
    }
    field(:hist_string_2, 68) {
        stl_string
    }
    def getType()
        InteractionSourceType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(arg0)
        DFHack.vmethod_call(self, 4, arg0) ; nil
    end
    def read_file(arg0, loadversion)
        DFHack.vmethod_call(self, 8, arg0, loadversion) ; nil
    end
    def parseRaws(arg0, arg1, arg2, arg3, arg4)
        DFHack.vmethod_call(self, 16, arg0, arg1, arg2, arg3, arg4) ; nil
    end
end

class InteractionSourceAttackst < InteractionSource
    sizeof 100

    rtti_classname :interaction_source_attackst

    field(:anon_1, 96) {
        number 32, true
    }
end

class InteractionSourceCreatureActionst < InteractionSource
    sizeof 100

    rtti_classname :interaction_source_creature_actionst

    field(:anon_1, 96) {
        number 32, true
    }
end

class InteractionSourceDeityst < InteractionSource
    sizeof 116

    rtti_classname :interaction_source_deityst

    field(:anon_1, 96) {
        number 32, true
    }
    field(:usage_hint, 100) {
        stl_vector(4) {
            global :InteractionSourceUsageHint
        }
    }
end

class InteractionSourceDisturbancest < InteractionSource
    sizeof 100

    rtti_classname :interaction_source_disturbancest

    field(:anon_1, 96) {
        number 32, true
    }
end

class InteractionSourceIngestionst < InteractionSource
    sizeof 100

    rtti_classname :interaction_source_ingestionst

    field(:anon_1, 96) {
        number 32, true
    }
end

class InteractionSourceRegionst < InteractionSource
    sizeof 112

    rtti_classname :interaction_source_regionst

    field(:region_flags, 96) {
        compound(:InteractionSourceRegionst_TRegionFlags) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:NORMAL_ALLOWED, 0) { bit 0 }
            field(:EVIL_ALLOWED, 0) { bit 1 }
            field(:GOOD_ALLOWED, 0) { bit 2 }
            field(:SAVAGE_ALLOWED, 0) { bit 3 }
            field(:EVIL_ONLY, 0) { bit 4 }
            field(:GOOD_ONLY, 0) { bit 5 }
            field(:SAVAGE_ONLY, 0) { bit 6 }
        }
    }
    field(:regions, 100) {
        static_array(10, 1, WorldgenRegionType) {
            number 8, true
        }
    }
end

class InteractionSourceSecretst < InteractionSource
    sizeof 196

    rtti_classname :interaction_source_secretst

    field(:learn_flags, 96) {
        compound(:InteractionSourceSecretst_TLearnFlags) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:SUPERNATURAL_LEARNING_POSSIBLE, 0) { bit 0 }
            field(:MUNDANE_RESEARCH_POSSIBLE, 0) { bit 1 }
            field(:MUNDANE_RECORDING_POSSIBLE, 0) { bit 2 }
            field(:MUNDANE_TEACHING_POSSIBLE, 0) { bit 3 }
        }
    }
    field(:spheres, 100) {
        stl_vector(4) {
            global :SphereType
        }
    }
    field(:goals, 116) {
        stl_vector(4) {
            global :GoalType
        }
    }
    field(:book_title_filename, 132) {
        stl_string
    }
    field(:book_name_filename, 160) {
        stl_string
    }
    field(:anon_1, 188) {
        number 32, true
    }
    field(:anon_2, 192) {
        number 32, true
    }
end

class InteractionSourceUndergroundSpecialst < InteractionSource
    sizeof 96

    rtti_classname :interaction_source_underground_specialst

end

class InteractionTarget < MemHack::Compound
    sizeof 68

    rtti_classname :interaction_targetst

    field(:index, 4) {
        number 32, true
    }
    field(:anon_1, 8) {
        stl_string
    }
    field(:manual_input, 36) {
        stl_string
    }
    field(:location, 64) {
        number 32, true, nil, InteractionTargetLocationType
    }
    def getType()
        InteractionSourceType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(arg0)
        DFHack.vmethod_call(self, 4, arg0) ; nil
    end
    def read_file(arg0, loadversion)
        DFHack.vmethod_call(self, 8, arg0, loadversion) ; nil
    end
    def parseRaws(arg0, arg1, arg2, arg3, arg4)
        DFHack.vmethod_call(self, 16, arg0, arg1, arg2, arg3, arg4) ; nil
    end
end

class InteractionTargetCorpsest < InteractionTarget
    sizeof 232

    rtti_classname :interaction_target_corpsest

    field(:anon_1, 68) {
        global :InteractionTargetInfo
    }
end

class InteractionTargetCreaturest < InteractionTarget
    sizeof 232

    rtti_classname :interaction_target_creaturest

    field(:anon_1, 68) {
        global :InteractionTargetInfo
    }
end

class InteractionTargetInfo < MemHack::Compound
    sizeof 164

    field(:affected_creature_str, 0) {
        static_array(2, 16) {
            stl_vector(4) {
                pointer {
                    stl_string
                }
            }
        }
    }
    field(:affected_creature, 32) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:affected_class, 48) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:immune_creature_str, 64) {
        static_array(2, 16) {
            stl_vector(4) {
                pointer {
                    stl_string
                }
            }
        }
    }
    field(:immune_creature, 96) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:immune_class, 112) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:forbidden_syndrome_class, 128) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:requires_1, 144) {
        number 32, true
    }
    field(:requires_2, 148) {
        number 32, true
    }
    field(:forbidden_1, 152) {
        number 32, true
    }
    field(:forbidden_2, 156) {
        number 32, true
    }
    field(:restrictions, 160) {
        compound(:InteractionTargetInfo_TRestrictions) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:CANNOT_TARGET_IF_ALREADY_AFFECTED, 0) { bit 0 }
        }
    }
end

class InteractionTargetLocationst < InteractionTarget
    sizeof 68

    rtti_classname :interaction_target_locationst

end

class InteractionTargetMaterialst < InteractionTarget
    sizeof 168

    rtti_classname :interaction_target_materialst

    field(:material_str, 68) {
        static_array(3, 28) {
            stl_string
        }
    }
    field(:anon_1, 152) {
        number 16, true
    }
    field(:anon_2, 156) {
        number 32, true
    }
    field(:anon_3, 160) {
        number 16, true
    }
    field(:breath_attack_type, 162) {
        number 16, true, nil, BreathAttackType
    }
    field(:restrictions, 164) {
        compound(:InteractionTargetMaterialst_TRestrictions) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:CONTEXT_MATERIAL, 0) { bit 0 }
        }
    }
end

class InterfaceButton < MemHack::Compound
    sizeof 16

    rtti_classname :interface_buttonst

    field(:hotkey_id, 4) {
        number 32, true, nil, InterfaceKey
    }
    field(:is_hidden, 8) {
        number 8, true, nil, BooleanEnum
    }
    field(:anon_1, 12) {
        number 32, true
    }
    def printSlabStatus(x, y, unused)
        DFHack.vmethod_call(self, 0, x, y, unused) ; nil
    end
    def getLabel(str)
        DFHack.vmethod_call(self, 4, str) ; nil
    end
    def click()
        DFHack.vmethod_call(self, 8) ; nil
    end
    def setColor(selected)
        DFHack.vmethod_call(self, 12, selected) ; nil
    end
    def makeHidden()
        DFHack.vmethod_call(self, 16) ; nil
    end
    def getTrackGlyph()
        val = DFHack.vmethod_call(self, 20)
        val & ((1 << 8) - 1)
    end
    def setTrackGlyphColor()
        DFHack.vmethod_call(self, 24) ; nil
    end
end

class InterfaceButtonBuildingst < InterfaceButton
    sizeof 20

    rtti_classname :interface_button_buildingst

    field(:building, 16) {
        pointer {
            global :Building
        }
    }
end

class InterfaceButtonBuildingCategorySelectorst < InterfaceButtonBuildingst
    sizeof 28

    rtti_classname :interface_button_building_category_selectorst

    field(:category_id, 20) {
        number 32, true
    }
    field(:unk_14, 24) {
        number 8, true
    }
end

class InterfaceButtonBuildingMaterialSelectorst < InterfaceButtonBuildingst
    sizeof 36

    rtti_classname :interface_button_building_material_selectorst

    field(:mat_type, 20) {
        number 16, true, -1
    }
    field(:mat_index, 24) {
        number 32, true
    }
    field(:material_category, 28) {
        global :JobMaterialCategory
    }
    field(:unk_1c, 32) {
        number 8, true
    }
end

class InterfaceButtonBuildingNewJobst < InterfaceButtonBuildingst
    sizeof 80

    rtti_classname :interface_button_building_new_jobst

    field(:job_type, 20) {
        number 32, true, nil, JobType
    }
    field(:reaction_name, 24) {
        stl_string
    }
    field(:item_type, 52) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 54) {
        number 16, true
    }
    field(:mat_type, 56) {
        number 16, true, -1
    }
    field(:mat_index, 60) {
        number 32, true
    }
    field(:item_category, 64) {
        global :StockpileGroupSet
    }
    field(:hist_figure_id, 68) {
        number 32, true, -1
    }
    def hist_figure_tg ; df.world.history.figures.binsearch(hist_figure_id) ; end
    field(:material_category, 72) {
        global :JobMaterialCategory
    }
    field(:unk_48, 76) {
        number 8, true, nil, BooleanEnum
    }
    field(:is_custom, 77) {
        number 8, true, nil, BooleanEnum
    }
end

class InterfaceButtonConstructionst < InterfaceButton
    sizeof 20

    rtti_classname :interface_button_constructionst

    field(:unused_c, 16) {
        pointer {
        }
    }
end

class InterfaceButtonConstructionBuildingSelectorst < InterfaceButtonConstructionst
    sizeof 32

    rtti_classname :interface_button_construction_building_selectorst

    field(:building_type, 20) {
        number 16, true
    }
    field(:building_subtype, 22) {
        number 16, true
    }
    field(:custom_type, 24) {
        number 32, true, -1
    }
    def custom_type_tg ; df.world.raws.buildings.all.binsearch(custom_type) ; end
    field(:existing_count, 28) {
        number 32, true
    }
end

class InterfaceButtonConstructionCategorySelectorst < InterfaceButtonConstructionst
    sizeof 24

    rtti_classname :interface_button_construction_category_selectorst

    field(:category_id, 20) {
        number 32, true
    }
end

class InterfaceButtonConstructionDonest < InterfaceButtonConstructionst
    sizeof 20

    rtti_classname :interface_button_construction_donest

end

class Interfacest < MemHack::Compound
    sizeof 1812904

    field(:original_fps, 0) {
        number 32, true
    }
    field(:view, 4) {
        global :Viewscreen
    }
    field(:flag, 20) {
        number 32, false
    }
    field(:shutdown_interface_tickcount, 24) {
        number 32, true
    }
    field(:shutdown_interface_for_ms, 28) {
        number 32, true
    }
    field(:supermovie_on, 32) {
        number 8, true
    }
    field(:supermovie_pos, 36) {
        number 32, true
    }
    field(:supermovie_delayrate, 40) {
        number 32, true
    }
    field(:supermovie_delaystep, 44) {
        number 32, true
    }
    field(:supermovie_sound, 48) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:supermovie_sound_time, 64) {
        static_array(16, 800) {
            static_array(200, 4) {
                number 32, true
            }
        }
    }
    field(:supermoviebuffer, 12864) {
    }
    field(:supermoviebuffer_comp, 812864) {
    }
    field(:currentblocksize, 1812864) {
        number 32, true
    }
    field(:nextfilepos, 1812868) {
        number 32, true
    }
    field(:first_movie_write, 1812872) {
        number 8, true
    }
    field(:movie_file, 1812876) {
        stl_string
    }
end

class InvasionInfo < MemHack::Compound
    sizeof 28

    field(:id, 0) {
        number 32, true
    }
    field(:civ_id, 4) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ_id) ; end
    field(:active_size1, 8) {
        number 32, true
    }
    field(:active_size2, 12) {
        number 32, true
    }
    field(:size, 16) {
        number 32, true
    }
    field(:duration_counter, 20) {
        number 32, true
    }
    field(:flags, 24) {
        compound(:InvasionInfo_TFlags) {
            field(:_whole, 0) {
                number 16, false
            }
            field(:active, 0) { bit 0 }
            field(:siege, 0) { bit 1 }
        }
    }
    field(:unk4b, 26) {
        number 16, true
    }
end

class Item < MemHack::Compound
    sizeof 100

    rtti_classname :itemst

    field(:pos, 4) {
        global :Coord
    }
    field(:flags, 12) {
        global :ItemFlags
    }
    field(:flags2, 16) {
        global :ItemFlags2
    }
    field(:age, 20) {
        number 32, false
    }
    field(:id, 24) {
        number 32, true
    }
    field(:specific_refs, 28) {
        stl_vector(4) {
            pointer {
                global :SpecificRef
            }
        }
    }
    field(:general_refs, 44) {
        stl_vector(4) {
            pointer {
                global :GeneralRef
            }
        }
    }
    field(:world_data_id, 60) {
        number 32, true, -1
    }
    def world_data_tg ; df.world.world_data.object_data.binsearch(world_data_id) ; end
    field(:world_data_subid, 64) {
        number 32, true, -1
    }
    field(:stockpile_countdown, 68) {
        number 8, false
    }
    field(:stockpile_delay, 69) {
        number 8, false
    }
    field(:unk2, 70) {
        number 16, true
    }
    field(:base_uniform_score, 72) {
        number 32, true
    }
    field(:walkable_id, 76) {
        number 16, true
    }
    field(:spec_heat, 78) {
        number 16, false
    }
    field(:ignite_point, 80) {
        number 16, false
    }
    field(:heatdam_point, 82) {
        number 16, false
    }
    field(:colddam_point, 84) {
        number 16, false
    }
    field(:boiling_point, 86) {
        number 16, false
    }
    field(:melting_point, 88) {
        number 16, false
    }
    field(:fixed_temp, 90) {
        number 16, false
    }
    field(:weight, 92) {
        number 32, true
    }
    field(:weight_fraction, 96) {
        number 32, true
    }
    def getType()
        ItemType.sym(DFHack.vmethod_call(self, 0))
    end
    def getSubtype()
        val = DFHack.vmethod_call(self, 4)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def getMaterial()
        val = DFHack.vmethod_call(self, 8)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def getMaterialIndex()
        val = DFHack.vmethod_call(self, 12)
    end
    def setSubtype(arg0)
        DFHack.vmethod_call(self, 16, arg0) ; nil
    end
    def setMaterial(arg0)
        DFHack.vmethod_call(self, 20, arg0) ; nil
    end
    def setMaterialIndex(arg0)
        DFHack.vmethod_call(self, 24, arg0) ; nil
    end
    def getActualMaterial()
        val = DFHack.vmethod_call(self, 28)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def getActualMaterialIndex()
        val = DFHack.vmethod_call(self, 32)
    end
    def getRace()
        val = DFHack.vmethod_call(self, 36)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def getCaste()
        val = DFHack.vmethod_call(self, 40)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def getPlantID()
        val = DFHack.vmethod_call(self, 44)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def getTotalDimension()
        val = DFHack.vmethod_call(self, 60)
    end
    def setDimension(amount)
        DFHack.vmethod_call(self, 64, amount) ; nil
    end
    def subtractDimension(amount)
        val = DFHack.vmethod_call(self, 68, amount)
        (val & 1) != 0
    end
    def isFoodStorage()
        val = DFHack.vmethod_call(self, 72)
        (val & 1) != 0
    end
    def isTrackCart()
        val = DFHack.vmethod_call(self, 76)
        (val & 1) != 0
    end
    def isWheelbarrow()
        val = DFHack.vmethod_call(self, 80)
        (val & 1) != 0
    end
    def getVehicleID()
        val = DFHack.vmethod_call(self, 84)
    end
    def getStockpile()
        ptr = DFHack.vmethod_call(self, 88)
        class << self
            global :ItemStockpileRef
        end._at(ptr) if ptr != 0
    end
    def containsPlaster()
        val = DFHack.vmethod_call(self, 92)
        (val & 1) != 0
    end
    def isPlaster()
        val = DFHack.vmethod_call(self, 96)
        (val & 1) != 0
    end
    def getColorOverride(arg0)
        val = DFHack.vmethod_call(self, 100, arg0)
        (val & 1) != 0
    end
    def getHistoryInfo()
        ptr = DFHack.vmethod_call(self, 104)
        class << self
            pointer {
                global :ItemHistoryInfo
            }
        end._at(ptr) if ptr != 0
    end
    def hasToolUse(arg0)
        val = DFHack.vmethod_call(self, 108, arg0)
        (val & 1) != 0
    end
    def becomePaste()
        DFHack.vmethod_call(self, 116) ; nil
    end
    def becomePressed()
        DFHack.vmethod_call(self, 120) ; nil
    end
    def calculateWeight()
        DFHack.vmethod_call(self, 124) ; nil
    end
    def isSharpStone()
        val = DFHack.vmethod_call(self, 128)
        (val & 1) != 0
    end
    def isCrystalGlassable()
        val = DFHack.vmethod_call(self, 132)
        (val & 1) != 0
    end
    def isMetalOre(matIndex)
        val = DFHack.vmethod_call(self, 136, matIndex)
        (val & 1) != 0
    end
    def clearLastTempUpdateTS()
        DFHack.vmethod_call(self, 140) ; nil
    end
    def listNotableKills(string_ptr)
        DFHack.vmethod_call(self, 144, string_ptr) ; nil
    end
    def getSpecHeat()
        val = DFHack.vmethod_call(self, 148)
        val & ((1 << 16) - 1)
    end
    def getIgnitePoint()
        val = DFHack.vmethod_call(self, 152)
        val & ((1 << 16) - 1)
    end
    def getHeatdamPoint()
        val = DFHack.vmethod_call(self, 156)
        val & ((1 << 16) - 1)
    end
    def getColddamPoint()
        val = DFHack.vmethod_call(self, 160)
        val & ((1 << 16) - 1)
    end
    def getBoilingPoint()
        val = DFHack.vmethod_call(self, 164)
        val & ((1 << 16) - 1)
    end
    def getMeltingPoint()
        val = DFHack.vmethod_call(self, 168)
        val & ((1 << 16) - 1)
    end
    def getFixedTemp()
        val = DFHack.vmethod_call(self, 172)
        val & ((1 << 16) - 1)
    end
    def getSolidDensity()
        val = DFHack.vmethod_call(self, 176)
    end
    def materialRots()
        val = DFHack.vmethod_call(self, 180)
        (val & 1) != 0
    end
    def getTemperature()
        val = DFHack.vmethod_call(self, 184)
        val & ((1 << 16) - 1)
    end
    def adjustTemperature(target, unk)
        val = DFHack.vmethod_call(self, 188, target, unk)
        (val & 1) != 0
    end
    def extinguish()
        DFHack.vmethod_call(self, 196) ; nil
    end
    def getGloveHandedness()
        val = DFHack.vmethod_call(self, 200)
        val &= ((1 << 8) - 1)
        ((val >> (8-1)) & 1) == 0 ? val : val - (1 << 8)
    end
    def setGloveHandedness(arg0)
        DFHack.vmethod_call(self, 204, arg0) ; nil
    end
    def isSpike()
        val = DFHack.vmethod_call(self, 208)
        (val & 1) != 0
    end
    def isScrew()
        val = DFHack.vmethod_call(self, 212)
        (val & 1) != 0
    end
    def isBuildMat()
        val = DFHack.vmethod_call(self, 216)
        (val & 1) != 0
    end
    def isTemperatureSafe(arg0)
        val = DFHack.vmethod_call(self, 220, arg0)
        (val & 1) != 0
    end
    def setRandSubtype(entity_id)
        DFHack.vmethod_call(self, 224, entity_id) ; nil
    end
    def getWeaponSize()
        val = DFHack.vmethod_call(self, 228)
        val &= ((1 << 8) - 1)
        ((val >> (8-1)) & 1) == 0 ? val : val - (1 << 8)
    end
    def getWear()
        val = DFHack.vmethod_call(self, 232)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def setWear(arg0)
        DFHack.vmethod_call(self, 236, arg0) ; nil
    end
    def getMaker()
        val = DFHack.vmethod_call(self, 240)
    end
    def setMaker(unit_id)
        DFHack.vmethod_call(self, 244, unit_id) ; nil
    end
    def getCorpseInfo(prace, pcaste, phfig, punit)
        DFHack.vmethod_call(self, 248, prace, pcaste, phfig, punit) ; nil
    end
    def getGloveFlags()
        ptr = DFHack.vmethod_call(self, 256)
        class << self
            df_flagarray
        end._at(ptr) if ptr != 0
    end
    def getItemShapeDesc()
        ptr = DFHack.vmethod_call(self, 260)
        class << self
            stl_string
        end._at(ptr) if ptr != 0
    end
    def isMatchingAmmoItem(arg0)
        val = DFHack.vmethod_call(self, 264, arg0)
        (val & 1) != 0
    end
    def setSeedsPlantSkillLevel(level)
        DFHack.vmethod_call(self, 280, level) ; nil
    end
    def getCorpseSize()
        val = DFHack.vmethod_call(self, 284)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def ageItem(amount)
        val = DFHack.vmethod_call(self, 288, amount)
        (val & 1) != 0
    end
    def getCritterAirdrownTimer()
        val = DFHack.vmethod_call(self, 292)
    end
    def setCritterAirdrownTimer(arg0)
        DFHack.vmethod_call(self, 296, arg0) ; nil
    end
    def incrementCritterAirdrownTimer()
        DFHack.vmethod_call(self, 300) ; nil
    end
    def getRotTimer()
        val = DFHack.vmethod_call(self, 304)
    end
    def setRotTimer(val)
        DFHack.vmethod_call(self, 308, val) ; nil
    end
    def incrementRotTimer()
        DFHack.vmethod_call(self, 312) ; nil
    end
    def isBogeymanCorpse()
        val = DFHack.vmethod_call(self, 316)
        (val & 1) != 0
    end
    def getAmmoType(arg0)
        ptr = DFHack.vmethod_call(self, 324, arg0)
        class << self
            stl_string
        end._at(ptr) if ptr != 0
    end
    def isLiquidPowder()
        val = DFHack.vmethod_call(self, 328)
        (val & 1) != 0
    end
    def isLiquid()
        val = DFHack.vmethod_call(self, 332)
        (val & 1) != 0
    end
    def getVolume()
        val = DFHack.vmethod_call(self, 340)
    end
    def addImprovementFromJob(arg0, arg1, arg2, mat_type, mat_index, shape, arg6, arg7, unk, unshaped)
        ptr = DFHack.vmethod_call(self, 344, ImprovementType.int(arg0), arg1, arg2, mat_type, mat_index, shape, arg6, arg7, unk, unshaped)
        class << self
            global :Itemimprovement
        end._at(ptr) if ptr != 0
    end
    def isWeapon()
        val = DFHack.vmethod_call(self, 348)
        (val & 1) != 0
    end
    def isArmorNotClothing()
        val = DFHack.vmethod_call(self, 352)
        (val & 1) != 0
    end
    def isMillable()
        val = DFHack.vmethod_call(self, 356)
        (val & 1) != 0
    end
    def isProcessableThread()
        val = DFHack.vmethod_call(self, 360)
        (val & 1) != 0
    end
    def isProcessableVial()
        val = DFHack.vmethod_call(self, 364)
        (val & 1) != 0
    end
    def isProcessableBarrel()
        val = DFHack.vmethod_call(self, 368)
        (val & 1) != 0
    end
    def isEdiblePlant()
        val = DFHack.vmethod_call(self, 372)
        (val & 1) != 0
    end
    def isEdibleRaw(hunger)
        val = DFHack.vmethod_call(self, 376, hunger)
        (val & 1) != 0
    end
    def isEdibleCarnivore(hunger)
        val = DFHack.vmethod_call(self, 380, hunger)
        (val & 1) != 0
    end
    def isEdibleBonecarn(hunger)
        val = DFHack.vmethod_call(self, 384, hunger)
        (val & 1) != 0
    end
    def moveToGround(x, y, z)
        val = DFHack.vmethod_call(self, 388, x, y, z)
        (val & 1) != 0
    end
    def categorize(in_play)
        DFHack.vmethod_call(self, 392, in_play) ; nil
    end
    def uncategorize()
        DFHack.vmethod_call(self, 396) ; nil
    end
    def isFurniture(empty)
        val = DFHack.vmethod_call(self, 400, empty)
        (val & 1) != 0
    end
    def isPressed()
        val = DFHack.vmethod_call(self, 404)
        (val & 1) != 0
    end
    def isAnimal()
        val = DFHack.vmethod_call(self, 408)
        (val & 1) != 0
    end
    def assignQuality(maker, job_skill)
        DFHack.vmethod_call(self, 412, maker, JobSkill.int(job_skill)) ; nil
    end
    def notifyLostMasterwork()
        DFHack.vmethod_call(self, 420) ; nil
    end
    def addMagic(arg0, arg1, arg2)
        DFHack.vmethod_call(self, 424, arg0, arg1, arg2) ; nil
    end
    def magic_unk1(arg0, arg1)
        DFHack.vmethod_call(self, 428, arg0, arg1) ; nil
    end
    def magic_unk2(arg0, arg1)
        DFHack.vmethod_call(self, 432, arg0, arg1) ; nil
    end
    def magic_unk3(arg0)
        DFHack.vmethod_call(self, 436, arg0) ; nil
    end
    def magic_unk4(arg0, arg1, arg2)
        DFHack.vmethod_call(self, 440, arg0, arg1, arg2) ; nil
    end
    def setDisplayColor(arg0)
        DFHack.vmethod_call(self, 444, arg0) ; nil
    end
    def isDamagedByHeat()
        val = DFHack.vmethod_call(self, 448)
        (val & 1) != 0
    end
    def needTwoHandedWield(arg0)
        val = DFHack.vmethod_call(self, 452, arg0)
        (val & 1) != 0
    end
    def splitStack(stack_size, preserve_containment)
        ptr = DFHack.vmethod_call(self, 456, stack_size, preserve_containment)
        class << self
            global :Item
        end._at(ptr) if ptr != 0
    end
    def isTameableVermin()
        val = DFHack.vmethod_call(self, 460)
        (val & 1) != 0
    end
    def isDye()
        val = DFHack.vmethod_call(self, 464)
        (val & 1) != 0
    end
    def isMilkable(arg0, arg1)
        val = DFHack.vmethod_call(self, 468, arg0, arg1)
        (val & 1) != 0
    end
    def isSandBearing()
        val = DFHack.vmethod_call(self, 472)
        (val & 1) != 0
    end
    def isLyeBearing()
        val = DFHack.vmethod_call(self, 476)
        (val & 1) != 0
    end
    def isAnimalProduct()
        val = DFHack.vmethod_call(self, 480)
        (val & 1) != 0
    end
    def getStorageInfo(item_type, material_category)
        DFHack.vmethod_call(self, 484, item_type, material_category) ; nil
    end
    def addWear(delta, simple, lose_masterwork)
        val = DFHack.vmethod_call(self, 488, delta, simple, lose_masterwork)
        (val & 1) != 0
    end
    def incWearTimer(delta)
        val = DFHack.vmethod_call(self, 492, delta)
        (val & 1) != 0
    end
    def checkWearDestroy(simple, lose_masterwork)
        val = DFHack.vmethod_call(self, 496, simple, lose_masterwork)
        (val & 1) != 0
    end
    def addContaminant(mat_type, mat_index, mat_state, temp, size, body_part_id, flags)
        DFHack.vmethod_call(self, 500, mat_type, mat_index, MatterState.int(mat_state), temp, size, body_part_id, flags) ; nil
    end
    def removeContaminantByIdx(index, amount)
        DFHack.vmethod_call(self, 504, index, amount) ; nil
    end
    def removeContaminant(mat_type, mat_index, amount)
        DFHack.vmethod_call(self, 508, mat_type, mat_index, amount) ; nil
    end
    def tradeUnitContaminants(arg0, body_part_id)
        DFHack.vmethod_call(self, 512, arg0, body_part_id) ; nil
    end
    def tradeItemContaminants(arg0)
        DFHack.vmethod_call(self, 516, arg0) ; nil
    end
    def tradeItemContaminants2(arg0)
        DFHack.vmethod_call(self, 520, arg0) ; nil
    end
    def contaminateWound(arg0, arg1, shift, body_part_id)
        DFHack.vmethod_call(self, 524, arg0, arg1, shift, body_part_id) ; nil
    end
    def write_file(file)
        DFHack.vmethod_call(self, 528, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 532, file, loadversion) ; nil
    end
    def getWeaponAttacks()
        ptr = DFHack.vmethod_call(self, 536)
        class << self
            stl_vector(4) {
                pointer {
                }
            }
        end._at(ptr) if ptr != 0
    end
    def isSplittable()
        val = DFHack.vmethod_call(self, 544)
        (val & 1) != 0
    end
    def propagateUnitRefs()
        DFHack.vmethod_call(self, 556) ; nil
    end
    def isBag()
        val = DFHack.vmethod_call(self, 560)
        (val & 1) != 0
    end
    def isSand()
        val = DFHack.vmethod_call(self, 564)
        (val & 1) != 0
    end
    def getStackSize()
        val = DFHack.vmethod_call(self, 572)
    end
    def addStackSize(amount)
        DFHack.vmethod_call(self, 576, amount) ; nil
    end
    def setStackSize(amount)
        DFHack.vmethod_call(self, 580, amount) ; nil
    end
    def isAmmoClass(arg0)
        val = DFHack.vmethod_call(self, 584, arg0)
        (val & 1) != 0
    end
    def isAutoClean()
        val = DFHack.vmethod_call(self, 588)
        (val & 1) != 0
    end
    def setTemperatureFromMapTile(x, y, z, local, contained)
        val = DFHack.vmethod_call(self, 592, x, y, z, local, contained)
        (val & 1) != 0
    end
    def setTemperatureFromMap(local, contained)
        val = DFHack.vmethod_call(self, 596, local, contained)
        (val & 1) != 0
    end
    def setTemperature(temp, local, contained)
        val = DFHack.vmethod_call(self, 600, temp, local, contained)
        (val & 1) != 0
    end
    def updateTempFromMap(local, contained, adjust, multiplier)
        val = DFHack.vmethod_call(self, 604, local, contained, adjust, multiplier)
        (val & 1) != 0
    end
    def updateTemperature(temp, local, contained, adjust, multiplier)
        val = DFHack.vmethod_call(self, 608, temp, local, contained, adjust, multiplier)
        (val & 1) != 0
    end
    def updateFromWeather()
        val = DFHack.vmethod_call(self, 612)
        (val & 1) != 0
    end
    def updateContaminants()
        val = DFHack.vmethod_call(self, 616)
        (val & 1) != 0
    end
    def checkTemperatureDamage()
        val = DFHack.vmethod_call(self, 620)
        (val & 1) != 0
    end
    def checkHeatColdDamage()
        val = DFHack.vmethod_call(self, 624)
        (val & 1) != 0
    end
    def checkMeltBoil()
        val = DFHack.vmethod_call(self, 628)
        (val & 1) != 0
    end
    def getMeleeSkill()
        val = DFHack.vmethod_call(self, 632)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def getRangedSkill()
        val = DFHack.vmethod_call(self, 636)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def setQuality(quality)
        DFHack.vmethod_call(self, 640, quality) ; nil
    end
    def getQuality()
        val = DFHack.vmethod_call(self, 644)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def getOverallQuality()
        val = DFHack.vmethod_call(self, 648)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def getImprovementQuality()
        val = DFHack.vmethod_call(self, 652)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def getProjectileSize()
        val = DFHack.vmethod_call(self, 656)
    end
    def isImprovable(arg0, mat_type, mat_index)
        val = DFHack.vmethod_call(self, 660, arg0, mat_type, mat_index)
        (val & 1) != 0
    end
    def setSharpness(unk1, unk2)
        DFHack.vmethod_call(self, 664, unk1, unk2) ; nil
    end
    def getSharpness()
        val = DFHack.vmethod_call(self, 668)
    end
    def isTotemable()
        val = DFHack.vmethod_call(self, 672)
        (val & 1) != 0
    end
    def isDyeable()
        val = DFHack.vmethod_call(self, 676)
        (val & 1) != 0
    end
    def isNotDyed()
        val = DFHack.vmethod_call(self, 680)
        (val & 1) != 0
    end
    def isDyed()
        val = DFHack.vmethod_call(self, 684)
        (val & 1) != 0
    end
    def canSewImage()
        val = DFHack.vmethod_call(self, 688)
        (val & 1) != 0
    end
    def isProcessableVialAtStill()
        val = DFHack.vmethod_call(self, 696)
        (val & 1) != 0
    end
    def isSimilarToItem(item_type, item_subtype, mat_type, mat_index)
        val = DFHack.vmethod_call(self, 700, ItemType.int(item_type), item_subtype, mat_type, mat_index)
        (val & 1) != 0
    end
    def getBlockChance()
        val = DFHack.vmethod_call(self, 704)
    end
    def getMakerRace()
        val = DFHack.vmethod_call(self, 712)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def setMakerRace(arg0)
        DFHack.vmethod_call(self, 716, arg0) ; nil
    end
    def getEffectiveArmorLevel()
        val = DFHack.vmethod_call(self, 720)
        val &= ((1 << 8) - 1)
        ((val >> (8-1)) & 1) == 0 ? val : val - (1 << 8)
    end
    def isItemOrganicCloth()
        val = DFHack.vmethod_call(self, 728)
        (val & 1) != 0
    end
    def isMadeOfOrganicCloth()
        val = DFHack.vmethod_call(self, 732)
        (val & 1) != 0
    end
    def coverWithContaminant(mat_type, mat_index, mat_state, temperature)
        DFHack.vmethod_call(self, 736, mat_type, mat_index, MatterState.int(mat_state), temperature) ; nil
    end
    def hasImprovements()
        val = DFHack.vmethod_call(self, 740)
        (val & 1) != 0
    end
    def isImproved()
        val = DFHack.vmethod_call(self, 744)
        (val & 1) != 0
    end
    def getMagic()
        ptr = DFHack.vmethod_call(self, 748)
        class << self
            stl_vector(4) {
                pointer {
                    global :ItemMagicness
                }
            }
        end._at(ptr) if ptr != 0
    end
    def getItemDescription(arg0, mode)
        DFHack.vmethod_call(self, 752, arg0, mode) ; nil
    end
    def getItemDescriptionPrefix(arg0, mode)
        DFHack.vmethod_call(self, 756, arg0, mode) ; nil
    end
    def getItemBasicName(arg0)
        DFHack.vmethod_call(self, 760, arg0) ; nil
    end
    def getImprovementsValue(caravan)
        val = DFHack.vmethod_call(self, 764, caravan)
    end
    def isExtractBearingFish()
        val = DFHack.vmethod_call(self, 768)
        (val & 1) != 0
    end
    def isExtractBearingVermin()
        val = DFHack.vmethod_call(self, 772)
        (val & 1) != 0
    end
    def getBaseWeight()
        val = DFHack.vmethod_call(self, 780)
    end
    def getWeightShiftBits()
        val = DFHack.vmethod_call(self, 784)
    end
    def isCollected()
        val = DFHack.vmethod_call(self, 788)
        (val & 1) != 0
    end
    def isEdibleVermin()
        val = DFHack.vmethod_call(self, 792)
        (val & 1) != 0
    end
    def drawSelf()
        DFHack.vmethod_call(self, 796) ; nil
    end
    def isRangedWeapon()
        val = DFHack.vmethod_call(self, 800)
        (val & 1) != 0
    end
    def isClothing()
        val = DFHack.vmethod_call(self, 804)
        (val & 1) != 0
    end
    def isWet()
        val = DFHack.vmethod_call(self, 808)
        (val & 1) != 0
    end
    def getCurrencyValue(appraiser)
        val = DFHack.vmethod_call(self, 812, appraiser)
    end
    def isAssignedToStockpile()
        val = DFHack.vmethod_call(self, 816)
        (val & 1) != 0
    end
    def isAssignedToThisStockpile(arg0)
        val = DFHack.vmethod_call(self, 820, arg0)
        (val & 1) != 0
    end
    def detachStockpileAssignment()
        DFHack.vmethod_call(self, 824) ; nil
    end
    def removeStockpileAssignment()
        DFHack.vmethod_call(self, 828) ; nil
    end
    def getStockpile2()
        ptr = DFHack.vmethod_call(self, 832)
        class << self
            global :ItemStockpileRef
        end._at(ptr) if ptr != 0
    end
    def getThreadDyeValue(caravan)
        val = DFHack.vmethod_call(self, 848, caravan)
    end
    def getColorAndShape(colors, shapes)
        DFHack.vmethod_call(self, 852, colors, shapes) ; nil
    end
    def isArmor()
        val = DFHack.vmethod_call(self, 860)
        (val & 1) != 0
    end
    def calcUniformScore(arg0, exact_match, best_any, best_melee, best_ranged)
        val = DFHack.vmethod_call(self, 864, arg0, exact_match, JobSkill.int(best_any), JobSkill.int(best_melee), JobSkill.int(best_ranged))
    end
    def calcBaseUniformScore()
        val = DFHack.vmethod_call(self, 868)
    end
    def getSlabEngravingType()
        SlabEngravingType.sym(DFHack.vmethod_call(self, 900))
    end
    def getAbsorption()
        val = DFHack.vmethod_call(self, 904)
    end
    def isGemMaterial()
        val = DFHack.vmethod_call(self, 912)
        (val & 1) != 0
    end
    def setGemShape(shape)
        DFHack.vmethod_call(self, 916, shape) ; nil
    end
    def hasGemShape()
        val = DFHack.vmethod_call(self, 920)
        (val & 1) != 0
    end
    def getGemShape()
        val = DFHack.vmethod_call(self, 924)
    end
end

class ItemActual < Item
    sizeof 136

    rtti_classname :item_actualst

    field(:stack_size, 100) {
        number 32, true, 1
    }
    field(:history_info, 104) {
        pointer {
            pointer {
                global :ItemHistoryInfo
            }
        }
    }
    field(:magic, 108) {
        pointer {
            stl_vector(4) {
                pointer {
                    global :ItemMagicness
                }
            }
        }
    }
    field(:contaminants, 112) {
        pointer {
            stl_vector(4) {
                pointer {
                    global :Spatter
                }
            }
        }
    }
    field(:temperature, 116) {
        global :Temperaturest
    }
    field(:wear, 120) {
        number 16, true
    }
    field(:wear_timer, 124) {
        number 32, true
    }
    field(:anon_1, 128) {
        number 32, true, -1
    }
    field(:temp_updated_frame, 132) {
        number 32, true, -1
    }
end

class ItemCrafted < ItemActual
    sizeof 160

    rtti_classname :item_craftedst

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
    field(:maker_race, 144) {
        number 16, true, -1
    }
    def maker_race_tg ; df.world.raws.creatures.all[maker_race] ; end
    field(:quality, 146) {
        number 16, true, nil, ItemQuality
    }
    field(:skill_used, 148) {
        number 32, true, nil, JobSkill
    }
    field(:maker, 152) {
        number 32, true, -1
    }
    def maker_tg ; df.world.history.figures.binsearch(maker) ; end
    field(:masterpiece_event, 156) {
        number 32, true, -1
    }
    def masterpiece_event_tg ; df.world.history.events.binsearch(masterpiece_event) ; end
end

class ItemConstructed < ItemCrafted
    sizeof 176

    rtti_classname :item_constructedst

    field(:improvements, 160) {
        stl_vector(4) {
            pointer {
                global :Itemimprovement
            }
        }
    }
end

class ItemAmmost < ItemConstructed
    sizeof 184

    rtti_classname :item_ammost

    field(:subtype, 176) {
        pointer {
            global :ItemdefAmmost
        }
    }
    field(:sharpness, 180) {
        number 32, true
    }
end

class ItemAmuletst < ItemConstructed
    sizeof 176

    rtti_classname :item_amuletst

end

class ItemAnimaltrapst < ItemConstructed
    sizeof 176

    rtti_classname :item_animaltrapst

end

class ItemAnvilst < ItemConstructed
    sizeof 176

    rtti_classname :item_anvilst

end

class ItemArmorst < ItemConstructed
    sizeof 180

    rtti_classname :item_armorst

    field(:subtype, 176) {
        pointer {
            global :ItemdefArmorst
        }
    }
end

class ItemArmorstandst < ItemConstructed
    sizeof 176

    rtti_classname :item_armorstandst

end

class ItemBackpackst < ItemConstructed
    sizeof 176

    rtti_classname :item_backpackst

end

class ItemBallistaarrowheadst < ItemActual
    sizeof 148

    rtti_classname :item_ballistaarrowheadst

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
    field(:sharpness, 144) {
        number 32, true, 10000
    }
end

class ItemBallistapartsst < ItemConstructed
    sizeof 176

    rtti_classname :item_ballistapartsst

end

class ItemBarrelst < ItemConstructed
    sizeof 184

    rtti_classname :item_barrelst

    field(:stockpile, 176) {
        global :ItemStockpileRef
    }
end

class ItemBarst < ItemActual
    sizeof 148

    rtti_classname :item_barst

    field(:subtype, 136) {
        number 16, true
    }
    field(:mat_type, 138) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
    field(:dimension, 144) {
        number 32, true, 150
    }
end

class ItemBedst < ItemConstructed
    sizeof 176

    rtti_classname :item_bedst

end

class ItemBinst < ItemConstructed
    sizeof 184

    rtti_classname :item_binst

    field(:stockpile, 176) {
        global :ItemStockpileRef
    }
end

class ItemBlocksst < ItemActual
    sizeof 144

    rtti_classname :item_blocksst

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
end

class ItemBodyComponent < ItemActual
    sizeof 704

    rtti_classname :item_body_componentst

    field(:race, 136) {
        number 16, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:hist_figure_id, 140) {
        number 32, true, -1
    }
    def hist_figure_tg ; df.world.history.figures.binsearch(hist_figure_id) ; end
    field(:unit_id, 144) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
    field(:caste, 148) {
        number 16, true, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
    field(:sex, 150) {
        number 8, true
    }
    field(:race2, 152) {
        number 16, true, -1
    }
    def race2_tg ; df.world.raws.creatures.all[race2] ; end
    field(:caste2, 154) {
        number 16, true, -1
    }
    def caste2_tg ; df.world.raws.creatures.all[race2].caste[caste2] ; end
    field(:rot_timer, 156) {
        number 32, true
    }
    field(:unk_8c, 160) {
        number 8, true
    }
    field(:body, 164) {
        compound(:ItemBodyComponent_TBody) {
            field(:wounds, 0) {
                stl_vector(4) {
                    pointer {
                        global :UnitWound
                    }
                }
            }
            field(:unk_100, 16) {
                static_array(10, 4) {
                    number 32, true
                }
            }
            field(:unk_c8, 56) {
                number 32, true
            }
            field(:components, 60) {
                global :BodyComponentInfo
            }
            field(:physical_attr_value, 188) {
                static_array(6, 4, PhysicalAttributeType) {
                    number 32, true
                }
            }
            field(:physical_attr_unk2, 212) {
                static_array(6, 4, PhysicalAttributeType) {
                    number 32, true
                }
            }
            field(:size_info, 236) {
                global :BodySizeInfo
            }
            field(:body_part_relsize, 260) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:body_modifiers, 276) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:bp_modifiers, 292) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:size_modifier, 308) {
                number 32, true
            }
        }
    }
    field(:birth_year, 476) {
        number 32, true
    }
    field(:birth_time, 480) {
        number 32, true
    }
    field(:curse_year, 484) {
        number 32, true
    }
    field(:curse_time, 488) {
        number 32, true
    }
    field(:birth_year_bias, 492) {
        number 32, true
    }
    field(:birth_time_bias, 496) {
        number 32, true
    }
    field(:death_year, 500) {
        number 32, true
    }
    field(:death_time, 504) {
        number 32, true
    }
    field(:appearance, 508) {
        compound(:ItemBodyComponent_TAppearance) {
            field(:colors, 0) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:unk_1e8, 16) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:unk_1f8, 32) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:unk_208, 48) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:unk_218, 64) {
                stl_vector(4) {
                    number 32, true
                }
            }
        }
    }
    field(:blood_count, 588) {
        number 32, true
    }
    field(:stored_fat, 592) {
        number 32, true
    }
    field(:hist_figure_id2, 596) {
        number 32, true, -1
    }
    def hist_figure_tg2 ; df.world.history.figures.binsearch(hist_figure_id2) ; end
    field(:anon_1, 600) {
        number 32, true
    }
    field(:unit_id2, 604) {
        number 32, true, -1
    }
    def unit_tg2 ; df.world.units.all.binsearch(unit_id2) ; end
    field(:corpse_flags, 608) {
        compound(:ItemBodyComponent_TCorpseFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:unbutchered, 0) { bit 0 }
            field(:bone, 0) { bit 4 }
            field(:shell, 0) { bit 5 }
            field(:skull, 0) { bit 12 }
            field(:separated_part, 0) { bit 13 }
            field(:hair_wool, 0) { bit 14 }
            field(:yarn, 0) { bit 15 }
        }
    }
    field(:material_amount, 612) {
        static_array(19, 4, CorpseMaterialType) {
            number 32, true
        }
    }
    field(:bone1, 688) {
        compound(:ItemBodyComponent_TBone1) {
            field(:mat_type, 0) {
                number 16, true, -1
            }
            field(:mat_index, 4) {
                number 32, true
            }
        }
    }
    field(:bone2, 696) {
        compound(:ItemBodyComponent_TBone2) {
            field(:mat_type, 0) {
                number 16, true, -1
            }
            field(:mat_index, 4) {
                number 32, true
            }
        }
    }
end

class ItemBookst < ItemConstructed
    sizeof 204

    rtti_classname :item_bookst

    field(:title, 176) {
        stl_string
    }
end

class ItemBoulderst < ItemActual
    sizeof 144

    rtti_classname :item_boulderst

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
end

class ItemBoxst < ItemConstructed
    sizeof 176

    rtti_classname :item_boxst

end

class ItemBraceletst < ItemConstructed
    sizeof 176

    rtti_classname :item_braceletst

end

class ItemBucketst < ItemConstructed
    sizeof 176

    rtti_classname :item_bucketst

end

class ItemCabinetst < ItemConstructed
    sizeof 176

    rtti_classname :item_cabinetst

end

class ItemCagest < ItemConstructed
    sizeof 176

    rtti_classname :item_cagest

end

class ItemCatapultpartsst < ItemConstructed
    sizeof 176

    rtti_classname :item_catapultpartsst

end

class ItemChainst < ItemConstructed
    sizeof 176

    rtti_classname :item_chainst

end

class ItemChairst < ItemConstructed
    sizeof 176

    rtti_classname :item_chairst

end

class ItemCheesest < ItemActual
    sizeof 148

    rtti_classname :item_cheesest

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
    field(:rot_timer, 144) {
        number 32, true
    }
end

class ItemClothst < ItemConstructed
    sizeof 180

    rtti_classname :item_clothst

    field(:dimension, 176) {
        number 32, true, 10000
    }
end

class ItemCoffinst < ItemConstructed
    sizeof 176

    rtti_classname :item_coffinst

end

class ItemCoinst < ItemConstructed
    sizeof 180

    rtti_classname :item_coinst

    field(:coin_batch, 176) {
        number 16, true, -1
    }
    def coin_batch_tg ; df.world.coin_batches[coin_batch] ; end
end

class ItemCorpsepiecest < ItemBodyComponent
    sizeof 704

    rtti_classname :item_corpsepiecest

end

class ItemCorpsest < ItemBodyComponent
    sizeof 704

    rtti_classname :item_corpsest

end

class ItemCritter < ItemActual
    sizeof 256

    rtti_classname :item_critterst

    field(:race, 136) {
        number 16, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:caste, 138) {
        number 16, true, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
    field(:milk_timer, 140) {
        number 32, true
    }
    field(:airdrown_timer, 144) {
        number 32, true
    }
    field(:name, 148) {
        global :LanguageName
    }
end

class ItemCrownst < ItemConstructed
    sizeof 176

    rtti_classname :item_crownst

end

class ItemCrutchst < ItemConstructed
    sizeof 176

    rtti_classname :item_crutchst

end

class ItemDoorst < ItemConstructed
    sizeof 176

    rtti_classname :item_doorst

end

class ItemLiquipowder < ItemActual
    sizeof 152

    rtti_classname :item_liquipowderst

    field(:mat_state, 136) {
        global :ItemMatstate
    }
    field(:dimension, 140) {
        number 32, true, 150
    }
    field(:mat_type, 144) {
        number 16, true, -1
    }
    field(:mat_index, 148) {
        number 32, true
    }
end

class ItemLiquid < ItemLiquipowder
    sizeof 152

    rtti_classname :item_liquidst

end

class ItemDrinkst < ItemLiquid
    sizeof 152

    rtti_classname :item_drinkst

end

class ItemEarringst < ItemConstructed
    sizeof 176

    rtti_classname :item_earringst

end

class ItemEggst < ItemActual
    sizeof 272

    rtti_classname :item_eggst

    field(:race, 136) {
        number 16, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:caste, 138) {
        number 16, true, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
    field(:unk_7c, 140) {
        number 32, true
    }
    field(:egg_materials, 144) {
        global :MaterialVecRef
    }
    field(:egg_flags, 176) {
        compound(:ItemEggst_TEggFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:fertile, 0) { bit 0 }
        }
    }
    field(:incubation_counter, 180) {
        number 32, true
    }
    field(:hatchling_civ_id, 184) {
        number 32, true, -1
    }
    def hatchling_civ_tg ; df.world.entities.all.binsearch(hatchling_civ_id) ; end
    field(:hatchling_population_id, 188) {
        number 32, true, -1
    }
    def hatchling_population_tg ; df.world.entity_populations.binsearch(hatchling_population_id) ; end
    field(:hatchling_unit_unk_c0, 192) {
        number 32, true, -1
    }
    field(:anon_1, 196) {
        number 32, true
    }
    field(:mothers_genes, 200) {
        pointer {
            global :UnitGenes
        }
    }
    field(:mothers_caste, 204) {
        number 16, true, -1
    }
    def mothers_caste_tg ; df.world.raws.creatures.all[race].caste[mothers_caste] ; end
    field(:anon_2, 208) {
        number 32, true
    }
    field(:fathers_genes, 212) {
        pointer {
            global :UnitGenes
        }
    }
    field(:fathers_caste, 216) {
        number 16, true, -1
    }
    def fathers_caste_tg ; df.world.raws.creatures.all[race].caste[fathers_caste] ; end
    field(:anon_3, 220) {
        number 32, true
    }
    field(:hatchling_flags1, 224) {
        global :UnitFlags1
    }
    field(:hatchling_flags2, 228) {
        global :UnitFlags2
    }
    field(:hatchling_flags3, 232) {
        global :UnitFlags3
    }
    field(:hatchling_training_level, 236) {
        number 32, true, :WildUntamed, AnimalTrainingLevel
    }
    field(:hatchling_animal_population, 240) {
        global :WorldPopulationRef
    }
    field(:hatchling_mother_id, 264) {
        number 32, true, -1
    }
    def hatchling_mother_tg ; df.world.units.all.binsearch(hatchling_mother_id) ; end
    field(:size, 268) {
        number 32, true
    }
end

class ItemFigurinest < ItemConstructed
    sizeof 220

    rtti_classname :item_figurinest

    field(:image, 176) {
        global :ArtImageRef
    }
    field(:description, 192) {
        stl_string
    }
end

class ItemFilterSpec < MemHack::Compound
    sizeof 12

    field(:item_type, 0) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 2) {
        number 16, true, -1
    }
    field(:material_class, 4) {
        number 16, true, nil, EntityMaterialCategory
    }
    field(:mattype, 6) {
        number 16, true, -1
    }
    field(:matindex, 8) {
        number 32, true
    }
end

class ItemFishRawst < ItemActual
    sizeof 144

    rtti_classname :item_fish_rawst

    field(:race, 136) {
        number 16, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:caste, 138) {
        number 16, true, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
    field(:rot_timer, 140) {
        number 32, true
    }
end

class ItemFishst < ItemActual
    sizeof 144

    rtti_classname :item_fishst

    field(:race, 136) {
        number 16, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:caste, 138) {
        number 16, true, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
    field(:rot_timer, 140) {
        number 32, true
    }
end

class ItemFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:on_ground, 0) { bit 0 }
    field(:in_job, 0) { bit 1 }
    field(:hostile, 0) { bit 2 }
    field(:in_inventory, 0) { bit 3 }
    field(:removed, 0) { bit 4 }
    field(:in_building, 0) { bit 5 }
    field(:container, 0) { bit 6 }
    field(:dead_dwarf, 0) { bit 7 }
    field(:rotten, 0) { bit 8 }
    field(:spider_web, 0) { bit 9 }
    field(:construction, 0) { bit 10 }
    field(:encased, 0) { bit 11 }
    field(:unk12, 0) { bit 12 }
    field(:murder, 0) { bit 13 }
    field(:foreign, 0) { bit 14 }
    field(:trader, 0) { bit 15 }
    field(:owned, 0) { bit 16 }
    field(:garbage_collect, 0) { bit 17 }
    field(:artifact, 0) { bit 18 }
    field(:forbid, 0) { bit 19 }
    field(:already_uncategorized, 0) { bit 20 }
    field(:dump, 0) { bit 21 }
    field(:on_fire, 0) { bit 22 }
    field(:melt, 0) { bit 23 }
    field(:hidden, 0) { bit 24 }
    field(:in_chest, 0) { bit 25 }
    field(:use_recorded, 0) { bit 26 }
    field(:artifact_mood, 0) { bit 27 }
    field(:temps_computed, 0) { bit 28 }
    field(:weight_computed, 0) { bit 29 }
    field(:unk30, 0) { bit 30 }
    field(:from_worldgen, 0) { bit 31 }
end

class ItemFlags2 < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:has_rider, 0) { bit 0 }
    field(:unk1, 0) { bit 1 }
    field(:grown, 0) { bit 2 }
end

class ItemFlaskst < ItemConstructed
    sizeof 176

    rtti_classname :item_flaskst

end

class ItemFloodgatest < ItemConstructed
    sizeof 176

    rtti_classname :item_floodgatest

end

class ItemFoodst < ItemCrafted
    sizeof 192

    rtti_classname :item_foodst

    field(:subtype, 160) {
        pointer {
            global :ItemdefFoodst
        }
    }
    field(:entity, 164) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity) ; end
    field(:recipe_id, 168) {
        number 16, true
    }
    field(:ingredients, 172) {
        stl_vector(4) {
            pointer {
                compound(:ItemFoodst_TIngredients) {
                    sizeof 28

                    field(:anon_1, 0) {
                        number 16, true
                    }
                    field(:item_type, 2) {
                        number 16, true, nil, ItemType
                    }
                    field(:unk_4, 4) {
                        number 16, true, -1
                    }
                    field(:mat_type, 6) {
                        number 16, true, -1
                    }
                    field(:mat_index, 8) {
                        number 32, true, -1
                    }
                    field(:maker, 12) {
                        number 32, true, -1
                    }
                    def maker_tg ; df.world.history.figures.binsearch(maker) ; end
                    field(:unk_10, 16) {
                        number 16, true
                    }
                    field(:unk_14, 20) {
                        number 32, true
                    }
                    field(:unk_18, 24) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:rot_timer, 188) {
        number 32, true
    }
end

class ItemGemst < ItemConstructed
    sizeof 180

    rtti_classname :item_gemst

    field(:shape, 176) {
        number 32, true, -1
    }
    def shape_tg ; df.world.raws.language.shapes[shape] ; end
end

class ItemGlobst < ItemActual
    sizeof 156

    rtti_classname :item_globst

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
    field(:rot_timer, 144) {
        number 32, true
    }
    field(:mat_state, 148) {
        global :ItemMatstate
    }
    field(:anon_1, 152) {
        number 32, true
    }
end

class ItemGlovesst < ItemConstructed
    sizeof 188

    rtti_classname :item_glovesst

    field(:subtype, 176) {
        pointer {
            global :ItemdefGlovesst
        }
    }
    field(:handedness, 180) {
        df_flagarray
    }
end

class ItemGobletst < ItemConstructed
    sizeof 176

    rtti_classname :item_gobletst

end

class ItemGratest < ItemConstructed
    sizeof 176

    rtti_classname :item_gratest

end

class ItemHatchCoverst < ItemConstructed
    sizeof 176

    rtti_classname :item_hatch_coverst

end

class ItemHelmst < ItemConstructed
    sizeof 180

    rtti_classname :item_helmst

    field(:subtype, 176) {
        pointer {
            global :ItemdefHelmst
        }
    }
end

class ItemHistoryInfo < MemHack::Compound
    sizeof 12

    field(:kills, 0) {
        pointer {
            global :ItemKillInfo
        }
    }
    field(:unk1, 4) {
        number 32, true
    }
    field(:unk2, 8) {
        number 32, true
    }
end

class ItemInstrumentst < ItemConstructed
    sizeof 180

    rtti_classname :item_instrumentst

    field(:subtype, 176) {
        pointer {
            global :ItemdefInstrumentst
        }
    }
end

class ItemKillInfo < MemHack::Compound
    sizeof 160

    field(:targets, 0) {
        global :HistoricalKills
    }
    field(:slayers, 128) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def slayers_tg ; slayers.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:slayer_kill_counts, 144) {
        stl_vector(4) {
            number 32, true
        }
    }
end

class ItemLiquidMiscst < ItemLiquid
    sizeof 156

    rtti_classname :item_liquid_miscst

    field(:unk_88, 152) {
        number 32, true
    }
end

class ItemMagicness < MemHack::Compound
    sizeof 12

    field(:type, 0) {
        number 16, true, nil, ItemMagicnessType
    }
    field(:value, 2) {
        number 16, true
    }
    field(:anon_1, 4) {
        number 16, true
    }
    field(:flags, 8) {
        number 32, true
    }
end

class ItemMatstate < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:no_auto_clean, 0) { bit 0 }
    field(:pressed, 0) { bit 1 }
    field(:paste, 0) { bit 2 }
end

class ItemMeatst < ItemActual
    sizeof 148

    rtti_classname :item_meatst

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
    field(:rot_timer, 144) {
        number 32, true
    }
end

class ItemMillstonest < ItemConstructed
    sizeof 176

    rtti_classname :item_millstonest

end

class ItemOrthopedicCastst < ItemConstructed
    sizeof 232

    rtti_classname :item_orthopedic_castst

    field(:body_part, 176) {
        stl_string
    }
    field(:material, 204) {
        stl_string
    }
end

class ItemPantsst < ItemConstructed
    sizeof 180

    rtti_classname :item_pantsst

    field(:subtype, 176) {
        pointer {
            global :ItemdefPantsst
        }
    }
end

class ItemPetst < ItemCritter
    sizeof 264

    rtti_classname :item_petst

    field(:anon_1, 256) {
        number 32, true
    }
    field(:anon_2, 260) {
        number 32, true
    }
end

class ItemPipeSectionst < ItemConstructed
    sizeof 176

    rtti_classname :item_pipe_sectionst

end

class ItemPlantGrowthst < ItemActual
    sizeof 156

    rtti_classname :item_plant_growthst

    field(:subtype, 136) {
        number 16, true
    }
    field(:anon_1, 140) {
        number 32, true
    }
    field(:mat_type, 144) {
        number 16, true, -1
    }
    field(:mat_index, 148) {
        number 32, true
    }
    field(:rot_timer, 152) {
        number 32, true
    }
end

class ItemPlantst < ItemActual
    sizeof 148

    rtti_classname :item_plantst

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
    field(:rot_timer, 144) {
        number 32, true
    }
end

class ItemPowder < ItemLiquipowder
    sizeof 152

    rtti_classname :item_powderst

end

class ItemPowderMiscst < ItemPowder
    sizeof 152

    rtti_classname :item_powder_miscst

end

class ItemQuernst < ItemConstructed
    sizeof 176

    rtti_classname :item_quernst

end

class ItemQuiverst < ItemConstructed
    sizeof 176

    rtti_classname :item_quiverst

end

class ItemRemainsst < ItemActual
    sizeof 144

    rtti_classname :item_remainsst

    field(:race, 136) {
        number 16, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:caste, 138) {
        number 16, true, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
    field(:rot_timer, 140) {
        number 32, true
    }
end

class ItemRingst < ItemConstructed
    sizeof 176

    rtti_classname :item_ringst

end

class ItemRockst < ItemActual
    sizeof 152

    rtti_classname :item_rockst

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
    field(:sharpness, 144) {
        number 32, true
    }
    field(:unk_84, 148) {
        number 32, true
    }
end

class ItemRoughst < ItemActual
    sizeof 144

    rtti_classname :item_roughst

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
end

class ItemScepterst < ItemConstructed
    sizeof 176

    rtti_classname :item_scepterst

end

class ItemSeedsst < ItemActual
    sizeof 152

    rtti_classname :item_seedsst

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
    field(:grow_counter, 144) {
        number 32, true
    }
    field(:planting_skill, 148) {
        number 32, true
    }
end

class ItemShieldst < ItemConstructed
    sizeof 180

    rtti_classname :item_shieldst

    field(:subtype, 176) {
        pointer {
            global :ItemdefShieldst
        }
    }
end

class ItemShoesst < ItemConstructed
    sizeof 180

    rtti_classname :item_shoesst

    field(:subtype, 176) {
        pointer {
            global :ItemdefShoesst
        }
    }
end

class ItemSiegeammost < ItemConstructed
    sizeof 184

    rtti_classname :item_siegeammost

    field(:subtype, 176) {
        pointer {
            global :ItemdefSiegeammost
        }
    }
    field(:sharpness, 180) {
        number 32, true, 10000
    }
end

class ItemSkinTannedst < ItemActual
    sizeof 148

    rtti_classname :item_skin_tannedst

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
    field(:unk_80, 144) {
        number 32, true
    }
end

class ItemSlabst < ItemConstructed
    sizeof 212

    rtti_classname :item_slabst

    field(:description, 176) {
        stl_string
    }
    field(:topic, 204) {
        number 32, true, -1
    }
    def topic_tg ; df.world.history.figures.binsearch(topic) ; end
    field(:engraving_type, 208) {
        number 16, true, nil, SlabEngravingType
    }
end

class ItemSmallgemst < ItemActual
    sizeof 148

    rtti_classname :item_smallgemst

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
    field(:shape, 144) {
        number 32, true, -1
    }
    def shape_tg ; df.world.raws.language.shapes[shape] ; end
end

class ItemSplintst < ItemConstructed
    sizeof 176

    rtti_classname :item_splintst

end

class ItemStatuest < ItemConstructed
    sizeof 220

    rtti_classname :item_statuest

    field(:image, 176) {
        global :ArtImageRef
    }
    field(:description, 192) {
        stl_string
    }
end

class ItemStockpileRef < MemHack::Compound
    sizeof 8

    field(:id, 0) {
        number 32, true, -1
    }
    def id_tg ; df.world.buildings.all.binsearch(id) ; end
    field(:x, 4) {
        number 16, true
    }
    field(:y, 6) {
        number 16, true
    }
end

class ItemTablest < ItemConstructed
    sizeof 176

    rtti_classname :item_tablest

end

class ItemThreadst < ItemActual
    sizeof 176

    rtti_classname :item_threadst

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
    field(:dye_mat_type, 144) {
        number 16, true, -1
    }
    field(:dye_mat_index, 148) {
        number 32, true
    }
    field(:unk_88, 152) {
        number 32, true
    }
    field(:unk_8c, 156) {
        number 32, true
    }
    field(:dye_quality, 160) {
        number 16, true
    }
    field(:unk_92, 162) {
        number 16, true
    }
    field(:unk_94, 164) {
        number 32, true
    }
    field(:unk_98, 168) {
        number 8, true
    }
    field(:dimension, 172) {
        number 32, true, 15000
    }
end

class ItemToolst < ItemConstructed
    sizeof 196

    rtti_classname :item_toolst

    field(:subtype, 176) {
        pointer {
            global :ItemdefToolst
        }
    }
    field(:sharpness, 180) {
        number 32, true
    }
    field(:stockpile, 184) {
        global :ItemStockpileRef
    }
    field(:vehicle_id, 192) {
        number 32, true, -1
    }
    def vehicle_tg ; df.world.vehicles.all.binsearch(vehicle_id) ; end
end

class ItemTotemst < ItemConstructed
    sizeof 184

    rtti_classname :item_totemst

    field(:unk_a0, 176) {
        number 16, true
    }
    field(:unk_a2, 178) {
        number 16, true
    }
    field(:unk_a4, 180) {
        number 16, true
    }
end

class ItemToyst < ItemConstructed
    sizeof 180

    rtti_classname :item_toyst

    field(:subtype, 176) {
        pointer {
            global :ItemdefToyst
        }
    }
end

class ItemTractionBenchst < ItemConstructed
    sizeof 176

    rtti_classname :item_traction_benchst

end

class ItemTrapcompst < ItemConstructed
    sizeof 184

    rtti_classname :item_trapcompst

    field(:subtype, 176) {
        pointer {
            global :ItemdefTrapcompst
        }
    }
    field(:sharpness, 180) {
        number 32, true
    }
end

class ItemTrappartsst < ItemConstructed
    sizeof 176

    rtti_classname :item_trappartsst

end

class ItemVerminst < ItemCritter
    sizeof 256

    rtti_classname :item_verminst

end

class ItemWeaponrackst < ItemConstructed
    sizeof 176

    rtti_classname :item_weaponrackst

end

class ItemWeaponst < ItemConstructed
    sizeof 184

    rtti_classname :item_weaponst

    field(:subtype, 176) {
        pointer {
            global :ItemdefWeaponst
        }
    }
    field(:sharpness, 180) {
        number 32, true
    }
end

class ItemWindowst < ItemConstructed
    sizeof 176

    rtti_classname :item_windowst

end

class ItemWoodst < ItemActual
    sizeof 144

    rtti_classname :item_woodst

    field(:mat_type, 136) {
        number 16, true, -1
    }
    field(:mat_index, 140) {
        number 32, true
    }
end

class Itemdef < MemHack::Compound
    sizeof 64

    rtti_classname :itemdefst

    field(:id, 4) {
        stl_string
    }
    field(:subtype, 32) {
        number 16, true
    }
    field(:base_flags, 36) {
        df_flagarray
    }
    field(:source_hfid, 44) {
        number 32, true, -1
    }
    def source_hfid_tg ; df.world.history.figures.binsearch(source_hfid) ; end
    field(:raw_strings, 48) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    def parseRaws(arg0, arg1, arg2, arg3, arg4)
        DFHack.vmethod_call(self, 4, arg0, arg1, arg2, arg3, arg4) ; nil
    end
    def categorize()
        DFHack.vmethod_call(self, 8) ; nil
    end
    def finalize()
        DFHack.vmethod_call(self, 12) ; nil
    end
end

class ItemdefAmmost < Itemdef
    sizeof 208

    rtti_classname :itemdef_ammost

    field(:name, 64) {
        stl_string
    }
    field(:name_plural, 92) {
        stl_string
    }
    field(:adjective, 120) {
        stl_string
    }
    field(:ammo_class, 148) {
        stl_string
    }
    field(:flags, 176) {
        df_flagarray(AmmoFlags)
    }
    field(:size, 184) {
        number 32, true
    }
    field(:value, 188) {
        number 32, true
    }
    field(:attacks, 192) {
        stl_vector(4) {
            pointer {
                global :WeaponAttack
            }
        }
    }
end

class ItemdefArmorst < Itemdef
    sizeof 248

    rtti_classname :itemdef_armorst

    field(:name, 64) {
        stl_string
    }
    field(:name_plural, 92) {
        stl_string
    }
    field(:name_preplural, 120) {
        stl_string
    }
    field(:material_placeholder, 148) {
        stl_string
    }
    field(:adjective, 176) {
        stl_string
    }
    field(:value, 204) {
        number 32, true
    }
    field(:armorlevel, 208) {
        number 8, true
    }
    field(:ubstep, 210) {
        number 16, true
    }
    field(:lbstep, 212) {
        number 16, true
    }
    field(:material_size, 216) {
        number 32, true
    }
    field(:props, 220) {
        global :ArmorProperties
    }
    field(:flags, 240) {
        df_flagarray(ArmorFlags)
    }
end

class ItemdefFoodst < Itemdef
    sizeof 96

    rtti_classname :itemdef_foodst

    field(:name, 64) {
        stl_string
    }
    field(:level, 92) {
        number 16, true
    }
end

class ItemdefGlovesst < Itemdef
    sizeof 188

    rtti_classname :itemdef_glovesst

    field(:name, 64) {
        stl_string
    }
    field(:name_plural, 92) {
        stl_string
    }
    field(:adjective, 120) {
        stl_string
    }
    field(:value, 148) {
        number 32, true
    }
    field(:armorlevel, 152) {
        number 8, true
    }
    field(:upstep, 154) {
        number 16, true
    }
    field(:flags, 156) {
        df_flagarray(GlovesFlags)
    }
    field(:material_size, 164) {
        number 32, true
    }
    field(:props, 168) {
        global :ArmorProperties
    }
end

class ItemdefHelmst < Itemdef
    sizeof 188

    rtti_classname :itemdef_helmst

    field(:name, 64) {
        stl_string
    }
    field(:name_plural, 92) {
        stl_string
    }
    field(:adjective, 120) {
        stl_string
    }
    field(:value, 148) {
        number 32, true
    }
    field(:armorlevel, 152) {
        number 8, true
    }
    field(:flags, 156) {
        df_flagarray(HelmFlags)
    }
    field(:material_size, 164) {
        number 32, true
    }
    field(:props, 168) {
        global :ArmorProperties
    }
end

class ItemdefInstrumentst < Itemdef
    sizeof 128

    rtti_classname :itemdef_instrumentst

    field(:name, 64) {
        stl_string
    }
    field(:name_plural, 92) {
        stl_string
    }
    field(:flags, 120) {
        df_flagarray(InstrumentFlags)
    }
end

class ItemdefPantsst < Itemdef
    sizeof 248

    rtti_classname :itemdef_pantsst

    field(:name, 64) {
        stl_string
    }
    field(:name_plural, 92) {
        stl_string
    }
    field(:name_preplural, 120) {
        stl_string
    }
    field(:material_placeholder, 148) {
        stl_string
    }
    field(:adjective, 176) {
        stl_string
    }
    field(:value, 204) {
        number 32, true
    }
    field(:armorlevel, 208) {
        number 8, true
    }
    field(:flags, 212) {
        df_flagarray(PantsFlags)
    }
    field(:material_size, 220) {
        number 32, true
    }
    field(:lbstep, 224) {
        number 16, true
    }
    field(:props, 228) {
        global :ArmorProperties
    }
end

class ItemdefShieldst < Itemdef
    sizeof 164

    rtti_classname :itemdef_shieldst

    field(:name, 64) {
        stl_string
    }
    field(:name_plural, 92) {
        stl_string
    }
    field(:adjective, 120) {
        stl_string
    }
    field(:value, 148) {
        number 32, true
    }
    field(:blockchance, 152) {
        number 32, true
    }
    field(:armorlevel, 156) {
        number 8, true
    }
    field(:upstep, 158) {
        number 16, true
    }
    field(:material_size, 160) {
        number 32, true
    }
end

class ItemdefShoesst < Itemdef
    sizeof 188

    rtti_classname :itemdef_shoesst

    field(:name, 64) {
        stl_string
    }
    field(:name_plural, 92) {
        stl_string
    }
    field(:adjective, 120) {
        stl_string
    }
    field(:value, 148) {
        number 32, true
    }
    field(:armorlevel, 152) {
        number 8, true
    }
    field(:upstep, 154) {
        number 16, true
    }
    field(:flags, 156) {
        df_flagarray(ShoesFlags)
    }
    field(:material_size, 164) {
        number 32, true
    }
    field(:props, 168) {
        global :ArmorProperties
    }
end

class ItemdefSiegeammost < Itemdef
    sizeof 148

    rtti_classname :itemdef_siegeammost

    field(:name, 64) {
        stl_string
    }
    field(:name_plural, 92) {
        stl_string
    }
    field(:ammo_class, 120) {
        stl_string
    }
end

class ItemdefToolst < Itemdef
    sizeof 256

    rtti_classname :itemdef_toolst

    field(:name, 64) {
        stl_string
    }
    field(:name_plural, 92) {
        stl_string
    }
    field(:flags, 120) {
        df_flagarray(ToolFlags)
    }
    field(:value, 128) {
        number 32, true
    }
    field(:tile, 132) {
        number 8, false
    }
    field(:tool_use, 136) {
        stl_vector(2) {
            number 16, true, nil, ToolUses
        }
    }
    field(:adjective, 152) {
        stl_string
    }
    field(:size, 180) {
        number 32, true
    }
    field(:skill_melee, 184) {
        number 16, true, nil, JobSkill
    }
    field(:skill_ranged, 186) {
        number 16, true, nil, JobSkill
    }
    field(:ranged_ammo, 188) {
        stl_string
    }
    field(:two_handed, 216) {
        number 32, true
    }
    field(:minimum_size, 220) {
        number 32, true
    }
    field(:material_size, 224) {
        number 32, true
    }
    field(:attacks, 228) {
        stl_vector(4) {
            pointer {
                global :WeaponAttack
            }
        }
    }
    field(:shoot_force, 244) {
        number 32, true
    }
    field(:shoot_maxvel, 248) {
        number 32, true
    }
    field(:container_capacity, 252) {
        number 32, true
    }
end

class ItemdefToyst < Itemdef
    sizeof 128

    rtti_classname :itemdef_toyst

    field(:name, 64) {
        stl_string
    }
    field(:name_plural, 92) {
        stl_string
    }
    field(:flags, 120) {
        df_flagarray(ToyFlags)
    }
end

class ItemdefTrapcompst < Itemdef
    sizeof 188

    rtti_classname :itemdef_trapcompst

    field(:name, 64) {
        stl_string
    }
    field(:name_plural, 92) {
        stl_string
    }
    field(:adjective, 120) {
        stl_string
    }
    field(:size, 148) {
        number 32, true
    }
    field(:value, 152) {
        number 32, true
    }
    field(:hits, 156) {
        number 32, true
    }
    field(:material_size, 160) {
        number 32, true
    }
    field(:flags, 164) {
        df_flagarray(TrapcompFlags)
    }
    field(:attacks, 172) {
        stl_vector(4) {
            pointer {
                global :WeaponAttack
            }
        }
    }
end

class ItemdefWeaponst < Itemdef
    sizeof 232

    rtti_classname :itemdef_weaponst

    field(:name, 64) {
        stl_string
    }
    field(:name_plural, 92) {
        stl_string
    }
    field(:adjective, 120) {
        stl_string
    }
    field(:size, 148) {
        number 32, true
    }
    field(:value, 152) {
        number 32, true
    }
    field(:skill_melee, 156) {
        number 16, true, nil, JobSkill
    }
    field(:skill_ranged, 158) {
        number 16, true, nil, JobSkill
    }
    field(:ranged_ammo, 160) {
        stl_string
    }
    field(:two_handed, 188) {
        number 32, true
    }
    field(:minimum_size, 192) {
        number 32, true
    }
    field(:material_size, 196) {
        number 32, true
    }
    field(:flags, 200) {
        df_flagarray(WeaponFlags)
    }
    field(:attacks, 208) {
        stl_vector(4) {
            pointer {
                global :WeaponAttack
            }
        }
    }
    field(:shoot_force, 224) {
        number 32, true
    }
    field(:shoot_maxvel, 228) {
        number 32, true
    }
end

class Itemimprovement < MemHack::Compound
    sizeof 32

    rtti_classname :itemimprovementst

    field(:mat_type, 4) {
        number 16, true, -1
    }
    field(:mat_index, 8) {
        number 32, true
    }
    field(:maker, 12) {
        number 32, true, -1
    }
    def maker_tg ; df.world.history.figures.binsearch(maker) ; end
    field(:masterpiece_event, 16) {
        number 32, true, -1
    }
    def masterpiece_event_tg ; df.world.history.events.binsearch(masterpiece_event) ; end
    field(:quality, 20) {
        number 16, true, nil, ItemQuality
    }
    field(:skill_rating, 24) {
        number 32, true, nil, SkillRating
    }
    field(:anon_1, 28) {
        number 32, true
    }
    def getImage(arg0)
        ptr = DFHack.vmethod_call(self, 0, arg0)
        class << self
            global :ArtImage
        end._at(ptr) if ptr != 0
    end
    def getColorAndShape(colors, shapes, arg2)
        DFHack.vmethod_call(self, 4, colors, shapes, arg2) ; nil
    end
    def clone()
        ptr = DFHack.vmethod_call(self, 8)
        class << self
            global :Itemimprovement
        end._at(ptr) if ptr != 0
    end
    def write_file(file)
        DFHack.vmethod_call(self, 12, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 16, file, loadversion) ; nil
    end
    def getType()
        ImprovementType.sym(DFHack.vmethod_call(self, 20))
    end
    def getDyeValue(caravan)
        val = DFHack.vmethod_call(self, 32, caravan)
    end
    def setShape(shape)
        DFHack.vmethod_call(self, 36, shape) ; nil
    end
end

class ItemimprovementArtImagest < Itemimprovement
    sizeof 48

    rtti_classname :itemimprovement_art_imagest

    field(:image, 32) {
        global :ArtImageRef
    }
end

class ItemimprovementBandsst < Itemimprovement
    sizeof 36

    rtti_classname :itemimprovement_bandsst

    field(:shape, 32) {
        number 32, true, -1
    }
    def shape_tg ; df.world.raws.language.shapes[shape] ; end
end

class ItemimprovementClothst < Itemimprovement
    sizeof 32

    rtti_classname :itemimprovement_clothst

end

class ItemimprovementCoveredst < Itemimprovement
    sizeof 40

    rtti_classname :itemimprovement_coveredst

    field(:cover_flags, 32) {
        compound(:ItemimprovementCoveredst_TCoverFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:glazed, 0) { bit 0 }
        }
    }
    field(:shape, 36) {
        number 32, true, -1
    }
    def shape_tg ; df.world.raws.language.shapes[shape] ; end
end

class ItemimprovementIllustrationst < Itemimprovement
    sizeof 52

    rtti_classname :itemimprovement_illustrationst

    field(:image, 32) {
        global :ArtImageRef
    }
    field(:anon_1, 48) {
        number 32, true
    }
end

class ItemimprovementItemspecificst < Itemimprovement
    sizeof 36

    rtti_classname :itemimprovement_itemspecificst

    field(:type, 32) {
        number 32, true
    }
end

class ItemimprovementPagesst < Itemimprovement
    sizeof 52

    rtti_classname :itemimprovement_pagesst

    field(:count, 32) {
        number 32, true
    }
    field(:contents, 36) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def contents_tg ; contents.map { |i| df.world.written_contents.all.binsearch(i) } ; end
end

class ItemimprovementRingsHangingst < Itemimprovement
    sizeof 32

    rtti_classname :itemimprovement_rings_hangingst

end

class ItemimprovementSewnImagest < Itemimprovement
    sizeof 76

    rtti_classname :itemimprovement_sewn_imagest

    field(:image, 32) {
        global :ArtImageRef
    }
    field(:cloth, 48) {
        compound(:ItemimprovementSewnImagest_TCloth) {
            field(:unit_id, 0) {
                number 32, true, -1
            }
            def unit_tg ; df.world.history.figures.binsearch(unit_id) ; end
            field(:quality, 4) {
                number 16, true
            }
            field(:anon_1, 6) {
                number 16, true
            }
        }
    }
    field(:dye, 56) {
        global :DyeInfo
    }
end

class ItemimprovementSpikesst < Itemimprovement
    sizeof 32

    rtti_classname :itemimprovement_spikesst

end

class ItemimprovementThreadst < Itemimprovement
    sizeof 52

    rtti_classname :itemimprovement_threadst

    field(:dye, 32) {
        global :DyeInfo
    }
end

class Job < MemHack::Compound
    sizeof 232

    field(:id, 0) {
        number 32, true, -1
    }
    field(:list_link, 4) {
        pointer {
            global :JobListLink
        }
    }
    field(:unk_v4020_1, 8) {
        number 32, true, -1
    }
    field(:job_type, 12) {
        number 16, true, nil, JobType
    }
    field(:job_subtype, 16) {
        number 32, true, -1
    }
    field(:pos, 20) {
        global :Coord
    }
    field(:completion_timer, 28) {
        number 32, true, -1
    }
    field(:unk4, 32) {
        number 32, false
    }
    field(:flags, 36) {
        global :JobFlags
    }
    field(:mat_type, 40) {
        number 16, true, -1
    }
    field(:mat_index, 44) {
        number 32, true, -1
    }
    field(:unk5, 48) {
        number 16, true, -1
    }
    field(:item_type, 50) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 52) {
        number 16, true, -1
    }
    field(:item_category, 56) {
        global :StockpileGroupSet
    }
    field(:hist_figure_id, 60) {
        number 32, true, -1
    }
    def hist_figure_tg ; df.world.history.figures.binsearch(hist_figure_id) ; end
    field(:material_category, 64) {
        global :JobMaterialCategory
    }
    field(:reaction_name, 68) {
        stl_string
    }
    field(:expire_timer, 96) {
        number 32, true
    }
    field(:recheck_cntdn, 100) {
        number 16, true
    }
    field(:wait_timer, 102) {
        number 16, true
    }
    field(:unk11, 104) {
        number 32, true, -1
    }
    field(:items, 108) {
        stl_vector(4) {
            pointer {
                global :JobItemRef
            }
        }
    }
    field(:specific_refs, 124) {
        stl_vector(4) {
            pointer {
                global :SpecificRef
            }
        }
    }
    field(:general_refs, 140) {
        stl_vector(4) {
            pointer {
                global :GeneralRef
            }
        }
    }
    field(:job_items, 156) {
        stl_vector(4) {
            pointer {
                global :JobItem
            }
        }
    }
    field(:guide_path, 172) {
        global :CoordPath
    }
    field(:cur_path_index, 220) {
        number 32, true
    }
    field(:unk_v4020_2, 224) {
        global :Coord
    }
end

class JobFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:repeat, 0) { bit 0 }
    field(:suspend, 0) { bit 1 }
    field(:working, 0) { bit 2 }
    field(:fetching, 0) { bit 3 }
    field(:special, 0) { bit 4 }
    field(:bringing, 0) { bit 5 }
    field(:item_lost, 0) { bit 6 }
    field(:noise, 0) { bits 7, 2 }
    field(:by_manager, 0) { bit 9 }
    field(:store_item, 0) { bit 10 }
    field(:quality, 0) { bits 11, 3 }
    field(:specific_dropoff, 0) { bit 14 }
    field(:on_break, 0) { bit 16 }
    field(:do_now, 0) { bit 18 }
end

class JobItem < MemHack::Compound
    sizeof 132

    field(:item_type, 0) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 2) {
        number 16, true, -1
    }
    field(:mat_type, 4) {
        number 16, true, -1
    }
    field(:mat_index, 8) {
        number 32, true, -1
    }
    field(:flags1, 12) {
        global :JobItemFlags1
    }
    field(:quantity, 16) {
        number 32, true, 1
    }
    field(:vector_id, 20) {
        number 16, true, :IN_PLAY, JobItemVectorId
    }
    field(:flags2, 24) {
        global :JobItemFlags2
    }
    field(:flags3, 28) {
        global :JobItemFlags3
    }
    field(:flags4, 32) {
        number 32, false
    }
    field(:flags5, 36) {
        number 32, false
    }
    field(:metal_ore, 40) {
        number 32, true, -1
    }
    def metal_ore_tg ; df.world.raws.inorganics[metal_ore] ; end
    field(:reaction_class, 44) {
        stl_string
    }
    field(:has_material_reaction_product, 72) {
        stl_string
    }
    field(:min_dimension, 100) {
        number 32, true, -1
    }
    field(:reagent_index, 104) {
        number 32, true, -1
    }
    field(:contains, 108) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:reaction_id, 124) {
        number 32, true, -1
    }
    def reaction_tg ; df.world.raws.reactions[reaction_id] ; end
    field(:has_tool_use, 128) {
        number 16, true, nil, ToolUses
    }
end

class JobItemFilter < MemHack::Compound
    sizeof 200

    field(:item_type, 0) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 2) {
        number 16, true, -1
    }
    field(:mat_type, 4) {
        number 16, true, -1
    }
    field(:mat_index, 8) {
        number 32, true, -1
    }
    field(:flags1, 12) {
        global :JobItemFlags1
    }
    field(:item_vector, 16) {
        pointer {
            stl_vector(4) {
                pointer {
                    global :Item
                }
            }
        }
    }
    field(:use_mat_index, 20) {
        number 8, true, nil, BooleanEnum
    }
    field(:flags2, 24) {
        global :JobItemFlags2
    }
    field(:use_flags2, 28) {
        number 8, true, nil, BooleanEnum
    }
    field(:flags3, 32) {
        global :JobItemFlags3
    }
    field(:use_flags3, 36) {
        number 8, true, nil, BooleanEnum
    }
    field(:flags4, 40) {
        number 32, false
    }
    field(:use_flags4, 44) {
        number 8, true, nil, BooleanEnum
    }
    field(:flags5, 48) {
        number 32, false
    }
    field(:use_flags5, 52) {
        number 8, true, nil, BooleanEnum
    }
    field(:reaction_class, 56) {
        stl_string
    }
    field(:has_material_reaction_product, 84) {
        stl_string
    }
    field(:metal_ore, 112) {
        number 32, true, -1
    }
    def metal_ore_tg ; df.world.raws.inorganics[metal_ore] ; end
    field(:use_metal_ore, 116) {
        number 8, true, nil, BooleanEnum
    }
    field(:use_reaction_class, 117) {
        number 8, true, nil, BooleanEnum
    }
    field(:use_reaction_product, 118) {
        number 8, true, nil, BooleanEnum
    }
    field(:min_dimension, 120) {
        number 32, true, -1
    }
    field(:reaction_id, 124) {
        number 32, true, -1
    }
    def reaction_tg ; df.world.raws.reactions[reaction_id] ; end
    field(:contains, 128) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:use_contains, 144) {
        number 8, true, nil, BooleanEnum
    }
    field(:has_tool_use, 146) {
        number 16, true, nil, ToolUses
    }
    field(:has_melee_skill, 148) {
        number 16, true, nil, JobSkill
    }
    field(:unk_v40_1, 150) {
        number 8, true
    }
    field(:pos, 152) {
        global :Coord
    }
    field(:unit, 160) {
        pointer {
            global :Unit
        }
    }
    field(:job, 164) {
        pointer {
            global :Job
        }
    }
    field(:building, 168) {
        pointer {
            global :Building
        }
    }
    field(:unk_74, 172) {
        number 32, true
    }
    field(:burrows, 176) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def burrows_tg ; burrows.map { |i| df.ui.burrows.list.binsearch(i) } ; end
    field(:use_burrows, 192) {
        number 8, true, nil, BooleanEnum
    }
    field(:take_from, 196) {
        pointer {
            stl_vector(4) {
                pointer {
                    global :Building
                }
            }
        }
    }
end

class JobItemFlags1 < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:improvable, 0) { bit 0 }
    field(:butcherable, 0) { bit 1 }
    field(:millable, 0) { bit 2 }
    field(:allow_buryable, 0) { bit 3 }
    field(:unrotten, 0) { bit 4 }
    field(:undisturbed, 0) { bit 5 }
    field(:collected, 0) { bit 6 }
    field(:sharpenable, 0) { bit 7 }
    field(:murdered, 0) { bit 8 }
    field(:distillable, 0) { bit 9 }
    field(:empty, 0) { bit 10 }
    field(:processable, 0) { bit 11 }
    field(:bag, 0) { bit 12 }
    field(:cookable, 0) { bit 13 }
    field(:extract_bearing_plant, 0) { bit 14 }
    field(:extract_bearing_fish, 0) { bit 15 }
    field(:extract_bearing_vermin, 0) { bit 16 }
    field(:processable_to_vial, 0) { bit 17 }
    field(:processable_to_bag, 0) { bit 18 }
    field(:processable_to_barrel, 0) { bit 19 }
    field(:solid, 0) { bit 20 }
    field(:tameable_vermin, 0) { bit 21 }
    field(:nearby, 0) { bit 22 }
    field(:sand_bearing, 0) { bit 23 }
    field(:glass, 0) { bit 24 }
    field(:milk, 0) { bit 25 }
    field(:milkable, 0) { bit 26 }
    field(:finished_goods, 0) { bit 27 }
    field(:ammo, 0) { bit 28 }
    field(:furniture, 0) { bit 29 }
    field(:not_bin, 0) { bit 30 }
    field(:lye_bearing, 0) { bit 31 }
end

class JobItemFlags2 < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:dye, 0) { bit 0 }
    field(:dyeable, 0) { bit 1 }
    field(:dyed, 0) { bit 2 }
    field(:sewn_imageless, 0) { bit 3 }
    field(:glass_making, 0) { bit 4 }
    field(:screw, 0) { bit 5 }
    field(:building_material, 0) { bit 6 }
    field(:fire_safe, 0) { bit 7 }
    field(:magma_safe, 0) { bit 8 }
    field(:deep_material, 0) { bit 9 }
    field(:melt_designated, 0) { bit 10 }
    field(:non_economic, 0) { bit 11 }
    field(:allow_melt_dump, 0) { bit 12 }
    field(:allow_artifact, 0) { bit 13 }
    field(:plant, 0) { bit 14 }
    field(:silk, 0) { bit 15 }
    field(:leather, 0) { bit 16 }
    field(:bone, 0) { bit 17 }
    field(:shell, 0) { bit 18 }
    field(:totemable, 0) { bit 19 }
    field(:horn, 0) { bit 20 }
    field(:pearl, 0) { bit 21 }
    field(:plaster_containing, 0) { bit 22 }
    field(:soap, 0) { bit 24 }
    field(:body_part, 0) { bit 25 }
    field(:ivory_tooth, 0) { bit 26 }
    field(:lye_milk_free, 0) { bit 27 }
    field(:blunt, 0) { bit 28 }
    field(:unengraved, 0) { bit 29 }
    field(:hair_wool, 0) { bit 30 }
    field(:yarn, 0) { bit 31 }
end

class JobItemFlags3 < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:unimproved, 0) { bit 0 }
    field(:any_raw_material, 0) { bit 1 }
    field(:non_absorbent, 0) { bit 2 }
    field(:non_pressed, 0) { bit 3 }
    field(:allow_liquid_powder, 0) { bit 4 }
    field(:any_craft, 0) { bit 5 }
    field(:hard, 0) { bit 6 }
    field(:food_storage, 0) { bit 7 }
end

class JobItemRef < MemHack::Compound
    sizeof 16

    field(:item, 0) {
        pointer {
            global :Item
        }
    }
    field(:role, 4) {
        class ::DFHack::JobItemRef_TRole < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[1] = :Reagent ; NUME[:Reagent] = 1
            ENUM[2] = :Hauled ; NUME[:Hauled] = 2
            ENUM[3] = :LinkToTarget ; NUME[:LinkToTarget] = 3
            ENUM[4] = :LinkToTrigger ; NUME[:LinkToTrigger] = 4
            ENUM[6] = :TargetContainer ; NUME[:TargetContainer] = 6
            ENUM[7] = :QueuedContainer ; NUME[:QueuedContainer] = 7
            ENUM[8] = :PushHaulVehicle ; NUME[:PushHaulVehicle] = 8
        end

        number 32, true, nil, JobItemRef_TRole
    }
    field(:is_fetching, 8) {
        number 32, true
    }
    field(:job_item_idx, 12) {
        number 32, true
    }
end

class JobListLink < MemHack::Compound
    sizeof 12

    field(:item, 0) {
        pointer {
            global :Job
        }
    }
    field(:prev, 4) {
        pointer {
            global :JobListLink
        }
    }
    field(:next, 8) {
        pointer {
            global :JobListLink
        }
    }
end

class JobMaterialCategory < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:plant, 0) { bit 0 }
    field(:wood, 0) { bit 1 }
    field(:cloth, 0) { bit 2 }
    field(:silk, 0) { bit 3 }
    field(:leather, 0) { bit 4 }
    field(:bone, 0) { bit 5 }
    field(:shell, 0) { bit 6 }
    field(:wood2, 0) { bit 7 }
    field(:soap, 0) { bit 8 }
    field(:tooth, 0) { bit 9 }
    field(:horn, 0) { bit 10 }
    field(:pearl, 0) { bit 11 }
    field(:yarn, 0) { bit 12 }
end

class LanguageName < MemHack::Compound
    sizeof 108

    field(:first_name, 0) {
        stl_string
    }
    field(:nickname, 28) {
        stl_string
    }
    field(:words, 56) {
        static_array(7, 4) {
            number 32, true, -1
        }
    }
    field(:parts_of_speech, 84) {
        static_array(7, 2) {
            number 16, true, nil, PartOfSpeech
        }
    }
    field(:language, 100) {
        number 32, true, -1
    }
    def language_tg ; df.world.raws.language.translations[language] ; end
    field(:unknown, 104) {
        number 16, true
    }
    field(:has_name, 106) {
        number 8, true, nil, BooleanEnum
    }
end

class LanguageSymbol < MemHack::Compound
    sizeof 80

    field(:name, 0) {
        stl_string
    }
    field(:unknown, 28) {
        stl_vector
    }
    field(:words, 44) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def words_tg ; words.map { |i| df.world.raws.language.words[i] } ; end
    field(:flags, 60) {
        number 32, true
    }
    field(:str, 64) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
end

class LanguageTranslation < MemHack::Compound
    sizeof 96

    field(:name, 0) {
        stl_string
    }
    field(:unknown1, 28) {
        stl_vector
    }
    field(:unknown2, 44) {
        stl_vector
    }
    field(:words, 60) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:flags, 76) {
        number 32, true
    }
    field(:str, 80) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
end

class LanguageWord < MemHack::Compound
    sizeof 308

    field(:word, 0) {
        stl_string
    }
    field(:forms, 28) {
        static_array(9, 28, PartOfSpeech) {
            stl_string
        }
    }
    field(:adj_dist, 280) {
        number 8, false
    }
    field(:anon_1, 281) {
    }
    field(:flags, 288) {
        global :LanguageWordFlags
    }
    field(:str, 292) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
end

class LanguageWordFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:front_compound_noun_sing, 0) { bit 0 }
    field(:front_compound_noun_plur, 0) { bit 1 }
    field(:front_compound_adj, 0) { bit 2 }
    field(:front_compound_prefix, 0) { bit 3 }
    field(:rear_compound_noun_sing, 0) { bit 4 }
    field(:rear_compound_noun_plur, 0) { bit 5 }
    field(:rear_compound_adj, 0) { bit 6 }
    field(:the_noun_sing, 0) { bit 7 }
    field(:the_noun_plur, 0) { bit 8 }
    field(:the_compound_noun_sing, 0) { bit 9 }
    field(:the_compound_noun_plur, 0) { bit 10 }
    field(:the_compound_adj, 0) { bit 11 }
    field(:the_compound_prefix, 0) { bit 12 }
    field(:of_noun_sing, 0) { bit 13 }
    field(:of_noun_plur, 0) { bit 14 }
    field(:standard_verb, 0) { bit 15 }
end

class LanguageWordTable < MemHack::Compound
    sizeof 192

    field(:words, 0) {
        static_array(6, 16) {
            stl_vector(4) {
                number 32, true, -1
            }
        }
    }
    field(:parts, 96) {
        static_array(6, 16) {
            stl_vector(4) {
                number 32, true, nil, PartOfSpeech
            }
        }
    }
end

class LayerObject < MemHack::Compound
    sizeof 8

    rtti_classname :layer_objectst

    field(:enabled, 4) {
        number 8, true, nil, BooleanEnum
    }
    field(:active, 5) {
        number 8, true, nil, BooleanEnum
    }
    def getFirstVisible()
        val = DFHack.vmethod_call(self, 0)
    end
    def getLastVisible()
        val = DFHack.vmethod_call(self, 4)
    end
    def getX1()
        val = DFHack.vmethod_call(self, 8)
    end
    def getY1()
        val = DFHack.vmethod_call(self, 12)
    end
    def getX2()
        val = DFHack.vmethod_call(self, 16)
    end
    def getY2()
        val = DFHack.vmethod_call(self, 20)
    end
    def getListCursor()
        val = DFHack.vmethod_call(self, 28)
    end
    def setListCursor(arg0)
        DFHack.vmethod_call(self, 32, arg0) ; nil
    end
    def feed(events)
        DFHack.vmethod_call(self, 36, events) ; nil
    end
    def isSetMouseLRCur()
        val = DFHack.vmethod_call(self, 40)
        (val & 1) != 0
    end
    def isSetMouseLCur()
        val = DFHack.vmethod_call(self, 44)
        (val & 1) != 0
    end
    def isSetMouseRCur()
        val = DFHack.vmethod_call(self, 48)
        (val & 1) != 0
    end
    def getMouseLCur()
        val = DFHack.vmethod_call(self, 52)
    end
    def getMouseRCur()
        val = DFHack.vmethod_call(self, 56)
    end
    def getListLength()
        val = DFHack.vmethod_call(self, 68)
    end
    def setListLength(arg0)
        DFHack.vmethod_call(self, 72, arg0) ; nil
    end
end

class LayerObjectButtonst < LayerObject
    sizeof 68

    rtti_classname :layer_object_buttonst

    field(:x1, 8) {
        number 32, true
    }
    field(:y1, 12) {
        number 32, true
    }
    field(:x2, 16) {
        number 32, true
    }
    field(:y2, 20) {
        number 32, true
    }
    field(:has_mouse_lclick, 24) {
        number 32, true
    }
    field(:has_mouse_rclick, 28) {
        number 32, true
    }
    field(:mouse_lclick_x, 32) {
        number 32, true
    }
    field(:mouse_lclick_y, 36) {
        number 32, true
    }
    field(:mouse_rclick_x, 40) {
        number 32, true
    }
    field(:mouse_rclick_y, 44) {
        number 32, true
    }
    field(:mouse_x, 48) {
        number 32, true
    }
    field(:mouse_y, 52) {
        number 32, true
    }
    field(:mouse_x_old, 56) {
        number 32, true
    }
    field(:mouse_y_old, 60) {
        number 32, true
    }
    field(:handle_mouselbtndown, 64) {
        number 8, true
    }
    field(:handle_mouserbtndown, 65) {
        number 8, true
    }
end

class LayerObjectListst < LayerObject
    sizeof 60

    rtti_classname :layer_object_listst

    field(:cursor, 8) {
        number 32, true
    }
    field(:num_entries, 12) {
        number 32, true
    }
    field(:x1, 16) {
        number 32, true
    }
    field(:y1, 20) {
        number 32, true
    }
    field(:page_size, 24) {
        number 32, true
    }
    field(:x2, 28) {
        number 32, true
    }
    field(:y2, 32) {
        number 32, true
    }
    field(:mouse_l_cur, 36) {
        number 32, true
    }
    field(:mouse_r_cur, 40) {
        number 32, true
    }
    field(:rclick_scrolls, 44) {
        number 8, true, nil, BooleanEnum
    }
    field(:flag, 48) {
        number 32, true
    }
    field(:key_lclick, 52) {
        number 32, true, nil, InterfaceKey
    }
    field(:key_rclick, 56) {
        number 32, true, nil, InterfaceKey
    }
end

class LoadgameSaveInfo < MemHack::Compound
    sizeof 220

    field(:save_info, 0) {
        static_array(32, 4) {
            number 32, true
        }
    }
    field(:game_type, 128) {
        number 16, true, nil, GameType
    }
    field(:fort_name, 132) {
        stl_string
    }
    field(:world_name, 160) {
        stl_string
    }
    field(:year, 188) {
        number 32, true
    }
    field(:folder_name, 192) {
        stl_string
    }
end

class LocalPopulation < MemHack::Compound
    sizeof 52

    field(:type, 0) {
        number 8, true, nil, WorldPopulationType
    }
    field(:race, 2) {
        number 16, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:plant, 2) {
        number 16, true, -1
    }
    def plant_tg ; df.world.raws.plants.all[plant] ; end
    field(:quantity, 4) {
        number 32, true
    }
    field(:quantity2, 8) {
        number 32, true
    }
    field(:flags, 12) {
        compound(:LocalPopulation_TFlags) {
            field(:_whole, 0) {
                number 8, false
            }
            field(:discovered, 0) { bit 0 }
            field(:extinct, 0) { bit 1 }
            field(:already_removed, 0) { bit 2 }
            field(:unk3, 0) { bit 3 }
        }
    }
    field(:population, 16) {
        global :WorldPopulationRef
    }
    field(:wp_unk_10, 40) {
        number 32, true, -1
    }
    field(:wp_unk_18, 44) {
        number 32, true, -1
    }
    field(:wp_unk_1c, 48) {
        number 32, true, -1
    }
end

class Machine < MemHack::Compound
    sizeof 52

    rtti_classname :machinest

    field(:x, 4) {
        number 32, true
    }
    field(:y, 8) {
        number 32, true
    }
    field(:z, 12) {
        number 32, true
    }
    field(:id, 16) {
        number 32, true
    }
    field(:components, 20) {
        stl_vector(4) {
            pointer {
                compound(:Machine_TComponents) {
                    sizeof 20

                    field(:building_id, 0) {
                        number 32, true, -1
                    }
                    def building_tg ; df.world.buildings.all.binsearch(building_id) ; end
                    field(:connections, 4) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                }
            }
        }
    }
    field(:cur_power, 36) {
        number 32, true
    }
    field(:min_power, 40) {
        number 32, true
    }
    field(:visual_phase, 44) {
        number 8, true
    }
    field(:phase_timer, 46) {
        number 16, true
    }
    field(:flags, 48) {
        compound(:Machine_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:active, 0) { bit 0 }
            field(:frozen, 0) { bit 1 }
            field(:unfreeze, 0) { bit 2 }
        }
    }
    def getType()
        MachineType.sym(DFHack.vmethod_call(self, 0))
    end
    def moveMachine(x, y, z)
        DFHack.vmethod_call(self, 4, x, y, z) ; nil
    end
    def write_file(file)
        DFHack.vmethod_call(self, 8, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 12, file, loadversion) ; nil
    end
end

class MachineConnModes < MemHack::Compound
    field(:_whole, 0) {
        number 8, false
    }
    field(:up, 0) { bit 0 }
    field(:down, 0) { bit 1 }
    field(:right, 0) { bit 2 }
    field(:left, 0) { bit 3 }
    field(:z_up, 0) { bit 4 }
    field(:z_down, 0) { bit 5 }
end

class MachineInfo < MemHack::Compound
    sizeof 8

    field(:machine_id, 0) {
        number 32, true, -1
    }
    def machine_tg ; df.world.machines.all.binsearch(machine_id) ; end
    field(:flags, 4) {
        compound(:MachineInfo_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:frozen, 0) { bit 0 }
        }
    }
end

class MachineStandardst < Machine
    sizeof 52

    rtti_classname :machine_standardst

end

class MachineTileSet < MemHack::Compound
    sizeof 64

    field(:tiles, 0) {
        global :CoordPath
    }
    field(:can_connect, 48) {
        stl_vector(1) {
            global :MachineConnModes
        }
    }
end

class ManagerOrder < MemHack::Compound
    sizeof 64

    field(:job_type, 0) {
        number 16, true, nil, JobType
    }
    field(:unk_2, 2) {
        number 16, true
    }
    field(:item_subtype, 4) {
        number 16, true
    }
    field(:reaction_name, 8) {
        stl_string
    }
    field(:mat_type, 36) {
        number 16, true, -1
    }
    field(:mat_index, 40) {
        number 32, true
    }
    field(:item_category, 44) {
        global :StockpileGroupSet
    }
    field(:hist_figure_id, 48) {
        number 32, true, -1
    }
    def hist_figure_tg ; df.world.history.figures.binsearch(hist_figure_id) ; end
    field(:material_category, 52) {
        global :JobMaterialCategory
    }
    field(:amount_left, 56) {
        number 16, true
    }
    field(:amount_total, 58) {
        number 16, true
    }
    field(:is_validated, 60) {
        number 32, true
    }
end

class ManagerOrderTemplate < MemHack::Compound
    sizeof 60

    field(:job_type, 0) {
        number 16, true, nil, JobType
    }
    field(:reaction_name, 4) {
        stl_string
    }
    field(:anon_1, 32) {
        number 16, true, -1
    }
    field(:item_subtype, 34) {
        number 16, true
    }
    field(:mat_type, 36) {
        number 16, true, -1
    }
    field(:mat_index, 40) {
        number 32, true
    }
    field(:item_category, 44) {
        global :StockpileGroupSet
    }
    field(:anon_2, 48) {
        number 32, true, -1
    }
    field(:material_category, 52) {
        global :JobMaterialCategory
    }
    field(:anon_3, 56) {
        number 8, true, 1
    }
end

class Mandate < MemHack::Compound
    sizeof 48

    field(:unit, 0) {
        pointer {
            global :Unit
        }
    }
    field(:mode, 4) {
        number 16, true
    }
    field(:item_type, 6) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 8) {
        number 16, true, -1
    }
    field(:mat_type, 10) {
        number 16, true, -1
    }
    field(:mat_index, 12) {
        number 32, true
    }
    field(:amount_total, 16) {
        number 16, true
    }
    field(:amount_remaining, 18) {
        number 16, true
    }
    field(:timeout_counter, 20) {
        number 32, true
    }
    field(:timeout_limit, 24) {
        number 32, true
    }
    field(:punishment, 28) {
        compound(:Mandate_TPunishment) {
            field(:hammerstrikes, 0) {
                number 32, true
            }
            field(:prison_time, 4) {
                number 32, true
            }
            field(:give_beating, 8) {
                number 32, true
            }
        }
    }
    field(:punish_multiple, 40) {
        number 8, false
    }
    field(:unk4, 44) {
        number 32, true
    }
end

class MapBlock < MemHack::Compound
    sizeof 7544

    field(:flags, 0) {
        global :BlockFlags
    }
    field(:block_events, 4) {
        stl_vector(4) {
            pointer {
                global :BlockSquareEvent
            }
        }
    }
    field(:block_burrows, 20) {
        df_linked_list {
            global :BlockBurrowLink
        }
    }
    field(:local_feature, 32) {
        number 32, true, -1
    }
    field(:global_feature, 36) {
        number 32, true, -1
    }
    def global_feature_tg ; df.world.world_data.underground_regions[global_feature] ; end
    field(:unk2, 40) {
        number 32, true, -1
    }
    field(:layer_depth, 44) {
        number 16, true
    }
    field(:dsgn_check_cooldown, 48) {
        number 32, true
    }
    field(:default_liquid, 52) {
        global :TileDesignation
    }
    field(:items, 56) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def items_tg ; items.map { |i| df.world.items.all.binsearch(i) } ; end
    field(:flows, 72) {
        stl_vector(4) {
            pointer {
                global :FlowInfo
            }
        }
    }
    field(:flow_pool, 88) {
        global :FlowReusePool
    }
    field(:map_pos, 96) {
        global :Coord
    }
    field(:region_pos, 102) {
        global :Coord2d
    }
    field(:tiletype, 106) {
        static_array(16, 32) {
            static_array(16, 2) {
                number 16, true, :OpenSpace, Tiletype
            }
        }
    }
    field(:designation, 620) {
        static_array(16, 64) {
            static_array(16, 4) {
                global :TileDesignation
            }
        }
    }
    field(:occupancy, 1644) {
        static_array(16, 64) {
            static_array(16, 4) {
                global :TileOccupancy
            }
        }
    }
    field(:fog_of_war, 2668) {
        static_array(16, 16) {
            static_array(16, 1) {
                number 8, false
            }
        }
    }
    field(:path_cost, 2924) {
        static_array(16, 64) {
            static_array(16, 4) {
                number 32, true
            }
        }
    }
    field(:path_tag, 3948) {
        static_array(16, 32) {
            static_array(16, 2) {
                number 16, false
            }
        }
    }
    field(:walkable, 4460) {
        static_array(16, 32) {
            static_array(16, 2) {
                number 16, false
            }
        }
    }
    field(:map_edge_distance, 4972) {
        static_array(16, 32) {
            static_array(16, 2) {
                number 16, false
            }
        }
    }
    field(:temperature_1, 5484) {
        static_array(16, 32) {
            static_array(16, 2) {
                number 16, false
            }
        }
    }
    field(:temperature_2, 5996) {
        static_array(16, 32) {
            static_array(16, 2) {
                number 16, false
            }
        }
    }
    field(:unk13, 6508) {
        static_array(16, 32) {
            static_array(16, 2) {
                number 16, false
            }
        }
    }
    field(:liquid_flow, 7020) {
        static_array(16, 32) {
            static_array(16, 2) {
                global :TileLiquidFlow
            }
        }
    }
    field(:region_offset, 7532) {
        static_array(9, 1) {
            number 8, false
        }
    }
end

class MapBlockColumn < MemHack::Compound
    sizeof 3668

    field(:sink_level, 0) {
        number 16, true
    }
    field(:beach_level, 2) {
        number 16, true
    }
    field(:ground_level, 4) {
        number 16, true
    }
    field(:unmined_glyphs, 8) {
        stl_vector(4) {
            pointer {
                compound(:MapBlockColumn_TUnminedGlyphs) {
                    sizeof 20

                    field(:x, 0) {
                        static_array(4, 2) {
                            number 16, true
                        }
                    }
                    field(:y, 8) {
                        static_array(4, 2) {
                            number 16, true
                        }
                    }
                    field(:tile, 16) {
                        static_array(4, 1) {
                            number 8, false
                        }
                    }
                }
            }
        }
    }
    field(:z_base, 24) {
        number 16, true
    }
    field(:cave_columns, 28) {
        static_array(16, 192) {
            static_array(16, 12) {
                df_linked_list {
                    global :CaveColumnLink
                }
            }
        }
    }
    field(:column_rectangles, 3100) {
        stl_vector(4) {
            pointer {
                global :CaveColumnRectangle
            }
        }
    }
    field(:z_shift, 3116) {
        number 16, true
    }
    field(:flags, 3120) {
        df_flagarray
    }
    field(:unk_v40_1, 3128) {
        static_array(16, 32) {
            static_array(16, 2) {
                number 16, true
            }
        }
    }
    field(:map_pos, 3640) {
        global :Coord2d
    }
    field(:unk_c3c, 3644) {
        number 16, true
    }
    field(:region_pos, 3646) {
        global :Coord2d
    }
    field(:plants, 3652) {
        stl_vector(4) {
            pointer {
                global :Plant
            }
        }
    }
end

class MapRenderer < MemHack::Compound
    sizeof 74112

    field(:entity, 0) {
        static_array(256, 256) {
            static_array(256, 1) {
                number 8, false
            }
        }
    }
    field(:cursor_units, 65536) {
        stl_vector(4) {
            pointer {
                global :Unit
            }
        }
    }
    field(:cursor_guts, 65552) {
        pointer {
            global :Unit
        }
    }
    field(:multiple_guts, 65556) {
        number 8, true, nil, BooleanEnum
    }
    field(:cursor_corpse, 65560) {
        pointer {
            global :Item
        }
    }
    field(:cursor_corpse_cnt, 65564) {
        number 32, true
    }
    field(:cursor_corpsepiece, 65568) {
        pointer {
            global :Item
        }
    }
    field(:cursor_corpsepiece_cnt, 65572) {
        number 32, true
    }
    field(:cursor_bones, 65576) {
        pointer {
            global :Item
        }
    }
    field(:cursor_bones_cnt, 65580) {
        number 32, true
    }
    field(:cursor_other, 65584) {
        pointer {
            global :Item
        }
    }
    field(:cursor_other_cnt, 65588) {
        number 32, true
    }
    field(:unk_10034, 65592) {
        number 8, true
    }
    field(:unk_10035, 65593) {
        number 8, true
    }
    field(:cur_tick_count, 65596) {
        number 32, true
    }
    field(:tick_phase, 65600) {
        number 16, true
    }
    field(:dim_colors, 65602) {
        number 8, true
    }
    field(:anon_1, 65603) {
        number 8, true
    }
    field(:anon_2, 65604) {
        static_array(500, 4) {
            number 32, true
        }
    }
    field(:anon_3, 67604) {
        static_array(500, 1) {
            number 8, true
        }
    }
    field(:anon_4, 68104) {
        static_array(500, 8) {
            compound(:MapRenderer_TAnon4) {
                field(:x, 0) {
                    number 32, true
                }
                field(:y, 4) {
                    number 32, true
                }
            }
        }
    }
    field(:anon_5, 72104) {
        static_array(500, 4) {
            number 32, true
        }
    }
    field(:anon_6, 74104) {
        number 32, true
    }
    field(:anon_7, 74108) {
        number 32, true
    }
end

class MapViewport < MemHack::Compound
    sizeof 18

    field(:adv_mode, 0) {
        number 8, true, nil, BooleanEnum
    }
    field(:unk1, 1) {
        number 8, true, nil, BooleanEnum
    }
    field(:map_rotation, 2) {
        number 8, false
    }
    field(:min_x, 4) {
        number 16, true
    }
    field(:min_y, 6) {
        number 16, true
    }
    field(:max_x, 8) {
        number 16, true
    }
    field(:max_y, 10) {
        number 16, true
    }
    field(:window_x, 12) {
        number 16, true
    }
    field(:window_y, 14) {
        number 16, true
    }
    field(:window_z, 16) {
        number 16, true
    }
end

class MaterialCommon < MemHack::Compound
    sizeof 1068

    field(:id, 0) {
        stl_string
    }
    field(:gem_name1, 28) {
        stl_string
    }
    field(:gem_name2, 56) {
        stl_string
    }
    field(:stone_name, 84) {
        stl_string
    }
    field(:heat, 112) {
        compound(:MaterialCommon_THeat) {
            field(:spec_heat, 0) {
                number 16, false
            }
            field(:heatdam_point, 2) {
                number 16, false
            }
            field(:colddam_point, 4) {
                number 16, false
            }
            field(:ignite_point, 6) {
                number 16, false
            }
            field(:melting_point, 8) {
                number 16, false
            }
            field(:boiling_point, 10) {
                number 16, false
            }
            field(:mat_fixed_temp, 12) {
                number 16, false
            }
        }
    }
    field(:solid_density, 128) {
        number 32, true
    }
    field(:liquid_density, 132) {
        number 32, true
    }
    field(:molar_mass, 136) {
        number 32, true
    }
    field(:state_color, 140) {
        static_array(6, 4, MatterState) {
            number 32, true
        }
    }
    field(:state_name, 164) {
        static_array(6, 28, MatterState) {
            stl_string
        }
    }
    field(:state_adj, 332) {
        static_array(6, 28, MatterState) {
            stl_string
        }
    }
    field(:strength, 500) {
        compound(:MaterialCommon_TStrength) {
            field(:absorption, 0) {
                number 32, true
            }
            field(:yield, 4) {
                static_array(6, 4, StrainType) {
                    number 32, true
                }
            }
            field(:fracture, 28) {
                static_array(6, 4, StrainType) {
                    number 32, true
                }
            }
            field(:strain_at_yield, 52) {
                static_array(6, 4, StrainType) {
                    number 32, true
                }
            }
            field(:max_edge, 76) {
                number 32, true
            }
        }
    }
    field(:material_value, 580) {
        number 32, true
    }
    field(:flags, 584) {
        df_flagarray(MaterialFlags)
    }
    field(:extract_storage, 592) {
        number 16, true, nil, ItemType
    }
    field(:butcher_special_type, 594) {
        number 16, true, nil, ItemType
    }
    field(:butcher_special_subtype, 596) {
        number 16, true, -1
    }
    field(:meat_name, 600) {
        static_array(3, 28) {
            stl_string
        }
    }
    field(:block_name, 684) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:reaction_product, 740) {
        compound(:MaterialCommon_TReactionProduct) {
            field(:id, 0) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:item_type, 16) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:item_subtype, 32) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:material, 48) {
                global :MaterialVecRef
            }
            field(:str, 80) {
                static_array(5, 16) {
                    stl_vector(4) {
                        pointer {
                            stl_string
                        }
                    }
                }
            }
        }
    }
    field(:hardens_with_water, 900) {
        compound(:MaterialCommon_THardensWithWater) {
            field(:mat_type, 0) {
                number 16, true, -1
            }
            field(:mat_index, 4) {
                number 32, true
            }
            field(:str, 8) {
                static_array(3, 28) {
                    stl_string
                }
            }
        }
    }
    field(:reaction_class, 992) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:tile, 1008) {
        number 8, false
    }
    field(:basic_color, 1010) {
        static_array(2, 2) {
            number 16, true
        }
    }
    field(:build_color, 1014) {
        static_array(3, 2) {
            number 16, true
        }
    }
    field(:tile_color, 1020) {
        static_array(3, 2) {
            number 16, true
        }
    }
    field(:item_symbol, 1026) {
        number 8, false
    }
    field(:powder_dye, 1028) {
        number 16, true
    }
    field(:temp_diet_info, 1030) {
        number 16, true
    }
    field(:syndrome, 1032) {
        stl_vector(4) {
            pointer {
                global :Syndrome
            }
        }
    }
    field(:soap_level, 1048) {
        number 32, true
    }
    field(:unk_41c, 1052) {
        stl_vector
    }
end

class Material < MaterialCommon
    sizeof 1440

    field(:prefix, 1068) {
        stl_string
    }
    field(:food_mat_index, 1096) {
        static_array(37, 4, OrganicMatCategory) {
            number 32, true, -1
        }
    }
    field(:powder_dye_str, 1244) {
        stl_string
    }
    field(:state_color_str, 1272) {
        static_array(6, 28, MatterState) {
            stl_string
        }
    }
end

class MaterialTemplate < MaterialCommon
    sizeof 1264

    field(:powder_dye_str, 1068) {
        stl_string
    }
    field(:state_color_str, 1096) {
        static_array(6, 28, MatterState) {
            stl_string
        }
    }
end

class MaterialVecRef < MemHack::Compound
    sizeof 32

    field(:mat_type, 0) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:mat_index, 16) {
        stl_vector(4) {
            number 32, true
        }
    }
end

class MatglossList < MemHack::Compound
    sizeof 448

    field(:anon_1, 0) {
        stl_vector
    }
    field(:generated_inorganics, 16) {
        stl_vector
    }
    field(:generated_plants, 32) {
        stl_vector
    }
    field(:generated_items, 48) {
        stl_vector
    }
    field(:generated_creatures, 64) {
        stl_vector
    }
    field(:generated_entities, 80) {
        stl_vector
    }
    field(:generated_interactions, 96) {
        stl_vector
    }
    field(:generated_languages, 112) {
        stl_vector
    }
    field(:inorganics, 128) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:plants, 144) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:bodies, 160) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:bodyglosses, 176) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:creatures, 192) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:items, 208) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:buildings, 224) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:entities, 240) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:words, 256) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:symbols, 272) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:translations, 288) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:colors, 304) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:shapes, 320) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:patterns, 336) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:reactions, 352) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:material_templates, 368) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:tissue_templates, 384) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:body_detail_plans, 400) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:creature_variations, 416) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:interactions, 432) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
end

class MeetingContext < MemHack::Compound
    sizeof 16

    field(:meeting, 0) {
        pointer {
            global :MeetingDiplomatInfo
        }
    }
    field(:popup, 4) {
        pointer {
            global :DipscriptPopup
        }
    }
    field(:anon_1, 8) {
        number 32, true
    }
    field(:anon_2, 12) {
        number 32, true
    }
end

class MeetingDiplomatInfo < MemHack::Compound
    sizeof 284

    field(:civ_id, 0) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ_id) ; end
    field(:unk1, 4) {
        number 16, true
    }
    field(:diplomat_id, 8) {
        number 32, true, -1
    }
    def diplomat_tg ; df.world.history.figures.binsearch(diplomat_id) ; end
    field(:associate_id, 12) {
        number 32, true, -1
    }
    def associate_tg ; df.world.history.figures.binsearch(associate_id) ; end
    field(:topic_list, 16) {
        stl_vector(4) {
            number 32, true, nil, MeetingTopic
        }
    }
    field(:topic_parms, 32) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:sell_requests, 48) {
        pointer {
            global :EntitySellRequests
        }
    }
    field(:buy_requests, 52) {
        pointer {
            global :EntityBuyRequests
        }
    }
    field(:dipscript, 56) {
        pointer {
            global :DipscriptInfo
        }
    }
    field(:cur_step, 60) {
        number 32, true
    }
    field(:active_script_vars, 64) {
        stl_vector(4) {
            pointer {
                global :ActiveScriptVarst
            }
        }
    }
    field(:unk_50, 80) {
        stl_string
    }
    field(:unk_6c, 108) {
        stl_string
    }
    field(:flags, 136) {
        compound(:MeetingDiplomatInfo_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:dynamic_load, 0) { bit 0 }
            field(:failure, 0) { bit 1 }
            field(:success, 0) { bit 2 }
        }
    }
    field(:events, 140) {
        stl_vector(4) {
            pointer {
                global :MeetingEvent
            }
        }
    }
    field(:agreement_entity, 156) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def agreement_entity_tg ; agreement_entity.map { |i| df.world.entities.all.binsearch(i) } ; end
    field(:agreement_topic, 172) {
        stl_vector(2) {
            global :MeetingTopic
        }
    }
    field(:agreement_year, 188) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:agreement_tick, 204) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:agreement_outcome, 220) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:contact_entity, 236) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def contact_entity_tg ; contact_entity.map { |i| df.world.entities.all.binsearch(i) } ; end
    field(:contact_year, 252) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:contact_tick, 268) {
        stl_vector(4) {
            number 32, true
        }
    }
end

class MeetingEvent < MemHack::Compound
    sizeof 64

    field(:type, 0) {
        number 16, true, nil, MeetingEventType
    }
    field(:topic, 2) {
        number 16, true, nil, MeetingTopic
    }
    field(:topic_parm, 4) {
        number 16, true
    }
    field(:anon_1, 8) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_2, 24) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:quota_total, 40) {
        number 32, true
    }
    field(:quota_remaining, 44) {
        number 32, true
    }
    field(:year, 48) {
        number 32, true
    }
    field(:ticks, 52) {
        number 32, true
    }
    field(:sell_prices, 56) {
        pointer {
            global :EntitySellPrices
        }
    }
    field(:buy_prices, 60) {
        pointer {
            global :EntityBuyPrices
        }
    }
end

class MeetingVariable < MemHack::Compound
    sizeof 20

    field(:value, 0) {
        number 32, true
    }
    field(:ref, 4) {
        global :SpecificRef
    }
    field(:active_var, 16) {
        pointer {
            global :ActiveScriptVarst
        }
    }
end

class MovingParty < MemHack::Compound
    sizeof 96

    field(:pos, 0) {
        global :Coord2d
    }
    field(:unk_4, 4) {
        number 16, true
    }
    field(:unk_c, 8) {
        number 32, true
    }
    field(:unk_10, 12) {
        number 32, true
    }
    field(:members, 16) {
        stl_vector(4) {
            pointer {
                compound(:MovingParty_TMembers) {
                    sizeof 40

                    field(:nemesis_id, 0) {
                        number 32, true, -1
                    }
                    def nemesis_tg ; df.world.nemesis.all.binsearch(nemesis_id) ; end
                    field(:hunger, 4) {
                        number 32, true
                    }
                    field(:thirst, 8) {
                        number 32, true
                    }
                    field(:sleepiness, 12) {
                        number 32, true
                    }
                    field(:stored_fat, 16) {
                        number 32, true
                    }
                    field(:unk_14, 20) {
                        number 32, true
                    }
                    field(:unk_18, 24) {
                        number 32, true, 1
                    }
                    field(:unk_1c, 28) {
                        number 32, true, -1000000
                    }
                    field(:unk_20, 32) {
                        number 32, true, -1000000
                    }
                    field(:unk_24, 36) {
                        number 32, true, -1000000
                    }
                }
            }
        }
    }
    field(:entity_id, 32) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
    field(:flags, 36) {
        df_flagarray
    }
    field(:unk_30, 44) {
        stl_vector
    }
    field(:unk_40, 60) {
        stl_vector
    }
    field(:unk_70, 76) {
        number 16, true
    }
    field(:unk_72, 78) {
        number 16, true, -1
    }
    field(:unk_74, 80) {
        number 16, true, -1
    }
    field(:unk_7c, 84) {
        number 32, true, -1
    }
    field(:region_id, 88) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region_id] ; end
    field(:beast_id, 92) {
        number 32, true, -1
    }
end

class NemesisRecord < MemHack::Compound
    sizeof 64

    field(:id, 0) {
        number 32, true
    }
    field(:unit_id, 4) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
    field(:save_file_id, 8) {
        number 32, true, -1
    }
    def save_file_tg ; df.world.unit_chunks.binsearch(save_file_id) ; end
    field(:member_idx, 12) {
        number 16, true
    }
    field(:figure, 16) {
        pointer {
            global :HistoricalFigure
        }
    }
    field(:unit, 20) {
        pointer {
            global :Unit
        }
    }
    field(:group_leader_id, 24) {
        number 32, true, -1
    }
    def group_leader_tg ; df.world.nemesis.all.binsearch(group_leader_id) ; end
    field(:companions, 28) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def companions_tg ; companions.map { |i| df.world.nemesis.all.binsearch(i) } ; end
    field(:unk10, 44) {
        number 16, true, -1
    }
    field(:unk11, 48) {
        number 32, true, -1
    }
    field(:unk12, 52) {
        number 32, true, -1
    }
    field(:flags, 56) {
        df_flagarray(NemesisFlags)
    }
end

class OceanWave < MemHack::Compound
    sizeof 14

    field(:x1, 0) {
        number 16, true
    }
    field(:y1, 2) {
        number 16, true
    }
    field(:x2, 4) {
        number 16, true
    }
    field(:y2, 6) {
        number 16, true
    }
    field(:z, 8) {
        number 16, true
    }
    field(:anon_1, 10) {
        number 8, true
    }
    field(:anon_2, 11) {
        number 8, true
    }
    field(:anon_3, 12) {
        number 8, true
    }
end

class OrientationFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:romance_male, 0) { bit 1 }
    field(:marry_male, 0) { bit 2 }
    field(:romance_female, 0) { bit 3 }
    field(:marry_female, 0) { bit 4 }
end

class PartyInfo < MemHack::Compound
    sizeof 28

    field(:units, 0) {
        stl_vector(4) {
            pointer {
                global :Unit
            }
        }
    }
    field(:location, 16) {
        pointer {
            global :Building
        }
    }
    field(:timer, 20) {
        number 32, true
    }
    field(:id, 24) {
        number 32, true
    }
end

class Plant < MemHack::Compound
    sizeof 56

    field(:flags, 0) {
        global :PlantFlags
    }
    field(:material, 2) {
        number 16, true, -1
    }
    def material_tg ; df.world.raws.plants.all[material] ; end
    field(:pos, 4) {
        global :Coord
    }
    field(:grow_counter, 12) {
        number 32, true
    }
    field(:damage_flags, 16) {
        compound(:Plant_TDamageFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:is_burning, 0) { bit 0 }
            field(:is_drowning, 0) { bit 1 }
        }
    }
    field(:hitpoints, 20) {
        number 32, true
    }
    field(:update_order, 24) {
        number 16, true
    }
    field(:site_id, 28) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
    field(:srb_id, 32) {
        number 32, true, -1
    }
    field(:contaminants, 36) {
        stl_vector(4) {
            pointer {
                global :SpatterCommon
            }
        }
    }
    field(:tree_info, 52) {
        pointer {
            global :PlantTreeInfo
        }
    }
end

class PlantFlags < MemHack::Compound
    field(:_whole, 0) {
        number 16, false
    }
    field(:watery, 0) { bit 0 }
    field(:is_shrub, 0) { bit 1 }
end

class PlantGrowth < MemHack::Compound
    sizeof 280

    field(:id, 0) {
        stl_string
    }
    field(:name, 28) {
        stl_string
    }
    field(:name_plural, 56) {
        stl_string
    }
    field(:str_growth_item, 84) {
        static_array(5, 28) {
            stl_string
        }
    }
    field(:item_type, 224) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 226) {
        number 16, true
    }
    field(:mat_type, 228) {
        number 16, true, -1
    }
    field(:mat_index, 232) {
        number 32, true
    }
    field(:prints, 236) {
        stl_vector(4) {
            pointer {
                global :PlantGrowthPrint
            }
        }
    }
    field(:timing_1, 252) {
        number 32, true
    }
    field(:timing_2, 256) {
        number 32, true
    }
    field(:locations, 260) {
        compound(:PlantGrowth_TLocations) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:twigs, 0) { bit 0 }
            field(:light_branches, 0) { bit 1 }
            field(:heavy_branches, 0) { bit 2 }
            field(:trunk, 0) { bit 3 }
            field(:roots, 0) { bit 4 }
            field(:cap, 0) { bit 5 }
            field(:sapling, 0) { bit 6 }
        }
    }
    field(:density, 264) {
        number 32, true
    }
    field(:behavior, 268) {
        compound(:PlantGrowth_TBehavior) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:drops_off, 0) { bit 0 }
            field(:no_cloud, 0) { bit 1 }
            field(:has_seed, 0) { bit 2 }
        }
    }
    field(:trunk_height_perc_1, 272) {
        number 32, true
    }
    field(:trunk_height_perc_2, 276) {
        number 32, true
    }
end

class PlantGrowthPrint < MemHack::Compound
    sizeof 20

    field(:priority, 0) {
        number 32, true
    }
    field(:tile_growth, 4) {
        number 8, false
    }
    field(:tile_item, 5) {
        number 8, false
    }
    field(:color, 6) {
        static_array(3, 2) {
            number 16, true
        }
    }
    field(:timing_start, 12) {
        number 32, true
    }
    field(:timing_end, 16) {
        number 32, true
    }
end

class PlantRaw < MemHack::Compound
    sizeof 1632

    field(:id, 0) {
        stl_string
    }
    field(:anon_1, 28) {
        number 32, true
    }
    field(:anon_2, 32) {
        stl_vector
    }
    field(:flags, 48) {
        df_flagarray(PlantRawFlags)
    }
    field(:name, 56) {
        stl_string
    }
    field(:name_plural, 84) {
        stl_string
    }
    field(:adj, 112) {
        stl_string
    }
    field(:seed_singular, 140) {
        stl_string
    }
    field(:seed_plural, 168) {
        stl_string
    }
    field(:leaves_singular, 196) {
        stl_string
    }
    field(:leaves_plural, 224) {
        stl_string
    }
    field(:source_hfid, 252) {
        number 32, true, -1
    }
    def source_hfid_tg ; df.world.history.figures.binsearch(source_hfid) ; end
    field(:unk1, 256) {
        number 8, false
    }
    field(:unk2, 257) {
        number 8, false
    }
    field(:tiles, 258) {
        compound(:PlantRaw_TTiles) {
            field(:picked_tile, 0) {
                number 8, false
            }
            field(:dead_picked_tile, 1) {
                number 8, false
            }
            field(:shrub_tile, 2) {
                number 8, false
            }
            field(:dead_shrub_tile, 3) {
                number 8, false
            }
            field(:tree_tile, 4) {
                number 8, false
            }
            field(:dead_tree_tile, 5) {
                number 8, false
            }
            field(:sapling_tile, 6) {
                number 8, false
            }
            field(:dead_sapling_tile, 7) {
                number 8, false
            }
            field(:grass_tiles, 8) {
                static_array(16, 1) {
                    number 8, false
                }
            }
            field(:alt_grass_tiles, 24) {
                static_array(12, 1) {
                    number 8, false
                }
            }
            field(:tree_tiles, 36) {
                static_array(104, 1) {
                    number 8, false
                }
            }
        }
    }
    field(:growdur, 400) {
        number 32, true
    }
    field(:value, 404) {
        number 32, true
    }
    field(:colors, 408) {
        compound(:PlantRaw_TColors) {
            field(:picked_color, 0) {
                static_array(3, 1) {
                    number 8, true
                }
            }
            field(:dead_picked_color, 3) {
                static_array(3, 1) {
                    number 8, true
                }
            }
            field(:shrub_color, 6) {
                static_array(3, 1) {
                    number 8, true
                }
            }
            field(:dead_shrub_color, 9) {
                static_array(3, 1) {
                    number 8, true
                }
            }
            field(:seed_color, 12) {
                static_array(3, 1) {
                    number 8, true
                }
            }
            field(:tree_color, 15) {
                static_array(3, 1) {
                    number 8, true
                }
            }
            field(:dead_tree_color, 18) {
                static_array(3, 1) {
                    number 8, true
                }
            }
            field(:sapling_color, 21) {
                static_array(3, 1) {
                    number 8, true
                }
            }
            field(:dead_sapling_color, 24) {
                static_array(3, 1) {
                    number 8, true
                }
            }
            field(:grass_colors_0, 27) {
                static_array(20, 1) {
                    number 8, true
                }
            }
            field(:grass_colors_1, 47) {
                static_array(20, 1) {
                    number 8, true
                }
            }
            field(:grass_colors_2, 67) {
                static_array(20, 1) {
                    number 8, true
                }
            }
        }
    }
    field(:alt_period, 496) {
        static_array(2, 4) {
            number 32, true
        }
    }
    field(:shrub_drown_level, 504) {
        number 8, true
    }
    field(:tree_drown_level, 505) {
        number 8, true
    }
    field(:sapling_drown_level, 506) {
        number 8, true
    }
    field(:frequency, 508) {
        number 16, true
    }
    field(:clustersize, 510) {
        number 16, true
    }
    field(:prefstring, 512) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:material, 528) {
        stl_vector(4) {
            pointer {
                global :Material
            }
        }
    }
    field(:material_defs, 544) {
        compound(:PlantRaw_TMaterialDefs) {
            field(:type_basic_mat, 0) {
                number 16, true, -1
            }
            field(:type_tree, 2) {
                number 16, true, -1
            }
            field(:type_drink, 4) {
                number 16, true, -1
            }
            field(:type_seed, 6) {
                number 16, true, -1
            }
            field(:type_thread, 8) {
                number 16, true, -1
            }
            field(:type_mill, 10) {
                number 16, true, -1
            }
            field(:type_extract_vial, 12) {
                number 16, true, -1
            }
            field(:type_extract_barrel, 14) {
                number 16, true, -1
            }
            field(:type_extract_still_vial, 16) {
                number 16, true, -1
            }
            field(:idx_basic_mat, 20) {
                number 32, true
            }
            field(:idx_tree, 24) {
                number 32, true
            }
            field(:idx_drink, 28) {
                number 32, true
            }
            field(:idx_seed, 32) {
                number 32, true
            }
            field(:idx_thread, 36) {
                number 32, true
            }
            field(:idx_mill, 40) {
                number 32, true
            }
            field(:idx_extract_vial, 44) {
                number 32, true
            }
            field(:idx_extract_barrel, 48) {
                number 32, true
            }
            field(:idx_extract_still_vial, 52) {
                number 32, true
            }
            field(:str_basic_mat, 56) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:str_tree, 140) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:str_drink, 224) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:str_seed, 308) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:str_thread, 392) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:str_mill, 476) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:str_extract_vial, 560) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:str_extract_barrel, 644) {
                static_array(3, 28) {
                    stl_string
                }
            }
            field(:str_extract_still_vial, 728) {
                static_array(3, 28) {
                    stl_string
                }
            }
        }
    }
    field(:underground_depth_min, 1356) {
        number 32, true
    }
    field(:underground_depth_max, 1360) {
        number 32, true
    }
    field(:growths, 1364) {
        stl_vector(4) {
            pointer {
                global :PlantGrowth
            }
        }
    }
    field(:root_name, 1380) {
        stl_string
    }
    field(:trunk_name, 1408) {
        stl_string
    }
    field(:heavy_branch_name, 1436) {
        stl_string
    }
    field(:light_branch_name, 1464) {
        stl_string
    }
    field(:twig_name, 1492) {
        stl_string
    }
    field(:cap_name, 1520) {
        stl_string
    }
    field(:trunk_period, 1548) {
        number 32, true
    }
    field(:heavy_branch_density, 1552) {
        number 32, true
    }
    field(:light_branch_density, 1556) {
        number 32, true
    }
    field(:max_trunk_height, 1560) {
        number 32, true
    }
    field(:heavy_branch_radius, 1564) {
        number 32, true
    }
    field(:light_branch_radius, 1568) {
        number 32, true
    }
    field(:trunk_branching, 1572) {
        number 32, true
    }
    field(:max_trunk_diameter, 1576) {
        number 32, true
    }
    field(:trunk_width_period, 1580) {
        number 32, true
    }
    field(:cap_period, 1584) {
        number 32, true
    }
    field(:cap_radius, 1588) {
        number 32, true
    }
    field(:root_density, 1592) {
        number 32, true
    }
    field(:root_radius, 1596) {
        number 32, true
    }
    field(:anon_3, 1600) {
        stl_vector
    }
    field(:anon_4, 1616) {
        stl_vector
    }
end

class PlantTreeInfo < MemHack::Compound
    sizeof 44

    field(:body, 0) {
        pointer_ary(4) {
            pointer_ary(1) {
                global :PlantTreeTile
            }
        }
    }
    field(:unk1, 4) {
        pointer_ary(2) {
            number 16, true
        }
    }
    field(:unk2, 8) {
        pointer_ary(2) {
            number 16, true
        }
    }
    field(:unk3, 12) {
        pointer_ary(2) {
            number 16, true
        }
    }
    field(:unk4, 16) {
        pointer_ary(2) {
            number 16, true
        }
    }
    field(:body_height, 20) {
        number 32, true
    }
    field(:dim_x, 24) {
        number 32, true
    }
    field(:dim_y, 28) {
        number 32, true
    }
    field(:roots, 32) {
        pointer_ary(4) {
            pointer_ary(1) {
                global :PlantTreeTile
            }
        }
    }
    field(:roots_depth, 36) {
        number 32, true
    }
    field(:unk6, 40) {
        number 16, true
    }
end

class PlantTreeTile < MemHack::Compound
    field(:_whole, 0) {
        number 8, false
    }
    field(:trunk, 0) { bit 0 }
    field(:thick_branches_1, 0) { bit 1 }
    field(:thick_branches_2, 0) { bit 2 }
    field(:thick_branches_3, 0) { bit 3 }
    field(:thick_branches_4, 0) { bit 4 }
    field(:branches, 0) { bit 5 }
    field(:twigs, 0) { bit 6 }
    field(:blocked, 0) { bit 7 }
end

class PopupMessage < MemHack::Compound
    sizeof 32

    field(:text, 0) {
        stl_string
    }
    field(:color, 28) {
        number 16, true, 7
    }
    field(:bright, 30) {
        number 8, true, 1, BooleanEnum
    }
end

class PowerInfo < MemHack::Compound
    sizeof 8

    field(:produced, 0) {
        number 32, true
    }
    field(:consumed, 4) {
        number 32, true
    }
end

class PressurePlateInfo < MemHack::Compound
    sizeof 24

    field(:unit_min, 0) {
        number 32, true, 50000
    }
    field(:unit_max, 4) {
        number 32, true, 200000
    }
    field(:water_min, 8) {
        number 8, true, 1
    }
    field(:water_max, 9) {
        number 8, true, 7
    }
    field(:magma_min, 10) {
        number 8, true, 1
    }
    field(:magma_max, 11) {
        number 8, true, 7
    }
    field(:track_min, 12) {
        number 32, true, 1
    }
    field(:track_max, 16) {
        number 32, true, 2000
    }
    field(:flags, 20) {
        compound(:PressurePlateInfo_TFlags) {
            field(:_whole, 0) {
                number 32, true, 0x10
            }
            field(:units, 0) { bit 0 }
            field(:water, 0) { bit 1 }
            field(:magma, 0) { bit 2 }
            field(:citizens, 0) { bit 3 }
            field(:resets, 0) { bit 4 }
            field(:track, 0) { bit 5 }
        }
    }
end

class Projectile < MemHack::Compound
    sizeof 128

    rtti_classname :projst

    field(:link, 4) {
        pointer {
            global :ProjListLink
        }
    }
    field(:id, 8) {
        number 32, true
    }
    field(:firer, 12) {
        pointer {
            global :Unit
        }
    }
    field(:origin_pos, 16) {
        global :Coord
    }
    field(:target_pos, 22) {
        global :Coord
    }
    field(:cur_pos, 28) {
        global :Coord
    }
    field(:prev_pos, 34) {
        global :Coord
    }
    field(:distance_flown, 40) {
        number 32, true
    }
    field(:fall_threshold, 44) {
        number 32, true
    }
    field(:min_hit_distance, 48) {
        number 32, true
    }
    field(:min_ground_distance, 52) {
        number 32, true
    }
    field(:flags, 56) {
        global :ProjectileFlags
    }
    field(:fall_counter, 60) {
        number 16, true
    }
    field(:fall_delay, 62) {
        number 16, true
    }
    field(:hit_rating, 64) {
        number 32, true
    }
    field(:unk21, 68) {
        number 32, true
    }
    field(:unk22, 72) {
        number 32, true
    }
    field(:bow_id, 76) {
        number 32, true, -1
    }
    def bow_tg ; df.world.items.all.binsearch(bow_id) ; end
    field(:unk_item_id, 80) {
        number 32, true, -1
    }
    def unk_item_tg ; df.world.items.all.binsearch(unk_item_id) ; end
    field(:unk_unit_id, 84) {
        number 32, true, -1
    }
    def unk_unit_tg ; df.world.units.all.binsearch(unk_unit_id) ; end
    field(:anon_1, 88) {
    }
    field(:pos_x, 92) {
        number 32, true
    }
    field(:pos_y, 96) {
        number 32, true
    }
    field(:pos_z, 100) {
        number 32, true
    }
    field(:speed_x, 104) {
        number 32, true
    }
    field(:speed_y, 108) {
        number 32, true
    }
    field(:speed_z, 112) {
        number 32, true
    }
    field(:accel_x, 116) {
        number 32, true
    }
    field(:accel_y, 120) {
        number 32, true
    }
    field(:accel_z, 124) {
        number 32, true
    }
    def getType()
        ProjectileType.sym(DFHack.vmethod_call(self, 0))
    end
    def checkImpact(noDamageFloor)
        val = DFHack.vmethod_call(self, 4, noDamageFloor)
        (val & 1) != 0
    end
    def checkMovement()
        val = DFHack.vmethod_call(self, 8)
        (val & 1) != 0
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 12, file, loadversion) ; nil
    end
    def write_file(file)
        DFHack.vmethod_call(self, 16, file) ; nil
    end
    def isObjectLost()
        val = DFHack.vmethod_call(self, 24)
        (val & 1) != 0
    end
end

class ProjItemst < Projectile
    sizeof 132

    rtti_classname :proj_itemst

    field(:item, 128) {
        pointer {
            global :Item
        }
    }
end

class ProjListLink < MemHack::Compound
    sizeof 12

    field(:item, 0) {
        pointer {
            global :Projectile
        }
    }
    field(:prev, 4) {
        pointer {
            global :ProjListLink
        }
    }
    field(:next, 8) {
        pointer {
            global :ProjListLink
        }
    }
end

class ProjMagicst < Projectile
    sizeof 132

    rtti_classname :proj_magicst

    field(:unk, 128) {
        pointer {
        }
    }
end

class ProjUnitst < Projectile
    sizeof 132

    rtti_classname :proj_unitst

    field(:unit, 128) {
        pointer {
            global :Unit
        }
    }
end

class ProjectileFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:no_impact_destroy, 0) { bit 0 }
    field(:has_hit_ground, 0) { bit 1 }
    field(:bouncing, 0) { bit 2 }
    field(:high_flying, 0) { bit 3 }
    field(:piercing, 0) { bit 4 }
    field(:to_be_deleted, 0) { bit 5 }
    field(:unk6, 0) { bit 6 }
    field(:unk7, 0) { bit 7 }
    field(:parabolic, 0) { bit 8 }
    field(:unk9, 0) { bit 9 }
    field(:unk10, 0) { bit 10 }
    field(:no_collide, 0) { bit 11 }
end

class Punishment < MemHack::Compound
    sizeof 40

    field(:criminal, 0) {
        pointer {
            global :Unit
        }
    }
    field(:officer, 4) {
        pointer {
            global :Unit
        }
    }
    field(:beating, 8) {
        number 16, true
    }
    field(:hammer_strikes, 10) {
        number 16, true
    }
    field(:prison_counter, 12) {
        number 32, true
    }
    field(:unk_10, 16) {
        number 16, true
    }
    field(:chain, 20) {
        pointer {
            global :Building
        }
    }
    field(:victims, 24) {
        stl_vector(4) {
            pointer {
                global :Unit
            }
        }
    }
end

class Reaction < MemHack::Compound
    sizeof 200

    field(:code, 0) {
        stl_string
    }
    field(:name, 28) {
        stl_string
    }
    field(:flags, 56) {
        df_flagarray(ReactionFlags)
    }
    field(:reagents, 64) {
        stl_vector(4) {
            pointer {
                global :ReactionReagent
            }
        }
    }
    field(:products, 80) {
        stl_vector(4) {
            pointer {
                global :ReactionProduct
            }
        }
    }
    field(:skill, 96) {
        number 16, true, nil, JobSkill
    }
    field(:building, 100) {
        compound(:Reaction_TBuilding) {
            field(:str, 0) {
                static_array(2, 16) {
                    stl_vector(4) {
                        pointer {
                            stl_string
                        }
                    }
                }
            }
            field(:type, 32) {
                stl_vector(4) {
                    number 32, true, nil, BuildingType
                }
            }
            field(:subtype, 48) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:custom, 64) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:hotkey, 80) {
                stl_vector(4) {
                    number 32, true
                }
            }
        }
    }
    field(:index, 196) {
        number 32, true
    }
end

class ReactionProduct < MemHack::Compound
    sizeof 4

    rtti_classname :reaction_productst

    def getType()
        ReactionProductType.sym(DFHack.vmethod_call(self, 0))
    end
    def resolveTokens(reactionID)
        DFHack.vmethod_call(self, 4, reactionID) ; nil
    end
    def produce(arg0, out_items, in_reag, in_items, quantity, arg5, arg6, arg7)
        DFHack.vmethod_call(self, 8, arg0, out_items, in_reag, in_items, quantity, JobSkill.int(arg5), arg6, arg7) ; nil
    end
    def getDescription(desc)
        DFHack.vmethod_call(self, 12, desc) ; nil
    end
end

class ReactionProductItemImprovementst < ReactionProduct
    sizeof 224

    rtti_classname :reaction_product_item_improvementst

    field(:anon_1, 4) {
        stl_string
    }
    field(:target_reagent, 32) {
        stl_string
    }
    field(:improvement_type, 60) {
        number 32, true, nil, ImprovementType
    }
    field(:mat_type, 64) {
        number 16, true, -1
    }
    field(:mat_index, 68) {
        number 32, true
    }
    field(:probability, 72) {
        number 16, true
    }
    field(:flags, 76) {
        df_flagarray(ReactionProductImprovementFlags)
    }
    field(:get_material, 84) {
        compound(:ReactionProductItemImprovementst_TGetMaterial) {
            field(:reagent_code, 0) {
                stl_string
            }
            field(:product_code, 28) {
                stl_string
            }
        }
    }
    field(:material_str, 140) {
        static_array(3, 28) {
            stl_string
        }
    }
end

class ReactionProductItemst < ReactionProduct
    sizeof 256

    rtti_classname :reaction_product_itemst

    field(:product_to_container, 4) {
        stl_string
    }
    field(:item_type, 32) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 34) {
        number 16, true, -1
    }
    field(:mat_type, 36) {
        number 16, true, -1
    }
    field(:mat_index, 40) {
        number 32, true
    }
    field(:probability, 44) {
        number 16, true
    }
    field(:count, 46) {
        number 16, true
    }
    field(:product_dimension, 48) {
        number 32, true
    }
    field(:flags, 52) {
        df_flagarray(ReactionProductItemFlags)
    }
    field(:get_material, 60) {
        compound(:ReactionProductItemst_TGetMaterial) {
            field(:reagent_code, 0) {
                stl_string
            }
            field(:product_code, 28) {
                stl_string
            }
        }
    }
    field(:item_str, 116) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:material_str, 172) {
        static_array(3, 28) {
            stl_string
        }
    }
end

class ReactionReagent < MemHack::Compound
    sizeof 40

    rtti_classname :reaction_reagentst

    field(:code, 4) {
        stl_string
    }
    field(:quantity, 32) {
        number 32, true
    }
    field(:flags, 36) {
        global :ReactionReagentFlags
    }
    def getType()
        ReactionReagentType.sym(DFHack.vmethod_call(self, 0))
    end
    def resolveTokens(reactionID)
        DFHack.vmethod_call(self, 12, reactionID) ; nil
    end
    def matchesRoot(arg0, index)
        val = DFHack.vmethod_call(self, 20, arg0, index)
        (val & 1) != 0
    end
    def matchesChild(arg0, arg1, index)
        val = DFHack.vmethod_call(self, 24, arg0, arg1, index)
        (val & 1) != 0
    end
    def getDescription(arg0, index)
        DFHack.vmethod_call(self, 28, arg0, index) ; nil
    end
    def isLyeBearing()
        val = DFHack.vmethod_call(self, 32)
        (val & 1) != 0
    end
end

class ReactionReagentFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:PRESERVE_REAGENT, 0) { bit 0 }
    field(:IN_CONTAINER, 0) { bit 1 }
    field(:DOES_NOT_DETERMINE_PRODUCT_AMOUNT, 0) { bit 2 }
end

class ReactionReagentItemst < ReactionReagent
    sizeof 336

    rtti_classname :reaction_reagent_itemst

    field(:item_type, 40) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 42) {
        number 16, true, -1
    }
    field(:mat_type, 44) {
        number 16, true, -1
    }
    field(:mat_index, 46) {
        number 16, true
    }
    field(:reaction_class, 48) {
        stl_string
    }
    field(:has_material_reaction_product, 76) {
        stl_string
    }
    field(:flags1, 104) {
        global :JobItemFlags1
    }
    field(:flags2, 108) {
        global :JobItemFlags2
    }
    field(:flags3, 112) {
        global :JobItemFlags3
    }
    field(:flags4, 116) {
        number 32, false
    }
    field(:flags5, 120) {
        number 32, false
    }
    field(:metal_ore, 124) {
        number 32, true, -1
    }
    def metal_ore_tg ; df.world.raws.inorganics[metal_ore] ; end
    field(:min_dimension, 128) {
        number 32, true
    }
    field(:contains, 132) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:has_tool_use, 148) {
        number 16, true, nil, ToolUses
    }
    field(:item_str, 152) {
        static_array(2, 28) {
            stl_string
        }
    }
    field(:material_str, 208) {
        static_array(3, 28) {
            stl_string
        }
    }
    field(:metal_ore_str, 292) {
        stl_string
    }
    field(:contains_str, 320) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
end

class RegionMapEntry < MemHack::Compound
    sizeof 92

    field(:unk_0, 0) {
        number 32, true
    }
    field(:finder_rank, 4) {
        number 32, true, -1
    }
    field(:sites, 8) {
        stl_vector(4) {
            pointer {
                global :WorldSite
            }
        }
    }
    field(:flags, 24) {
        df_flagarray(RegionMapEntryFlags)
    }
    field(:elevation, 32) {
        number 16, true
    }
    field(:rainfall, 34) {
        number 16, true
    }
    field(:vegetation, 36) {
        number 16, true
    }
    field(:temperature, 38) {
        number 16, true
    }
    field(:evilness, 40) {
        number 16, true
    }
    field(:drainage, 42) {
        number 16, true
    }
    field(:volcanism, 44) {
        number 16, true
    }
    field(:savagery, 46) {
        number 16, true
    }
    field(:unk_30, 48) {
        number 16, true
    }
    field(:unk_32, 50) {
        number 16, true
    }
    field(:unk_34, 52) {
        number 16, true
    }
    field(:clouds, 54) {
        compound(:RegionMapEntry_TClouds) {
            field(:_whole, 0) {
                number 16, false
            }
            field(:density, 0) { bits 2, 2 }
            field(:striped, 0) { bit 4 }
            field(:darkness, 0) { bits 5, 2 }
            field(:fog, 0) { bits 7, 2 }
        }
    }
    field(:wind, 56) {
        compound(:RegionMapEntry_TWind) {
            field(:_whole, 0) {
                number 16, false
            }
            field(:north_1, 0) { bit 0 }
            field(:south_1, 0) { bit 1 }
            field(:east_1, 0) { bit 2 }
            field(:west_1, 0) { bit 3 }
            field(:north_2, 0) { bit 4 }
            field(:south_2, 0) { bit 5 }
            field(:east_2, 0) { bit 6 }
            field(:west_2, 0) { bit 7 }
        }
    }
    field(:unk_3a, 58) {
        number 16, true
    }
    field(:salinity, 60) {
        number 16, true
    }
    field(:unk_3e, 62) {
        global :Coord
    }
    field(:unk_44, 68) {
        global :Coord
    }
    field(:unk_4a, 74) {
        global :Coord
    }
    field(:region_id, 80) {
        number 32, true, -1
    }
    def region_tg ; df.world.world_data.regions[region_id] ; end
    field(:landmass_id, 84) {
        number 32, true, -1
    }
    def landmass_tg ; df.world.world_data.landmasses[landmass_id] ; end
    field(:geo_index, 88) {
        number 16, true, -1
    }
    def geo_index_tg ; df.world.world_data.geo_biomes[geo_index] ; end
end

class Renderer < MemHack::Compound
    sizeof 52

    rtti_classname :renderer

    field(:screen, 4) {
        pointer_ary(1) {
            number 8, false
        }
    }
    field(:screentexpos, 8) {
        pointer_ary(4) {
            number 32, true
        }
    }
    field(:screentexpos_addcolor, 12) {
        pointer_ary(1) {
            number 8, true
        }
    }
    field(:screentexpos_grayscale, 16) {
        pointer_ary(1) {
            number 8, false
        }
    }
    field(:screentexpos_cf, 20) {
        pointer_ary(1) {
            number 8, false
        }
    }
    field(:screentexpos_cbr, 24) {
        pointer_ary(1) {
            number 8, false
        }
    }
    field(:screen_old, 28) {
        pointer_ary(1) {
            number 8, false
        }
    }
    field(:screentexpos_old, 32) {
        pointer_ary(4) {
            number 32, true
        }
    }
    field(:screentexpos_addcolor_old, 36) {
        pointer_ary(1) {
            number 8, true
        }
    }
    field(:screentexpos_grayscale_old, 40) {
        pointer_ary(1) {
            number 8, false
        }
    }
    field(:screentexpos_cf_old, 44) {
        pointer_ary(1) {
            number 8, false
        }
    }
    field(:screentexpos_cbr_old, 48) {
        pointer_ary(1) {
            number 8, false
        }
    }
    def update_tile(x, y)
        DFHack.vmethod_call(self, 0, x, y) ; nil
    end
    def update_all()
        DFHack.vmethod_call(self, 4) ; nil
    end
    def render()
        DFHack.vmethod_call(self, 8) ; nil
    end
    def set_fullscreen()
        DFHack.vmethod_call(self, 12) ; nil
    end
    def zoom(arg0)
        DFHack.vmethod_call(self, 16, ZoomCommands.int(arg0)) ; nil
    end
    def resize(w, h)
        DFHack.vmethod_call(self, 20, w, h) ; nil
    end
    def grid_resize(w, h)
        DFHack.vmethod_call(self, 24, w, h) ; nil
    end
    def get_mouse_coords(x, y)
        val = DFHack.vmethod_call(self, 32, x, y)
        (val & 1) != 0
    end
    def uses_opengl()
        val = DFHack.vmethod_call(self, 36)
        (val & 1) != 0
    end
end

class Report < MemHack::Compound
    sizeof 80

    field(:type, 0) {
        number 16, true, nil, AnnouncementType
    }
    field(:text, 4) {
        stl_string
    }
    field(:color, 32) {
        number 16, true, 7
    }
    field(:bright, 34) {
        number 8, true, 1, BooleanEnum
    }
    field(:duration, 36) {
        number 32, true, 100
    }
    field(:flags, 40) {
        compound(:Report_TFlags) {
            field(:_whole, 0) {
                number 8, false
            }
            field(:continuation, 0) { bit 0 }
            field(:unconscious, 0) { bit 1 }
            field(:announcement, 0) { bit 2 }
        }
    }
    field(:repeat_count, 44) {
        number 32, true
    }
    field(:pos, 48) {
        global :Coord
    }
    field(:id, 56) {
        number 32, true
    }
    field(:year, 60) {
        number 32, true
    }
    field(:time, 64) {
        number 32, true
    }
    field(:unk_v40_1, 68) {
        number 32, true, -1
    }
    field(:unk_v40_2, 72) {
        number 32, true, -1
    }
    field(:unk_v40_3, 76) {
        number 32, true, -1
    }
end

class ResourceAllotmentData < MemHack::Compound
    sizeof 1636

    field(:index, 0) {
        number 32, true
    }
    field(:resource_allotments, 4) {
        static_array(100, 16) {
            stl_vector(4) {
                pointer {
                    global :ResourceAllotmentSpecifier
                }
            }
        }
    }
    field(:unk1, 1604) {
        number 32, true
    }
    field(:unk2, 1608) {
        number 32, true
    }
    field(:unk3, 1612) {
        number 32, true
    }
    field(:unk_650, 1616) {
        number 32, true
    }
    field(:unk_654, 1620) {
        stl_vector(4) {
            pointer {
                compound(:ResourceAllotmentData_TUnk654) {
                    sizeof 52

                    field(:unk_0, 0) {
                        number 32, true
                    }
                    field(:unk_4, 4) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:unk_14, 20) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:unk_24, 36) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                }
            }
        }
    }
end

class ResourceAllotmentSpecifier < MemHack::Compound
    sizeof 16

    rtti_classname :resource_allotment_specifierst

    field(:anon_1, 4) {
        number 32, true
    }
    field(:anon_2, 8) {
        number 32, true
    }
    field(:anon_3, 12) {
        number 32, true
    }
    def getType()
        ResourceAllotmentSpecifierType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(file)
        DFHack.vmethod_call(self, 4, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 8, file, loadversion) ; nil
    end
end

class ResourceAllotmentSpecifierAmmost < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_ammost

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierAnvilst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_anvilst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierArmorBodyst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_armor_bodyst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierArmorBootsst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_armor_bootsst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierArmorGlovesst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_armor_glovesst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierArmorHelmst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_armor_helmst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierArmorPantsst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_armor_pantsst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierBackpackst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_backpackst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierBagst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_bagst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierBedst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_bedst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierBonest < ResourceAllotmentSpecifier
    sizeof 28

    rtti_classname :resource_allotment_specifier_bonest

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
    field(:anon_1, 24) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierBoxst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_boxst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierCabinetst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_cabinetst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierChairst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_chairst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierCheesest < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_cheesest

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierClothingBodyst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_clothing_bodyst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierClothingBootsst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_clothing_bootsst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierClothingGlovesst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_clothing_glovesst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierClothingHelmst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_clothing_helmst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierClothingPantsst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_clothing_pantsst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierClothst < ResourceAllotmentSpecifier
    sizeof 44

    rtti_classname :resource_allotment_specifier_clothst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
    field(:anon_1, 24) {
        number 32, true
    }
    field(:anon_2, 28) {
        number 32, true
    }
    field(:anon_3, 32) {
        number 32, true
    }
    field(:anon_4, 36) {
        number 32, true
    }
    field(:anon_5, 40) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierCraftsst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_craftsst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierCropst < ResourceAllotmentSpecifier
    sizeof 48

    rtti_classname :resource_allotment_specifier_cropst

    field(:anon_1, 16) {
        number 32, true
    }
    field(:anon_2, 20) {
        number 32, true
    }
    field(:unk_v40_01, 24) {
        number 32, true
    }
    field(:anon_3, 28) {
        static_array(5, 4) {
            number 32, true
        }
    }
end

class ResourceAllotmentSpecifierExtractst < ResourceAllotmentSpecifier
    sizeof 40

    rtti_classname :resource_allotment_specifier_extractst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
    field(:anon_1, 24) {
        number 32, true
    }
    field(:mat_type2, 28) {
        number 16, true, -1
    }
    field(:mat_index2, 32) {
        number 32, true
    }
    field(:anon_2, 36) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierFlaskst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_flaskst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierGemsst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_gemsst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierHornst < ResourceAllotmentSpecifier
    sizeof 28

    rtti_classname :resource_allotment_specifier_hornst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
    field(:anon_1, 24) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierLeatherst < ResourceAllotmentSpecifier
    sizeof 64

    rtti_classname :resource_allotment_specifier_leatherst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
    field(:anon_1, 24) {
        number 32, true
    }
    field(:anon_2, 28) {
        number 32, true
    }
    field(:anon_3, 32) {
        number 32, true
    }
    field(:anon_4, 36) {
        number 32, true
    }
    field(:anon_5, 40) {
        number 32, true
    }
    field(:anon_6, 44) {
        number 32, true
    }
    field(:anon_7, 48) {
        number 32, true
    }
    field(:anon_8, 52) {
        number 32, true
    }
    field(:anon_9, 56) {
        number 32, true
    }
    field(:anon_10, 60) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierMeatst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_meatst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierMetalst < ResourceAllotmentSpecifier
    sizeof 76

    rtti_classname :resource_allotment_specifier_metalst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
    field(:anon_1, 24) {
        number 32, true
    }
    field(:anon_2, 28) {
        static_array(12, 4) {
            number 32, true
        }
    }
end

class ResourceAllotmentSpecifierPearlst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_pearlst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierPowderst < ResourceAllotmentSpecifier
    sizeof 28

    rtti_classname :resource_allotment_specifier_powderst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
    field(:anon_1, 24) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierQuiverst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_quiverst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierShellst < ResourceAllotmentSpecifier
    sizeof 28

    rtti_classname :resource_allotment_specifier_shellst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
    field(:anon_1, 24) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierSkinst < ResourceAllotmentSpecifier
    sizeof 36

    rtti_classname :resource_allotment_specifier_skinst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
    field(:mat_type2, 24) {
        number 16, true, -1
    }
    field(:mat_index2, 28) {
        number 32, true
    }
    field(:anon_1, 32) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierSoapst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_soapst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierStonest < ResourceAllotmentSpecifier
    sizeof 52

    rtti_classname :resource_allotment_specifier_stonest

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
    field(:anon_1, 24) {
        number 32, true
    }
    field(:anon_2, 28) {
        number 32, true
    }
    field(:anon_3, 32) {
        static_array(5, 4) {
            number 32, true
        }
    }
end

class ResourceAllotmentSpecifierTablest < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_tablest

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierTallowst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_tallowst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierThreadst < ResourceAllotmentSpecifier
    sizeof 28

    rtti_classname :resource_allotment_specifier_threadst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
    field(:anon_1, 24) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierToothst < ResourceAllotmentSpecifier
    sizeof 28

    rtti_classname :resource_allotment_specifier_toothst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
    field(:anon_1, 24) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierWeaponMeleest < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_weapon_meleest

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierWeaponRangedst < ResourceAllotmentSpecifier
    sizeof 24

    rtti_classname :resource_allotment_specifier_weapon_rangedst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
end

class ResourceAllotmentSpecifierWoodst < ResourceAllotmentSpecifier
    sizeof 48

    rtti_classname :resource_allotment_specifier_woodst

    field(:mat_type, 16) {
        number 16, true, -1
    }
    field(:mat_index, 20) {
        number 32, true
    }
    field(:anon_1, 24) {
        number 32, true
    }
    field(:anon_2, 28) {
        number 32, true
    }
    field(:anon_3, 32) {
        number 32, true
    }
    field(:anon_4, 36) {
        number 32, true
    }
    field(:anon_5, 40) {
        number 32, true
    }
    field(:anon_6, 44) {
        number 32, true
    }
end

class RoomRentInfo < MemHack::Compound
    sizeof 24

    field(:elements, 0) {
        stl_vector(4) {
            pointer {
                global :Building
            }
        }
    }
    field(:rent_value, 16) {
        number 32, true
    }
    field(:flags, 20) {
        compound(:RoomRentInfo_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:eviction_underway, 0) { bit 0 }
            field(:move_underway, 0) { bit 1 }
        }
    }
end

class RouteStockpileLink < MemHack::Compound
    sizeof 8

    field(:building_id, 0) {
        number 32, true, -1
    }
    def building_tg ; df.world.buildings.all.binsearch(building_id) ; end
    field(:mode, 4) {
        compound(:RouteStockpileLink_TMode) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:take, 0) { bit 0 }
            field(:give, 0) { bit 1 }
        }
    }
end

class ScheduleInfo < MemHack::Compound
    sizeof 24

    field(:id, 0) {
        number 32, true
    }
    field(:anon_1, 4) {
        number 16, true
    }
    field(:slots, 8) {
        stl_vector(4) {
            pointer {
                global :ScheduleSlot
            }
        }
    }
end

class ScheduleSlot < MemHack::Compound
    sizeof 10

    field(:type, 0) {
        number 16, true
    }
    field(:start_time, 2) {
        number 16, true
    }
    field(:end_time, 4) {
        number 16, true
    }
    field(:anon_1, 6) {
        number 16, true
    }
    field(:processed, 8) {
        number 8, true
    }
end

class ScriptStepst < MemHack::Compound
    sizeof 8

    rtti_classname :script_stepst

    field(:next_step_idx, 4) {
        number 32, true
    }
    def setNextStep(idx)
        val = DFHack.vmethod_call(self, 0, idx)
        (val & 1) != 0
    end
    def execute(context)
        val = DFHack.vmethod_call(self, 4, context)
    end
    def skip(context)
        val = DFHack.vmethod_call(self, 8, context)
    end
end

class ScriptStepConditionalst < ScriptStepst
    sizeof 152

    rtti_classname :script_step_conditionalst

    field(:condition, 8) {
        compound(:ScriptStepConditionalst_TCondition) {
            field(:var1_type, 0) {
                stl_string
            }
            field(:var1_name, 28) {
                stl_string
            }
            field(:comparison, 56) {
                stl_string
            }
            field(:var2_type, 84) {
                stl_string
            }
            field(:var2_name, 112) {
                stl_string
            }
        }
    }
    field(:conditional_next_step_idx, 148) {
        number 32, true
    }
end

class ScriptStepConstructtopiclistst < ScriptStepst
    sizeof 8

    rtti_classname :script_step_constructtopiclistst

end

class ScriptStepEventst < ScriptStepst
    sizeof 8

    rtti_classname :script_step_eventst

end

class ScriptStepDipeventst < ScriptStepEventst
    sizeof 148

    rtti_classname :script_step_dipeventst

    field(:parm1, 8) {
        stl_string
    }
    field(:parm2, 36) {
        stl_string
    }
    field(:parm3, 64) {
        stl_string
    }
    field(:parm4, 92) {
        stl_string
    }
    field(:parm5, 120) {
        stl_string
    }
end

class ScriptStepDiphistoryst < ScriptStepst
    sizeof 36

    rtti_classname :script_step_diphistoryst

    field(:event, 8) {
        stl_string
    }
end

class ScriptStepDiscussst < ScriptStepst
    sizeof 36

    rtti_classname :script_step_discussst

    field(:event, 8) {
        stl_string
    }
end

class ScriptStepInvasionst < ScriptStepEventst
    sizeof 36

    rtti_classname :script_step_invasionst

    field(:parm, 8) {
        stl_string
    }
end

class ScriptStepSetvarst < ScriptStepst
    sizeof 120

    rtti_classname :script_step_setvarst

    field(:dest_type, 8) {
        stl_string
    }
    field(:dest_name, 36) {
        stl_string
    }
    field(:src_type, 64) {
        stl_string
    }
    field(:src_name, 92) {
        stl_string
    }
end

class ScriptStepSimpleactionst < ScriptStepst
    sizeof 64

    rtti_classname :script_step_simpleactionst

    field(:type, 8) {
        stl_string
    }
    field(:subtype, 36) {
        stl_string
    }
end

class ScriptStepTextviewerst < ScriptStepst
    sizeof 64

    rtti_classname :script_step_textviewerst

    field(:filename, 8) {
        stl_string
    }
    field(:outvar_name, 36) {
        stl_string
    }
end

class ScriptStepTopicdiscussionst < ScriptStepst
    sizeof 8

    rtti_classname :script_step_topicdiscussionst

end

class ScriptVarst < MemHack::Compound
    sizeof 32

    rtti_classname :script_varst

    field(:name, 4) {
        stl_string
    }
    def instantiate()
        ptr = DFHack.vmethod_call(self, 0)
        class << self
            global :ActiveScriptVarst
        end._at(ptr) if ptr != 0
    end
end

class ScriptVarLongst < ScriptVarst
    sizeof 32

    rtti_classname :script_var_longst

end

class ScriptVarUnitst < ScriptVarst
    sizeof 32

    rtti_classname :script_var_unitst

end

class SiteBuildingItem < MemHack::Compound
    sizeof 16

    field(:race, 0) {
        number 32, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:item_type, 4) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 6) {
        number 16, true, -1
    }
    field(:mat_type, 8) {
        number 16, true, -1
    }
    field(:mat_index, 12) {
        number 32, true
    }
end

class SiteRealizationBuilding < MemHack::Compound
    sizeof 116

    field(:id, 0) {
        number 32, true
    }
    field(:type, 4) {
        number 32, true, nil, SiteRealizationBuildingType
    }
    field(:min_x, 8) {
        number 32, true
    }
    field(:min_y, 12) {
        number 32, true
    }
    field(:max_x, 16) {
        number 32, true
    }
    field(:max_y, 20) {
        number 32, true
    }
    field(:unk_18, 24) {
        number 32, true
    }
    field(:inhabitants, 28) {
        stl_vector(4) {
            pointer {
                global :WorldSiteInhabitant
            }
        }
    }
    field(:unk_2c, 44) {
        number 32, true
    }
    field(:item, 48) {
        global :SiteBuildingItem
    }
    field(:abstract_building_id, 64) {
        number 32, true
    }
    field(:unk_44, 68) {
        number 32, true
    }
    field(:building_info, 72) {
        pointer {
            global :SiteRealizationBuildingInfost
        }
    }
    field(:unk_4c, 76) {
        stl_vector(4) {
            pointer {
                compound(:SiteRealizationBuilding_TUnk4c) {
                    sizeof 24

                    field(:unk_0, 0) {
                        number 32, true
                    }
                    field(:unk_4, 4) {
                        number 32, true
                    }
                    field(:owner, 8) {
                        number 32, true, -1
                    }
                    def owner_tg ; df.world.entities.all.binsearch(owner) ; end
                    field(:unk_c, 12) {
                        number 32, true
                    }
                    field(:unk_10, 16) {
                        number 32, true
                    }
                    field(:unk_14, 20) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:unk_5c, 92) {
        number 32, true
    }
    field(:unk_60, 96) {
        stl_vector
    }
    field(:unk_v40_1, 112) {
        number 32, true, -1000000
    }
end

class SiteRealizationBuildingInfost < MemHack::Compound
    sizeof 4

    rtti_classname :site_realization_building_infost

    def getType()
        SiteRealizationBuildingType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(file)
        DFHack.vmethod_call(self, 4, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 8, file, loadversion) ; nil
    end
end

class SiteRealizationBuildingInfoCastleCourtyardst < SiteRealizationBuildingInfost
    sizeof 4

    rtti_classname :site_realization_building_info_castle_courtyardst

end

class SiteRealizationBuildingInfoCastleTowerst < SiteRealizationBuildingInfost
    sizeof 72

    rtti_classname :site_realization_building_info_castle_towerst

    field(:unk_4, 4) {
        number 32, true
    }
    field(:unk_8, 8) {
        number 32, true
    }
    field(:unk_c, 12) {
        number 32, true
    }
    field(:unk_10, 16) {
        number 32, true
    }
    field(:unk_14, 20) {
        number 32, true
    }
    field(:unk_18, 24) {
        number 32, true
    }
    field(:item1, 28) {
        global :SiteBuildingItem
    }
    field(:item2, 44) {
        global :SiteBuildingItem
    }
    field(:unk_3c, 60) {
        number 32, true
    }
    field(:unk_40, 64) {
        number 32, true
    }
    field(:unk_44, 68) {
        number 32, true
    }
end

class SiteRealizationBuildingInfoCastleWallst < SiteRealizationBuildingInfost
    sizeof 68

    rtti_classname :site_realization_building_info_castle_wallst

    field(:unk_4, 4) {
        number 32, true
    }
    field(:unk_8, 8) {
        number 32, true
    }
    field(:unk_c, 12) {
        number 32, true
    }
    field(:unk_10, 16) {
        number 32, true
    }
    field(:unk_14, 20) {
        number 32, true
    }
    field(:unk_18, 24) {
        number 32, true
    }
    field(:unk_1c, 28) {
        number 32, true
    }
    field(:unk_20, 32) {
        number 32, true
    }
    field(:item1, 36) {
        global :SiteBuildingItem
    }
    field(:item2, 52) {
        global :SiteBuildingItem
    }
end

class SiteRealizationBuildingInfoHillockHousest < SiteRealizationBuildingInfost
    sizeof 8

    rtti_classname :site_realization_building_info_hillock_housest

    field(:type, 4) {
        number 32, true, nil, HillockHouseType
    }
end

class SiteRealizationBuildingInfoMarketSquarest < SiteRealizationBuildingInfost
    sizeof 8

    rtti_classname :site_realization_building_info_market_squarest

    field(:type, 4) {
        number 32, true, nil, SiteShopType
    }
end

class SiteRealizationBuildingInfoShopHousest < SiteRealizationBuildingInfost
    sizeof 116

    rtti_classname :site_realization_building_info_shop_housest

    field(:type, 4) {
        number 32, true, nil, SiteShopType
    }
    field(:name, 8) {
        global :LanguageName
    }
end

class SiteRealizationBuildingInfoTreeHousest < SiteRealizationBuildingInfost
    sizeof 120

    rtti_classname :site_realization_building_info_tree_housest

    field(:type, 4) {
        number 32, true, nil, TreeHouseType
    }
    field(:unk_8, 8) {
        number 32, true
    }
    field(:name, 12) {
        global :LanguageName
    }
end

class SiteRealizationBuildingInfoTrenchesst < SiteRealizationBuildingInfost
    sizeof 72

    rtti_classname :site_realization_building_info_trenchesst

    field(:unk_4, 4) {
        number 32, true
    }
    field(:unk_8, 8) {
        static_array(4, 16) {
            compound(:SiteRealizationBuildingInfoTrenchesst_TUnk8) {
                field(:anon_1, 0) {
                    number 32, true
                }
                field(:anon_2, 4) {
                    number 32, true
                }
                field(:anon_3, 8) {
                    number 32, true
                }
                field(:anon_4, 12) {
                    number 32, true
                }
            }
        }
    }
end

class SiteRealizationCrossroads < MemHack::Compound
    sizeof 1048

    field(:road_min_y, 0) {
        static_array(48, 4) {
            number 32, true
        }
    }
    field(:road_max_y, 192) {
        static_array(48, 4) {
            number 32, true
        }
    }
    field(:road_min_x, 384) {
        static_array(48, 4) {
            number 32, true
        }
    }
    field(:road_max_x, 576) {
        static_array(48, 4) {
            number 32, true
        }
    }
    field(:idx_x, 768) {
        number 32, true
    }
    field(:idx_y, 772) {
        number 32, true
    }
    field(:tile_width, 776) {
        number 32, true
    }
    field(:tile_height, 780) {
        number 32, true
    }
    field(:unk_310, 784) {
        number 32, true
    }
    field(:unk_314, 788) {
        number 32, true
    }
    field(:unk_318, 792) {
        number 32, true
    }
    field(:unk_31c, 796) {
        number 32, true
    }
    field(:unk_320, 800) {
        number 32, true
    }
    field(:unk_324, 804) {
        number 32, true
    }
    field(:unk_328, 808) {
        number 32, true
    }
    field(:unk_32c, 812) {
        number 32, true
    }
    field(:center_x_tile, 816) {
        number 32, true
    }
    field(:center_y_tile, 820) {
        number 32, true
    }
    field(:up, 824) {
        pointer {
            global :SiteRealizationCrossroads
        }
    }
    field(:down, 828) {
        pointer {
            global :SiteRealizationCrossroads
        }
    }
    field(:right, 832) {
        pointer {
            global :SiteRealizationCrossroads
        }
    }
    field(:left, 836) {
        pointer {
            global :SiteRealizationCrossroads
        }
    }
    field(:unk_348, 840) {
        number 8, true
    }
    field(:unk_349, 841) {
        number 8, true
    }
    field(:unk_34c, 844) {
        number 32, true
    }
    field(:anon_1, 848) {
        number 8, true
    }
    field(:anon_2, 849) {
        number 8, true
    }
    field(:anon_3, 850) {
        number 8, true
    }
    field(:anon_4, 851) {
        number 8, true
    }
    field(:anon_5, 852) {
        number 8, true
    }
    field(:anon_6, 853) {
        number 8, true
    }
    field(:unk_356, 854) {
        static_array(32, 6) {
            global :Coord
        }
    }
end

class SpatterCommon < MemHack::Compound
    sizeof 24

    field(:mat_type, 0) {
        number 16, true, -1
    }
    field(:mat_index, 4) {
        number 32, true
    }
    field(:mat_state, 8) {
        number 16, true, nil, MatterState
    }
    field(:temperature, 10) {
        global :Temperaturest
    }
    field(:size, 16) {
        number 32, true
    }
    field(:base_flags, 20) {
        compound(:SpatterCommon_TBaseFlags) {
            field(:_whole, 0) {
                number 16, false
            }
            field(:evaporates, 0) { bit 0 }
        }
    }
    field(:anon_1, 22) {
    }
end

class Spatter < SpatterCommon
    sizeof 28

    field(:body_part_id, 24) {
        number 16, true, -1
    }
    field(:flags, 26) {
        compound(:Spatter_TFlags) {
            field(:_whole, 0) {
                number 16, false
            }
            field(:water_soluble, 0) { bit 0 }
        }
    }
end

class SpecialMatTable < MemHack::Compound
    sizeof 4412

    field(:organic_types, 0) {
        static_array(37, 16, OrganicMatCategory) {
            stl_vector(2) {
                number 16, true
            }
        }
    }
    field(:organic_indexes, 592) {
        static_array(37, 16, OrganicMatCategory) {
            stl_vector(4) {
                number 32, true
            }
        }
    }
    field(:organic_unknown, 1184) {
        static_array(37, 16, OrganicMatCategory) {
            stl_vector(4) {
                number 32, true
            }
        }
    }
    field(:builtin, 1776) {
        static_array(659, 4, BuiltinMats) {
            pointer {
                global :Material
            }
        }
    }
end

class SpecificRef < MemHack::Compound
    sizeof 12

    field(:type, 0) {
        number 32, true, nil, SpecificRefType
    }
    field(:object, 4) {
        pointer {
        }
    }
    field(:unit, 4) {
        pointer {
            global :Unit
        }
    }
    field(:activity, 4) {
        pointer {
            global :ActivityInfo
        }
    }
    field(:screen, 4) {
        pointer {
            global :Viewscreen
        }
    }
    field(:vermin, 4) {
        pointer {
            global :Vermin
        }
    }
    field(:effect, 4) {
        pointer {
            global :EffectInfo
        }
    }
    field(:job, 4) {
        pointer {
            global :Job
        }
    }
    field(:arg2, 8) {
        compound(:SpecificRef_TArg2) {
            field(:wrestle, 0) {
                pointer {
                    global :UnitItemWrestle
                }
            }
        }
    }
end

class Squad < MemHack::Compound
    sizeof 344

    field(:id, 0) {
        number 32, true
    }
    field(:name, 4) {
        global :LanguageName
    }
    field(:alias, 112) {
        stl_string
    }
    field(:positions, 140) {
        stl_vector(4) {
            pointer {
                global :SquadPosition
            }
        }
    }
    field(:orders, 156) {
        stl_vector(4) {
            pointer {
                global :SquadOrder
            }
        }
    }
    field(:schedule, 172) {
        stl_vector(4) {
            pointer {
                static_array(12, 64) {
                    global :SquadScheduleEntry
                }
            }
        }
    }
    field(:cur_alert_idx, 188) {
        number 32, true, -1
    }
    field(:rooms, 192) {
        stl_vector(4) {
            pointer {
                compound(:Squad_TRooms) {
                    sizeof 8

                    field(:building_id, 0) {
                        number 32, true, -1
                    }
                    def building_tg ; df.world.buildings.all.binsearch(building_id) ; end
                    field(:mode, 4) {
                        global :SquadUseFlags
                    }
                }
            }
        }
    }
    field(:rack_combat, 208) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def rack_combat_tg ; rack_combat.map { |i| df.world.buildings.all.binsearch(i) } ; end
    field(:rack_training, 224) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def rack_training_tg ; rack_training.map { |i| df.world.buildings.all.binsearch(i) } ; end
    field(:uniform_priority, 240) {
        number 32, true
    }
    field(:activity, 244) {
        number 32, true, -1
    }
    def activity_tg ; df.world.activities.all.binsearch(activity) ; end
    field(:ammunition, 248) {
        stl_vector(4) {
            pointer {
                global :SquadAmmoSpec
            }
        }
    }
    field(:train_weapon_free, 264) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def train_weapon_free_tg ; train_weapon_free.map { |i| df.world.items.all.binsearch(i) } ; end
    field(:train_weapon_inuse, 280) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def train_weapon_inuse_tg ; train_weapon_inuse.map { |i| df.world.items.all.binsearch(i) } ; end
    field(:ammo_items, 296) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def ammo_items_tg ; ammo_items.map { |i| df.world.items.all.binsearch(i) } ; end
    field(:ammo_units, 312) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def ammo_units_tg ; ammo_units.map { |i| df.world.units.all.binsearch(i) } ; end
    field(:carry_food, 328) {
        number 16, true
    }
    field(:carry_water, 330) {
        number 16, true
    }
    field(:entity_id, 332) {
        number 32, true, -1
    }
    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
    field(:leader_position, 336) {
        number 32, true, -1
    }
    field(:leader_assignment, 340) {
        number 32, true, -1
    }
end

class SquadAmmoSpec < MemHack::Compound
    sizeof 36

    field(:item_filter, 0) {
        global :ItemFilterSpec
    }
    field(:amount, 12) {
        number 32, true
    }
    field(:flags, 16) {
        compound(:SquadAmmoSpec_TFlags) {
            field(:_whole, 0) {
                number 32, false
            }
            field(:use_combat, 0) { bit 0 }
            field(:use_training, 0) { bit 1 }
        }
    }
    field(:assigned, 20) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def assigned_tg ; assigned.map { |i| df.world.items.all.binsearch(i) } ; end
end

class SquadOrder < MemHack::Compound
    sizeof 24

    rtti_classname :squad_orderst

    field(:unk_v40_1, 4) {
        number 32, true, -1
    }
    field(:unk_v40_2, 8) {
        number 32, true, -1
    }
    field(:year, 12) {
        number 32, true
    }
    field(:year_tick, 16) {
        number 32, true
    }
    field(:unk_v40_3, 20) {
        number 32, true
    }
    def clone()
        ptr = DFHack.vmethod_call(self, 0)
        class << self
            global :SquadOrder
        end._at(ptr) if ptr != 0
    end
    def write_file(file)
        DFHack.vmethod_call(self, 4, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 8, file, loadversion) ; nil
    end
    def getType()
        SquadOrderType.sym(DFHack.vmethod_call(self, 12))
    end
    def isPatrol()
        val = DFHack.vmethod_call(self, 16)
        (val & 1) != 0
    end
    def offsetPosition(arg0, arg1, arg2)
        DFHack.vmethod_call(self, 24, arg0, arg1, arg2) ; nil
    end
    def process(arg0, arg1, soldier)
        val = DFHack.vmethod_call(self, 28, arg0, arg1, soldier)
        (val & 1) != 0
    end
    def reasonCannot(soldier)
        SquadOrderCannotReason.sym(DFHack.vmethod_call(self, 32, soldier))
    end
    def decUniformLock(soldier)
        val = DFHack.vmethod_call(self, 36, soldier)
        (val & 1) != 0
    end
    def isFulfilled()
        val = DFHack.vmethod_call(self, 40)
        (val & 1) != 0
    end
    def getTargetUnits()
        ptr = DFHack.vmethod_call(self, 44)
        class << self
            stl_vector(4) {
                number 32, true
            }
        end._at(ptr) if ptr != 0
    end
    def getUniformType(soldier)
        val = DFHack.vmethod_call(self, 48, soldier)
        val &= ((1 << 16) - 1)
        ((val >> (16-1)) & 1) == 0 ? val : val - (1 << 16)
    end
    def getDescription(arg0)
        DFHack.vmethod_call(self, 52, arg0) ; nil
    end
    def isInactive(arg0)
        val = DFHack.vmethod_call(self, 56, arg0)
        (val & 1) != 0
    end
    def isCombat()
        val = DFHack.vmethod_call(self, 60)
        (val & 1) != 0
    end
end

class SquadOrderCauseTroubleForEntityst < SquadOrder
    sizeof 56

    rtti_classname :squad_order_cause_trouble_for_entityst

    field(:anon_1, 24) {
        number 32, true
    }
    field(:anon_2, 28) {
        stl_string
    }
end

class SquadOrderDefendBurrowsst < SquadOrder
    sizeof 40

    rtti_classname :squad_order_defend_burrowsst

    field(:burrows, 24) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def burrows_tg ; burrows.map { |i| df.ui.burrows.list.binsearch(i) } ; end
end

class SquadOrderDriveEntityOffSitest < SquadOrder
    sizeof 60

    rtti_classname :squad_order_drive_entity_off_sitest

    field(:anon_1, 24) {
        number 32, true
    }
    field(:anon_2, 28) {
        number 32, true
    }
    field(:anon_3, 32) {
        stl_string
    }
end

class SquadOrderKillListst < SquadOrder
    sizeof 84

    rtti_classname :squad_order_kill_listst

    field(:units, 24) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def units_tg ; units.map { |i| df.world.units.all.binsearch(i) } ; end
    field(:histfigs, 40) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def histfigs_tg ; histfigs.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:title, 56) {
        stl_string
    }
end

class SquadOrderMovest < SquadOrder
    sizeof 36

    rtti_classname :squad_order_movest

    field(:pos, 24) {
        global :Coord
    }
    field(:point_id, 32) {
        number 32, true
    }
end

class SquadOrderPatrolRoutest < SquadOrder
    sizeof 28

    rtti_classname :squad_order_patrol_routest

    field(:route_id, 24) {
        number 32, true
    }
end

class SquadOrderTrainst < SquadOrder
    sizeof 24

    rtti_classname :squad_order_trainst

end

class SquadPosition < MemHack::Compound
    sizeof 288

    field(:occupant, 0) {
        number 32, true, -1
    }
    def occupant_tg ; df.world.history.figures.binsearch(occupant) ; end
    field(:orders, 4) {
        stl_vector(4) {
            pointer {
                global :SquadOrder
            }
        }
    }
    field(:preferences, 20) {
        static_array(4, 16, BarrackPreferenceCategory) {
            stl_vector(4) {
                number 32, true, -1
            }
        }
    }
    field(:uniform, 84) {
        static_array(7, 16, UniformCategory) {
            stl_vector(4) {
                pointer {
                    global :SquadUniformSpec
                }
            }
        }
    }
    field(:unk_c4, 196) {
        stl_string
    }
    field(:flags, 224) {
        global :UniformFlags
    }
    field(:assigned_items, 228) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def assigned_items_tg ; assigned_items.map { |i| df.world.items.all.binsearch(i) } ; end
    field(:quiver, 244) {
        number 32, true, -1
    }
    def quiver_tg ; df.world.items.all.binsearch(quiver) ; end
    field(:backpack, 248) {
        number 32, true, -1
    }
    def backpack_tg ; df.world.items.all.binsearch(backpack) ; end
    field(:flask, 252) {
        number 32, true, -1
    }
    def flask_tg ; df.world.items.all.binsearch(flask) ; end
    field(:activities, 256) {
        static_array(3, 4, SquadEventType) {
            number 32, true, -1
        }
    }
    def activities_tg ; df.world.activities.all.binsearch(activities) ; end
    field(:events, 268) {
        static_array(3, 4, SquadEventType) {
            number 32, true, -1
        }
    }
    field(:unk_118, 280) {
        number 32, true
    }
    field(:unk_11c, 284) {
        number 32, true
    }
end

class SquadScheduleEntry < MemHack::Compound
    sizeof 64

    field(:name, 0) {
        stl_string
    }
    field(:sleep_mode, 28) {
        number 16, true
    }
    field(:uniform_mode, 30) {
        number 16, true
    }
    field(:orders, 32) {
        stl_vector(4) {
            pointer {
                global :SquadScheduleOrder
            }
        }
    }
    field(:order_assignments, 48) {
        stl_vector(4) {
            pointer {
                number 32, true, -1
            }
        }
    }
end

class SquadScheduleOrder < MemHack::Compound
    sizeof 28

    field(:order, 0) {
        pointer {
            global :SquadOrder
        }
    }
    field(:min_count, 4) {
        number 32, true
    }
    field(:positions, 8) {
        stl_bit_vector
    }
end

class SquadUniformSpec < MemHack::Compound
    sizeof 40

    field(:item, 0) {
        number 32, true, -1
    }
    def item_tg ; df.world.items.all.binsearch(item) ; end
    field(:item_filter, 4) {
        global :ItemFilterSpec
    }
    field(:color, 16) {
        number 32, true
    }
    field(:assigned, 20) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def assigned_tg ; assigned.map { |i| df.world.items.all.binsearch(i) } ; end
    field(:indiv_choice, 36) {
        global :UniformIndivChoice
    }
end

class SquadUseFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:sleep, 0) { bit 0 }
    field(:train, 0) { bit 1 }
    field(:indiv_eq, 0) { bit 2 }
    field(:squad_eq, 0) { bit 3 }
end

class StockpileGroupSet < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:animals, 0) { bit 0 }
    field(:food, 0) { bit 1 }
    field(:furniture, 0) { bit 2 }
    field(:corpses, 0) { bit 3 }
    field(:refuse, 0) { bit 4 }
    field(:stone, 0) { bit 5 }
    field(:ammo, 0) { bit 6 }
    field(:coins, 0) { bit 7 }
    field(:bars_blocks, 0) { bit 8 }
    field(:gems, 0) { bit 9 }
    field(:finished_goods, 0) { bit 10 }
    field(:leather, 0) { bit 11 }
    field(:cloth, 0) { bit 12 }
    field(:wood, 0) { bit 13 }
    field(:weapons, 0) { bit 14 }
    field(:armor, 0) { bit 15 }
end

class StockpileLinks < MemHack::Compound
    sizeof 64

    field(:give_to_pile, 0) {
        stl_vector(4) {
            pointer {
                global :Building
            }
        }
    }
    field(:take_from_pile, 16) {
        stl_vector(4) {
            pointer {
                global :Building
            }
        }
    }
    field(:give_to_workshop, 32) {
        stl_vector(4) {
            pointer {
                global :Building
            }
        }
    }
    field(:take_from_workshop, 48) {
        stl_vector(4) {
            pointer {
                global :Building
            }
        }
    }
end

class StockpileSettings < MemHack::Compound
    sizeof 1240

    field(:flags, 0) {
        global :StockpileGroupSet
    }
    field(:animals, 4) {
        compound(:StockpileSettings_TAnimals) {
            field(:empty_cages, 0) {
                number 8, true, nil, BooleanEnum
            }
            field(:empty_traps, 1) {
                number 8, true, nil, BooleanEnum
            }
            field(:enabled, 4) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
        }
    }
    field(:food, 24) {
        compound(:StockpileSettings_TFood) {
            field(:meat, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:fish, 16) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:unprepared_fish, 32) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:egg, 48) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:plants, 64) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:drink_plant, 80) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:drink_animal, 96) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:cheese_plant, 112) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:cheese_animal, 128) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:seeds, 144) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:leaves, 160) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:powder_plant, 176) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:powder_creature, 192) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:glob, 208) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:glob_paste, 224) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:glob_pressed, 240) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:liquid_plant, 256) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:liquid_animal, 272) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:liquid_misc, 288) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:prepared_meals, 304) {
                number 8, true, nil, BooleanEnum
            }
        }
    }
    field(:furniture, 332) {
        compound(:StockpileSettings_TFurniture) {
            field(:type, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:other_mats, 16) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:mats, 32) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:quality_core, 48) {
                static_array(7, 1, ItemQuality) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:quality_total, 55) {
                static_array(7, 1, ItemQuality) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:sand_bags, 62) {
                number 8, true, nil, BooleanEnum
            }
        }
    }
    field(:unk1, 396) {
        number 32, true
    }
    field(:refuse, 400) {
        compound(:StockpileSettings_TRefuse) {
            field(:type, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:corpses, 16) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:body_parts, 32) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:skulls, 48) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:bones, 64) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:hair, 80) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:shells, 96) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:teeth, 112) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:horns, 128) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:fresh_raw_hide, 144) {
                number 8, true, nil, BooleanEnum
            }
            field(:rotten_raw_hide, 145) {
                number 8, true, nil, BooleanEnum
            }
        }
    }
    field(:stone, 548) {
        compound(:StockpileSettings_TStone) {
            field(:mats, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
        }
    }
    field(:ore, 564) {
        compound(:StockpileSettings_TOre) {
            field(:mats, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
        }
    }
    field(:ammo, 580) {
        compound(:StockpileSettings_TAmmo) {
            field(:type, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:other_mats, 16) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:mats, 32) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:quality_core, 48) {
                static_array(7, 1, ItemQuality) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:quality_total, 55) {
                static_array(7, 1, ItemQuality) {
                    number 8, true, nil, BooleanEnum
                }
            }
        }
    }
    field(:coins, 644) {
        compound(:StockpileSettings_TCoins) {
            field(:mats, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
        }
    }
    field(:bars_blocks, 660) {
        compound(:StockpileSettings_TBarsBlocks) {
            field(:bars_other_mats, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:blocks_other_mats, 16) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:bars_mats, 32) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:blocks_mats, 48) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
        }
    }
    field(:gems, 724) {
        compound(:StockpileSettings_TGems) {
            field(:rough_other_mats, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:cut_other_mats, 16) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:rough_mats, 32) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:cut_mats, 48) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
        }
    }
    field(:finished_goods, 788) {
        compound(:StockpileSettings_TFinishedGoods) {
            field(:type, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:other_mats, 16) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:mats, 32) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:quality_core, 48) {
                static_array(7, 1, ItemQuality) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:quality_total, 55) {
                static_array(7, 1, ItemQuality) {
                    number 8, true, nil, BooleanEnum
                }
            }
        }
    }
    field(:leather, 852) {
        compound(:StockpileSettings_TLeather) {
            field(:mats, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
        }
    }
    field(:cloth, 868) {
        compound(:StockpileSettings_TCloth) {
            field(:thread_silk, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:thread_plant, 16) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:thread_yarn, 32) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:thread_metal, 48) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:cloth_silk, 64) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:cloth_plant, 80) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:cloth_yarn, 96) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:cloth_metal, 112) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
        }
    }
    field(:wood, 996) {
        compound(:StockpileSettings_TWood) {
            field(:mats, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
        }
    }
    field(:weapons, 1012) {
        compound(:StockpileSettings_TWeapons) {
            field(:weapon_type, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:trapcomp_type, 16) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:other_mats, 32) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:mats, 48) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:quality_core, 64) {
                static_array(7, 1, ItemQuality) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:quality_total, 71) {
                static_array(7, 1, ItemQuality) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:usable, 78) {
                number 8, true, nil, BooleanEnum
            }
            field(:unusable, 79) {
                number 8, true, nil, BooleanEnum
            }
        }
    }
    field(:armor, 1092) {
        compound(:StockpileSettings_TArmor) {
            field(:body, 0) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:head, 16) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:feet, 32) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:hands, 48) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:legs, 64) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:shield, 80) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:other_mats, 96) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:mats, 112) {
                stl_vector(1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:quality_core, 128) {
                static_array(7, 1, ItemQuality) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:quality_total, 135) {
                static_array(7, 1, ItemQuality) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:usable, 142) {
                number 8, true, nil, BooleanEnum
            }
            field(:unusable, 143) {
                number 8, true, nil, BooleanEnum
            }
        }
    }
    field(:allow_organic, 1236) {
        number 8, true, 1, BooleanEnum
    }
    field(:allow_inorganic, 1237) {
        number 8, true, 1, BooleanEnum
    }
end

class StopDepartCondition < MemHack::Compound
    sizeof 68

    field(:timeout, 0) {
        number 32, true
    }
    field(:direction, 4) {
        class ::DFHack::StopDepartCondition_TDirection < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :North ; NUME[:North] = 0
            ENUM[1] = :South ; NUME[:South] = 1
            ENUM[2] = :East ; NUME[:East] = 2
            ENUM[3] = :West ; NUME[:West] = 3
        end

        number 32, true, nil, StopDepartCondition_TDirection
    }
    field(:mode, 8) {
        class ::DFHack::StopDepartCondition_TMode < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :Push ; NUME[:Push] = 0
            ENUM[1] = :Ride ; NUME[:Ride] = 1
            ENUM[2] = :Guide ; NUME[:Guide] = 2
        end

        number 32, true, nil, StopDepartCondition_TMode
    }
    field(:load_percent, 12) {
        number 32, true
    }
    field(:flags, 16) {
        compound(:StopDepartCondition_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:at_most, 0) { bit 0 }
            field(:desired, 0) { bit 1 }
        }
    }
    field(:guide_path, 20) {
        global :CoordPath
    }
end

class Syndrome < MemHack::Compound
    sizeof 164

    field(:syn_name, 0) {
        stl_string
    }
    field(:ce, 28) {
        stl_vector(4) {
            pointer {
                global :CreatureInteractionEffect
            }
        }
    }
    field(:syn_affected_class, 44) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:syn_affected_creature, 60) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:syn_affected_caste, 76) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:syn_immune_class, 92) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:syn_immune_creature, 108) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:syn_immune_caste, 124) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:syn_class, 140) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:flags, 156) {
        global :SyndromeFlags
    }
    field(:id, 160) {
        number 32, true
    }
end

class SyndromeFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:SYN_INJECTED, 0) { bit 0 }
    field(:SYN_CONTACT, 0) { bit 1 }
    field(:SYN_INHALED, 0) { bit 2 }
    field(:SYN_INGESTED, 0) { bit 4 }
end

class TalkChoice < MemHack::Compound
    sizeof 28

    field(:type, 0) {
        number 32, true, nil, TalkChoiceType
    }
    field(:anon_1, 4) {
        number 32, true
    }
    field(:anon_2, 8) {
        number 32, true
    }
    field(:anon_3, 12) {
        number 32, true
    }
    field(:anon_4, 16) {
        number 32, true
    }
    field(:anon_5, 20) {
        number 32, true
    }
    field(:anon_6, 24) {
        number 32, true, -1
    }
end

class Temperaturest < MemHack::Compound
    sizeof 4

    field(:whole, 0) {
        number 16, false, 10050
    }
    field(:fraction, 2) {
        number 16, true
    }
end

class TextureHandler < MemHack::Compound
    sizeof 48

    field(:page, 0) {
        stl_vector(4) {
            pointer {
                global :TilePage
            }
        }
    }
    field(:texpos, 16) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:datapos, 32) {
        stl_vector(4) {
            number 32, true
        }
    }
end

class TileBitmask < MemHack::Compound
    sizeof 32

    field(:bits, 0) {
        static_array(16, 2) {
            number 16, false
        }
    }
end

class TileDesignation < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:flow_size, 0) { bits 0, 3 }
    field(:pile, 0) { bit 3 }
    field(:dig, 0) { bits 4, 3, TileDigDesignation }
    field(:smooth, 0) { bits 7, 2 }
    field(:hidden, 0) { bit 9 }
    field(:geolayer_index, 0) { bits 10, 4 }
    field(:light, 0) { bit 14 }
    field(:subterranean, 0) { bit 15 }
    field(:outside, 0) { bit 16 }
    field(:biome, 0) { bits 17, 4 }
    field(:liquid_type, 0) { bits 21, 1, TileLiquid }
    field(:water_table, 0) { bit 22 }
    field(:rained, 0) { bit 23 }
    field(:traffic, 0) { bits 24, 2, TileTraffic }
    field(:flow_forbid, 0) { bit 26 }
    field(:liquid_static, 0) { bit 27 }
    field(:feature_local, 0) { bit 28 }
    field(:feature_global, 0) { bit 29 }
    field(:water_stagnant, 0) { bit 30 }
    field(:water_salt, 0) { bit 31 }
end

class TileLiquidFlow < MemHack::Compound
    field(:_whole, 0) {
        number 16, false
    }
    field(:temp_flow_timer, 0) { bits 0, 3 }
    field(:unk_1, 0) { bits 3, 3 }
    field(:perm_flow_dir, 0) { bits 6, 4, TileLiquidFlowDir }
    field(:unk_2, 0) { bits 10, 6 }
end

class TileOccupancy < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:building, 0) { bits 0, 3, TileBuildingOcc }
    field(:unit, 0) { bit 3 }
    field(:unit_grounded, 0) { bit 4 }
    field(:item, 0) { bit 5 }
    field(:edge_flow_in, 0) { bit 6 }
    field(:moss, 0) { bit 7 }
    field(:arrow_color, 0) { bits 8, 4 }
    field(:arrow_variant, 0) { bit 12 }
    field(:unk13_noncitizen_unit, 0) { bit 13 }
    field(:monster_lair, 0) { bit 14 }
    field(:no_grow, 0) { bit 15 }
    field(:unk16, 0) { bit 16 }
    field(:unk17, 0) { bit 17 }
    field(:carve_track_north, 0) { bit 18 }
    field(:carve_track_south, 0) { bit 19 }
    field(:carve_track_east, 0) { bit 20 }
    field(:carve_track_west, 0) { bit 21 }
    field(:unk22, 0) { bit 22 }
    field(:unk23, 0) { bit 23 }
    field(:dig_marked, 0) { bit 24 }
    field(:dig_auto, 0) { bit 25 }
end

class TilePage < MemHack::Compound
    sizeof 132

    field(:token, 0) {
        stl_string
    }
    field(:filename, 28) {
        stl_string
    }
    field(:tile_dim_x, 56) {
        number 16, true
    }
    field(:tile_dim_y, 58) {
        number 16, true
    }
    field(:page_dim_x, 60) {
        number 16, true
    }
    field(:page_dim_y, 62) {
        number 16, true
    }
    field(:texpos, 64) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:datapos, 80) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:texpos_gs, 96) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:datapos_gs, 112) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:loaded, 128) {
        number 8, true, nil, BooleanEnum
    }
end

class TimedEvent < MemHack::Compound
    sizeof 24

    field(:type, 0) {
        number 16, true, nil, TimedEventType
    }
    field(:season, 2) {
        number 8, true
    }
    field(:season_ticks, 4) {
        number 16, true
    }
    field(:entity, 8) {
        pointer {
            global :HistoricalEntity
        }
    }
    field(:anon_1, 12) {
        number 16, true
    }
    field(:anon_2, 16) {
        number 32, true
    }
    field(:anon_3, 20) {
        number 16, true
    }
    field(:anon_4, 22) {
        number 16, true
    }
end

class Tissue < MemHack::Compound
    sizeof 288

    field(:id, 0) {
        stl_string
    }
    field(:flags, 28) {
        df_flagarray(TissueFlags)
    }
    field(:tissue_name_singular, 36) {
        stl_string
    }
    field(:tissue_name_plural, 64) {
        stl_string
    }
    field(:tissue_material_str, 92) {
        static_array(3, 28) {
            stl_string
        }
    }
    field(:mat_type, 176) {
        number 16, true, -1
    }
    field(:mat_index, 180) {
        number 32, true
    }
    field(:relative_thickness, 184) {
        number 32, true
    }
    field(:healing_rate, 188) {
        number 32, true
    }
    field(:vascular, 192) {
        number 32, true
    }
    field(:pain_receptors, 196) {
        number 32, true
    }
    field(:tissue_shape, 200) {
        number 16, true
    }
    field(:unk1, 204) {
        number 32, true, -1
    }
    field(:insulation, 208) {
        number 16, true
    }
    field(:subordinate_to_tissue, 212) {
        stl_string
    }
    field(:parent_tissue, 240) {
        number 32, true, -1
    }
    field(:tissue_mat_state, 244) {
        number 16, true, nil, MatterState
    }
    field(:heatdam_point, 246) {
        number 16, false
    }
    field(:colddam_point, 248) {
        number 16, false
    }
    field(:ignite_point, 250) {
        number 16, false
    }
    field(:melting_point, 252) {
        number 16, false
    }
    field(:boiling_point, 254) {
        number 16, false
    }
    field(:spec_heat, 256) {
        number 16, false
    }
    field(:tissue_shape_str, 260) {
        stl_string
    }
end

class TissueStyleRaw < MemHack::Compound
    sizeof 128

    field(:token, 0) {
        stl_string
    }
    field(:part_idx, 28) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:layer_idx, 44) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:styles, 60) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:list_idx, 76) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    field(:id, 92) {
        number 32, true
    }
    field(:noun, 96) {
        stl_string
    }
    field(:word_type, 124) {
        number 16, true, nil, PartOfSpeech
    }
end

class TissueTemplate < MemHack::Compound
    sizeof 272

    field(:id, 0) {
        stl_string
    }
    field(:flags, 28) {
        df_flagarray(TissueFlags)
    }
    field(:tissue_name_singular, 36) {
        stl_string
    }
    field(:tissue_name_plural, 64) {
        stl_string
    }
    field(:tissue_material_str, 92) {
        static_array(3, 28) {
            stl_string
        }
    }
    field(:mat_type, 176) {
        number 16, true, -1
    }
    field(:mat_index, 180) {
        number 32, true
    }
    field(:relative_thickness, 184) {
        number 32, true
    }
    field(:healing_rate, 188) {
        number 32, true
    }
    field(:vascular, 192) {
        number 32, true
    }
    field(:pain_receptors, 196) {
        number 32, true
    }
    field(:tissue_shape, 200) {
        number 16, true
    }
    field(:unk1, 204) {
        number 32, true, -1
    }
    field(:insulation, 208) {
        number 16, true
    }
    field(:subordinate_to_tissue, 212) {
        stl_string
    }
    field(:tissue_mat_state, 240) {
        number 16, true, nil, MatterState
    }
    field(:tissue_shape_str, 244) {
        stl_string
    }
end

class TrainingAssignment < MemHack::Compound
    sizeof 12

    field(:animal_id, 0) {
        number 32, true, -1
    }
    def animal_tg ; df.world.units.all.binsearch(animal_id) ; end
    field(:trainer_id, 4) {
        number 32, true, -1
    }
    def trainer_tg ; df.world.units.all.binsearch(trainer_id) ; end
    field(:auto_mode, 8) {
        class ::DFHack::TrainingAssignment_TAutoMode < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :None ; NUME[:None] = 0
            ENUM[1] = :Any ; NUME[:Any] = 1
            ENUM[2] = :AnyUnassigned ; NUME[:AnyUnassigned] = 2
        end

        number 32, true, nil, TrainingAssignment_TAutoMode
    }
end

class Ui < MemHack::Compound
    sizeof 31044

    field(:game_state, 0) {
        number 16, true
    }
    field(:lost_to_siege_civ, 4) {
        number 32, true, -1
    }
    def lost_to_siege_civ_tg ; df.world.entities.all.binsearch(lost_to_siege_civ) ; end
    field(:tax_collection, 8) {
        compound(:Ui_TTaxCollection) {
            field(:state, 0) {
                number 16, true
            }
            field(:check_timer, 4) {
                number 32, true
            }
            field(:rooms, 8) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def rooms_tg ; rooms.map { |i| df.world.buildings.all.binsearch(i) } ; end
            field(:reach_room_timer, 24) {
                number 32, true
            }
            field(:tc_protect_timer, 28) {
                number 32, true
            }
            field(:guard1_reach_tc_timer, 32) {
                number 32, true
            }
            field(:guard2_reach_tc_timer, 36) {
                number 32, true
            }
            field(:collected, 40) {
                number 16, true
            }
            field(:quota, 42) {
                number 16, true
            }
            field(:collector_pos, 44) {
                global :Coord
            }
            field(:guard_pos_x, 50) {
                static_array(2, 2) {
                    number 16, true
                }
            }
            field(:guard_pos_y, 54) {
                static_array(2, 2) {
                    number 16, true
                }
            }
            field(:guard_pos_z, 58) {
                static_array(2, 2) {
                    number 16, true
                }
            }
            field(:collector, 64) {
                pointer {
                    global :Unit
                }
            }
            field(:guard1, 68) {
                pointer {
                    global :Unit
                }
            }
            field(:guard2, 72) {
                pointer {
                    global :Unit
                }
            }
            field(:guard_lack_complained, 76) {
                number 8, true
            }
        }
    }
    field(:anon_1, 88) {
        number 32, true
    }
    field(:manager_cooldown, 92) {
        number 32, true
    }
    field(:bookkeeper_cooldown, 96) {
        number 32, true
    }
    field(:bookkeeper_precision, 100) {
        number 32, true
    }
    field(:bookkeeper_settings, 104) {
        number 16, true
    }
    field(:caravans, 108) {
        stl_vector(4) {
            pointer {
                global :CaravanState
            }
        }
    }
    field(:anon_2, 124) {
        number 8, true
    }
    field(:fortress_rank, 126) {
        number 16, true
    }
    field(:progress_population, 128) {
        number 16, true
    }
    field(:progress_trade, 130) {
        number 16, true
    }
    field(:progress_production, 132) {
        number 16, true
    }
    field(:king_arrived, 134) {
        number 8, true, nil, BooleanEnum
    }
    field(:king_hasty, 135) {
        number 8, true, nil, BooleanEnum
    }
    field(:economy_active, 136) {
        number 8, true, nil, BooleanEnum
    }
    field(:ignore_labor_shortage, 137) {
        number 8, true, nil, BooleanEnum
    }
    field(:justice_active, 138) {
        number 8, true, nil, BooleanEnum
    }
    field(:anon_3, 140) {
        number 16, false, 60001
    }
    field(:anon_4, 142) {
        number 16, false, 60001
    }
    field(:manager_timer, 144) {
        number 16, true
    }
    field(:becoming_capital, 148) {
        compound(:Ui_TBecomingCapital) {
            field(:desired_architecture, 0) {
                number 32, true
            }
            field(:desired_offerings, 4) {
                number 32, true
            }
        }
    }
    field(:units_killed, 156) {
        static_array(152, 2, Profession) {
            number 16, true
        }
    }
    field(:guild_wages, 460) {
        static_array(6, 4, GuildId) {
            number 32, true
        }
    }
    field(:guild_happiness, 484) {
        static_array(6, 2, GuildId) {
            number 16, true
        }
    }
    field(:labor_slowdown_timer, 496) {
        static_array(6, 2, GuildId) {
            number 16, true
        }
    }
    field(:currency_value, 508) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:trees_removed, 524) {
        number 32, true
    }
    field(:anon_5, 528) {
        number 32, true
    }
    field(:fortress_age, 532) {
        number 32, true
    }
    field(:tasks, 536) {
        global :EntityActivityStatistics
    }
    field(:meeting_requests, 8880) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def meeting_requests_tg ; meeting_requests.map { |i| df.world.units.all.binsearch(i) } ; end
    field(:activities, 8896) {
        stl_vector(4) {
            pointer {
                global :ActivityInfo
            }
        }
    }
    field(:dip_meeting_info, 8912) {
        stl_vector(4) {
            pointer {
                global :MeetingDiplomatInfo
            }
        }
    }
    field(:aid_requesters, 8928) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def aid_requesters_tg ; aid_requesters.map { |i| df.world.units.all.binsearch(i) } ; end
    field(:game_over, 8944) {
        number 8, true, nil, BooleanEnum
    }
    field(:invasions, 8948) {
        compound(:Ui_TInvasions) {
            field(:list, 0) {
                stl_vector(4) {
                    pointer {
                        global :InvasionInfo
                    }
                }
            }
            field(:next_id, 16) {
                number 32, true
            }
        }
    }
    field(:crimes, 8968) {
        stl_vector
    }
    field(:punishments, 8984) {
        stl_vector(4) {
            pointer {
                global :Punishment
            }
        }
    }
    field(:parties, 9000) {
        stl_vector(4) {
            pointer {
                global :PartyInfo
            }
        }
    }
    field(:room_rent, 9016) {
        stl_vector(4) {
            pointer {
                global :RoomRentInfo
            }
        }
    }
    field(:dipscripts, 9032) {
        stl_vector(4) {
            pointer {
                global :DipscriptInfo
            }
        }
    }
    field(:dipscript_popups, 9048) {
        stl_vector(4) {
            pointer {
                global :DipscriptPopup
            }
        }
    }
    field(:kitchen, 9064) {
        compound(:Ui_TKitchen) {
            field(:item_types, 0) {
                stl_vector(2) {
                    number 16, true, nil, ItemType
                }
            }
            field(:item_subtypes, 16) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            field(:mat_types, 32) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            field(:mat_indices, 48) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:exc_types, 64) {
                stl_vector(1) {
                    number 8, true
                }
            }
        }
    }
    field(:economic_stone, 9144) {
        stl_vector(1) {
            number 8, true, nil, BooleanEnum
        }
    }
    field(:unk23c8_flags, 9160) {
        compound(:Ui_TUnk23c8Flags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:recheck_aid_requests, 0) { bit 1 }
        }
    }
    field(:mood_cooldown, 9164) {
        number 16, true
    }
    field(:civ_id, 9168) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ_id) ; end
    field(:site_id, 9172) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
    field(:group_id, 9176) {
        number 32, true, -1
    }
    def group_tg ; df.world.entities.all.binsearch(group_id) ; end
    field(:race_id, 9180) {
        number 16, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race_id] ; end
    field(:farm_crops, 9184) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    def farm_crops_tg ; farm_crops.map { |i| df.world.raws.plants.all[i] } ; end
    field(:farm_seasons, 9200) {
        stl_vector(1) {
            number 8, true
        }
    }
    field(:economy_prices, 9216) {
        compound(:Ui_TEconomyPrices) {
            field(:price_adjustment, 0) {
                compound(:Ui_TEconomyPrices_TPriceAdjustment) {
                    field(:general_items, 0) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:weapons, 16) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:armor, 32) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:handwear, 48) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:footwear, 64) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:headwear, 80) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:legwear, 96) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:prepared_food, 112) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:wood, 128) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:thread_cloth, 144) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:bone, 160) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:tooth, 176) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:horn, 192) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:pearl, 208) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:shell, 224) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:leather, 240) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:silk, 256) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:yarn, 272) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:inorganic, 288) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:meat, 304) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:fish, 320) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:plants, 336) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:drinks, 352) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:extract_animal, 368) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:extract_plant, 384) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:mill_animal, 400) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:mill_plant, 416) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:cheese_animal, 432) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:cheese_plant, 448) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:pets, 464) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                }
            }
            field(:price_setter, 480) {
                compound(:Ui_TEconomyPrices_TPriceSetter) {
                    field(:general_items, 0) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:weapons, 16) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:armor, 32) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:handwear, 48) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:footwear, 64) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:headwear, 80) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:legwear, 96) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:prepared_food, 112) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:wood, 128) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:thread_cloth, 144) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:bone, 160) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:tooth, 176) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:horn, 192) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:pearl, 208) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:shell, 224) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:leather, 240) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:silk, 256) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:yarn, 272) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:inorganic, 288) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:meat, 304) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:fish, 320) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:plants, 336) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:drinks, 352) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:extract_animal, 368) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:extract_plant, 384) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:mill_animal, 400) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:mill_plant, 416) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:cheese_animal, 432) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:cheese_plant, 448) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                    field(:pets, 464) {
                        stl_vector(4) {
                            pointer {
                                global :Unit
                            }
                        }
                    }
                }
            }
        }
    }
    field(:stockpile, 10176) {
        compound(:Ui_TStockpile) {
            field(:reserved_bins, 0) {
                number 32, true
            }
            field(:reserved_barrels, 4) {
                number 32, true
            }
            field(:custom_settings, 8) {
                global :StockpileSettings
            }
        }
    }
    field(:unk2a8c, 11424) {
        static_array(4, 3072) {
            static_array(768, 4) {
                compound(:Ui_TUnk2a8c) {
                    field(:unk1, 0) {
                        number 16, true
                    }
                    field(:unk2, 2) {
                        number 16, true
                    }
                }
            }
        }
    }
    field(:unk_mapedge_x, 23712) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:unk_mapedge_y, 23728) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:unk_mapedge_z, 23744) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:map_edge, 23760) {
        compound(:Ui_TMapEdge) {
            field(:layer_x, 0) {
                static_array(5, 16) {
                    stl_vector(2) {
                        number 16, true
                    }
                }
            }
            field(:surface_x, 80) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:layer_y, 96) {
                static_array(5, 16) {
                    stl_vector(2) {
                        number 16, true
                    }
                }
            }
            field(:surface_y, 176) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:layer_z, 192) {
                static_array(5, 16) {
                    stl_vector(2) {
                        number 16, true
                    }
                }
            }
            field(:surface_z, 272) {
                stl_vector(2) {
                    number 16, true
                }
            }
        }
    }
    field(:unk5b88, 24048) {
        static_array(7, 16) {
            stl_vector
        }
    }
    field(:waypoints, 24160) {
        compound(:Ui_TWaypoints) {
            field(:points, 0) {
                stl_vector(4) {
                    pointer {
                        compound(:Ui_TWaypoints_TPoints) {
                            sizeof 76

                            field(:id, 0) {
                                number 32, true
                            }
                            field(:tile, 4) {
                                number 8, false
                            }
                            field(:fg_color, 6) {
                                number 16, true
                            }
                            field(:bg_color, 8) {
                                number 16, true
                            }
                            field(:name, 12) {
                                stl_string
                            }
                            field(:comment, 40) {
                                stl_string
                            }
                            field(:pos, 68) {
                                global :Coord
                            }
                        }
                    }
                }
            }
            field(:routes, 16) {
                stl_vector(4) {
                    pointer {
                        compound(:Ui_TWaypoints_TRoutes) {
                            sizeof 48

                            field(:id, 0) {
                                number 32, true
                            }
                            field(:name, 4) {
                                stl_string
                            }
                            field(:points, 32) {
                                stl_vector(4) {
                                    number 32, true
                                }
                            }
                        }
                    }
                }
            }
            field(:sym_selector, 32) {
                number 16, true
            }
            field(:anon_1, 34) {
                number 16, true
            }
            field(:cur_point_index, 36) {
                number 32, true
            }
            field(:in_edit_name_mode, 40) {
                number 8, true, nil, BooleanEnum
            }
            field(:anon_2, 41) {
                number 8, true
            }
            field(:sym_tile, 42) {
                number 8, false
            }
            field(:sym_fg_color, 44) {
                number 16, true
            }
            field(:sym_bg_color, 46) {
                number 16, true
            }
            field(:unk5c04, 48) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:next_point_id, 64) {
                number 32, true
            }
            field(:next_route_id, 68) {
                number 32, true
            }
            field(:sel_route_idx, 72) {
                number 32, true
            }
            field(:sel_route_waypt_idx, 76) {
                number 32, true
            }
            field(:in_edit_waypts_mode, 80) {
                number 8, true, nil, BooleanEnum
            }
        }
    }
    field(:burrows, 24244) {
        compound(:Ui_TBurrows) {
            field(:list, 0) {
                stl_vector(4) {
                    pointer {
                        global :Burrow
                    }
                }
            }
            field(:next_id, 16) {
                number 32, true
            }
            field(:sel_index, 20) {
                number 32, true, -1
            }
            field(:sel_id, 24) {
                number 32, true, -1
            }
            def sel_tg ; df.ui.burrows.list.binsearch(sel_id) ; end
            field(:in_confirm_delete, 28) {
                number 8, true, nil, BooleanEnum
            }
            field(:in_add_units_mode, 29) {
                number 8, true, nil, BooleanEnum
            }
            field(:list_units, 32) {
                stl_vector(4) {
                    pointer {
                        global :Unit
                    }
                }
            }
            field(:sel_units, 48) {
                stl_bit_vector
            }
            field(:unit_cursor_pos, 68) {
                number 32, true
            }
            field(:in_define_mode, 72) {
                number 8, true, nil, BooleanEnum
            }
            field(:rect_start, 74) {
                global :Coord
            }
            field(:brush_mode, 80) {
                number 16, true
            }
            field(:in_edit_name_mode, 82) {
                number 8, true, nil, BooleanEnum
            }
            field(:sym_selector, 84) {
                number 16, true
            }
            field(:sym_tile, 86) {
                number 16, true
            }
            field(:sym_fg_color, 88) {
                number 16, true
            }
            field(:sym_bg_color, 90) {
                number 16, true
            }
        }
    }
    field(:alerts, 24336) {
        compound(:Ui_TAlerts) {
            field(:list, 0) {
                stl_vector(4) {
                    pointer {
                        compound(:Ui_TAlerts_TList) {
                            sizeof 48

                            field(:id, 0) {
                                number 32, true
                            }
                            field(:name, 4) {
                                stl_string
                            }
                            field(:burrows, 32) {
                                stl_vector(4) {
                                    number 32, true, -1
                                }
                            }
                            def burrows_tg ; burrows.map { |i| df.ui.burrows.list.binsearch(i) } ; end
                        }
                    }
                }
            }
            field(:next_id, 16) {
                number 32, true
            }
            field(:civ_alert_idx, 20) {
                number 32, true, -1
            }
        }
    }
    field(:equipment, 24360) {
        compound(:Ui_TEquipment) {
            field(:items_by_type1, 0) {
                static_array(112, 16, ItemType) {
                    stl_vector(4) {
                        pointer {
                            global :Item
                        }
                    }
                }
            }
            field(:items_unassigned, 1792) {
                static_array(112, 16, ItemType) {
                    stl_vector(4) {
                        pointer {
                            global :Item
                        }
                    }
                }
            }
            field(:items_assigned, 3584) {
                static_array(112, 16, ItemType) {
                    stl_vector(4) {
                        pointer {
                            global :Item
                        }
                    }
                }
            }
            field(:update, 5376) {
                compound(:Ui_TEquipment_TUpdate) {
                    field(:_whole, 0) {
                        number 32, true
                    }
                    field(:weapon, 0) { bit 0 }
                    field(:armor, 0) { bit 1 }
                    field(:shoes, 0) { bit 2 }
                    field(:shield, 0) { bit 3 }
                    field(:helm, 0) { bit 4 }
                    field(:gloves, 0) { bit 5 }
                    field(:ammo, 0) { bit 6 }
                    field(:pants, 0) { bit 7 }
                    field(:backpack, 0) { bit 8 }
                    field(:quiver, 0) { bit 9 }
                    field(:flask, 0) { bit 10 }
                    field(:buildings, 0) { bit 12 }
                }
            }
            field(:work_weapons, 5380) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def work_weapons_tg ; work_weapons.map { |i| df.world.items.all.binsearch(i) } ; end
            field(:work_units, 5396) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def work_units_tg ; work_units.map { |i| df.world.units.all.binsearch(i) } ; end
            field(:hunter_ammunition, 5412) {
                stl_vector(4) {
                    pointer {
                        global :SquadAmmoSpec
                    }
                }
            }
            field(:ammo_items, 5428) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def ammo_items_tg ; ammo_items.map { |i| df.world.items.all.binsearch(i) } ; end
            field(:ammo_units, 5444) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def ammo_units_tg ; ammo_units.map { |i| df.world.units.all.binsearch(i) } ; end
            field(:training_assignments, 5460) {
                stl_vector(4) {
                    pointer {
                        global :TrainingAssignment
                    }
                }
            }
        }
    }
    field(:hauling, 29836) {
        compound(:Ui_THauling) {
            field(:routes, 0) {
                stl_vector(4) {
                    pointer {
                        global :HaulingRoute
                    }
                }
            }
            field(:next_id, 16) {
                number 32, true
            }
            field(:view_routes, 20) {
                stl_vector(4) {
                    pointer {
                        global :HaulingRoute
                    }
                }
            }
            field(:view_stops, 36) {
                stl_vector(4) {
                    pointer {
                        global :HaulingStop
                    }
                }
            }
            field(:view_bad, 52) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:cursor_top, 68) {
                number 32, true
            }
            field(:in_stop, 72) {
                number 8, true, nil, BooleanEnum
            }
            field(:cursor_stop, 76) {
                number 32, true
            }
            field(:stop_conditions, 80) {
                stl_vector(4) {
                    pointer {
                        global :StopDepartCondition
                    }
                }
            }
            field(:stop_links, 96) {
                stl_vector(4) {
                    pointer {
                        global :RouteStockpileLink
                    }
                }
            }
            field(:in_advanced_cond, 112) {
                number 8, true, nil, BooleanEnum
            }
            field(:in_assign_vehicle, 113) {
                number 8, true, nil, BooleanEnum
            }
            field(:cursor_vehicle, 116) {
                number 32, true
            }
            field(:vehicles, 120) {
                stl_vector(4) {
                    pointer {
                        global :Vehicle
                    }
                }
            }
            field(:in_name, 136) {
                number 8, true, nil, BooleanEnum
            }
            field(:old_name, 140) {
                stl_string
            }
        }
    }
    field(:main, 30004) {
        compound(:Ui_TMain) {
            field(:hotkeys, 0) {
                static_array(16, 48) {
                    global :UiHotkey
                }
            }
            field(:traffic_cost_high, 768) {
                number 32, true
            }
            field(:traffic_cost_normal, 772) {
                number 32, true
            }
            field(:traffic_cost_low, 776) {
                number 32, true
            }
            field(:traffic_cost_restricted, 780) {
                number 32, true
            }
            field(:dead_citizens, 784) {
                stl_vector(4) {
                    pointer {
                        compound(:Ui_TMain_TDeadCitizens) {
                            sizeof 24

                            field(:unit_id, 0) {
                                number 32, true, -1
                            }
                            def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
                            field(:histfig_id, 4) {
                                number 32, true, -1
                            }
                            def histfig_tg ; df.world.history.figures.binsearch(histfig_id) ; end
                            field(:death_year, 8) {
                                number 32, true
                            }
                            field(:death_time, 12) {
                                number 32, true
                            }
                            field(:timer, 16) {
                                number 32, true
                            }
                            field(:ghost_type, 20) {
                                number 16, true, nil, GhostType
                            }
                        }
                    }
                }
            }
            field(:fortress_entity, 800) {
                pointer {
                    global :HistoricalEntity
                }
            }
            field(:mode, 804) {
                number 16, true, nil, UiSidebarMode
            }
            field(:unk1, 806) {
                number 16, true
            }
            field(:selected_traffic_cost, 808) {
                number 16, true
            }
            field(:autosave_request, 810) {
                number 8, true, nil, BooleanEnum
            }
            field(:autosave_unk, 811) {
                number 8, true, nil, BooleanEnum
            }
            field(:unk6df4, 812) {
                number 32, true
            }
            field(:selected_hotkey, 816) {
                number 16, true
            }
            field(:in_rename_hotkey, 818) {
                number 8, true, nil, BooleanEnum
            }
        }
    }
    field(:squads, 30824) {
        compound(:Ui_TSquads) {
            field(:list, 0) {
                stl_vector(4) {
                    pointer {
                        global :Squad
                    }
                }
            }
            field(:unk6e08, 16) {
                stl_vector
            }
            field(:sel_squads, 32) {
                stl_bit_vector
            }
            field(:indiv_selected, 52) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def indiv_selected_tg ; indiv_selected.map { |i| df.world.history.figures.binsearch(i) } ; end
            field(:in_select_indiv, 68) {
                number 8, true, nil, BooleanEnum
            }
            field(:sel_indiv_squad, 72) {
                number 32, true, -1
            }
            field(:anon_1, 76) {
            }
            field(:unk48, 84) {
                number 32, true
            }
            field(:unk4c, 88) {
                pointer {
                    global :Squad
                }
            }
            field(:in_move_order, 92) {
                number 8, true, nil, BooleanEnum
            }
            field(:point_list_scroll, 96) {
                number 32, true
            }
            field(:in_kill_order, 100) {
                number 8, true, nil, BooleanEnum
            }
            field(:kill_rect_targets, 104) {
                stl_vector(4) {
                    pointer {
                        global :Unit
                    }
                }
            }
            field(:anon_2, 120) {
            }
            field(:in_kill_list, 124) {
                number 8, true, nil, BooleanEnum
            }
            field(:kill_targets, 128) {
                stl_vector(4) {
                    pointer {
                        global :Unit
                    }
                }
            }
            field(:sel_kill_targets, 144) {
                stl_bit_vector
            }
            field(:anon_3, 164) {
            }
            field(:in_kill_rect, 168) {
                number 8, true, nil, BooleanEnum
            }
            field(:rect_start, 170) {
                global :Coord
            }
        }
    }
    field(:follow_unit, 31000) {
        number 32, true, -1
    }
    def follow_unit_tg ; df.world.units.all.binsearch(follow_unit) ; end
    field(:follow_item, 31004) {
        number 32, true, -1
    }
    def follow_item_tg ; df.world.items.all.binsearch(follow_item) ; end
    field(:selected_farm_crops, 31008) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    def selected_farm_crops_tg ; selected_farm_crops.map { |i| df.world.raws.plants.all[i] } ; end
    field(:available_seeds, 31024) {
        stl_bit_vector
    }
end

class UiAdvmode < MemHack::Compound
    sizeof 16056

    field(:menu, 0) {
        number 16, true, nil, UiAdvmodeMenu
    }
    field(:anon_1, 2) {
        number 8, true
    }
    field(:anon_2, 4) {
        number 32, true
    }
    field(:anon_3, 8) {
        number 32, true
    }
    field(:anon_4, 12) {
        number 32, true
    }
    field(:travel_clouds, 16) {
        number 8, true, nil, BooleanEnum
    }
    field(:travel_right_map, 17) {
        class ::DFHack::UiAdvmode_TTravelRightMap < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :MapNone ; NUME[:MapNone] = 0
            ENUM[1] = :MapSite ; NUME[:MapSite] = 1
            ENUM[2] = :MapWorld ; NUME[:MapWorld] = 2
        end

        number 8, true, nil, UiAdvmode_TTravelRightMap
    }
    field(:unk4a, 18) {
        number 8, true
    }
    field(:travel_not_moved, 19) {
        number 8, true, nil, BooleanEnum
    }
    field(:unk4b, 20) {
        number 8, true
    }
    field(:travel_move_countdown, 21) {
        number 8, false
    }
    field(:tick_counter, 24) {
        number 32, true
    }
    field(:frame_counter, 28) {
        number 32, true
    }
    field(:unk6, 32) {
        number 16, true
    }
    field(:sleeping, 34) {
        number 8, true, nil, BooleanEnum
    }
    field(:anon_5, 35) {
        number 8, true
    }
    field(:bogeymen_timer, 36) {
        number 32, true
    }
    field(:bogeymen_killed, 40) {
        number 32, true
    }
    field(:unk9, 44) {
        number 32, true
    }
    field(:unk10, 48) {
        number 32, true
    }
    field(:searched_x, 52) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:searched_y, 68) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:searched_z, 84) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:searched_timeout, 100) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_6, 116) {
        number 8, true
    }
    field(:anon_7, 120) {
        number 32, true
    }
    field(:anon_8, 124) {
        number 32, true
    }
    field(:anon_9, 128) {
        number 32, true
    }
    field(:anon_10, 132) {
        number 8, true
    }
    field(:unk20, 136) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def unk20_tg ; unk20.map { |i| df.world.world_data.sites.binsearch(i) } ; end
    field(:unk21, 152) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk22, 168) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_11, 184) {
        number 32, true
    }
    field(:anon_12, 188) {
        number 32, true
    }
    field(:anon_13, 192) {
        number 8, true
    }
    field(:anon_14, 196) {
        static_array(1000, 4) {
            number 32, true
        }
    }
    field(:anon_15, 4196) {
        static_array(1000, 4) {
            number 32, true
        }
    }
    field(:anon_16, 8196) {
        static_array(1000, 4) {
            number 32, true
        }
    }
    field(:anon_17, 12196) {
        number 32, true
    }
    field(:anon_18, 12200) {
        number 32, true
    }
    field(:anon_19, 12204) {
        number 32, true
    }
    field(:anon_20, 12208) {
        static_array(9, 2) {
            number 16, true
        }
    }
    field(:anon_21, 12226) {
        static_array(9, 2) {
            number 16, true
        }
    }
    field(:anon_22, 12244) {
        static_array(9, 2) {
            number 16, true
        }
    }
    field(:unk_v40_1, 12264) {
        static_array(9, 16) {
            compound(:UiAdvmode_TUnkV401) {
                field(:anon_1, 0) {
                    number 16, true
                }
                field(:anon_2, 2) {
                    number 8, true
                }
                field(:anon_3, 4) {
                    number 32, true
                }
                field(:anon_4, 8) {
                    number 32, true
                }
                field(:anon_5, 12) {
                    number 32, true
                }
            }
        }
    }
    field(:anon_23, 12408) {
        static_array(9, 1) {
            number 8, true
        }
    }
    field(:anon_24, 12417) {
        static_array(9, 1) {
            number 8, true
        }
    }
    field(:anon_25, 12428) {
        static_array(9, 4) {
            number 32, true
        }
    }
    field(:anon_26, 12464) {
        static_array(9, 1) {
            number 8, true
        }
    }
    field(:anon_27, 12476) {
        number 32, true
    }
    field(:anon_28, 12480) {
        number 32, true
    }
    field(:anon_29, 12484) {
        number 8, true
    }
    field(:anon_30, 12488) {
        number 32, true
    }
    field(:anon_31, 12492) {
        number 32, true
    }
    field(:anon_32, 12496) {
        number 8, true
    }
    field(:anon_33, 12500) {
        number 32, true
    }
    field(:anon_34, 12504) {
        number 32, true
    }
    field(:anon_35, 12508) {
        number 32, true
    }
    field(:anon_36, 12512) {
        number 32, true
    }
    field(:anon_37, 12516) {
        number 8, true
    }
    field(:anon_38, 12520) {
        number 32, true
    }
    field(:anon_39, 12524) {
        number 32, true
    }
    field(:anon_40, 12528) {
        number 32, true
    }
    field(:unk_30d8, 12532) {
        stl_vector
    }
    field(:anon_41, 12548) {
        number 32, true
    }
    field(:anon_42, 12552) {
        number 8, true
    }
    field(:unk23, 12554) {
        number 16, true
    }
    field(:unk24, 12556) {
        number 16, true
    }
    field(:unk25, 12558) {
        number 16, true
    }
    field(:unk26, 12560) {
        number 16, true
    }
    field(:player_id, 12564) {
        number 32, true, -1
    }
    def player_tg ; df.world.nemesis.all[player_id] ; end
    field(:anon_43, 12568) {
        number 16, true
    }
    field(:anon_44, 12570) {
        number 16, true
    }
    field(:anon_45, 12572) {
        number 16, true
    }
    field(:anon_46, 12576) {
        number 32, true
    }
    field(:conversation, 12580) {
        compound(:UiAdvmode_TConversation) {
            field(:activity, 0) {
                stl_vector(4) {
                    pointer {
                        global :ActivityEntry
                    }
                }
            }
            field(:activity_event, 16) {
                stl_vector(4) {
                    pointer {
                        global :ActivityEvent
                    }
                }
            }
            field(:cursor_activity, 32) {
                number 32, true, -1
            }
            field(:cursor_choice, 36) {
                number 32, true, -1
            }
            field(:unk4, 40) {
                number 32, true
            }
            field(:unk5, 44) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:unk6, 60) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:choices, 76) {
                stl_vector(4) {
                    pointer {
                        compound(:UiAdvmode_TConversation_TChoices) {
                            sizeof 44

                            field(:choice, 0) {
                                pointer {
                                    global :TalkChoice
                                }
                            }
                            field(:keywords, 4) {
                                stl_vector(4) {
                                    pointer {
                                        stl_string
                                    }
                                }
                            }
                            field(:title, 20) {
                                stl_vector(4) {
                                    pointer {
                                        stl_string
                                    }
                                }
                            }
                            field(:unk_1c, 36) {
                                number 32, true
                            }
                            field(:unk_20, 40) {
                                number 32, true
                            }
                        }
                    }
                }
            }
            field(:filter, 92) {
                stl_string
            }
            field(:targets, 120) {
                stl_vector(4) {
                    pointer {
                        compound(:UiAdvmode_TConversation_TTargets) {
                            sizeof 12

                            field(:unit_id, 0) {
                                number 32, true, -1
                            }
                            def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
                            field(:histfig_id, 4) {
                                number 32, true, -1
                            }
                            def histfig_tg ; df.world.history.figures.binsearch(histfig_id) ; end
                            field(:unk_8, 8) {
                                number 32, true
                            }
                        }
                    }
                }
            }
            field(:cursor_target, 136) {
                number 32, true, -1
            }
        }
    }
    field(:anon_47, 12720) {
        stl_vector
    }
    field(:anon_48, 12736) {
        number 32, true
    }
    field(:unk28, 12740) {
        stl_vector
    }
    field(:unk29, 12756) {
        stl_vector
    }
    field(:unk30, 12772) {
        stl_vector
    }
    field(:actions, 12788) {
        stl_vector(4) {
            pointer {
                global :AdventureMovementOption
            }
        }
    }
    field(:unk31, 12804) {
        stl_vector
    }
    field(:anon_49, 12820) {
        number 32, true
    }
    field(:anon_50, 12824) {
        number 8, true
    }
    field(:anon_51, 12825) {
        number 8, true
    }
    field(:anon_52, 12826) {
        number 8, true
    }
    field(:anon_53, 12827) {
        number 8, true
    }
    field(:anon_54, 12828) {
        number 8, true
    }
    field(:anon_55, 12829) {
        number 8, true
    }
    field(:anon_56, 12830) {
        number 8, true
    }
    field(:anon_57, 12832) {
        number 32, true
    }
    field(:companions, 12836) {
        compound(:UiAdvmode_TCompanions) {
            field(:unit, 0) {
                stl_vector(4) {
                    pointer {
                        global :Unit
                    }
                }
            }
            field(:unit_visible, 16) {
                stl_bit_vector
            }
            field(:unit_position, 36) {
                global :CoordPath
            }
            field(:all_histfigs, 84) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def all_histfigs_tg ; all_histfigs.map { |i| df.world.history.figures.binsearch(i) } ; end
        }
    }
    field(:unk37, 12936) {
        stl_vector
    }
    field(:unk38, 12952) {
        stl_vector
    }
    field(:unk_1e4, 12968) {
        number 32, true
    }
    field(:unk_1e8, 12972) {
        number 32, true
    }
    field(:unk_1ec, 12976) {
        number 32, true
    }
    field(:unk_1f0, 12980) {
        number 32, true
    }
    field(:unk_1f4, 12984) {
        number 32, true
    }
    field(:unk_1f8, 12988) {
        number 32, true
    }
    field(:unk_1fc, 12992) {
        number 32, true
    }
    field(:unk_200, 12996) {
        number 32, true
    }
    field(:unk39, 13000) {
        stl_string
    }
    field(:unk_220, 13028) {
        number 32, true
    }
    field(:unk_224, 13032) {
        number 32, true
    }
    field(:unk_v40_2, 13036) {
        compound(:UiAdvmode_TUnkV402) {
            field(:anon_1, 0) {
                stl_vector
            }
            field(:anon_2, 16) {
                stl_vector
            }
            field(:anon_3, 32) {
                stl_vector
            }
            field(:anon_4, 48) {
                stl_vector
            }
            field(:anon_5, 64) {
                number 8, true
            }
            field(:anon_6, 68) {
                stl_vector
            }
            field(:anon_7, 84) {
                stl_vector
            }
        }
    }
    field(:unk_v40_3, 13136) {
        compound(:UiAdvmode_TUnkV403) {
            field(:anon_1, 0) {
                number 32, true
            }
            field(:anon_2, 4) {
                stl_vector
            }
        }
    }
    field(:anon_58, 13156) {
        number 32, true
    }
    field(:anon_59, 13160) {
        number 32, true
    }
    field(:anon_60, 13164) {
        number 32, true
    }
    field(:unk_v40_4, 13168) {
        compound(:UiAdvmode_TUnkV404) {
            field(:unk_v40_4a, 0) {
                static_array(100, 28) {
                    compound(:UiAdvmode_TUnkV404_TUnkV404a) {
                        field(:anon_1, 0) {
                            number 32, true
                        }
                        field(:anon_2, 4) {
                            number 16, true
                        }
                        field(:anon_3, 6) {
                            number 16, true
                        }
                        field(:anon_4, 8) {
                            number 16, true
                        }
                        field(:anon_5, 10) {
                            number 16, true
                        }
                        field(:anon_6, 12) {
                            number 16, true
                        }
                        field(:anon_7, 14) {
                            number 16, true
                        }
                        field(:anon_8, 16) {
                            number 16, true
                        }
                        field(:anon_9, 20) {
                            number 32, true
                        }
                        field(:anon_10, 24) {
                            number 32, true
                        }
                    }
                }
            }
            field(:anon_1, 2800) {
                number 32, true
            }
        }
    }
    field(:unk_v40_5, 15972) {
        compound(:UiAdvmode_TUnkV405) {
            field(:anon_1, 0) {
                stl_vector
            }
            field(:anon_2, 16) {
                stl_vector
            }
            field(:anon_3, 32) {
                stl_vector
            }
            field(:anon_4, 48) {
                number 32, true
            }
            field(:anon_5, 52) {
                stl_vector
            }
            field(:anon_6, 68) {
                stl_vector
            }
        }
    }
end

class UiBuildItemReq < MemHack::Compound
    sizeof 272

    field(:filter, 0) {
        global :JobItemFilter
    }
    field(:candidates, 200) {
        stl_vector(4) {
            pointer {
                global :Item
            }
        }
    }
    field(:candidate_selected, 216) {
        stl_vector(1) {
            number 8, true, nil, BooleanEnum
        }
    }
    field(:unk_a0, 232) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:candidate_enabled, 248) {
        stl_vector(1) {
            number 8, true, nil, BooleanEnum
        }
    }
    field(:count_required, 264) {
        number 16, true
    }
    field(:count_max, 266) {
        number 16, true
    }
    field(:count_provided, 268) {
        number 16, true
    }
end

class UiBuildSelector < MemHack::Compound
    sizeof 4012

    field(:requirements, 0) {
        stl_vector(4) {
            pointer {
                global :UiBuildItemReq
            }
        }
    }
    field(:choices, 16) {
        stl_vector(4) {
            pointer {
                global :BuildReqChoicest
            }
        }
    }
    field(:building_type, 32) {
        number 32, true, nil, BuildingType
    }
    field(:building_subtype, 36) {
        number 16, true
    }
    field(:custom_type, 40) {
        number 32, true, -1
    }
    def custom_type_tg ; df.world.raws.buildings.all.binsearch(custom_type) ; end
    field(:stage, 44) {
        number 32, true
    }
    field(:req_index, 48) {
        number 16, true
    }
    field(:sel_index, 50) {
        number 16, true
    }
    field(:is_grouped, 52) {
        number 32, true
    }
    field(:errors, 56) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:unk4, 72) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:tiles, 88) {
        static_array(31, 124) {
            static_array(31, 4) {
                number 32, true
            }
        }
    }
    field(:unk5_0a, 3932) {
        number 16, true
    }
    field(:unk5_0b, 3934) {
        number 16, true
    }
    field(:plate_info, 3936) {
        global :PressurePlateInfo
    }
    field(:unk6, 3960) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:unk7, 3976) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:friction, 3992) {
        number 32, true, 50000
    }
    field(:use_dump, 3996) {
        number 32, true
    }
    field(:dump_x_shift, 4000) {
        number 32, true
    }
    field(:dump_y_shift, 4004) {
        number 32, true
    }
    field(:speed, 4008) {
        number 32, true, 50000
    }
end

class UiHotkey < MemHack::Compound
    sizeof 48

    field(:name, 0) {
        stl_string
    }
    field(:cmd, 28) {
        class ::DFHack::UiHotkey_TCmd < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[-1] = :None ; NUME[:None] = -1
            ENUM[0] = :Zoom ; NUME[:Zoom] = 0
            ENUM[1] = :FollowUnit ; NUME[:FollowUnit] = 1
            ENUM[2] = :FollowItem ; NUME[:FollowItem] = 2
        end

        number 16, true, nil, UiHotkey_TCmd
    }
    field(:x, 32) {
        number 32, true
    }
    field(:y, 36) {
        number 32, true
    }
    field(:z, 40) {
        number 32, true
    }
    field(:unit_id, 44) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
    field(:item_id, 44) {
        number 32, true, -1
    }
    def item_tg ; df.world.items.all.binsearch(item_id) ; end
end

class UiLookList < MemHack::Compound
    sizeof 16

    field(:items, 0) {
        stl_vector(4) {
            pointer {
                compound(:UiLookList_TItems) {
                    sizeof 28

                    field(:type, 0) {
                        class ::DFHack::UiLookList_TItems_TType < MemHack::Enum
                            ENUM = Hash.new
                            NUME = Hash.new
                            ENUM[0] = :Item ; NUME[:Item] = 0
                            ENUM[1] = :Floor ; NUME[:Floor] = 1
                            ENUM[2] = :Unit ; NUME[:Unit] = 2
                            ENUM[3] = :Building ; NUME[:Building] = 3
                            ENUM[4] = :Vermin ; NUME[:Vermin] = 4
                            ENUM[5] = :Flow ; NUME[:Flow] = 5
                            ENUM[6] = :Campfire ; NUME[:Campfire] = 6
                            ENUM[7] = :Spatter ; NUME[:Spatter] = 7
                            ENUM[8] = :BuildingItem ; NUME[:BuildingItem] = 8
                            ENUM[9] = :Fire ; NUME[:Fire] = 9
                            ENUM[10] = :Water ; NUME[:Water] = 10
                            ENUM[11] = :Magma ; NUME[:Magma] = 11
                            ENUM[12] = :Spoor ; NUME[:Spoor] = 12
                        end

                        number 16, true, nil, UiLookList_TItems_TType
                    }
                    field(:spatter_item_type, 2) {
                        number 16, true, nil, ItemType
                    }
                    field(:spatter_item_subtype, 4) {
                        number 16, true, -1
                    }
                    field(:spatter_mat_type, 6) {
                        number 16, true, -1
                    }
                    field(:spatter_mat_index, 8) {
                        number 32, true
                    }
                    field(:spatter_mat_state, 12) {
                        number 16, true, nil, MatterState
                    }
                    field(:item, 16) {
                        pointer {
                            global :Item
                        }
                    }
                    field(:unit, 16) {
                        pointer {
                            global :Unit
                        }
                    }
                    field(:building, 16) {
                        pointer {
                            global :Building
                        }
                    }
                    field(:vermin, 16) {
                        pointer {
                            global :Vermin
                        }
                    }
                    field(:flow, 16) {
                        pointer {
                            global :FlowInfo
                        }
                    }
                    field(:spatter_size, 16) {
                        number 8, true
                    }
                    field(:anon_1, 20) {
                        number 16, true
                    }
                    field(:anon_2, 22) {
                        number 16, true
                    }
                    field(:anon_3, 24) {
                        number 16, true
                    }
                }
            }
        }
    }
end

class UiSidebarMenus < MemHack::Compound
    sizeof 6312

    field(:designation, 0) {
        compound(:UiSidebarMenus_TDesignation) {
            field(:marker_only, 0) {
                number 8, true, nil, BooleanEnum
            }
            field(:priority_set, 1) {
                number 8, true, nil, BooleanEnum
            }
            field(:priority, 4) {
                number 32, true, 4000
            }
            field(:mine_mode, 8) {
                class ::DFHack::UiSidebarMenus_TDesignation_TMineMode < MemHack::Enum
                    ENUM = Hash.new
                    NUME = Hash.new
                    ENUM[0] = :All ; NUME[:All] = 0
                    ENUM[1] = :AutoMine ; NUME[:AutoMine] = 1
                    ENUM[2] = :Economic ; NUME[:Economic] = 2
                    ENUM[3] = :Gems ; NUME[:Gems] = 3
                end

                number 32, true, nil, UiSidebarMenus_TDesignation_TMineMode
            }
        }
    }
    field(:workshop_job, 12) {
        compound(:UiSidebarMenus_TWorkshopJob) {
            field(:choices_all, 0) {
                stl_vector(4) {
                    pointer {
                        global :InterfaceButtonBuildingst
                    }
                }
            }
            field(:choices_visible, 16) {
                stl_vector(4) {
                    pointer {
                        global :InterfaceButtonBuildingst
                    }
                }
            }
            field(:cursor, 32) {
                number 32, true
            }
            field(:category_id, 36) {
                number 32, true
            }
            field(:mat_type, 40) {
                number 16, true, -1
            }
            field(:mat_index, 44) {
                number 32, true
            }
            field(:material_category, 48) {
                global :JobMaterialCategory
            }
        }
    }
    field(:building, 64) {
        compound(:UiSidebarMenus_TBuilding) {
            field(:choices_all, 0) {
                stl_vector(4) {
                    pointer {
                        global :InterfaceButtonConstructionst
                    }
                }
            }
            field(:choices_visible, 16) {
                stl_vector(4) {
                    pointer {
                        global :InterfaceButtonConstructionst
                    }
                }
            }
            field(:category_id, 32) {
                number 32, true
            }
            field(:cursor, 36) {
                number 32, true
            }
        }
    }
    field(:zone, 104) {
        compound(:UiSidebarMenus_TZone) {
            field(:remove, 0) {
                number 8, true, nil, BooleanEnum
            }
            field(:anon_1, 1) {
            }
            field(:mode, 2) {
                class ::DFHack::UiSidebarMenus_TZone_TMode < MemHack::Enum
                    ENUM = Hash.new
                    NUME = Hash.new
                    ENUM[0] = :Rectangle ; NUME[:Rectangle] = 0
                    ENUM[1] = :Flow ; NUME[:Flow] = 1
                    ENUM[2] = :FloorFlow ; NUME[:FloorFlow] = 2
                end

                number 16, true, nil, UiSidebarMenus_TZone_TMode
            }
            field(:selected, 4) {
                pointer {
                    global :BuildingCivzonest
                }
            }
        }
    }
    field(:unit, 112) {
        compound(:UiSidebarMenus_TUnit) {
            field(:inv_items, 0) {
                stl_vector(4) {
                    pointer {
                        global :UnitInventoryItem
                    }
                }
            }
            field(:inv_spatters, 16) {
                stl_vector(4) {
                    pointer {
                        global :Spatter
                    }
                }
            }
            field(:in_new_squad, 32) {
                number 8, true, nil, BooleanEnum
            }
            field(:cursor_uniform, 36) {
                number 32, true
            }
            field(:unk_88n_cursor, 40) {
                number 32, true
            }
            field(:squads, 44) {
                stl_vector(4) {
                    pointer {
                        global :Squad
                    }
                }
            }
            field(:squad_pos, 60) {
                stl_vector(4) {
                    pointer {
                        global :EntityPosition
                    }
                }
            }
            field(:squad_assn, 76) {
                stl_vector(4) {
                    pointer {
                        global :EntityPositionAssignment
                    }
                }
            }
            field(:squad_unk1, 92) {
                stl_bit_vector
            }
            field(:squad_unk2, 112) {
                stl_vector
            }
            field(:anon_1, 128) {
                pointer {
                    global :EntityPosition
                }
            }
            field(:anon_2, 132) {
                pointer {
                    global :EntityPositionAssignment
                }
            }
            field(:anon_3, 136) {
                pointer {
                    global :EntityPosition
                }
            }
            field(:in_squad, 140) {
                number 8, true
            }
            field(:anon_4, 141) {
                number 8, true
            }
            field(:anon_5, 142) {
                number 8, true
            }
            field(:anon_6, 143) {
                number 8, true
            }
            field(:anon_7, 144) {
                number 32, true
            }
            field(:unk_80, 148) {
                number 32, true
            }
            field(:unk_84, 152) {
                number 32, true
            }
            field(:unk_88, 156) {
                number 32, true
            }
            field(:unk_8c, 160) {
                number 32, true
            }
            field(:unk_90, 164) {
                number 32, true
            }
            field(:list, 168) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def list_tg ; df.world.units.active[list] ; end
            field(:unk_a0, 184) {
                number 8, true
            }
            field(:unk_a1, 185) {
                number 8, true
            }
            field(:skills, 188) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            field(:show_combat, 204) {
                number 8, true, nil, BooleanEnum
            }
            field(:show_labor, 205) {
                number 8, true, nil, BooleanEnum
            }
            field(:show_misc, 206) {
                number 8, true, nil, BooleanEnum
            }
        }
    }
    field(:barracks, 320) {
        compound(:UiSidebarMenus_TBarracks) {
            field(:squad_cursor, 0) {
                number 32, true
            }
            field(:squads, 4) {
                stl_vector(4) {
                    pointer {
                        global :Squad
                    }
                }
            }
            field(:uses, 20) {
                stl_vector(4) {
                    global :SquadUseFlags
                }
            }
            field(:in_rename, 36) {
                number 8, true, nil, BooleanEnum
            }
            field(:in_positions, 37) {
                number 8, true, nil, BooleanEnum
            }
            field(:position_squad, 40) {
                pointer {
                    global :Squad
                }
            }
            field(:position_cursor, 44) {
                number 32, true
            }
            field(:in_position_squads, 48) {
                number 8, true, nil, BooleanEnum
            }
            field(:position_squads, 52) {
                stl_vector(4) {
                    pointer {
                        global :Squad
                    }
                }
            }
            field(:position_squad_cursor, 68) {
                number 32, true
            }
        }
    }
    field(:minimap, 392) {
        compound(:UiSidebarMenus_TMinimap) {
            field(:data, 0) {
                static_array(23, 92) {
                    static_array(23, 4) {
                        number 32, true
                    }
                }
            }
            field(:need_render, 2116) {
                number 8, true, nil, BooleanEnum
            }
            field(:need_scan, 2117) {
                number 8, true, nil, BooleanEnum
            }
            field(:z_level, 2118) {
                number 16, true
            }
            field(:tile, 2120) {
                static_array(23, 23) {
                    static_array(23, 1) {
                        number 8, false
                    }
                }
            }
            field(:tile_fg, 2650) {
                static_array(23, 46) {
                    static_array(23, 2) {
                        number 16, true
                    }
                }
            }
            field(:tile_bg, 3708) {
                static_array(23, 46) {
                    static_array(23, 2) {
                        number 16, true
                    }
                }
            }
            field(:tile_bold, 4766) {
                static_array(23, 46) {
                    static_array(23, 2) {
                        number 16, true
                    }
                }
            }
        }
    }
    field(:unk, 6216) {
        compound(:UiSidebarMenus_TUnk) {
            field(:anon_1, 0) {
                stl_string
            }
            field(:anon_2, 28) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:unk_17c0, 44) {
                number 32, true
            }
            field(:unk_17c4, 48) {
                number 32, true
            }
            field(:unk_17c8, 52) {
                number 8, true
            }
            field(:worldgen_param_set, 56) {
                stl_string
            }
            field(:unk_17d0, 84) {
                number 8, true
            }
            field(:num_speech_tokens, 88) {
                number 32, true
            }
            field(:unk_17d8, 92) {
                number 8, true
            }
        }
    }
end

class UiUnitViewMode < MemHack::Compound
    sizeof 4

    field(:value, 0) {
        class ::DFHack::UiUnitViewMode_TValue < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :General ; NUME[:General] = 0
            ENUM[1] = :Inventory ; NUME[:Inventory] = 1
            ENUM[2] = :Preferences ; NUME[:Preferences] = 2
            ENUM[3] = :Wounds ; NUME[:Wounds] = 3
            ENUM[4] = :PrefLabor ; NUME[:PrefLabor] = 4
            ENUM[5] = :PrefDogs ; NUME[:PrefDogs] = 5
        end

        number 32, true, nil, UiUnitViewMode_TValue
    }
end

class UniformFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:replace_clothing, 0) { bit 0 }
    field(:exact_matches, 0) { bit 1 }
end

class UniformIndivChoice < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:any, 0) { bit 0 }
    field(:melee, 0) { bit 1 }
    field(:ranged, 0) { bit 2 }
end

class Unit < MemHack::Compound
    sizeof 3948

    field(:name, 0) {
        global :LanguageName
    }
    field(:custom_profession, 108) {
        stl_string
    }
    field(:profession, 136) {
        number 16, true, :STANDARD, Profession
    }
    field(:profession2, 138) {
        number 16, true, :STANDARD, Profession
    }
    field(:race, 140) {
        number 32, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:pos, 144) {
        global :Coord
    }
    field(:idle_area, 150) {
        global :Coord
    }
    field(:idle_area_threshold, 156) {
        number 32, true, 3
    }
    field(:idle_area_type, 160) {
        number 16, true, nil, UnitStationType
    }
    field(:follow_distance, 164) {
        number 32, true
    }
    field(:path, 168) {
        compound(:Unit_TPath) {
            field(:dest, 0) {
                global :Coord
            }
            field(:goal, 6) {
                number 16, true, nil, UnitPathGoal
            }
            field(:path, 8) {
                global :CoordPath
            }
        }
    }
    field(:flags1, 224) {
        global :UnitFlags1
    }
    field(:flags2, 228) {
        global :UnitFlags2
    }
    field(:flags3, 232) {
        global :UnitFlags3
    }
    field(:meeting, 236) {
        compound(:Unit_TMeeting) {
            field(:state, 0) {
                class ::DFHack::Unit_TMeeting_TState < MemHack::Enum
                    ENUM = Hash.new
                    NUME = Hash.new
                    ENUM[0] = :SelectNoble ; NUME[:SelectNoble] = 0
                    ENUM[1] = :FollowNoble ; NUME[:FollowNoble] = 1
                    ENUM[2] = :DoMeeting ; NUME[:DoMeeting] = 2
                    ENUM[3] = :LeaveMap ; NUME[:LeaveMap] = 3
                end

                number 8, true, nil, Unit_TMeeting_TState
            }
            field(:target_entity, 4) {
                number 32, true, -1
            }
            def target_entity_tg ; df.world.entities.all.binsearch(target_entity) ; end
            field(:target_role, 8) {
                number 16, true, nil, EntityPositionResponsibility
            }
            field(:anon_1, 10) {
            }
        }
    }
    field(:caste, 248) {
        number 16, true, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
    field(:sex, 250) {
        number 8, true, -1
    }
    field(:id, 252) {
        number 32, true
    }
    field(:unk_100, 256) {
        number 16, true
    }
    field(:training_level, 260) {
        number 32, true, :WildUntamed, AnimalTrainingLevel
    }
    field(:schedule_id, 264) {
        number 32, true, -1
    }
    def schedule_tg ; df.world.schedules.all.binsearch(schedule_id) ; end
    field(:civ_id, 268) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ_id) ; end
    field(:population_id, 272) {
        number 32, true, -1
    }
    def population_tg ; df.world.entity_populations.binsearch(population_id) ; end
    field(:unk_c0, 276) {
        number 32, true, -1
    }
    field(:cultural_identity, 280) {
        number 32, true, -1
    }
    def cultural_identity_tg ; df.world.cultural_identities.all.binsearch(cultural_identity) ; end
    field(:invasion_id, 284) {
        number 32, true, -1
    }
    def invasion_tg ; df.ui.invasions.list.binsearch(invasion_id) ; end
    field(:patrol_route, 288) {
        global :CoordPath
    }
    field(:patrol_index, 336) {
        number 32, true
    }
    field(:specific_refs, 340) {
        stl_vector(4) {
            pointer {
                global :SpecificRef
            }
        }
    }
    field(:general_refs, 356) {
        stl_vector(4) {
            pointer {
                global :GeneralRef
            }
        }
    }
    field(:military, 372) {
        compound(:Unit_TMilitary) {
            field(:squad_id, 0) {
                number 32, true, -1
            }
            def squad_tg ; df.world.squads.all.binsearch(squad_id) ; end
            field(:squad_position, 4) {
                number 32, true, -1
            }
            field(:patrol_cooldown, 8) {
                number 32, true
            }
            field(:patrol_timer, 12) {
                number 32, true
            }
            field(:cur_uniform, 16) {
                number 16, true
            }
            field(:unk_items, 20) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def unk_items_tg ; unk_items.map { |i| df.world.items.all.binsearch(i) } ; end
            field(:uniforms, 36) {
                static_array(4, 16) {
                    stl_vector(4) {
                        number 32, true, -1
                    }
                }
            }
            field(:pickup_flags, 100) {
                compound(:Unit_TMilitary_TPickupFlags) {
                    field(:_whole, 0) {
                        number 32, true
                    }
                    field(:update, 0) { bit 0 }
                }
            }
            field(:uniform_pickup, 104) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def uniform_pickup_tg ; uniform_pickup.map { |i| df.world.items.all.binsearch(i) } ; end
            field(:uniform_drop, 120) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def uniform_drop_tg ; uniform_drop.map { |i| df.world.items.all.binsearch(i) } ; end
            field(:individual_drills, 136) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def individual_drills_tg ; individual_drills.map { |i| df.world.activities.all.binsearch(i) } ; end
        }
    }
    field(:anon_1, 524) {
        stl_vector
    }
    field(:anon_2, 540) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_3, 556) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def anon_3_tg ; anon_3.map { |i| df.world.activities.all.binsearch(i) } ; end
    field(:anon_4, 572) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:animal, 588) {
        compound(:Unit_TAnimal) {
            field(:population, 0) {
                global :WorldPopulationRef
            }
            field(:leave_countdown, 24) {
                number 32, true
            }
            field(:vanish_countdown, 28) {
                number 32, true
            }
        }
    }
    field(:opponent, 620) {
        compound(:Unit_TOpponent) {
            field(:unit_id, 0) {
                number 32, true, -1
            }
            def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
            field(:unit_pos, 4) {
                global :Coord
            }
            field(:anon_1, 12) {
                number 32, true
            }
        }
    }
    field(:mood, 636) {
        number 16, true, :None, MoodType
    }
    field(:unk_18e, 638) {
        number 16, true
    }
    field(:relations, 640) {
        compound(:Unit_TRelations) {
            field(:pregnancy_timer, 0) {
                number 32, false
            }
            field(:pregnancy_genes, 4) {
                pointer {
                    global :UnitGenes
                }
            }
            field(:pregnancy_caste, 8) {
                number 16, true, -1
            }
            field(:pregnancy_spouse, 12) {
                number 32, true, -1
            }
            def pregnancy_spouse_tg ; df.world.history.figures.binsearch(pregnancy_spouse) ; end
            field(:mood_copy, 16) {
                number 16, true, :None, MoodType
            }
            field(:ghost_info, 20) {
                pointer {
                    global :UnitGhostInfo
                }
            }
            field(:anon_1, 24) {
                number 32, true, -1
            }
            field(:birth_year, 28) {
                number 32, true, -1
            }
            field(:birth_time, 32) {
                number 32, true, -1
            }
            field(:curse_year, 36) {
                number 32, true, -1
            }
            field(:curse_time, 40) {
                number 32, true, -1
            }
            field(:birth_year_bias, 44) {
                number 32, true
            }
            field(:birth_time_bias, 48) {
                number 32, true
            }
            field(:old_year, 52) {
                number 32, true, -1
            }
            field(:old_time, 56) {
                number 32, true, -1
            }
            field(:following, 60) {
                pointer {
                    global :Unit
                }
            }
            field(:unk_238, 64) {
                number 16, false
            }
            field(:pet_owner_id, 68) {
                number 32, true, -1
            }
            def pet_owner_tg ; df.world.units.all.binsearch(pet_owner_id) ; end
            field(:spouse_id, 72) {
                number 32, true, -1
            }
            def spouse_tg ; df.world.units.all.binsearch(spouse_id) ; end
            field(:mother_id, 76) {
                number 32, true, -1
            }
            def mother_tg ; df.world.units.all.binsearch(mother_id) ; end
            field(:father_id, 80) {
                number 32, true, -1
            }
            def father_tg ; df.world.units.all.binsearch(father_id) ; end
            field(:last_attacker_id, 84) {
                number 32, true, -1
            }
            def last_attacker_tg ; df.world.units.all.binsearch(last_attacker_id) ; end
            field(:group_leader_id, 88) {
                number 32, true, -1
            }
            def group_leader_tg ; df.world.units.all.binsearch(group_leader_id) ; end
            field(:draggee_id, 92) {
                number 32, true, -1
            }
            def draggee_tg ; df.world.units.all.binsearch(draggee_id) ; end
            field(:dragger_id, 96) {
                number 32, true, -1
            }
            def dragger_tg ; df.world.units.all.binsearch(dragger_id) ; end
            field(:rider_mount_id, 100) {
                number 32, true, -1
            }
            def rider_mount_tg ; df.world.units.all.binsearch(rider_mount_id) ; end
            field(:lover_id, 104) {
                number 32, true, -1
            }
            def lover_tg ; df.world.units.all.binsearch(lover_id) ; end
            field(:mount_type, 108) {
                number 16, true
            }
        }
    }
    field(:last_hit, 752) {
        global :HistoryHitItem
    }
    field(:riding_item_id, 784) {
        number 32, true, -1
    }
    def riding_item_tg ; df.world.items.all.binsearch(riding_item_id) ; end
    field(:inventory, 788) {
        stl_vector(4) {
            pointer {
                global :UnitInventoryItem
            }
        }
    }
    field(:owned_items, 804) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def owned_items_tg ; owned_items.map { |i| df.world.items.all.binsearch(i) } ; end
    field(:traded_items, 820) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def traded_items_tg ; traded_items.map { |i| df.world.items.all.binsearch(i) } ; end
    field(:owned_buildings, 836) {
        stl_vector(4) {
            pointer {
                global :Building
            }
        }
    }
    field(:corpse_parts, 852) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def corpse_parts_tg ; corpse_parts.map { |i| df.world.items.all.binsearch(i) } ; end
    field(:job, 868) {
        compound(:Unit_TJob) {
            field(:account, 0) {
                number 32, true
            }
            field(:satisfaction, 4) {
                number 32, true
            }
            field(:hunt_target, 8) {
                pointer {
                    global :Unit
                }
            }
            field(:destroy_target, 12) {
                pointer {
                    global :Building
                }
            }
            field(:anon_1, 16) {
                number 32, true
            }
            field(:anon_2, 20) {
                number 32, true
            }
            field(:anon_3, 24) {
                number 32, true
            }
            field(:anon_4, 28) {
                number 32, true
            }
            field(:anon_5, 32) {
                number 8, true
            }
            field(:gait_buildup, 36) {
                number 32, true
            }
            field(:climb_hold, 40) {
                global :Coord
            }
            field(:unk_v4014_1, 48) {
                number 32, true, -1
            }
            field(:current_job, 52) {
                pointer {
                    global :Job
                }
            }
            field(:mood_skill, 56) {
                number 16, true, nil, JobSkill
            }
            field(:mood_timeout, 60) {
                number 32, true
            }
            field(:unk_39c, 64) {
                number 32, true
            }
        }
    }
    field(:body, 936) {
        compound(:Unit_TBody) {
            field(:components, 0) {
                global :BodyComponentInfo
            }
            field(:wounds, 128) {
                stl_vector(4) {
                    pointer {
                        global :UnitWound
                    }
                }
            }
            field(:wound_next_id, 144) {
                number 32, true, 1
            }
            field(:unk_39c, 148) {
                static_array(10, 4) {
                    number 32, true, -1
                }
            }
            field(:body_plan, 188) {
                pointer {
                    global :CasteBodyInfo
                }
            }
            field(:weapon_bp, 192) {
                number 16, true, -1
            }
            field(:physical_attrs, 196) {
                static_array(6, 28, PhysicalAttributeType) {
                    global :UnitAttribute
                }
            }
            field(:size_info, 364) {
                global :BodySizeInfo
            }
            field(:blood_max, 388) {
                number 32, false
            }
            field(:blood_count, 392) {
                number 32, false
            }
            field(:infection_level, 396) {
                number 32, true
            }
            field(:spatters, 400) {
                stl_vector(4) {
                    pointer {
                        global :Spatter
                    }
                }
            }
        }
    }
    field(:appearance, 1352) {
        compound(:Unit_TAppearance) {
            field(:body_modifiers, 0) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:bp_modifiers, 16) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:size_modifier, 32) {
                number 32, true
            }
            field(:tissue_style, 36) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:tissue_style_civ_id, 52) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def tissue_style_civ_tg ; tissue_style_civ_id.map { |i| df.world.entities.all.binsearch(i) } ; end
            field(:tissue_style_id, 68) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            field(:tissue_style_type, 84) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            field(:tissue_length, 100) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:genes, 116) {
                global :UnitGenes
            }
            field(:colors, 132) {
                stl_vector(4) {
                    number 32, true
                }
            }
        }
    }
    field(:actions, 1500) {
        stl_vector(4) {
            pointer {
                global :UnitAction
            }
        }
    }
    field(:next_action_id, 1516) {
        number 32, true
    }
    field(:counters, 1520) {
        compound(:Unit_TCounters) {
            field(:think_counter, 0) {
                number 32, true
            }
            field(:job_counter, 4) {
                number 32, true
            }
            field(:swap_counter, 8) {
                number 32, true
            }
            field(:death_cause, 12) {
                number 16, true, nil, DeathType
            }
            field(:death_id, 16) {
                number 32, true, -1
            }
            def death_tg ; df.world.incidents.all.binsearch(death_id) ; end
            field(:winded, 20) {
                number 16, true
            }
            field(:stunned, 22) {
                number 16, true
            }
            field(:unconscious, 24) {
                number 16, true
            }
            field(:suffocation, 26) {
                number 16, true
            }
            field(:webbed, 28) {
                number 16, true
            }
            field(:guts_trail1, 30) {
                global :Coord
            }
            field(:guts_trail2, 36) {
                global :Coord
            }
            field(:soldier_mood_countdown, 42) {
                number 16, true, 300
            }
            field(:soldier_mood, 44) {
                class ::DFHack::Unit_TCounters_TSoldierMood < MemHack::Enum
                    ENUM = Hash.new
                    NUME = Hash.new
                    ENUM[-1] = :None ; NUME[:None] = -1
                    ENUM[0] = :MartialTrance ; NUME[:MartialTrance] = 0
                    ENUM[1] = :Enranged ; NUME[:Enranged] = 1
                    ENUM[2] = :Tantrum ; NUME[:Tantrum] = 2
                    ENUM[3] = :Depressed ; NUME[:Depressed] = 3
                    ENUM[4] = :Oblivious ; NUME[:Oblivious] = 4
                end

                number 16, true, :None, Unit_TCounters_TSoldierMood
            }
            field(:pain, 48) {
                number 32, false
            }
            field(:nausea, 52) {
                number 32, false
            }
            field(:dizziness, 56) {
                number 32, false
            }
            field(:anon_1, 60) {
                number 32, true
            }
        }
    }
    field(:curse, 1584) {
        compound(:Unit_TCurse) {
            field(:add_tags1, 0) {
                global :CieAddTagMask1
            }
            field(:rem_tags1, 4) {
                global :CieAddTagMask1
            }
            field(:add_tags2, 8) {
                global :CieAddTagMask2
            }
            field(:rem_tags2, 12) {
                global :CieAddTagMask2
            }
            field(:name_visible, 16) {
                number 8, true, nil, BooleanEnum
            }
            field(:name, 20) {
                stl_string
            }
            field(:name_plural, 48) {
                stl_string
            }
            field(:name_adjective, 76) {
                stl_string
            }
            field(:sym_and_color1, 104) {
                number 32, false, 0x400
            }
            field(:sym_and_color2, 108) {
                number 32, false, 0x400
            }
            field(:flash_period, 112) {
                number 32, false
            }
            field(:flash_time2, 116) {
                number 32, false
            }
            field(:body_appearance, 120) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:bp_appearance, 136) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:speed_add, 152) {
                number 32, false
            }
            field(:speed_mul_percent, 156) {
                number 32, false, 100
            }
            field(:attr_change, 160) {
                pointer {
                    global :CurseAttrChange
                }
            }
            field(:luck_mul_percent, 164) {
                number 32, false, 100
            }
            field(:interaction_id, 168) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def interaction_tg ; interaction_id.map { |i| df.world.raws.effects.all[i] } ; end
            field(:interaction_time, 184) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:interaction_delay, 200) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:time_on_site, 216) {
                number 32, true
            }
            field(:own_interaction, 220) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            field(:own_interaction_delay, 236) {
                stl_vector(4) {
                    number 32, true
                }
            }
        }
    }
    field(:counters2, 1836) {
        compound(:Unit_TCounters2) {
            field(:paralysis, 0) {
                number 32, false
            }
            field(:numbness, 4) {
                number 32, false
            }
            field(:fever, 8) {
                number 32, false
            }
            field(:exhaustion, 12) {
                number 32, false
            }
            field(:hunger_timer, 16) {
                number 32, false
            }
            field(:thirst_timer, 20) {
                number 32, false
            }
            field(:sleepiness_timer, 24) {
                number 32, false
            }
            field(:stomach_content, 28) {
                number 32, false
            }
            field(:stomach_food, 32) {
                number 32, false
            }
            field(:vomit_timeout, 36) {
                number 32, false
            }
            field(:stored_fat, 40) {
                number 32, false
            }
        }
    }
    field(:status, 1880) {
        compound(:Unit_TStatus) {
            field(:misc_traits, 0) {
                stl_vector(4) {
                    pointer {
                        global :UnitMiscTrait
                    }
                }
            }
            field(:eat_history, 16) {
                pointer {
                    compound(:Unit_TStatus_TEatHistory) {
                        sizeof 192

                        field(:food, 0) {
                            compound(:Unit_TStatus_TEatHistory_TFood) {
                                field(:item_type, 0) {
                                    stl_vector(2) {
                                        number 16, true, nil, ItemType
                                    }
                                }
                                field(:item_subtype, 16) {
                                    stl_vector(2) {
                                        number 16, true
                                    }
                                }
                                field(:material, 32) {
                                    global :MaterialVecRef
                                }
                                field(:year, 64) {
                                    stl_vector(4) {
                                        number 32, true
                                    }
                                }
                                field(:year_time, 80) {
                                    stl_vector(4) {
                                        number 32, true
                                    }
                                }
                            }
                        }
                        field(:drink, 96) {
                            compound(:Unit_TStatus_TEatHistory_TDrink) {
                                field(:item_type, 0) {
                                    stl_vector(2) {
                                        number 16, true, nil, ItemType
                                    }
                                }
                                field(:item_subtype, 16) {
                                    stl_vector(2) {
                                        number 16, true
                                    }
                                }
                                field(:material, 32) {
                                    global :MaterialVecRef
                                }
                                field(:year, 64) {
                                    stl_vector(4) {
                                        number 32, true
                                    }
                                }
                                field(:year_time, 80) {
                                    stl_vector(4) {
                                        number 32, true
                                    }
                                }
                            }
                        }
                    }
                }
            }
            field(:demand_timeout, 20) {
                number 32, true, 1000
            }
            field(:mandate_timeout, 24) {
                number 32, true, 1000
            }
            field(:attacker_ids, 28) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def attacker_tgs ; attacker_ids.map { |i| df.world.units.all.binsearch(i) } ; end
            field(:attacker_cntdn, 44) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:face_direction, 60) {
                number 8, false
            }
            field(:artifact_name, 64) {
                global :LanguageName
            }
            field(:souls, 172) {
                stl_vector(4) {
                    pointer {
                        global :UnitSoul
                    }
                }
            }
            field(:current_soul, 188) {
                pointer {
                    global :UnitSoul
                }
            }
            field(:demands, 192) {
                stl_vector(4) {
                    pointer {
                        global :UnitDemand
                    }
                }
            }
            field(:labors, 208) {
                static_array(94, 1, UnitLabor) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:wrestle_items, 304) {
                stl_vector(4) {
                    pointer {
                        global :UnitItemWrestle
                    }
                }
            }
            field(:observed_traps, 320) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def observed_traps_tg ; observed_traps.map { |i| df.world.buildings.all.binsearch(i) } ; end
            field(:complaints, 336) {
                stl_vector(4) {
                    pointer {
                        global :UnitComplaint
                    }
                }
            }
            field(:requests, 352) {
                stl_vector(4) {
                    pointer {
                        global :UnitRequest
                    }
                }
            }
            field(:coin_debts, 368) {
                stl_vector(4) {
                    pointer {
                        global :UnitCoinDebt
                    }
                }
            }
            field(:adv_sleep_timer, 384) {
                number 16, true
            }
            field(:recent_job_area, 386) {
                global :Coord
            }
            field(:recent_jobs, 392) {
                global :CoordPath
            }
        }
    }
    field(:hist_figure_id, 2320) {
        number 32, true, -1
    }
    def hist_figure_tg ; df.world.history.figures.binsearch(hist_figure_id) ; end
    field(:hist_figure_id2, 2324) {
        number 32, true, -1
    }
    def hist_figure_tg2 ; df.world.history.figures.binsearch(hist_figure_id2) ; end
    field(:status2, 2328) {
        compound(:Unit_TStatus2) {
            field(:limbs_stand_max, 0) {
                number 16, true
            }
            field(:limbs_stand_count, 2) {
                number 16, true
            }
            field(:limbs_grasp_max, 4) {
                number 16, true
            }
            field(:limbs_grasp_count, 6) {
                number 16, true
            }
            field(:limbs_fly_max, 8) {
                number 16, true
            }
            field(:limbs_fly_count, 10) {
                number 16, true
            }
            field(:body_part_temperature, 12) {
                stl_vector(4) {
                    pointer {
                        global :Temperaturest
                    }
                }
            }
            field(:add_path_flags, 28) {
                number 32, false
            }
            field(:liquid_type, 32) {
                global :TileDesignation
            }
            field(:liquid_depth, 36) {
                number 8, false
            }
            field(:unk_7c0, 40) {
                number 32, true, -1
            }
        }
    }
    field(:unknown7, 2372) {
        compound(:Unit_TUnknown7) {
            field(:unk_7c4, 0) {
                stl_vector
            }
            field(:anon_1, 16) {
                stl_vector
            }
        }
    }
    field(:syndromes, 2404) {
        compound(:Unit_TSyndromes) {
            field(:active, 0) {
                stl_vector(4) {
                    pointer {
                        global :UnitSyndrome
                    }
                }
            }
            field(:reinfection_type, 16) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def reinfection_type_tg ; reinfection_type.map { |i| df.world.raws.syndromes.all[i] } ; end
            field(:reinfection_count, 32) {
                stl_vector(2) {
                    number 16, true
                }
            }
        }
    }
    field(:reports, 2452) {
        compound(:Unit_TReports) {
            field(:log, 0) {
                static_array(3, 16, UnitReportType) {
                    stl_vector(4) {
                        number 32, true, -1
                    }
                }
            }
            field(:last_year, 48) {
                static_array(3, 4, UnitReportType) {
                    number 32, true
                }
            }
            field(:last_year_tick, 60) {
                static_array(3, 4, UnitReportType) {
                    number 32, true
                }
            }
        }
    }
    field(:health, 2524) {
        pointer {
            global :UnitHealthInfo
        }
    }
    field(:used_items, 2528) {
        stl_vector(4) {
            pointer {
                global :UnitItemUse
            }
        }
    }
    field(:enemy, 2544) {
        compound(:Unit_TEnemy) {
            field(:sound_cooldown, 0) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:undead, 16) {
                pointer {
                    compound(:Unit_TEnemy_TUndead) {
                        sizeof 52

                        field(:anon_1, 0) {
                            number 32, true
                        }
                        field(:anon_2, 4) {
                            number 32, true
                        }
                        field(:anon_3, 8) {
                            number 32, true
                        }
                        field(:anon_4, 12) {
                            number 32, true
                        }
                        field(:anon_5, 16) {
                            number 32, true
                        }
                        field(:anon_6, 20) {
                            number 16, true
                        }
                        field(:anon_7, 24) {
                            stl_string
                        }
                    }
                }
            }
            field(:were_race, 20) {
                number 32, true, -1
            }
            def were_race_tg ; df.world.raws.creatures.all[were_race] ; end
            field(:were_caste, 24) {
                number 32, true, -1
            }
            def were_caste_tg ; df.world.raws.creatures.all[were_race].caste[were_caste] ; end
            field(:normal_race, 28) {
                number 32, true, -1
            }
            def normal_race_tg ; df.world.raws.creatures.all[normal_race] ; end
            field(:normal_caste, 32) {
                number 32, true, -1
            }
            def normal_caste_tg ; df.world.raws.creatures.all[normal_race].caste[normal_caste] ; end
            field(:interaction, 36) {
                number 32, true, -1
            }
            field(:unk_850, 40) {
                stl_vector
            }
            field(:witness_reports, 56) {
                stl_vector(4) {
                    pointer {
                        compound(:Unit_TEnemy_TWitnessReports) {
                            sizeof 24

                            field(:death_id, 0) {
                                number 32, true, -1
                            }
                            def death_tg ; df.world.incidents.all.binsearch(death_id) ; end
                            field(:crime_id, 4) {
                                number 32, true, -1
                            }
                            def crime_tg ; df.world.crimes.all.binsearch(crime_id) ; end
                            field(:unk1, 8) {
                                number 32, true
                            }
                            field(:year, 12) {
                                number 32, true
                            }
                            field(:year_tick, 16) {
                                number 32, true
                            }
                            field(:unk2, 20) {
                                number 32, true
                            }
                        }
                    }
                }
            }
            field(:unk_a5c, 72) {
                stl_vector(4) {
                    pointer {
                        global :EntityEvent
                    }
                }
            }
            field(:gait_index, 88) {
                static_array(5, 4, GaitType) {
                    number 32, true
                }
            }
            field(:unk_v40_1a, 108) {
                static_array(10, 4) {
                    number 32, true
                }
            }
            field(:unk_v40_1b, 148) {
                static_array(10, 4) {
                    number 32, true
                }
            }
            field(:unk_v40_1c, 188) {
                static_array(10, 4) {
                    number 32, true
                }
            }
            field(:unk_v40_1d, 228) {
                static_array(10, 4) {
                    number 32, true
                }
            }
            field(:unk_v40_1e, 268) {
                static_array(10, 4) {
                    number 32, true
                }
            }
            field(:unk_v40_2, 308) {
                static_array(20, 4) {
                    number 32, true
                }
            }
            field(:anon_1, 388) {
                static_array(180, 4) {
                    number 32, true
                }
            }
            field(:unk_v40_2_count, 1108) {
                number 32, true
            }
            field(:anon_2, 1112) {
                pointer {
                }
            }
            field(:anon_3, 1116) {
                pointer {
                }
            }
            field(:anon_4, 1120) {
                number 32, true
            }
            field(:anon_5, 1124) {
                number 32, true
            }
            field(:anon_6, 1128) {
                number 32, true
            }
            field(:anon_7, 1132) {
                number 32, true
            }
            field(:anon_8, 1136) {
                pointer {
                }
            }
            field(:anon_9, 1140) {
                stl_vector
            }
            field(:anon_10, 1156) {
                stl_vector
            }
            field(:anon_11, 1172) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:anon_12, 1188) {
                pointer {
                    compound(:Unit_TEnemy_TAnon12) {
                        sizeof 32

                        field(:unk_0, 0) {
                            stl_vector(4) {
                                number 32, true
                            }
                        }
                        field(:unk_10, 16) {
                            stl_vector(4) {
                                number 32, true
                            }
                        }
                    }
                }
            }
            field(:enemy_status_slot, 1192) {
                number 32, true, -1
            }
            field(:unk_874_cntr, 1196) {
                number 32, true
            }
            field(:body_part_878, 1200) {
                stl_vector(1) {
                    number 8, false
                }
            }
            field(:body_part_888, 1216) {
                stl_vector(1) {
                    number 8, false
                }
            }
            field(:body_part_relsize, 1232) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:body_part_8a8, 1248) {
                stl_vector(1) {
                    number 8, false
                }
            }
            field(:body_part_base_ins, 1264) {
                stl_vector(2) {
                    number 16, false
                }
            }
            field(:body_part_clothing_ins, 1280) {
                stl_vector(2) {
                    number 16, false
                }
            }
            field(:body_part_8d8, 1296) {
                stl_vector(2) {
                    number 16, false
                }
            }
            field(:unk_8e8, 1312) {
                stl_vector
            }
            field(:unk_8f8, 1328) {
                stl_vector(2) {
                    number 16, false
                }
            }
        }
    }
    field(:recuperation, 3888) {
        compound(:Unit_TRecuperation) {
            field(:healing_rate, 0) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:effective_rate, 16) {
                number 32, true, -1
            }
            field(:tendons_heal, 20) {
                number 32, true
            }
            field(:ligaments_heal, 24) {
                number 32, true
            }
        }
    }
    field(:weight, 3916) {
        number 32, true
    }
    field(:weight_fraction, 3920) {
        number 32, true
    }
    field(:burrows, 3924) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def burrows_tg ; burrows.map { |i| df.ui.burrows.list.binsearch(i) } ; end
    field(:combat_side_id, 3940) {
        number 32, true
    }
    field(:anon_5, 3944) {
        number 32, true
    }
end

class UnitAction < MemHack::Compound
    sizeof 96

    field(:type, 0) {
        number 32, true, :None, UnitActionType
    }
    field(:id, 4) {
        number 32, true, -1
    }
    field(:data, 8) {
        compound(:UnitAction_TData) {
            field(:move, 0) {
                compound(:UnitAction_TData_TMove) {
                    field(:x, 0) {
                        number 16, true
                    }
                    field(:y, 2) {
                        number 16, true
                    }
                    field(:z, 4) {
                        number 16, true
                    }
                    field(:timer, 8) {
                        number 32, true
                    }
                    field(:timer_init, 12) {
                        number 32, true
                    }
                    field(:fatigue, 16) {
                        number 32, true
                    }
                    field(:flags, 20) {
                        number 32, true
                    }
                }
            }
            field(:attack, 0) {
                compound(:UnitAction_TData_TAttack) {
                    field(:target_unit_id, 0) {
                        number 32, true, -1
                    }
                    def target_unit_tg ; df.world.units.all.binsearch(target_unit_id) ; end
                    field(:unk_4, 4) {
                        compound(:UnitAction_TData_TAttack_TUnk4) {
                            field(:wrestle_type, 0) {
                                number 32, true
                            }
                            field(:unk_4, 4) {
                                number 16, true
                            }
                            field(:unk_6, 6) {
                                number 16, true
                            }
                            field(:unk_8, 8) {
                                number 32, true
                            }
                            field(:unk_c, 12) {
                                number 32, true
                            }
                            field(:unk_10, 16) {
                                number 32, true
                            }
                            field(:unk_14, 20) {
                                number 16, true
                            }
                        }
                    }
                    field(:attack_item_id, 28) {
                        number 32, true, -1
                    }
                    def attack_item_tg ; df.world.items.all.binsearch(attack_item_id) ; end
                    field(:target_body_part_id, 32) {
                        number 16, true
                    }
                    field(:attack_body_part_id, 34) {
                        number 16, true
                    }
                    field(:attack_id, 36) {
                        number 32, true
                    }
                    field(:unk_28, 40) {
                        number 32, true
                    }
                    field(:unk_2c, 44) {
                        number 32, true
                    }
                    field(:unk_30, 48) {
                        number 32, true
                    }
                    field(:flags, 52) {
                        number 32, true
                    }
                    field(:unk_38, 56) {
                        number 16, true
                    }
                    field(:unk_3c, 60) {
                        number 32, true
                    }
                    field(:timer1, 64) {
                        number 32, true
                    }
                    field(:timer2, 68) {
                        number 32, true
                    }
                }
            }
            field(:jump, 0) {
                compound(:UnitAction_TData_TJump) {
                    field(:x1, 0) {
                        number 16, true
                    }
                    field(:y1, 2) {
                        number 16, true
                    }
                    field(:z1, 4) {
                        number 16, true
                    }
                    field(:x2, 6) {
                        number 16, true
                    }
                    field(:y2, 8) {
                        number 16, true
                    }
                    field(:z2, 10) {
                        number 16, true
                    }
                }
            }
            field(:holdterrain, 0) {
                compound(:UnitAction_TData_THoldterrain) {
                    field(:x1, 0) {
                        number 16, true
                    }
                    field(:y1, 2) {
                        number 16, true
                    }
                    field(:z1, 4) {
                        number 16, true
                    }
                    field(:x2, 6) {
                        number 16, true
                    }
                    field(:y2, 8) {
                        number 16, true
                    }
                    field(:z2, 10) {
                        number 16, true
                    }
                    field(:x3, 12) {
                        number 16, true
                    }
                    field(:y3, 14) {
                        number 16, true
                    }
                    field(:z3, 16) {
                        number 16, true
                    }
                    field(:timer, 20) {
                        number 32, true
                    }
                    field(:fatigue, 24) {
                        number 32, true
                    }
                }
            }
            field(:releaseterrain, 0) {
                compound(:UnitAction_TData_TReleaseterrain) {
                    field(:x, 0) {
                        number 16, true
                    }
                    field(:y, 2) {
                        number 16, true
                    }
                    field(:z, 4) {
                        number 16, true
                    }
                }
            }
            field(:climb, 0) {
                compound(:UnitAction_TData_TClimb) {
                    field(:x1, 0) {
                        number 16, true
                    }
                    field(:y1, 2) {
                        number 16, true
                    }
                    field(:z1, 4) {
                        number 16, true
                    }
                    field(:x2, 6) {
                        number 16, true
                    }
                    field(:y2, 8) {
                        number 16, true
                    }
                    field(:z2, 10) {
                        number 16, true
                    }
                    field(:x3, 12) {
                        number 16, true
                    }
                    field(:y3, 14) {
                        number 16, true
                    }
                    field(:z3, 16) {
                        number 16, true
                    }
                    field(:timer, 20) {
                        number 32, true
                    }
                    field(:timer_init, 24) {
                        number 32, true
                    }
                    field(:fatigue, 28) {
                        number 32, true
                    }
                }
            }
            field(:job, 0) {
                compound(:UnitAction_TData_TJob) {
                    field(:x, 0) {
                        number 16, true
                    }
                    field(:y, 2) {
                        number 16, true
                    }
                    field(:z, 4) {
                        number 16, true
                    }
                    field(:timer, 8) {
                        number 32, true
                    }
                }
            }
            field(:talk, 0) {
                compound(:UnitAction_TData_TTalk) {
                    field(:unk_0, 0) {
                        number 32, true
                    }
                    field(:activity_id, 4) {
                        number 32, true, -1
                    }
                    def activity_tg ; df.world.activities.all.binsearch(activity_id) ; end
                    field(:activity_event_idx, 8) {
                        number 32, true, -1
                    }
                    field(:event, 12) {
                        static_array(10, 4) {
                            number 32, true
                        }
                    }
                    field(:unk_34, 52) {
                        number 32, true
                    }
                    field(:timer, 56) {
                        number 32, true
                    }
                    field(:unk_3c, 60) {
                        number 32, true
                    }
                    field(:unk_40, 64) {
                        number 32, true
                    }
                    field(:unk_44, 68) {
                        number 32, true
                    }
                    field(:unk_48, 72) {
                        number 32, true
                    }
                    field(:unk_4c, 76) {
                        number 32, true
                    }
                    field(:unk_50, 80) {
                        number 32, true
                    }
                    field(:unk_54, 84) {
                        number 32, true
                    }
                }
            }
            field(:unsteady, 0) {
                compound(:UnitAction_TData_TUnsteady) {
                    field(:timer, 0) {
                        number 32, true
                    }
                }
            }
            field(:parry, 0) {
                compound(:UnitAction_TData_TParry) {
                    field(:unit_id, 0) {
                        number 32, true, -1
                    }
                    def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
                    field(:target_action, 4) {
                        number 32, true, -1
                    }
                    field(:parry_item_id, 8) {
                        number 32, true, -1
                    }
                    def parry_item_tg ; df.world.items.all.binsearch(parry_item_id) ; end
                }
            }
            field(:block, 0) {
                compound(:UnitAction_TData_TBlock) {
                    field(:unit_id, 0) {
                        number 32, true, -1
                    }
                    def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
                    field(:target_action, 4) {
                        number 32, true, -1
                    }
                    field(:block_item_id, 8) {
                        number 32, true, -1
                    }
                    def block_item_tg ; df.world.items.all.binsearch(block_item_id) ; end
                }
            }
            field(:dodge, 0) {
                compound(:UnitAction_TData_TDodge) {
                    field(:x1, 0) {
                        number 16, true
                    }
                    field(:y1, 2) {
                        number 16, true
                    }
                    field(:z1, 4) {
                        number 16, true
                    }
                    field(:timer, 8) {
                        number 32, true
                    }
                    field(:x2, 12) {
                        number 16, true
                    }
                    field(:y2, 14) {
                        number 16, true
                    }
                    field(:z2, 16) {
                        number 16, true
                    }
                }
            }
            field(:recover, 0) {
                compound(:UnitAction_TData_TRecover) {
                    field(:timer, 0) {
                        number 32, true
                    }
                    field(:unk_4, 4) {
                        number 32, true
                    }
                }
            }
            field(:standup, 0) {
                compound(:UnitAction_TData_TStandup) {
                    field(:timer, 0) {
                        number 32, true
                    }
                }
            }
            field(:liedown, 0) {
                compound(:UnitAction_TData_TLiedown) {
                    field(:timer, 0) {
                        number 32, true
                    }
                }
            }
            field(:job2, 0) {
                compound(:UnitAction_TData_TJob2) {
                    field(:timer, 0) {
                        number 32, true
                    }
                }
            }
            field(:pushobject, 0) {
                compound(:UnitAction_TData_TPushobject) {
                    field(:x1, 0) {
                        number 16, true
                    }
                    field(:y1, 2) {
                        number 16, true
                    }
                    field(:z1, 4) {
                        number 16, true
                    }
                    field(:x2, 6) {
                        number 16, true
                    }
                    field(:y2, 8) {
                        number 16, true
                    }
                    field(:z2, 10) {
                        number 16, true
                    }
                    field(:x3, 12) {
                        number 16, true
                    }
                    field(:y3, 14) {
                        number 16, true
                    }
                    field(:z3, 16) {
                        number 16, true
                    }
                    field(:timer, 20) {
                        number 32, true
                    }
                    field(:unk_18, 24) {
                        number 32, true
                    }
                }
            }
            field(:suckblood, 0) {
                compound(:UnitAction_TData_TSuckblood) {
                    field(:unit_id, 0) {
                        number 32, true, -1
                    }
                    def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
                    field(:timer, 4) {
                        number 32, true
                    }
                }
            }
            field(:holditem, 0) {
                compound(:UnitAction_TData_THolditem) {
                    field(:x1, 0) {
                        number 16, true
                    }
                    field(:y1, 2) {
                        number 16, true
                    }
                    field(:z1, 4) {
                        number 16, true
                    }
                    field(:x2, 6) {
                        number 16, true
                    }
                    field(:y2, 8) {
                        number 16, true
                    }
                    field(:z2, 10) {
                        number 16, true
                    }
                    field(:unk_c, 12) {
                        number 32, true
                    }
                    field(:unk_10, 16) {
                        number 32, true
                    }
                    field(:unk_14, 20) {
                        number 32, true
                    }
                }
            }
            field(:releaseitem, 0) {
                compound(:UnitAction_TData_TReleaseitem) {
                    field(:unk_0, 0) {
                        number 32, true
                    }
                }
            }
            field(:raw_data, 0) {
                static_array(22, 4) {
                    number 32, true
                }
            }
        }
    }
end

class UnitAttribute < MemHack::Compound
    sizeof 28

    field(:value, 0) {
        number 32, true, 1000
    }
    field(:max_value, 4) {
        number 32, true, 2000
    }
    field(:improve_counter, 8) {
        number 32, true
    }
    field(:unused_counter, 12) {
        number 32, true
    }
    field(:soft_demotion, 16) {
        number 32, true
    }
    field(:rust_counter, 20) {
        number 32, true
    }
    field(:demotion_counter, 24) {
        number 32, true
    }
end

class UnitBpHealthFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:rq_immobilize, 0) { bit 0 }
    field(:rq_dressing, 0) { bit 1 }
    field(:rq_cleaning, 0) { bit 2 }
    field(:rq_surgery, 0) { bit 3 }
    field(:rq_suture, 0) { bit 4 }
    field(:rq_setting, 0) { bit 5 }
    field(:rq_traction, 0) { bit 6 }
    field(:inoperable_rot, 0) { bit 7 }
    field(:needs_bandage, 0) { bit 8 }
    field(:needs_cast, 0) { bit 9 }
end

class UnitChunk < MemHack::Compound
    sizeof 2004

    field(:id, 0) {
        number 32, true
    }
    field(:units, 4) {
        static_array(100, 20) {
            compound(:UnitChunk_TUnits) {
                field(:items, 0) {
                    stl_vector(4) {
                        pointer {
                            global :Item
                        }
                    }
                }
                field(:unit, 16) {
                    pointer {
                        global :Unit
                    }
                }
            }
        }
    }
end

class UnitCoinDebt < MemHack::Compound
    sizeof 8

    field(:recipient, 0) {
        number 32, true, -1
    }
    def recipient_tg ; df.world.units.all.binsearch(recipient) ; end
    field(:amount, 4) {
        number 32, true
    }
end

class UnitComplaint < MemHack::Compound
    sizeof 8

    field(:type, 0) {
        class ::DFHack::UnitComplaint_TType < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :SelfUnemployed ; NUME[:SelfUnemployed] = 0
            ENUM[1] = :GuildUnemployed ; NUME[:GuildUnemployed] = 1
            ENUM[2] = :NeedWeapons ; NUME[:NeedWeapons] = 2
            ENUM[3] = :IsAngry ; NUME[:IsAngry] = 3
            ENUM[4] = :IsSad ; NUME[:IsSad] = 4
        end

        number 16, true, nil, UnitComplaint_TType
    }
    field(:guild, 2) {
        number 16, true, nil, GuildId
    }
    field(:age, 4) {
        number 32, true
    }
end

class UnitDemand < MemHack::Compound
    sizeof 24

    field(:unk_0, 0) {
        number 16, true
    }
    field(:place, 2) {
        class ::DFHack::UnitDemand_TPlace < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :Office ; NUME[:Office] = 0
            ENUM[1] = :Bedroom ; NUME[:Bedroom] = 1
            ENUM[2] = :DiningRoom ; NUME[:DiningRoom] = 2
            ENUM[3] = :Tomb ; NUME[:Tomb] = 3
        end

        number 16, true, nil, UnitDemand_TPlace
    }
    field(:item_type, 4) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 6) {
        number 16, true, -1
    }
    field(:mat_type, 8) {
        number 16, true, -1
    }
    field(:mat_index, 12) {
        number 32, true, -1
    }
    field(:timeout_counter, 16) {
        number 32, true
    }
    field(:timeout_limit, 20) {
        number 32, true
    }
end

class UnitFlags1 < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:move_state, 0) { bit 0 }
    field(:dead, 0) { bit 1 }
    field(:has_mood, 0) { bit 2 }
    field(:had_mood, 0) { bit 3 }
    field(:marauder, 0) { bit 4 }
    field(:drowning, 0) { bit 5 }
    field(:merchant, 0) { bit 6 }
    field(:forest, 0) { bit 7 }
    field(:left, 0) { bit 8 }
    field(:rider, 0) { bit 9 }
    field(:incoming, 0) { bit 10 }
    field(:diplomat, 0) { bit 11 }
    field(:zombie, 0) { bit 12 }
    field(:skeleton, 0) { bit 13 }
    field(:can_swap, 0) { bit 14 }
    field(:on_ground, 0) { bit 15 }
    field(:projectile, 0) { bit 16 }
    field(:active_invader, 0) { bit 17 }
    field(:hidden_in_ambush, 0) { bit 18 }
    field(:invader_origin, 0) { bit 19 }
    field(:coward, 0) { bit 20 }
    field(:hidden_ambusher, 0) { bit 21 }
    field(:invades, 0) { bit 22 }
    field(:check_flows, 0) { bit 23 }
    field(:ridden, 0) { bit 24 }
    field(:caged, 0) { bit 25 }
    field(:tame, 0) { bit 26 }
    field(:chained, 0) { bit 27 }
    field(:royal_guard, 0) { bit 28 }
    field(:fortress_guard, 0) { bit 29 }
    field(:suppress_wield, 0) { bit 30 }
    field(:important_historical_figure, 0) { bit 31 }
end

class UnitFlags2 < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:swimming, 0) { bit 0 }
    field(:sparring, 0) { bit 1 }
    field(:no_notify, 0) { bit 2 }
    field(:unused, 0) { bit 3 }
    field(:calculated_nerves, 0) { bit 4 }
    field(:calculated_bodyparts, 0) { bit 5 }
    field(:important_historical_figure, 0) { bit 6 }
    field(:killed, 0) { bit 7 }
    field(:cleanup_1, 0) { bit 8 }
    field(:cleanup_2, 0) { bit 9 }
    field(:cleanup_3, 0) { bit 10 }
    field(:for_trade, 0) { bit 11 }
    field(:trade_resolved, 0) { bit 12 }
    field(:has_breaks, 0) { bit 13 }
    field(:gutted, 0) { bit 14 }
    field(:circulatory_spray, 0) { bit 15 }
    field(:locked_in_for_trading, 0) { bit 16 }
    field(:slaughter, 0) { bit 17 }
    field(:underworld, 0) { bit 18 }
    field(:resident, 0) { bit 19 }
    field(:cleanup_4, 0) { bit 20 }
    field(:calculated_insulation, 0) { bit 21 }
    field(:visitor_uninvited, 0) { bit 22 }
    field(:visitor, 0) { bit 23 }
    field(:calculated_inventory, 0) { bit 24 }
    field(:vision_good, 0) { bit 25 }
    field(:vision_damaged, 0) { bit 26 }
    field(:vision_missing, 0) { bit 27 }
    field(:breathing_good, 0) { bit 28 }
    field(:breathing_problem, 0) { bit 29 }
    field(:roaming_wilderness_population_source, 0) { bit 30 }
    field(:roaming_wilderness_population_source_not_a_map_feature, 0) { bit 31 }
end

class UnitFlags3 < MemHack::Compound
    field(:_whole, 0) {
        number 32, false
    }
    field(:body_part_relsize_computed, 0) { bit 0 }
    field(:size_modifier_computed, 0) { bit 1 }
    field(:stuck_weapon_computed, 0) { bit 2 }
    field(:compute_health, 0) { bit 3 }
    field(:announce_titan, 0) { bit 4 }
    field(:unk5, 0) { bit 5 }
    field(:on_crutch, 0) { bit 6 }
    field(:weight_computed, 0) { bit 7 }
    field(:body_temp_in_range, 0) { bit 8 }
    field(:wait_until_reveal, 0) { bit 9 }
    field(:scuttle, 0) { bit 10 }
    field(:unk11, 0) { bit 11 }
    field(:ghostly, 0) { bit 12 }
    field(:unk13, 0) { bit 13 }
    field(:unk14, 0) { bit 14 }
    field(:unk15, 0) { bit 15 }
    field(:unk16, 0) { bit 16 }
    field(:no_meandering, 0) { bit 17 }
    field(:floundering, 0) { bit 18 }
    field(:exit_vehicle1, 0) { bit 19 }
    field(:exit_vehicle2, 0) { bit 20 }
    field(:dangerous_terrain, 0) { bit 21 }
    field(:unk22, 0) { bit 22 }
    field(:unk23, 0) { bit 23 }
    field(:unk24, 0) { bit 24 }
    field(:emotionally_overloaded, 0) { bit 25 }
end

class UnitGenes < MemHack::Compound
    sizeof 16

    field(:appearance, 0) {
        df_array(1) {
            number 8, false
        }
    }
    field(:colors, 8) {
        df_array(2) {
            number 16, true
        }
    }
end

class UnitGhostInfo < MemHack::Compound
    sizeof 44

    field(:type, 0) {
        number 16, true, nil, GhostType
    }
    field(:type2, 2) {
        number 16, true, nil, GhostType
    }
    field(:goal, 4) {
        number 16, true, nil, GhostGoal
    }
    field(:target, 8) {
        compound(:UnitGhostInfo_TTarget) {
            field(:unit, 0) {
                number 32, true, -1
            }
            def unit_tg ; df.world.units.all.binsearch(unit) ; end
            field(:item, 0) {
                number 32, true, -1
            }
            def item_tg ; df.world.items.all.binsearch(item) ; end
            field(:building, 0) {
                number 32, true, -1
            }
            def building_tg ; df.world.buildings.all.binsearch(building) ; end
        }
    }
    field(:misplace_pos, 12) {
        global :Coord
    }
    field(:action_timer, 20) {
        number 32, true, 403200
    }
    field(:unk_18, 24) {
        number 32, true
    }
    field(:flags, 28) {
        compound(:UnitGhostInfo_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:announced, 0) { bit 0 }
            field(:was_at_rest, 0) { bit 1 }
        }
    }
    field(:death_x, 32) {
        number 32, true
    }
    field(:death_y, 36) {
        number 32, true
    }
    field(:death_z, 40) {
        number 32, true
    }
end

class UnitHealthFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:rq_diagnosis, 0) { bit 0 }
    field(:needs_recovery, 0) { bit 1 }
    field(:needs_healthcare, 0) { bit 2 }
    field(:rq_immobilize, 0) { bit 3 }
    field(:rq_dressing, 0) { bit 4 }
    field(:rq_cleaning, 0) { bit 5 }
    field(:rq_surgery, 0) { bit 6 }
    field(:rq_suture, 0) { bit 7 }
    field(:rq_setting, 0) { bit 8 }
    field(:rq_traction, 0) { bit 9 }
    field(:rq_crutch, 0) { bit 10 }
end

class UnitHealthInfo < MemHack::Compound
    sizeof 68

    field(:unit_id, 0) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
    field(:flags, 4) {
        global :UnitHealthFlags
    }
    field(:body_part_flags, 8) {
        stl_vector(4) {
            global :UnitBpHealthFlags
        }
    }
    field(:unk_18_cntdn, 24) {
        number 16, true
    }
    field(:immobilize_cntdn, 26) {
        number 16, true
    }
    field(:dressing_cntdn, 28) {
        number 16, true
    }
    field(:suture_cntdn, 30) {
        number 16, true
    }
    field(:crutch_cntdn, 32) {
        number 16, true
    }
    field(:op_history, 36) {
        stl_vector(4) {
            pointer {
                compound(:UnitHealthInfo_TOpHistory) {
                    sizeof 36

                    field(:job_type, 0) {
                        number 16, true, nil, JobType
                    }
                    field(:info, 4) {
                        compound(:UnitHealthInfo_TOpHistory_TInfo) {
                            field(:crutch, 0) {
                                compound(:UnitHealthInfo_TOpHistory_TInfo_TCrutch) {
                                    field(:item_type, 0) {
                                        number 32, true, -1
                                    }
                                    field(:item_subtype, 4) {
                                        number 32, true, -1
                                    }
                                    field(:mat_type, 8) {
                                        number 32, true, -1
                                    }
                                    field(:mat_index, 12) {
                                        number 32, true, -1
                                    }
                                    field(:item_id, 16) {
                                        number 32, true, -1
                                    }
                                    def item_tg ; df.world.items.all.binsearch(item_id) ; end
                                }
                            }
                            field(:bed_id, 0) {
                                number 32, true, -1
                            }
                            def bed_tg ; df.world.buildings.all.binsearch(bed_id) ; end
                            field(:bandage, 0) {
                                compound(:UnitHealthInfo_TOpHistory_TInfo_TBandage) {
                                    field(:mat_type, 0) {
                                        number 32, true, -1
                                    }
                                    field(:mat_index, 4) {
                                        number 32, true, -1
                                    }
                                    field(:body_part_id, 8) {
                                        number 32, true, -1
                                    }
                                    field(:item_id, 12) {
                                        number 32, true, -1
                                    }
                                    def item_tg ; df.world.items.all.binsearch(item_id) ; end
                                }
                            }
                        }
                    }
                    field(:year, 24) {
                        number 32, true
                    }
                    field(:year_time, 28) {
                        number 32, true
                    }
                    field(:doctor_id, 32) {
                        number 32, true, -1
                    }
                    def doctor_tg ; df.world.units.all.binsearch(doctor_id) ; end
                }
            }
        }
    }
    field(:unk_34, 52) {
        stl_vector
    }
end

class UnitInventoryItem < MemHack::Compound
    sizeof 16

    field(:item, 0) {
        pointer {
            global :Item
        }
    }
    field(:mode, 4) {
        class ::DFHack::UnitInventoryItem_TMode < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :Hauled ; NUME[:Hauled] = 0
            ENUM[1] = :Weapon ; NUME[:Weapon] = 1
            ENUM[2] = :Worn ; NUME[:Worn] = 2
            ENUM[3] = :Piercing ; NUME[:Piercing] = 3
            ENUM[4] = :Flask ; NUME[:Flask] = 4
            ENUM[5] = :WrappedAround ; NUME[:WrappedAround] = 5
            ENUM[6] = :StuckIn ; NUME[:StuckIn] = 6
            ENUM[7] = :InMouth ; NUME[:InMouth] = 7
            ENUM[8] = :Pet ; NUME[:Pet] = 8
            ENUM[9] = :SewnInto ; NUME[:SewnInto] = 9
        end

        number 16, true, nil, UnitInventoryItem_TMode
    }
    field(:body_part_id, 6) {
        number 16, true, -1
    }
    field(:pet_seed, 8) {
        number 32, true
    }
    field(:wound_id, 12) {
        number 32, true, -1
    }
end

class UnitItemUse < MemHack::Compound
    sizeof 16

    field(:id, 0) {
        number 32, true, -1
    }
    def id_tg ; df.world.items.all.binsearch(id) ; end
    field(:time_in_use, 4) {
        number 32, true
    }
    field(:has_grown_attached, 8) {
        number 32, true
    }
    field(:affection_level, 12) {
        number 32, true
    }
end

class UnitItemWrestle < MemHack::Compound
    sizeof 36

    field(:unit, 0) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit) ; end
    field(:self_bp, 4) {
        number 32, true, -1
    }
    field(:other_bp, 8) {
        number 32, true, -1
    }
    field(:unk_c, 12) {
        number 32, true, -1
    }
    field(:unk_10, 16) {
        number 32, true, -1
    }
    field(:item1, 20) {
        number 32, true, -1
    }
    def item1_tg ; df.world.items.all.binsearch(item1) ; end
    field(:item2, 24) {
        number 32, true, -1
    }
    def item2_tg ; df.world.items.all.binsearch(item2) ; end
    field(:unk_1c, 28) {
        number 16, true
    }
    field(:unk_1e, 30) {
        number 8, true
    }
    field(:unk_20, 32) {
        number 32, true, -1
    }
end

class UnitMiscTrait < MemHack::Compound
    sizeof 8

    field(:id, 0) {
        number 16, true, nil, MiscTraitType
    }
    field(:value, 4) {
        number 32, true
    }
end

class UnitPersonality < MemHack::Compound
    sizeof 244

    field(:values, 0) {
        stl_vector(4) {
            pointer {
                compound(:UnitPersonality_TValues) {
                    sizeof 8

                    field(:type, 0) {
                        number 32, true, nil, ValueType
                    }
                    field(:strength, 4) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:unk_v40_2, 16) {
        stl_vector(4) {
            pointer {
                compound(:UnitPersonality_TUnkV402) {
                    sizeof 4

                    field(:unk1, 0) {
                        number 16, true
                    }
                    field(:unk2, 2) {
                        number 16, true
                    }
                }
            }
        }
    }
    field(:emotions, 32) {
        stl_vector(4) {
            pointer {
                compound(:UnitPersonality_TEmotions) {
                    sizeof 40

                    field(:type, 0) {
                        number 32, true, nil, EmotionType
                    }
                    field(:unk2, 4) {
                        number 32, true
                    }
                    field(:strength, 8) {
                        number 32, true
                    }
                    field(:thought, 12) {
                        number 32, true, nil, UnitThoughtType
                    }
                    field(:subthought, 16) {
                        number 32, true
                    }
                    field(:severity, 20) {
                        number 32, true
                    }
                    field(:flags, 24) {
                        number 32, true
                    }
                    field(:unk7, 28) {
                        number 32, true
                    }
                    field(:year, 32) {
                        number 32, true
                    }
                    field(:year_tick, 36) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:dreams, 48) {
        stl_vector(4) {
            pointer {
                compound(:UnitPersonality_TDreams) {
                    sizeof 32

                    field(:unk1, 0) {
                        number 32, true
                    }
                    field(:type, 4) {
                        number 32, true, nil, GoalType
                    }
                    field(:unk3, 8) {
                        number 32, true, -1
                    }
                    field(:unk4, 12) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:unk8, 28) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:next_dream_id, 64) {
        number 32, true
    }
    field(:unk_v40_6, 68) {
        stl_vector(4) {
            pointer {
                compound(:UnitPersonality_TUnkV406) {
                    sizeof 24

                    field(:unk1, 0) {
                        number 32, true, -1
                    }
                    field(:unk2, 4) {
                        number 32, true, -1
                    }
                    field(:unk3, 8) {
                        number 32, true, -1
                    }
                    field(:unk4, 12) {
                        number 32, true, -1
                    }
                    field(:unk5, 16) {
                        number 32, true, -1
                    }
                    field(:unk6, 20) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:traits, 84) {
        static_array(50, 2, PersonalityFacetType) {
            number 16, false
        }
    }
    field(:civ_id, 184) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ_id) ; end
    field(:cultural_identity, 188) {
        number 32, true, -1
    }
    def cultural_identity_tg ; df.world.cultural_identities.all.binsearch(cultural_identity) ; end
    field(:unk5, 192) {
        stl_vector(4) {
            pointer {
                compound(:UnitPersonality_TUnk5) {
                    sizeof 4

                    field(:unk1, 0) {
                        number 16, true
                    }
                    field(:unk2, 2) {
                        number 16, true
                    }
                }
            }
        }
    }
    field(:unk6, 208) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:stress_level, 224) {
        number 32, true
    }
    field(:unk_v4014_2, 228) {
        number 32, true
    }
    field(:unk_v4014_3, 232) {
        number 32, true
    }
    field(:unk_v4019_1, 236) {
        number 32, true
    }
    field(:unk_v4019_2, 240) {
        number 32, true
    }
end

class UnitPreference < MemHack::Compound
    sizeof 20

    field(:type, 0) {
        class ::DFHack::UnitPreference_TType < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :LikeMaterial ; NUME[:LikeMaterial] = 0
            ENUM[1] = :LikeCreature ; NUME[:LikeCreature] = 1
            ENUM[2] = :LikeFood ; NUME[:LikeFood] = 2
            ENUM[3] = :HateCreature ; NUME[:HateCreature] = 3
            ENUM[4] = :LikeItem ; NUME[:LikeItem] = 4
            ENUM[5] = :LikePlant ; NUME[:LikePlant] = 5
            ENUM[6] = :LikeTree ; NUME[:LikeTree] = 6
            ENUM[7] = :LikeColor ; NUME[:LikeColor] = 7
            ENUM[8] = :LikeShape ; NUME[:LikeShape] = 8
        end

        number 16, true, nil, UnitPreference_TType
    }
    field(:item_type, 2) {
        number 16, true, nil, ItemType
    }
    field(:creature_id, 2) {
        number 16, true, -1
    }
    def creature_tg ; df.world.raws.creatures.all[creature_id] ; end
    field(:color_id, 2) {
        number 16, true, -1
    }
    def color_tg ; df.world.raws.language.colors[color_id] ; end
    field(:shape_id, 2) {
        number 16, true, -1
    }
    def shape_tg ; df.world.raws.language.shapes[shape_id] ; end
    field(:plant_id, 2) {
        number 16, true, -1
    }
    def plant_tg ; df.world.raws.plants.all[plant_id] ; end
    field(:item_subtype, 4) {
        number 16, true, -1
    }
    field(:mattype, 6) {
        number 16, true, -1
    }
    field(:matindex, 8) {
        number 32, true
    }
    field(:active, 12) {
        number 8, true, nil, BooleanEnum
    }
    field(:prefstring_seed, 16) {
        number 32, false
    }
end

class UnitRequest < MemHack::Compound
    sizeof 6

    field(:type, 0) {
        class ::DFHack::UnitRequest_TType < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :DoGuildJobs ; NUME[:DoGuildJobs] = 0
        end

        number 16, true, nil, UnitRequest_TType
    }
    field(:guild, 2) {
        number 16, true, nil, GuildId
    }
    field(:count, 4) {
        number 16, true
    }
end

class UnitSkill < MemHack::Compound
    sizeof 32

    field(:id, 0) {
        number 16, true, nil, JobSkill
    }
    field(:rating, 4) {
        number 32, true, nil, SkillRating
    }
    field(:experience, 8) {
        number 32, true
    }
    field(:unused_counter, 12) {
        number 32, true
    }
    field(:rusty, 16) {
        number 32, true
    }
    field(:rust_counter, 20) {
        number 32, true
    }
    field(:demotion_counter, 24) {
        number 32, true
    }
    field(:unk_1c, 28) {
        number 32, true
    }
end

class UnitSoul < MemHack::Compound
    sizeof 796

    field(:unit_id, 0) {
        number 32, true, -1
    }
    def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
    field(:name, 4) {
        global :LanguageName
    }
    field(:race, 112) {
        number 32, false, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:sex, 116) {
        number 8, true
    }
    field(:caste, 118) {
        number 16, false, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
    field(:orientation_flags, 120) {
        global :OrientationFlags
    }
    field(:unk2, 124) {
        number 32, true
    }
    field(:unk3, 128) {
        number 32, true
    }
    field(:unk4, 132) {
        number 32, true
    }
    field(:anon_1, 136) {
        number 32, true
    }
    field(:anon_2, 140) {
        number 32, true
    }
    field(:anon_3, 144) {
        number 32, true
    }
    field(:anon_4, 148) {
        number 32, true
    }
    field(:anon_5, 152) {
        number 32, true
    }
    field(:mental_attrs, 156) {
        static_array(13, 28, MentalAttributeType) {
            global :UnitAttribute
        }
    }
    field(:skills, 520) {
        stl_vector(4) {
            pointer {
                global :UnitSkill
            }
        }
    }
    field(:preferences, 536) {
        stl_vector(4) {
            pointer {
                global :UnitPreference
            }
        }
    }
    field(:personality, 552) {
        global :UnitPersonality
    }
end

class UnitSyndrome < MemHack::Compound
    sizeof 76

    field(:type, 0) {
        number 32, true, -1
    }
    def type_tg ; df.world.raws.syndromes.all[type] ; end
    field(:year, 4) {
        number 32, true
    }
    field(:year_time, 8) {
        number 32, true
    }
    field(:ticks, 12) {
        number 32, true
    }
    field(:wounds, 16) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:wound_id, 32) {
        number 32, true, -1
    }
    field(:symptoms, 36) {
        stl_vector(4) {
            pointer {
                compound(:UnitSyndrome_TSymptoms) {
                    sizeof 96

                    field(:quantity, 0) {
                        number 32, true
                    }
                    field(:delay, 4) {
                        number 32, true
                    }
                    field(:ticks, 8) {
                        number 32, true
                    }
                    field(:target_bp, 12) {
                        stl_vector(2) {
                            number 16, true
                        }
                    }
                    field(:target_layer, 28) {
                        stl_vector(2) {
                            number 16, true
                        }
                    }
                    field(:target_quantity, 44) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:target_delay, 60) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:target_ticks, 76) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:flags, 92) {
                        compound(:UnitSyndrome_TSymptoms_TFlags) {
                            field(:_whole, 0) {
                                number 32, true
                            }
                            field(:disabled, 0) { bit 0 }
                            field(:active, 0) { bit 1 }
                        }
                    }
                }
            }
        }
    }
    field(:reinfection_count, 52) {
        number 16, true
    }
    field(:flags, 56) {
        compound(:UnitSyndrome_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:is_sick, 0) { bit 0 }
            field(:is_sick_low, 0) { bit 1 }
        }
    }
    field(:unk4, 60) {
        stl_vector(4) {
            number 32, true
        }
    }
end

class UnitWound < MemHack::Compound
    sizeof 68

    field(:id, 0) {
        number 32, true
    }
    field(:parts, 4) {
        stl_vector(4) {
            pointer {
                compound(:UnitWound_TParts) {
                    sizeof 124

                    field(:global_layer_idx, 0) {
                        number 32, true, -1
                    }
                    field(:body_part_id, 4) {
                        number 16, true, -1
                    }
                    field(:layer_idx, 6) {
                        number 16, true, -1
                    }
                    field(:contact_area, 8) {
                        number 32, true
                    }
                    field(:surface_perc, 12) {
                        number 16, true
                    }
                    field(:strain, 16) {
                        number 32, true
                    }
                    field(:effect_perc1, 20) {
                        stl_vector(2) {
                            number 16, true
                        }
                    }
                    field(:effect_perc2, 36) {
                        stl_vector(2) {
                            number 16, true
                        }
                    }
                    field(:effect_type, 52) {
                        stl_vector(2) {
                            number 16, true, nil, WoundEffectType
                        }
                    }
                    field(:edged_curve_perc, 68) {
                        number 16, true
                    }
                    field(:flags1, 72) {
                        global :WoundDamageFlags1
                    }
                    field(:flags2, 76) {
                        global :WoundDamageFlags2
                    }
                    field(:bleeding, 80) {
                        number 32, true
                    }
                    field(:pain, 84) {
                        number 32, true
                    }
                    field(:nausea, 88) {
                        number 32, true
                    }
                    field(:dizziness, 92) {
                        number 32, true
                    }
                    field(:paralysis, 96) {
                        number 32, true
                    }
                    field(:numbness, 100) {
                        number 32, true
                    }
                    field(:swelling, 104) {
                        number 32, true
                    }
                    field(:impaired, 108) {
                        number 32, true
                    }
                    field(:cur_penetration_perc, 112) {
                        number 16, true
                    }
                    field(:max_penetration_perc, 114) {
                        number 16, true
                    }
                    field(:jammed_layer_idx, 116) {
                        number 32, true, -1
                    }
                    field(:unk_v406_1, 120) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:age, 20) {
        number 32, true
    }
    field(:attacker_unit_id, 24) {
        number 32, true, -1
    }
    def attacker_unit_tg ; df.world.units.all.binsearch(attacker_unit_id) ; end
    field(:attacker_hist_figure_id, 28) {
        number 32, true, -1
    }
    def attacker_hist_figure_tg ; df.world.history.figures.binsearch(attacker_hist_figure_id) ; end
    field(:flags, 32) {
        compound(:UnitWound_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:severed_part, 0) { bit 0 }
            field(:mortal_wound, 0) { bit 1 }
            field(:stuck_weapon, 0) { bit 2 }
            field(:diagnosed, 0) { bit 3 }
            field(:sutured, 0) { bit 4 }
            field(:infection, 0) { bit 5 }
        }
    }
    field(:syndrome_id, 36) {
        number 32, true, -1
    }
    def syndrome_tg ; df.world.raws.syndromes.all[syndrome_id] ; end
    field(:pain, 40) {
        number 32, true
    }
    field(:nausea, 44) {
        number 32, true
    }
    field(:dizziness, 48) {
        number 32, true
    }
    field(:paralysis, 52) {
        number 32, true
    }
    field(:numbness, 56) {
        number 32, true
    }
    field(:fever, 60) {
        number 32, true
    }
    field(:curse, 64) {
        pointer {
            global :WoundCurseInfo
        }
    }
end

class Vehicle < MemHack::Compound
    sizeof 64

    field(:id, 0) {
        number 32, true
    }
    field(:item_id, 4) {
        number 32, true, -1
    }
    def item_tg ; df.world.items.all.binsearch(item_id) ; end
    field(:offset_x, 8) {
        number 32, true
    }
    field(:offset_y, 12) {
        number 32, true
    }
    field(:offset_z, 16) {
        number 32, true
    }
    field(:speed_x, 20) {
        number 32, true
    }
    field(:speed_y, 24) {
        number 32, true
    }
    field(:speed_z, 28) {
        number 32, true
    }
    field(:anon_1, 32) {
    }
    field(:route_id, 48) {
        number 32, true, -1
    }
    def route_tg ; df.ui.hauling.routes.binsearch(route_id) ; end
    field(:pos, 52) {
        global :Coord
    }
    field(:time_stopped, 60) {
        number 32, true
    }
end

class Vermin < MemHack::Compound
    sizeof 60

    field(:race, 0) {
        number 16, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:caste, 2) {
        number 16, true, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
    field(:pos, 4) {
        global :Coord
    }
    field(:visible, 10) {
        number 8, true, nil, BooleanEnum
    }
    field(:countdown, 12) {
        number 16, true
    }
    field(:item, 16) {
        pointer {
            global :Item
        }
    }
    field(:flags, 20) {
        global :VerminFlags
    }
    field(:amount, 24) {
        number 32, true
    }
    field(:population, 28) {
        global :WorldPopulationRef
    }
    field(:unk_34, 52) {
        number 16, true
    }
    field(:id, 56) {
        number 32, true
    }
end

class VerminFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:is_colony, 0) { bit 1 }
end

class Viewscreen < MemHack::Compound
    sizeof 16

    rtti_classname :viewscreenst

    field(:child, 4) {
        pointer {
            global :Viewscreen
        }
    }
    field(:parent, 8) {
        pointer {
            global :Viewscreen
        }
    }
    field(:breakdown_level, 12) {
        number 8, true, :NONE, InterfaceBreakdownTypes
    }
    field(:option_key_pressed, 13) {
        number 8, true
    }
    def feed(events)
        DFHack.vmethod_call(self, 0, events) ; nil
    end
    def logic()
        DFHack.vmethod_call(self, 4) ; nil
    end
    def render()
        DFHack.vmethod_call(self, 8) ; nil
    end
    def resize(w, h)
        DFHack.vmethod_call(self, 12, w, h) ; nil
    end
    def help()
        DFHack.vmethod_call(self, 16) ; nil
    end
    def movies_okay()
        val = DFHack.vmethod_call(self, 20)
        val &= ((1 << 8) - 1)
        ((val >> (8-1)) & 1) == 0 ? val : val - (1 << 8)
    end
    def is_option_screen()
        val = DFHack.vmethod_call(self, 24)
        val &= ((1 << 8) - 1)
        ((val >> (8-1)) & 1) == 0 ? val : val - (1 << 8)
    end
    def is_save_screen()
        val = DFHack.vmethod_call(self, 28)
        val &= ((1 << 8) - 1)
        ((val >> (8-1)) & 1) == 0 ? val : val - (1 << 8)
    end
    def key_conflict(arg0)
        val = DFHack.vmethod_call(self, 36, InterfaceKey.int(arg0))
        (val & 1) != 0
    end
end

class ViewscreenAdventureLogst < Viewscreen
    sizeof 368

    rtti_classname :viewscreen_adventure_logst

    field(:mode, 16) {
        class ::DFHack::ViewscreenAdventureLogst_TMode < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :Info ; NUME[:Info] = 0
            ENUM[1] = :Map ; NUME[:Map] = 1
        end

        number 8, true, nil, ViewscreenAdventureLogst_TMode
    }
    field(:map_islocalview, 17) {
        number 8, true
    }
    field(:map_hidden, 18) {
        number 8, true
    }
    field(:player_region_x, 20) {
        number 16, true
    }
    field(:player_region_y, 22) {
        number 16, true
    }
    field(:player_local_x, 24) {
        number 16, true
    }
    field(:player_local_y, 26) {
        number 16, true
    }
    field(:unk_8, 28) {
        number 16, true
    }
    field(:unk_9, 30) {
        number 16, true
    }
    field(:unk_10, 32) {
        number 16, true
    }
    field(:unk_11, 34) {
        number 16, true
    }
    field(:cursor_x, 36) {
        number 16, true
    }
    field(:cursor_y, 38) {
        number 16, true
    }
    field(:index, 40) {
        number 32, true
    }
    field(:map_draw_line, 44) {
        number 8, true
    }
    field(:info_mode, 46) {
        class ::DFHack::ViewscreenAdventureLogst_TInfoMode < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :Events ; NUME[:Events] = 0
            ENUM[1] = :Agreements ; NUME[:Agreements] = 1
            ENUM[2] = :People ; NUME[:People] = 2
            ENUM[3] = :Sites ; NUME[:Sites] = 3
            ENUM[4] = :Groups ; NUME[:Groups] = 4
            ENUM[5] = :Regions ; NUME[:Regions] = 5
            ENUM[6] = :Bestiary ; NUME[:Bestiary] = 6
        end

        number 16, true, nil, ViewscreenAdventureLogst_TInfoMode
    }
    field(:local_area_x1, 48) {
        number 16, true
    }
    field(:local_area_x2, 50) {
        number 16, true
    }
    field(:local_area_y1, 52) {
        number 16, true
    }
    field(:local_area_y2, 54) {
        number 16, true
    }
    field(:unk_v40_1a, 56) {
        number 32, true
    }
    field(:unk_v40_1b, 60) {
        number 32, true
    }
    field(:unk_v40_1c, 64) {
        number 32, true
    }
    field(:unk_v40_1d, 68) {
        number 32, true
    }
    field(:unk_v40_1e, 72) {
        number 32, true
    }
    field(:unk_v40_1f, 76) {
        number 32, true
    }
    field(:filter_str, 80) {
        stl_string
    }
    field(:in_filter, 108) {
        number 8, true
    }
    field(:items, 112) {
        static_array(8, 16) {
            stl_vector(4) {
                pointer {
                    global :AdventureLogItem
                }
            }
        }
    }
    field(:filtered_items, 240) {
        static_array(8, 16) {
            stl_vector(4) {
                pointer {
                    global :AdventureLogItem
                }
            }
        }
    }
end

class ViewscreenAnnouncelistst < Viewscreen
    sizeof 44

    rtti_classname :viewscreen_announcelistst

    field(:unit, 16) {
        pointer {
            global :Unit
        }
    }
    field(:report_type, 20) {
        number 16, true, nil, UnitReportType
    }
    field(:sel_idx, 24) {
        number 32, true
    }
    field(:reports, 28) {
        stl_vector(4) {
            pointer {
                global :Report
            }
        }
    }
end

class ViewscreenBarterst < Viewscreen
    sizeof 224

    rtti_classname :viewscreen_barterst

    field(:anon_1, 16) {
        pointer {
        }
    }
    field(:anon_2, 20) {
        pointer {
        }
    }
    field(:anon_3, 24) {
        pointer {
        }
    }
    field(:anon_4, 28) {
        pointer {
        }
    }
    field(:anon_5, 32) {
        static_array(2, 16) {
            stl_vector
        }
    }
    field(:anon_6, 64) {
        static_array(2, 16) {
            stl_vector
        }
    }
    field(:anon_7, 96) {
        static_array(2, 16) {
            stl_vector
        }
    }
    field(:anon_8, 128) {
        stl_vector
    }
    field(:anon_9, 144) {
        stl_vector
    }
    field(:anon_10, 160) {
        static_array(2, 4) {
            number 32, true
        }
    }
    field(:anon_11, 168) {
        number 8, true
    }
    field(:anon_12, 170) {
        number 16, true
    }
    field(:anon_13, 172) {
        number 8, true
    }
    field(:max_ask, 176) {
        number 32, true
    }
    field(:max_offer, 180) {
        number 32, true
    }
    field(:cur_ask, 184) {
        number 32, true
    }
    field(:cur_offer, 188) {
        number 32, true
    }
    field(:anon_14, 192) {
        number 16, true
    }
    field(:anon_15, 194) {
        number 8, true
    }
    field(:anon_16, 196) {
        stl_string
    }
end

class ViewscreenBuildinglistst < Viewscreen
    sizeof 88

    rtti_classname :viewscreen_buildinglistst

    field(:cursor, 16) {
        number 32, true, -1
    }
    field(:alt_right_panel, 20) {
        number 8, true, nil, BooleanEnum
    }
    field(:buildings, 24) {
        stl_vector(4) {
            pointer {
                global :Building
            }
        }
    }
    field(:buildings2, 40) {
        stl_vector(4) {
            pointer {
                global :Building
            }
        }
    }
    field(:room_value, 56) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:room_value2, 72) {
        stl_vector(4) {
            number 32, true
        }
    }
end

class ViewscreenBuildingst < Viewscreen
    sizeof 20

    rtti_classname :viewscreen_buildingst

    field(:building, 16) {
        pointer {
            global :Building
        }
    }
end

class ViewscreenChooseStartSitest < Viewscreen
    sizeof 380

    rtti_classname :viewscreen_choose_start_sitest

    field(:page, 16) {
        class ::DFHack::ViewscreenChooseStartSitest_TPage < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :Biome ; NUME[:Biome] = 0
            ENUM[1] = :Neighbors ; NUME[:Neighbors] = 1
            ENUM[2] = :Civilization ; NUME[:Civilization] = 2
            ENUM[3] = :Elevation ; NUME[:Elevation] = 3
            ENUM[4] = :Cliffs ; NUME[:Cliffs] = 4
            ENUM[5] = :Reclaim ; NUME[:Reclaim] = 5
            ENUM[6] = :Reclaim2 ; NUME[:Reclaim2] = 6
            ENUM[7] = :Find ; NUME[:Find] = 7
            ENUM[8] = :Notes ; NUME[:Notes] = 8
        end

        number 32, true, nil, ViewscreenChooseStartSitest_TPage
    }
    field(:location, 20) {
        global :EmbarkLocation
    }
    field(:biome_idx, 72) {
        number 32, true
    }
    field(:biome_highlighted, 76) {
        number 8, true, nil, BooleanEnum
    }
    field(:in_embark_aquifer, 77) {
        number 8, true, nil, BooleanEnum
    }
    field(:in_embark_salt, 78) {
        number 8, true, nil, BooleanEnum
    }
    field(:in_embark_large, 79) {
        number 8, true, nil, BooleanEnum
    }
    field(:in_embark_normal, 80) {
        number 8, true, nil, BooleanEnum
    }
    field(:highlighted_sites, 84) {
        stl_vector(4) {
            pointer {
                global :WorldSite
            }
        }
    }
    field(:local_sites, 100) {
        stl_vector(4) {
            pointer {
                global :WorldSite
            }
        }
    }
    field(:unk_74, 116) {
        number 32, true
    }
    field(:civ_idx, 120) {
        number 32, true, -1
    }
    field(:available_civs, 124) {
        stl_vector(4) {
            pointer {
                global :HistoricalEntity
            }
        }
    }
    field(:site_info, 140) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:site_abandoned, 156) {
        pointer {
            global :HistoryEvent
        }
    }
    field(:site_created, 160) {
        pointer {
            global :HistoryEvent
        }
    }
    field(:unk_a4, 164) {
        number 32, true
    }
    field(:finder, 168) {
        compound(:ViewscreenChooseStartSitest_TFinder) {
            field(:anon_1, 0) {
                number 32, true
            }
            field(:search_x, 4) {
                number 32, true, -1
            }
            field(:search_y, 8) {
                number 32, true
            }
            field(:cursor, 12) {
                number 32, true, -1
            }
            field(:options, 16) {
                static_array(22, 4, EmbarkFinderOption) {
                    number 32, true
                }
            }
            field(:unmatched, 104) {
                static_array(22, 1, EmbarkFinderOption) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:visible_options, 128) {
                stl_vector(4) {
                    number 32, true, nil, EmbarkFinderOption
                }
            }
            field(:finder_state, 144) {
                number 16, true, -1
            }
            field(:unk_11e, 146) {
                number 16, true
            }
            field(:unk_120, 148) {
                number 16, true
            }
            field(:unk_122, 150) {
                number 16, true
            }
            field(:unk_124, 152) {
                number 16, true
            }
            field(:unk_126, 154) {
                number 16, true
            }
            field(:unk_128, 156) {
                number 16, true
            }
        }
    }
    field(:unk_12c, 328) {
        stl_vector
    }
    field(:unk_13c, 344) {
        stl_vector
    }
    field(:unk_14c, 360) {
        number 32, true
    }
    field(:unk_150, 364) {
        number 32, true
    }
    field(:unk_154, 368) {
        number 16, true
    }
    field(:unk_156, 370) {
        number 16, true
    }
    field(:unk_158, 372) {
        number 16, true
    }
    field(:unk_15a, 374) {
        number 16, true
    }
    field(:unk_15c, 376) {
        number 32, true
    }
end

class ViewscreenCivlistst < Viewscreen
    sizeof 40

    rtti_classname :viewscreen_civlistst

    field(:anon_1, 16) {
    }
    field(:sel_idx, 20) {
        number 32, true
    }
    field(:entities, 24) {
        stl_vector(4) {
            pointer {
                global :HistoricalEntity
            }
        }
    }
end

class ViewscreenConversationst < Viewscreen
    sizeof 32

    rtti_classname :viewscreen_conversationst

    field(:conversation, 16) {
        pointer {
            global :Conversation
        }
    }
    field(:cursor_speech_line, 20) {
        number 32, true
    }
    field(:current_question, 24) {
        number 32, true
    }
    field(:cursor_line, 28) {
        number 16, true
    }
end

class ViewscreenCreatequotast < Viewscreen
    sizeof 316

    rtti_classname :viewscreen_createquotast

    field(:str_filter, 16) {
        static_string(256)
    }
    field(:top_idx, 272) {
        number 32, true
    }
    field(:sel_idx, 276) {
        number 32, true
    }
    field(:orders, 280) {
        stl_vector(4) {
            pointer {
                global :ManagerOrderTemplate
            }
        }
    }
    field(:pages, 296) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:want_quantity, 312) {
        number 8, true, nil, BooleanEnum
    }
end

class ViewscreenCustomizeUnitst < Viewscreen
    sizeof 56

    rtti_classname :viewscreen_customize_unitst

    field(:unit, 16) {
        pointer {
            global :Unit
        }
    }
    field(:editing_nickname, 20) {
        number 8, true
    }
    field(:editing_profession, 21) {
        number 8, true
    }
    field(:previous_name, 24) {
        stl_string
    }
    field(:has_name, 52) {
        number 8, true
    }
end

class ViewscreenDungeonMonsterstatusst < Viewscreen
    sizeof 80

    rtti_classname :viewscreen_dungeon_monsterstatusst

    field(:unit, 16) {
        pointer {
            global :Unit
        }
    }
    field(:inventory_cursor, 20) {
        number 32, true
    }
    field(:body_part_cursor, 24) {
        number 32, true
    }
    field(:body_part, 28) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:view_skills, 44) {
        number 8, true, nil, BooleanEnum
    }
    field(:inventory, 48) {
        stl_vector(4) {
            pointer {
                global :UnitInventoryItem
            }
        }
    }
    field(:spatters, 64) {
        stl_vector(4) {
            pointer {
                global :Spatter
            }
        }
    }
end

class ViewscreenDungeonWrestlest < Viewscreen
    sizeof 344

    rtti_classname :viewscreen_dungeon_wrestlest

    field(:player, 16) {
        pointer {
            global :Unit
        }
    }
    field(:target, 20) {
        pointer {
            global :Unit
        }
    }
    field(:anon_1, 24) {
        number 8, true
    }
    field(:anon_2, 28) {
        number 32, true
    }
    field(:anon_3, 32) {
        stl_vector
    }
    field(:anon_4, 48) {
        number 32, true
    }
    field(:anon_5, 52) {
        number 32, true
    }
    field(:anon_6, 56) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_7, 72) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk1, 88) {
        compound(:ViewscreenDungeonWrestlest_TUnk1) {
            field(:anon_1, 0) {
                pointer {
                    global :Unit
                }
            }
            field(:anon_2, 4) {
                number 8, true
            }
            field(:anon_3, 5) {
                number 8, true
            }
            field(:weapons, 8) {
                stl_vector(4) {
                    pointer {
                        global :Item
                    }
                }
            }
            field(:anon_4, 24) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_5, 40) {
                stl_vector
            }
            field(:anon_6, 56) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_7, 72) {
                stl_vector
            }
            field(:anon_8, 88) {
                stl_vector
            }
            field(:anon_9, 104) {
                stl_vector
            }
            field(:anon_10, 120) {
                stl_vector
            }
            field(:anon_11, 136) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_12, 152) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_13, 168) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_14, 184) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_15, 200) {
                stl_vector
            }
            field(:anon_16, 216) {
                stl_vector
            }
            field(:anon_17, 232) {
                stl_vector
            }
        }
    }
    field(:anon_8, 336) {
        number 32, true
    }
    field(:anon_9, 340) {
        number 32, true
    }
end

class ViewscreenDungeonmodest < Viewscreen
    sizeof 40

    rtti_classname :viewscreen_dungeonmodest

    field(:x, 16) {
        number 32, true
    }
    field(:y, 20) {
        number 32, true
    }
    field(:z, 24) {
        number 32, true
    }
    field(:announce_y, 28) {
        number 32, true
    }
    field(:announce_idx, 32) {
        number 32, true
    }
    field(:announce_more, 36) {
        number 8, true
    }
end

class ViewscreenDwarfmodest < Viewscreen
    sizeof 120

    rtti_classname :viewscreen_dwarfmodest

    field(:shown_site_name, 16) {
        number 8, true
    }
    field(:jeweler_mat_count, 18) {
        number 16, true
    }
    field(:jeweler_cutgem, 20) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:jeweler_encrust, 36) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unit_labors_sidemenu, 52) {
        stl_vector(4) {
            number 32, true, nil, UnitLabor
        }
    }
    field(:unit_labors_sidemenu_uplevel, 68) {
        stl_vector(4) {
            number 32, true, nil, UnitLabor
        }
    }
    field(:unit_labors_sidemenu_uplevel_idx, 84) {
        number 32, true
    }
    field(:sideSubmenu, 88) {
        number 8, true
    }
    field(:keyRepeat, 89) {
        number 8, true
    }
    field(:trained_animals, 92) {
        stl_vector(4) {
            pointer {
                global :Unit
            }
        }
    }
    field(:trained_animal_idx, 108) {
        number 32, true
    }
    field(:number_assigned_hunt, 112) {
        number 32, true
    }
    field(:number_assigned_war, 116) {
        number 32, true
    }
end

class ViewscreenEntityst < Viewscreen
    sizeof 116

    rtti_classname :viewscreen_entityst

    field(:entity, 16) {
        pointer {
            global :HistoricalEntity
        }
    }
    field(:anon_1, 20) {
        stl_vector
    }
    field(:anon_2, 36) {
        number 32, true
    }
    field(:important_leader_nemesis, 40) {
        stl_vector(4) {
            pointer {
                global :NemesisRecord
            }
        }
    }
    field(:anon_3, 56) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:start_idx, 72) {
        number 32, true
    }
    field(:agreements, 76) {
        stl_vector(4) {
            pointer {
                global :MeetingEvent
            }
        }
    }
    field(:agreement_status, 92) {
        stl_vector(1) {
            number 8, true
        }
    }
    field(:agreement_cursor, 108) {
        number 32, true
    }
    field(:page, 112) {
        number 16, true
    }
end

class ViewscreenExportGraphicalMapst < Viewscreen
    sizeof 60

    rtti_classname :viewscreen_export_graphical_mapst

    field(:anon_1, 16) {
        number 16, true
    }
    field(:anon_2, 18) {
        number 16, true
    }
    field(:anon_3, 20) {
        number 16, true
    }
    field(:anon_4, 22) {
        number 16, true
    }
    field(:anon_5, 24) {
        number 32, true
    }
    field(:anon_6, 28) {
        number 32, true
    }
    field(:anon_7, 32) {
        number 32, true
    }
    field(:anon_8, 36) {
        number 32, true
    }
    field(:anon_9, 40) {
        number 32, true
    }
    field(:anon_10, 44) {
        number 32, true
    }
    field(:anon_11, 48) {
        number 32, true
    }
    field(:anon_12, 52) {
        number 8, true
    }
    field(:sel_idx, 56) {
        number 32, true
    }
end

class ViewscreenExportRegionst < Viewscreen
    sizeof 80

    rtti_classname :viewscreen_export_regionst

    field(:anon_1, 16) {
        number 8, true
    }
    field(:anon_2, 20) {
        stl_vector
    }
    field(:anon_3, 36) {
        stl_vector
    }
    field(:anon_4, 52) {
        stl_vector
    }
    field(:anon_5, 68) {
        number 32, true
    }
    field(:anon_6, 72) {
        number 32, true
    }
    field(:anon_7, 76) {
        number 32, true
    }
end

class ViewscreenGameCleanerst < Viewscreen
    sizeof 24

    rtti_classname :viewscreen_game_cleanerst

    field(:state, 16) {
        class ::DFHack::ViewscreenGameCleanerst_TState < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :CleaningGameObjects ; NUME[:CleaningGameObjects] = 0
            ENUM[1] = :CleaningStrandedObjects ; NUME[:CleaningStrandedObjects] = 1
            ENUM[2] = :CleaningPlayObjects ; NUME[:CleaningPlayObjects] = 2
        end

        number 32, true, nil, ViewscreenGameCleanerst_TState
    }
    field(:anon_1, 20) {
        number 8, true
    }
end

class ViewscreenItemst < Viewscreen
    sizeof 108

    rtti_classname :viewscreen_itemst

    field(:item, 16) {
        pointer {
            global :Item
        }
    }
    field(:entry_ref, 20) {
        stl_vector(4) {
            pointer {
                global :GeneralRef
            }
        }
    }
    field(:entry_indent, 36) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:unk_34, 52) {
        stl_vector(4) {
            pointer {
            }
        }
    }
    field(:entry_string, 68) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:entry_reaction, 84) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:cursor_pos, 100) {
        number 32, true
    }
    field(:caption_uses, 104) {
        number 8, true, nil, BooleanEnum
    }
    field(:caption_contents, 105) {
        number 8, true, nil, BooleanEnum
    }
end

class ViewscreenJoblistst < Viewscreen
    sizeof 56

    rtti_classname :viewscreen_joblistst

    field(:allow_zoom, 16) {
        number 8, true, nil, BooleanEnum
    }
    field(:cursor_pos, 20) {
        number 32, true
    }
    field(:jobs, 24) {
        stl_vector(4) {
            pointer {
                global :Job
            }
        }
    }
    field(:units, 40) {
        stl_vector(4) {
            pointer {
                global :Unit
            }
        }
    }
end

class ViewscreenJobmanagementst < Viewscreen
    sizeof 20

    rtti_classname :viewscreen_jobmanagementst

    field(:sel_idx, 16) {
        number 32, true
    }
end

class ViewscreenJobst < Viewscreen
    sizeof 20

    rtti_classname :viewscreen_jobst

    field(:job, 16) {
        pointer {
            global :Job
        }
    }
end

class ViewscreenJusticest < Viewscreen
    sizeof 120

    rtti_classname :viewscreen_justicest

    field(:jails_needed, 16) {
        number 16, true
    }
    field(:jails_present, 18) {
        number 16, true
    }
    field(:cur_column, 20) {
        number 32, true
    }
    field(:convicts, 24) {
        stl_vector(4) {
            pointer {
                global :Unit
            }
        }
    }
    field(:recent_cases, 40) {
        stl_vector(4) {
            pointer {
                global :Crime
            }
        }
    }
    field(:anon_1, 56) {
        number 32, true
    }
    field(:anon_2, 60) {
        number 32, true
    }
    field(:anon_3, 64) {
        number 32, true
    }
    field(:cold_cases, 68) {
        number 8, true, nil, BooleanEnum
    }
    field(:anon_4, 72) {
        number 32, true
    }
    field(:anon_5, 76) {
        number 32, true
    }
    field(:cursor_right, 80) {
        number 32, true
    }
    field(:convictions, 84) {
        stl_vector(4) {
            pointer {
                global :Crime
            }
        }
    }
    field(:punishment, 100) {
        pointer {
            global :Punishment
        }
    }
    field(:anon_6, 104) {
        stl_vector(4) {
            pointer {
                global :Unit
            }
        }
    }
end

class ViewscreenKitchenprefst < Viewscreen
    sizeof 132

    rtti_classname :viewscreen_kitchenprefst

    field(:cursor, 16) {
        number 32, true
    }
    field(:item_type, 20) {
        stl_vector(2) {
            number 16, true, nil, ItemType
        }
    }
    field(:item_subtype, 36) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:mat_type, 52) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:mat_index, 68) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:count, 84) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:forbidden, 100) {
        stl_vector(1) {
            number 8, false
        }
    }
    field(:possible, 116) {
        stl_vector(1) {
            number 8, false
        }
    }
end

class ViewscreenLayer < Viewscreen
    sizeof 32

    rtti_classname :viewscreen_layerst

    field(:layer_objects, 16) {
        stl_vector(4) {
            pointer {
                global :LayerObject
            }
        }
    }
end

class ViewscreenLayerArenaCreaturest < ViewscreenLayer
    sizeof 52

    rtti_classname :viewscreen_layer_arena_creaturest

    field(:unk_1c, 32) {
        number 8, true
    }
    field(:unk_1e, 34) {
        number 16, true
    }
    field(:unk_20, 36) {
    }
    field(:cur_side, 44) {
        number 32, true
    }
    field(:cur_interaction, 48) {
        number 32, true, -1
    }
    def cur_interaction_tg ; df.world.arena_spawn.interactions[cur_interaction] ; end
end

class ViewscreenLayerAssigntradest < ViewscreenLayer
    sizeof 1108

    rtti_classname :viewscreen_layer_assigntradest

    field(:info, 32) {
        stl_vector(4) {
            pointer {
                global :AssignTradeStatus
            }
        }
    }
    field(:depot, 48) {
        pointer {
            global :BuildingTradedepotst
        }
    }
    field(:lists, 52) {
        static_array(63, 16) {
            stl_vector(4) {
                number 32, true, -1
            }
        }
    }
    field(:visible_lists, 1060) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:sort_distance, 1076) {
        number 8, true, nil, BooleanEnum
    }
    field(:pending_on_top, 1077) {
        number 8, true, nil, BooleanEnum
    }
    field(:filter_mandates, 1078) {
        number 8, true, nil, BooleanEnum
    }
    field(:filter, 1080) {
        stl_string
    }
end

class ViewscreenLayerChooseLanguageNamest < ViewscreenLayer
    sizeof 304

    rtti_classname :viewscreen_layer_choose_language_namest

    field(:entity, 32) {
        pointer {
            global :HistoricalEntity
        }
    }
    field(:name, 36) {
        pointer {
            global :LanguageName
        }
    }
    field(:unk1a, 40) {
        number 32, true
    }
    field(:unk1b, 44) {
        number 32, true
    }
    field(:unk1c, 48) {
        number 32, true
    }
    field(:dictionary, 52) {
        global :LanguageWordTable
    }
    field(:list_word, 244) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def list_word_tg ; list_word.map { |i| df.world.raws.language.words[i] } ; end
    field(:list_part, 260) {
        stl_vector(4) {
            number 32, true, nil, PartOfSpeech
        }
    }
    field(:selector, 276) {
        stl_string
    }
end

class ViewscreenLayerCurrencyst < ViewscreenLayer
    sizeof 68

    rtti_classname :viewscreen_layer_currencyst

    field(:anon_1, 32) {
        stl_vector
    }
    field(:anon_2, 48) {
        number 32, true
    }
    field(:anon_3, 52) {
        stl_vector
    }
end

class ViewscreenLayerExportPlayMapst < ViewscreenLayer
    sizeof 96

    rtti_classname :viewscreen_layer_export_play_mapst

    field(:anon_1, 32) {
        stl_vector(1) {
            number 8, true
        }
    }
    field(:anon_2, 48) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_3, 64) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_4, 80) {
        stl_vector(2) {
            number 16, true
        }
    }
end

class ViewscreenLayerMilitaryst < ViewscreenLayer
    sizeof 792

    rtti_classname :viewscreen_layer_militaryst

    field(:squads, 32) {
        compound(:ViewscreenLayerMilitaryst_TSquads) {
            field(:list, 0) {
                stl_vector(4) {
                    pointer {
                        global :Squad
                    }
                }
            }
            field(:leader_positions, 16) {
                stl_vector(4) {
                    pointer {
                        global :EntityPosition
                    }
                }
            }
            field(:leader_assignments, 32) {
                stl_vector(4) {
                    pointer {
                        global :EntityPositionAssignment
                    }
                }
            }
            field(:can_appoint, 48) {
                stl_bit_vector
            }
        }
    }
    field(:positions, 100) {
        compound(:ViewscreenLayerMilitaryst_TPositions) {
            field(:assigned, 0) {
                stl_vector(4) {
                    pointer {
                        global :Unit
                    }
                }
            }
            field(:skill, 16) {
                stl_vector(2) {
                    number 16, true, nil, JobSkill
                }
            }
            field(:unk_84, 32) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:candidates, 48) {
                stl_vector(4) {
                    pointer {
                        global :Unit
                    }
                }
            }
        }
    }
    field(:page, 164) {
        class ::DFHack::ViewscreenLayerMilitaryst_TPage < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :Positions ; NUME[:Positions] = 0
            ENUM[1] = :Alerts ; NUME[:Alerts] = 1
            ENUM[2] = :Equip ; NUME[:Equip] = 2
            ENUM[3] = :Uniforms ; NUME[:Uniforms] = 3
            ENUM[4] = :Supplies ; NUME[:Supplies] = 4
            ENUM[5] = :Ammunition ; NUME[:Ammunition] = 5
        end

        number 32, true, nil, ViewscreenLayerMilitaryst_TPage
    }
    field(:num_squads, 168) {
        number 32, true
    }
    field(:num_soldiers, 172) {
        number 32, true
    }
    field(:num_active, 176) {
        number 32, true
    }
    field(:squad_members, 180) {
        compound(:ViewscreenLayerMilitaryst_TSquadMembers) {
            field(:profession, 0) {
                stl_vector(2) {
                    number 16, true, nil, Profession
                }
            }
            field(:count, 16) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:max_count, 32) {
                stl_vector(4) {
                    number 32, true
                }
            }
        }
    }
    field(:in_create_squad, 228) {
        number 8, true, nil, BooleanEnum
    }
    field(:in_new_squad, 229) {
        number 8, true, nil, BooleanEnum
    }
    field(:unk_e6, 230) {
        number 8, true, nil, BooleanEnum
    }
    field(:captain_positions, 232) {
        stl_vector(4) {
            pointer {
                global :EntityPosition
            }
        }
    }
    field(:new_position, 248) {
        pointer {
            global :EntityPosition
        }
    }
    field(:unk_fc, 252) {
        number 8, true, nil, BooleanEnum
    }
    field(:in_rename_alert, 253) {
        number 8, true, nil, BooleanEnum
    }
    field(:in_delete_alert, 254) {
        number 8, true, nil, BooleanEnum
    }
    field(:alert_squads, 256) {
        stl_vector(4) {
            pointer {
                global :Squad
            }
        }
    }
    field(:equip, 272) {
        compound(:ViewscreenLayerMilitaryst_TEquip) {
            field(:mode, 0) {
                class ::DFHack::ViewscreenLayerMilitaryst_TEquip_TMode < MemHack::Enum
                    ENUM = Hash.new
                    NUME = Hash.new
                    ENUM[0] = :Customize ; NUME[:Customize] = 0
                    ENUM[1] = :Uniform ; NUME[:Uniform] = 1
                    ENUM[2] = :Priority ; NUME[:Priority] = 2
                end

                number 32, true, nil, ViewscreenLayerMilitaryst_TEquip_TMode
            }
            field(:squads, 4) {
                stl_vector(4) {
                    pointer {
                        global :Squad
                    }
                }
            }
            field(:units, 20) {
                stl_vector(4) {
                    pointer {
                        global :Unit
                    }
                }
            }
            field(:specific_items, 36) {
                stl_vector(4) {
                    pointer {
                        global :Item
                    }
                }
            }
            field(:prio_in_move, 52) {
                number 32, true, -1
            }
            field(:assigned, 56) {
                compound(:ViewscreenLayerMilitaryst_TEquip_TAssigned) {
                    field(:spec, 0) {
                        stl_vector(4) {
                            pointer {
                                global :SquadUniformSpec
                            }
                        }
                    }
                    field(:category, 16) {
                        stl_vector(2) {
                            number 16, true, nil, UniformCategory
                        }
                    }
                    field(:index, 32) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                }
            }
            field(:unk_178, 104) {
                stl_vector
            }
            field(:edit_spec, 120) {
                pointer {
                    global :SquadUniformSpec
                }
            }
            field(:uniforms, 124) {
                stl_vector(4) {
                    pointer {
                        global :EntityUniform
                    }
                }
            }
            field(:uniform, 140) {
                compound(:ViewscreenLayerMilitaryst_TEquip_TUniform) {
                    field(:type, 0) {
                        stl_vector(2) {
                            number 16, true, nil, ItemType
                        }
                    }
                    field(:subtype, 16) {
                        stl_vector(2) {
                            number 16, true, -1
                        }
                    }
                    field(:category, 32) {
                        stl_vector(2) {
                            number 16, true, nil, UniformCategory
                        }
                    }
                    field(:index, 48) {
                        stl_vector(2) {
                            number 16, true
                        }
                    }
                    field(:info, 64) {
                        stl_vector(4) {
                            pointer {
                                global :EntityUniformItem
                            }
                        }
                    }
                }
            }
            field(:edit_mode, 220) {
                class ::DFHack::ViewscreenLayerMilitaryst_TEquip_TEditMode < MemHack::Enum
                    ENUM = Hash.new
                    NUME = Hash.new
                    ENUM[0] = :Armor ; NUME[:Armor] = 0
                    ENUM[1] = :Helm ; NUME[:Helm] = 1
                    ENUM[2] = :Legs ; NUME[:Legs] = 2
                    ENUM[3] = :Gloves ; NUME[:Gloves] = 3
                    ENUM[4] = :Boots ; NUME[:Boots] = 4
                    ENUM[5] = :Shield ; NUME[:Shield] = 5
                    ENUM[6] = :Weapon ; NUME[:Weapon] = 6
                    ENUM[7] = :Material ; NUME[:Material] = 7
                    ENUM[8] = :Color ; NUME[:Color] = 8
                    ENUM[9] = :SpecificArmor ; NUME[:SpecificArmor] = 9
                    ENUM[10] = :SpecificHelm ; NUME[:SpecificHelm] = 10
                    ENUM[11] = :SpecificLegs ; NUME[:SpecificLegs] = 11
                    ENUM[12] = :SpecificGloves ; NUME[:SpecificGloves] = 12
                    ENUM[13] = :SpecificBoots ; NUME[:SpecificBoots] = 13
                    ENUM[14] = :SpecificShield ; NUME[:SpecificShield] = 14
                    ENUM[15] = :SpecificWeapon ; NUME[:SpecificWeapon] = 15
                end

                number 32, true, nil, ViewscreenLayerMilitaryst_TEquip_TEditMode
            }
            field(:unk_1ec, 224) {
            }
            field(:add_item, 228) {
                compound(:ViewscreenLayerMilitaryst_TEquip_TAddItem) {
                    field(:type, 0) {
                        stl_vector(2) {
                            number 16, true, nil, ItemType
                        }
                    }
                    field(:subtype, 16) {
                        stl_vector(2) {
                            number 16, true, -1
                        }
                    }
                    field(:unk_214, 32) {
                        stl_vector
                    }
                    field(:foreign, 48) {
                        stl_bit_vector
                    }
                }
            }
            field(:material, 296) {
                compound(:ViewscreenLayerMilitaryst_TEquip_TMaterial) {
                    field(:generic, 0) {
                        stl_vector(2) {
                            number 16, true, nil, EntityMaterialCategory
                        }
                    }
                    field(:specific, 16) {
                        global :MaterialVecRef
                    }
                }
            }
            field(:color, 344) {
                compound(:ViewscreenLayerMilitaryst_TEquip_TColor) {
                    field(:id, 0) {
                        stl_vector(4) {
                            number 32, true, -1
                        }
                    }
                    def id_tg ; id.map { |i| df.world.raws.language.colors[i] } ; end
                    field(:dye, 16) {
                        stl_bit_vector
                    }
                }
            }
            field(:in_name_uniform, 380) {
                number 8, true, nil, BooleanEnum
            }
        }
    }
    field(:ammo, 656) {
        compound(:ViewscreenLayerMilitaryst_TAmmo) {
            field(:squads, 0) {
                stl_vector(4) {
                    pointer {
                        global :Squad
                    }
                }
            }
            field(:in_add_item, 16) {
                number 8, true, nil, BooleanEnum
            }
            field(:in_set_material, 17) {
                number 8, true, nil, BooleanEnum
            }
            field(:add_item, 20) {
                compound(:ViewscreenLayerMilitaryst_TAmmo_TAddItem) {
                    field(:type, 0) {
                        stl_vector(2) {
                            number 16, true, nil, ItemType
                        }
                    }
                    field(:subtype, 16) {
                        stl_vector(2) {
                            number 16, true, -1
                        }
                    }
                    field(:foreign, 32) {
                        stl_bit_vector
                    }
                }
            }
            field(:material, 72) {
                compound(:ViewscreenLayerMilitaryst_TAmmo_TMaterial) {
                    field(:generic, 0) {
                        stl_vector(2) {
                            number 16, true, nil, EntityMaterialCategory
                        }
                    }
                    field(:specific, 16) {
                        global :MaterialVecRef
                    }
                }
            }
        }
    }
    field(:supplies_squads, 776) {
        stl_vector(4) {
            pointer {
                global :Squad
            }
        }
    }
end

class ViewscreenLayerMusicsoundst < ViewscreenLayer
    sizeof 32

    rtti_classname :viewscreen_layer_musicsoundst

end

class ViewscreenLayerNoblelistst < ViewscreenLayer
    sizeof 116

    rtti_classname :viewscreen_layer_noblelistst

    field(:mode, 32) {
        class ::DFHack::ViewscreenLayerNoblelistst_TMode < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :List ; NUME[:List] = 0
            ENUM[1] = :Appoint ; NUME[:Appoint] = 1
            ENUM[2] = :Settings ; NUME[:Settings] = 2
        end

        number 16, true, nil, ViewscreenLayerNoblelistst_TMode
    }
    field(:info, 36) {
        stl_vector(4) {
            pointer {
                compound(:ViewscreenLayerNoblelistst_TInfo) {
                    sizeof 28

                    field(:unit, 0) {
                        pointer {
                            global :Unit
                        }
                    }
                    field(:nemesis, 4) {
                        pointer {
                            global :NemesisRecord
                        }
                    }
                    field(:unk_8, 8) {
                        pointer {
                        }
                    }
                    field(:position, 12) {
                        pointer {
                            global :EntityPosition
                        }
                    }
                    field(:assignment, 16) {
                        pointer {
                            global :EntityPositionAssignment
                        }
                    }
                    field(:group, 20) {
                        number 32, true, -1
                    }
                    def group_tg ; df.world.entities.all.binsearch(group) ; end
                    field(:precedence, 24) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:candidates, 52) {
        stl_vector(4) {
            pointer {
                compound(:ViewscreenLayerNoblelistst_TCandidates) {
                    sizeof 8

                    field(:unit, 0) {
                        pointer {
                            global :Unit
                        }
                    }
                    field(:weight, 4) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:assignments, 68) {
        stl_vector(4) {
            pointer {
                global :EntityPositionAssignment
            }
        }
    }
    field(:histfigs, 84) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def histfigs_tg ; histfigs.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:groups, 100) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def groups_tg ; groups.map { |i| df.world.entities.all.binsearch(i) } ; end
end

class ViewscreenLayerOverallHealthst < ViewscreenLayer
    sizeof 104

    rtti_classname :viewscreen_layer_overall_healthst

    field(:anon_1, 32) {
        number 32, true
    }
    field(:unit, 36) {
        stl_vector(4) {
            pointer {
                global :Unit
            }
        }
    }
    field(:bits1, 52) {
        stl_vector(4) {
            global :HealthViewBits1
        }
    }
    field(:bits2, 68) {
        stl_vector(4) {
            global :HealthViewBits2
        }
    }
    field(:bits3, 84) {
        stl_vector(4) {
            global :HealthViewBits3
        }
    }
    field(:x_cursor_pos, 100) {
        number 32, true
    }
end

class ViewscreenLayerReactionst < ViewscreenLayer
    sizeof 36

    rtti_classname :viewscreen_layer_reactionst

    field(:anon_1, 32) {
        number 32, true
    }
end

class ViewscreenLayerSquadSchedulest < ViewscreenLayer
    sizeof 136

    rtti_classname :viewscreen_layer_squad_schedulest

    field(:squads, 32) {
        stl_vector(4) {
            pointer {
                global :Squad
            }
        }
    }
    field(:swapped, 48) {
        number 8, true
    }
    field(:page_month, 52) {
        number 32, true
    }
    field(:cur_alert, 56) {
        number 32, true
    }
    field(:in_name_cell, 60) {
        number 8, true, nil, BooleanEnum
    }
    field(:in_give_order, 61) {
        number 8, true, nil, BooleanEnum
    }
    field(:in_edit_order, 62) {
        number 8, true, nil, BooleanEnum
    }
    field(:order_list, 64) {
        pointer {
            global :SquadScheduleEntry
        }
    }
    field(:anon_1, 68) {
        number 32, true
    }
    field(:order_month, 72) {
        number 32, true
    }
    field(:order_type, 76) {
        number 32, true
    }
    field(:burrows, 80) {
        stl_bit_vector
    }
    field(:patrol_route, 100) {
        number 32, true
    }
    field(:min_soldiers, 104) {
        number 32, true
    }
    field(:positions, 108) {
        stl_bit_vector
    }
    field(:station_point, 128) {
        number 32, true
    }
    field(:copy_item, 132) {
        pointer {
            global :SquadScheduleEntry
        }
    }
end

class ViewscreenLayerStockpilest < ViewscreenLayer
    sizeof 152

    rtti_classname :viewscreen_layer_stockpilest

    field(:settings, 32) {
        pointer {
            global :StockpileSettings
        }
    }
    field(:cur_group, 36) {
        number 32, true, nil, StockpileList
    }
    field(:cur_list, 40) {
        number 32, true, nil, StockpileList
    }
    field(:group_ids, 44) {
        stl_vector(4) {
            number 32, true, nil, StockpileList
        }
    }
    field(:group_bits, 60) {
        stl_vector(4) {
            global :StockpileGroupSet
        }
    }
    field(:list_ids, 76) {
        stl_vector(4) {
            number 32, true, nil, StockpileList
        }
    }
    field(:item_names, 92) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:item_status, 108) {
        stl_vector(4) {
            pointer {
                number 8, true, nil, BooleanEnum
            }
        }
    }
    field(:title, 124) {
        stl_string
    }
end

class ViewscreenLayerStoneRestrictionst < ViewscreenLayer
    sizeof 140

    rtti_classname :viewscreen_layer_stone_restrictionst

    field(:stone_type, 32) {
        static_array(2, 16) {
            stl_vector(4) {
                number 32, true, -1
            }
        }
    }
    field(:stone_economic, 64) {
        static_array(2, 16) {
            stl_vector(4) {
                pointer {
                    number 8, true, nil, BooleanEnum
                }
            }
        }
    }
    field(:type_tab, 96) {
        number 32, true
    }
    field(:anon_1, 100) {
        number 32, true
    }
    field(:anon_2, 104) {
        number 32, true
    }
    field(:use_name, 108) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:use_id, 124) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def use_tg ; use_id.map { |i| df.world.raws.reactions[i] } ; end
end

class ViewscreenLayerUnitActionst < ViewscreenLayer
    sizeof 260

    rtti_classname :viewscreen_layer_unit_actionst

    field(:unit, 32) {
        pointer {
            global :Unit
        }
    }
    field(:held_items, 36) {
        stl_vector(4) {
            pointer {
                global :Item
            }
        }
    }
    field(:reactions, 52) {
        stl_vector(4) {
            pointer {
                global :Reaction
            }
        }
    }
    field(:choice_items, 68) {
        stl_vector(4) {
            pointer {
                global :Item
            }
        }
    }
    field(:sel_items, 84) {
        stl_vector(4) {
            pointer {
                global :Item
            }
        }
    }
    field(:sel_reagents, 100) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    field(:cur_reaction, 116) {
        pointer {
            global :Reaction
        }
    }
    field(:reagent, 120) {
        number 32, true, -1
    }
    field(:reagent_amnt_left, 124) {
        number 32, true
    }
    field(:anon_1, 128) {
        number 32, true
    }
    field(:anon_2, 132) {
        stl_vector
    }
    field(:anon_3, 148) {
        stl_vector
    }
    field(:anon_4, 164) {
        stl_vector
    }
    field(:anon_5, 180) {
        stl_vector
    }
    field(:anon_6, 196) {
        stl_vector
    }
    field(:anon_7, 212) {
        stl_vector
    }
    field(:anon_8, 228) {
        stl_vector
    }
    field(:anon_9, 244) {
        stl_vector
    }
end

class ViewscreenLayerUnitHealthst < ViewscreenLayer
    sizeof 344

    rtti_classname :viewscreen_layer_unit_healthst

    field(:anon_1, 32) {
        number 32, true
    }
    field(:unit, 36) {
        pointer {
            global :Unit
        }
    }
    field(:page, 40) {
        number 16, true
    }
    field(:title, 44) {
        stl_string
    }
    field(:text, 72) {
        static_array(4, 16) {
            stl_vector(4) {
                pointer {
                    stl_string
                }
            }
        }
    }
    field(:text_fg, 136) {
        static_array(4, 16) {
            stl_vector(2) {
                number 16, true
            }
        }
    }
    field(:text_bg, 200) {
        static_array(4, 16) {
            stl_vector(2) {
                number 16, true
            }
        }
    }
    field(:text_bold, 264) {
        static_array(4, 16) {
            stl_vector(2) {
                number 16, true
            }
        }
    }
    field(:anon_2, 328) {
        number 32, true
    }
    field(:anon_3, 332) {
        number 32, true
    }
    field(:anon_4, 336) {
        number 32, true
    }
    field(:anon_5, 340) {
        number 32, true
    }
end

class ViewscreenLayerUnitRelationshipst < ViewscreenLayer
    sizeof 132

    rtti_classname :viewscreen_layer_unit_relationshipst

    field(:unit, 32) {
        pointer {
            global :Unit
        }
    }
    field(:relation_textline, 36) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:relation_unit_type, 52) {
        stl_vector(2) {
            number 16, true, nil, UnitRelationshipType
        }
    }
    field(:relation_histfig_type, 68) {
        stl_vector(2) {
            number 16, true, nil, HistfigRelationshipType
        }
    }
    field(:relation_unit, 84) {
        stl_vector(4) {
            pointer {
                global :Unit
            }
        }
    }
    field(:relation_hf, 100) {
        stl_vector(4) {
            pointer {
                global :HistoricalFigure
            }
        }
    }
    field(:level, 116) {
        stl_vector(4) {
            number 32, true
        }
    }
end

class ViewscreenLayerWorkshopProfilest < ViewscreenLayer
    sizeof 52

    rtti_classname :viewscreen_layer_workshop_profilest

    field(:profile, 32) {
        pointer {
            global :WorkshopProfile
        }
    }
    field(:workers, 36) {
        stl_vector(4) {
            pointer {
                global :Unit
            }
        }
    }
end

class ViewscreenLayerWorldGenParamPresetst < ViewscreenLayer
    sizeof 152

    rtti_classname :viewscreen_layer_world_gen_param_presetst

    field(:anon_1, 32) {
        number 32, true
    }
    field(:anon_2, 36) {
        number 32, true
    }
    field(:anon_3, 40) {
        stl_string
    }
    field(:anon_4, 68) {
        static_array(24, 2) {
            number 16, true
        }
    }
    field(:anon_5, 116) {
        static_array(24, 1) {
            number 8, true
        }
    }
    field(:anon_6, 140) {
        number 32, true
    }
    field(:anon_7, 144) {
        number 16, true
    }
    field(:anon_8, 146) {
        number 16, true
    }
    field(:anon_9, 148) {
        number 16, true
    }
    field(:anon_10, 150) {
        number 16, true
    }
end

class ViewscreenLayerWorldGenParamst < ViewscreenLayer
    sizeof 184

    rtti_classname :viewscreen_layer_world_gen_paramst

    field(:anon_1, 32) {
        number 32, true
    }
    field(:anon_2, 36) {
        stl_string
    }
    field(:anon_3, 64) {
        stl_vector
    }
    field(:unk1, 80) {
        compound(:ViewscreenLayerWorldGenParamst_TUnk1) {
            field(:anon_1, 0) {
                number 32, true
            }
            field(:anon_2, 4) {
                number 32, true
            }
            field(:anon_3, 8) {
                number 32, true
            }
            field(:anon_4, 12) {
                number 32, true
            }
            field(:anon_5, 16) {
                number 32, true
            }
            field(:anon_6, 20) {
                number 32, true
            }
            field(:anon_7, 24) {
                number 32, true
            }
            field(:anon_8, 28) {
                number 32, true
            }
            field(:anon_9, 32) {
                number 32, true
            }
            field(:anon_10, 36) {
                number 32, true
            }
            field(:anon_11, 40) {
                number 32, true
            }
            field(:anon_12, 44) {
                number 32, true
            }
            field(:anon_13, 48) {
                number 32, true
            }
            field(:anon_14, 52) {
                number 32, true
            }
            field(:anon_15, 56) {
                number 32, true
            }
            field(:anon_16, 60) {
                number 32, true
            }
            field(:anon_17, 64) {
                number 32, true
            }
            field(:anon_18, 68) {
                number 32, true
            }
            field(:anon_19, 72) {
                number 32, true
            }
            field(:anon_20, 76) {
                number 32, true
            }
            field(:anon_21, 80) {
                number 32, true
            }
            field(:anon_22, 84) {
                number 32, true
            }
            field(:anon_23, 88) {
                number 32, true
            }
            field(:anon_24, 92) {
                number 32, true
            }
            field(:anon_25, 96) {
                number 32, true
            }
            field(:anon_26, 100) {
                number 32, true
            }
        }
    }
end

class ViewscreenLegendsst < Viewscreen
    sizeof 600

    rtti_classname :viewscreen_legendsst

    field(:anon_1, 16) {
        number 32, true
    }
    field(:init_step, 20) {
        number 32, true
    }
    field(:init_era, 24) {
        number 32, true
    }
    field(:anon_2, 28) {
        number 32, true
    }
    field(:anon_3, 32) {
        number 32, true
    }
    field(:init_progress, 36) {
        number 32, true
    }
    field(:histfigs, 40) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def histfigs_tg ; histfigs.map { |i| df.world.history.figures.binsearch(i) } ; end
    field(:sites, 56) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:artifacts, 72) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:regions, 88) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:layers, 104) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:entities, 120) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:structures_1, 136) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:structures_2, 152) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_a8, 168) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_4, 184) {
        stl_vector
    }
    field(:anon_5, 200) {
        stl_vector
    }
    field(:anon_6, 216) {
        stl_bit_vector
    }
    field(:anon_7, 236) {
        stl_vector
    }
    field(:anon_8, 252) {
        stl_vector
    }
    field(:anon_9, 268) {
        stl_vector
    }
    field(:anon_10, 284) {
        stl_vector
    }
    field(:era_name, 300) {
        stl_string
    }
    field(:cur_page, 328) {
        number 16, true
    }
    field(:anon_11, 332) {
        number 32, true
    }
    field(:main_cursor, 336) {
        number 32, true
    }
    field(:main_row_type, 340) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:main_row_arg1, 356) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:main_row_arg2, 372) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:main_row_arg3, 388) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:sub_cursor, 404) {
        number 32, true
    }
    field(:anon_12, 408) {
        number 8, true
    }
    field(:anon_13, 412) {
        stl_vector(4) {
            pointer {
            }
        }
    }
    field(:map_x, 428) {
        number 16, true
    }
    field(:map_y, 430) {
        number 16, true
    }
    field(:hide_territories, 432) {
        number 16, true
    }
    field(:civ_site_mode, 434) {
        number 16, true
    }
    field(:anon_14, 436) {
        number 16, true
    }
    field(:filter_text, 440) {
        stl_string
    }
    field(:filter_editing, 468) {
        number 8, true
    }
    field(:anon_15, 472) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_16, 488) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_17, 504) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_18, 520) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_19, 536) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_20, 552) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_21, 568) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_22, 584) {
        stl_vector(4) {
            number 32, true
        }
    }
end

class ViewscreenLoadgamest < Viewscreen
    sizeof 944

    rtti_classname :viewscreen_loadgamest

    field(:cur_step, 16) {
        number 32, true
    }
    field(:unk_v40_1b, 20) {
        number 32, true
    }
    field(:loading, 24) {
        number 8, true
    }
    field(:sel_idx, 28) {
        number 32, true
    }
    field(:saves, 32) {
        stl_vector(4) {
            pointer {
                global :LoadgameSaveInfo
            }
        }
    }
    field(:compressor, 48) {
        global :FileCompressorst
    }
    field(:glosses, 272) {
        global :MatglossList
    }
    field(:unk_v40_2, 720) {
        number 32, true
    }
    field(:cur_save, 724) {
        global :LoadgameSaveInfo
    }
end

class ViewscreenMeetingst < Viewscreen
    sizeof 28

    rtti_classname :viewscreen_meetingst

    field(:dipscript_popup, 16) {
        pointer {
            global :DipscriptPopup
        }
    }
    field(:activity, 20) {
        pointer {
            global :ActivityInfo
        }
    }
    field(:holder, 24) {
        pointer {
            global :Unit
        }
    }
end

class ViewscreenMovieplayerst < Viewscreen
    sizeof 132

    rtti_classname :viewscreen_movieplayerst

    field(:saving, 16) {
        number 8, true
    }
    field(:loading, 17) {
        number 8, true
    }
    field(:editing, 18) {
        number 8, true
    }
    field(:text_mode, 19) {
        number 8, true
    }
    field(:editing_char, 20) {
        number 8, false
    }
    field(:editing_copy_from, 24) {
        number 32, true
    }
    field(:editing_screenf, 28) {
        number 16, true
    }
    field(:editing_screenb, 30) {
        number 16, true
    }
    field(:editing_screenbright, 32) {
        number 16, true
    }
    field(:editing_selected_sound, 36) {
        number 32, true
    }
    field(:editing_menu, 40) {
        number 8, true
    }
    field(:savename, 44) {
        stl_string
    }
    field(:force_file, 72) {
        stl_string
    }
    field(:is_playing, 100) {
        number 8, true
    }
    field(:is_forced_play, 101) {
        number 8, true
    }
    field(:quit_if_no_play, 102) {
        number 8, true
    }
    field(:maxmoviepos, 104) {
        number 32, true
    }
    field(:end_frame_pos, 108) {
        number 32, true
    }
    field(:selfile, 112) {
        number 32, true
    }
    field(:filelist, 116) {
        stl_vector
    }
end

class ViewscreenNewRegionst < Viewscreen
    sizeof 192

    rtti_classname :viewscreen_new_regionst

    field(:worldgen_presets, 16) {
        stl_vector
    }
    field(:unk_2, 32) {
        number 8, true
    }
    field(:in_worldgen, 33) {
        number 8, true
    }
    field(:cursor_paramset, 36) {
        number 32, true
    }
    field(:random_seed, 40) {
        stl_string
    }
    field(:editing_randseed, 68) {
        number 8, true
    }
    field(:editing_customname, 69) {
        number 8, true
    }
    field(:editing_title, 70) {
        number 8, true
    }
    field(:popup_deleteset, 71) {
        number 8, true
    }
    field(:popup_changedimensions, 72) {
        number 8, true
    }
    field(:unk_11, 73) {
        number 8, true
    }
    field(:custom_size_x, 74) {
        number 16, false
    }
    field(:custom_size_y, 76) {
        number 16, false
    }
    field(:popup_abort, 78) {
        number 8, true
    }
    field(:popup_goon, 79) {
        number 8, true
    }
    field(:unsaved_changes, 80) {
        number 8, true
    }
    field(:simple_mode, 81) {
        number 8, true
    }
    field(:unk_20, 82) {
        number 8, true
    }
    field(:unk_21, 83) {
        number 8, true
    }
    field(:cursor_line, 84) {
        number 16, true
    }
    field(:world_size, 88) {
        number 32, true
    }
    field(:history, 92) {
        number 32, true
    }
    field(:number_civs, 96) {
        number 32, true
    }
    field(:number_sites, 100) {
        number 32, true
    }
    field(:number_beasts, 104) {
        number 32, true
    }
    field(:savagery, 108) {
        number 32, true
    }
    field(:mineral_occurence, 112) {
        number 32, true
    }
    field(:worldgen_paused, 116) {
        number 8, true
    }
    field(:worldgen_rejected, 117) {
        number 8, true
    }
    field(:unk_32, 120) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:unk_33, 136) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:unk_98, 152) {
        stl_string
    }
    field(:unk_b4, 180) {
        number 8, true
    }
    field(:unk_b8, 184) {
        number 32, true
    }
    field(:unk_bc, 188) {
        number 32, true
    }
end

class ViewscreenNoblest < Viewscreen
    sizeof 20

    rtti_classname :viewscreen_noblest

    field(:become_capital_offerings, 16) {
        number 32, true
    }
end

class ViewscreenOptionst < Viewscreen
    sizeof 44

    rtti_classname :viewscreen_optionst

    field(:msg_quit, 16) {
        number 8, true
    }
    field(:in_retire_adv, 17) {
        number 8, true
    }
    field(:msg_peasant, 18) {
        number 8, true
    }
    field(:in_retire_dwf_abandon_adv, 19) {
        number 8, true
    }
    field(:in_abandon_dwf, 20) {
        number 8, true
    }
    field(:sel_idx, 24) {
        number 32, true
    }
    field(:options, 28) {
        stl_vector(4) {
            number 32, true
        }
    }
end

class ViewscreenOverallstatusst < Viewscreen
    sizeof 36

    rtti_classname :viewscreen_overallstatusst

    field(:visible_pages, 16) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:page_cursor, 32) {
        number 32, true
    }
end

class ViewscreenPetst < Viewscreen
    sizeof 144

    rtti_classname :viewscreen_petst

    field(:cursor, 16) {
        number 32, true
    }
    field(:animal, 20) {
        stl_vector(4) {
            compound(:ViewscreenPetst_TAnimal) {
                field(:unit, 0) {
                    pointer {
                        global :Unit
                    }
                }
                field(:item, 0) {
                    pointer {
                        global :Item
                    }
                }
            }
        }
    }
    field(:is_vermin, 36) {
        stl_vector(1) {
            number 8, true, nil, BooleanEnum
        }
    }
    field(:is_tame, 52) {
        stl_vector(1) {
            number 8, true, nil, BooleanEnum
        }
    }
    field(:is_adopting, 68) {
        stl_vector(1) {
            number 8, true, nil, BooleanEnum
        }
    }
    field(:mode, 84) {
        class ::DFHack::ViewscreenPetst_TMode < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :List ; NUME[:List] = 0
            ENUM[1] = :TrainingKnowledge ; NUME[:TrainingKnowledge] = 1
            ENUM[2] = :SelectTrainer ; NUME[:SelectTrainer] = 2
        end

        number 32, true, nil, ViewscreenPetst_TMode
    }
    field(:knowledge_page, 88) {
        number 32, true
    }
    field(:known, 92) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def known_tg ; known.map { |i| df.world.raws.creatures.all[i] } ; end
    field(:trainer_cursor, 108) {
        number 32, true
    }
    field(:trainer_unit, 112) {
        stl_vector(4) {
            pointer {
                global :Unit
            }
        }
    }
    field(:trainer_mode, 128) {
        stl_vector(4) {
            number 32, true
        }
    }
end

class ViewscreenPricest < Viewscreen
    sizeof 24

    rtti_classname :viewscreen_pricest

    field(:anon_1, 16) {
        number 16, true
    }
    field(:anon_2, 20) {
        number 32, true
    }
end

class ViewscreenReportlistst < Viewscreen
    sizeof 68

    rtti_classname :viewscreen_reportlistst

    field(:units, 16) {
        stl_vector(4) {
            pointer {
                global :Unit
            }
        }
    }
    field(:types, 32) {
        stl_vector(2) {
            number 16, true, nil, UnitReportType
        }
    }
    field(:last_id, 48) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def last_tg ; last_id.map { |i| df.world.status.reports.binsearch(i) } ; end
    field(:cursor, 64) {
        number 32, true
    }
end

class ViewscreenRequestagreementst < Viewscreen
    sizeof 288

    rtti_classname :viewscreen_requestagreementst

    field(:requests, 16) {
        pointer {
            global :EntityBuyPrices
        }
    }
    field(:civ_id, 20) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ_id) ; end
    field(:cursor, 24) {
        number 32, true
    }
    field(:title, 28) {
        static_string(256)
    }
    field(:anon_1, 284) {
        pointer {
            global :HistoricalEntity
        }
    }
end

class ViewscreenSavegamest < Viewscreen
    sizeof 280

    rtti_classname :viewscreen_savegamest

    field(:anon_1, 16) {
        stl_string
    }
    field(:cur_step, 44) {
        number 32, true
    }
    field(:unk_v40_1b, 48) {
        number 32, true
    }
    field(:compressor, 56) {
        global :FileCompressorst
    }
end

class ViewscreenSelectitemst < Viewscreen
    sizeof 2552

    rtti_classname :viewscreen_selectitemst

    field(:p_item_type, 16) {
        pointer {
            number 16, true
        }
    }
    field(:p_item_subtype, 20) {
        pointer {
            number 16, true
        }
    }
    field(:p_mattype, 24) {
        pointer {
            number 16, true
        }
    }
    field(:p_matindex, 28) {
        pointer {
            number 32, true
        }
    }
    field(:choice, 32) {
        pointer {
            global :EmbarkItemChoice
        }
    }
    field(:screen, 36) {
        pointer {
            global :ViewscreenSetupdwarfgamest
        }
    }
    field(:page_base, 40) {
        static_array(107, 16, EntitySellCategory) {
            stl_vector(4) {
                number 32, true
            }
        }
    }
    field(:title, 1752) {
        static_string(256)
    }
    field(:anon_1, 2008) {
        static_string(256)
    }
    field(:filter, 2264) {
        static_string(256)
    }
    field(:right_pos, 2520) {
        number 32, true
    }
    field(:right_page_base, 2524) {
        number 32, true
    }
    field(:right_list, 2528) {
        number 8, true, nil, BooleanEnum
    }
    field(:sel_category, 2532) {
        number 32, true, -1
    }
    field(:categories, 2536) {
        stl_vector(2) {
            number 16, true, nil, EntitySellCategory
        }
    }
end

class ViewscreenSetupadventurest < Viewscreen
    sizeof 892

    rtti_classname :viewscreen_setupadventurest

    field(:editing_name, 16) {
        number 8, true
    }
    field(:saved_firstname, 20) {
        stl_string
    }
    field(:index_col1, 48) {
        number 32, true
    }
    field(:index_skills, 52) {
        number 32, true, -1
    }
    field(:skill_points_remaining, 56) {
        number 32, true
    }
    field(:subscreen, 60) {
        class ::DFHack::ViewscreenSetupadventurest_TSubscreen < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[1] = :Nemesis ; NUME[:Nemesis] = 1
            ENUM[2] = :Skills ; NUME[:Skills] = 2
            ENUM[3] = :Name ; NUME[:Name] = 3
        end

        number 16, true, nil, ViewscreenSetupadventurest_TSubscreen
    }
    field(:adventurer, 64) {
        compound(:ViewscreenSetupadventurest_TAdventurer) {
            field(:name, 0) {
                global :LanguageName
            }
            field(:race, 108) {
                number 16, true, -1
            }
            def race_tg ; df.world.raws.creatures.all[race] ; end
            field(:caste, 110) {
                number 16, true, -1
            }
            def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
            field(:skills, 112) {
                static_array(118, 4, JobSkill) {
                    number 32, true
                }
            }
            field(:entity, 584) {
                number 32, true, -1
            }
            def entity_tg ; df.world.entities.all.binsearch(entity) ; end
            field(:histfig, 588) {
                number 16, true, -1
            }
            def histfig_tg ; df.world.nemesis.all[histfig] ; end
            field(:unk_7, 592) {
                number 32, true
            }
            field(:unk_8, 596) {
                number 32, true
            }
            field(:unk_9, 600) {
                number 16, true
            }
            field(:attributes, 604) {
                static_array(19, 4) {
                    number 32, true
                }
            }
            field(:status, 680) {
                class ::DFHack::ViewscreenSetupadventurest_TAdventurer_TStatus < MemHack::Enum
                    ENUM = Hash.new
                    NUME = Hash.new
                    ENUM[0] = :Peasant ; NUME[:Peasant] = 0
                    ENUM[1] = :Hero ; NUME[:Hero] = 1
                    ENUM[2] = :Demigod ; NUME[:Demigod] = 2
                end

                number 16, true, nil, ViewscreenSetupadventurest_TAdventurer_TStatus
            }
        }
    }
    field(:unk_v40_1a, 748) {
        number 32, true, -1
    }
    field(:site_id, 752) {
        number 32, true, -1
    }
    def site_tg ; df.world.world_data.sites.binsearch(site_id) ; end
    field(:deity_id, 756) {
        number 32, true, -1
    }
    def deity_tg ; df.world.history.figures.binsearch(deity_id) ; end
    field(:belief_strength, 760) {
        number 32, true
    }
    field(:background, 764) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:sites, 780) {
        stl_vector(4) {
            pointer {
                global :WorldSite
            }
        }
    }
    field(:background_type, 796) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:sel_background, 812) {
        number 32, true, -1
    }
    field(:race_list, 816) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    def race_list_tg ; race_list.map { |i| df.world.raws.creatures.all[i] } ; end
    field(:entity_list, 832) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def entity_list_tg ; entity_list.map { |i| df.world.entities.all.binsearch(i) } ; end
    field(:nemesis_list, 848) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    def nemesis_list_tg ; nemesis_list.map { |i| df.world.nemesis.all.binsearch(i) } ; end
    field(:skill_list, 864) {
        stl_vector(2) {
            number 16, true, nil, JobSkill
        }
    }
    field(:focus_column, 880) {
        number 8, true
    }
    field(:attribute_points_remaining, 884) {
        number 32, true
    }
    field(:index_attributes, 888) {
        number 32, true
    }
end

class ViewscreenSetupdwarfgamest < Viewscreen
    sizeof 2552

    rtti_classname :viewscreen_setupdwarfgamest

    field(:title, 16) {
        static_string(256)
    }
    field(:dwarf_info, 272) {
        stl_vector(4) {
            pointer {
                compound(:ViewscreenSetupdwarfgamest_TDwarfInfo) {
                    sizeof 700

                    field(:name, 0) {
                        global :LanguageName
                    }
                    field(:unk_6c, 108) {
                    }
                    field(:skills, 112) {
                        static_array(118, 4, JobSkill) {
                            number 32, true
                        }
                    }
                    field(:unk_244, 584) {
                        number 32, true
                    }
                    field(:unk_248, 588) {
                        number 16, true
                    }
                    field(:unk_24a, 590) {
                    }
                    field(:unk_24c, 592) {
                    }
                    field(:levels_remaining, 600) {
                        number 16, true
                    }
                    field(:unk_256, 602) {
                    }
                    field(:unk_258, 604) {
                        static_array(19, 4) {
                            number 32, true
                        }
                    }
                    field(:unk_2a4, 680) {
                        number 16, true
                    }
                    field(:unk_2a6, 682) {
                    }
                    field(:unk_2a8, 684) {
                        number 32, true
                    }
                    field(:unk_2ac, 688) {
                        number 32, true
                    }
                    field(:unk_2b0, 692) {
                        number 32, true
                    }
                    field(:unk_2b4, 696) {
                    }
                }
            }
        }
    }
    field(:embark_skills, 288) {
        stl_vector(2) {
            number 16, true, nil, JobSkill
        }
    }
    field(:reclaim_professions, 304) {
        stl_vector(2) {
            global :Profession
        }
    }
    field(:mode, 320) {
        number 32, true
    }
    field(:dwarf_cursor, 324) {
        number 32, true
    }
    field(:dwarf_page_idx, 328) {
        number 32, true
    }
    field(:item_cursor, 332) {
        number 32, true
    }
    field(:skill_cursor, 336) {
        number 32, true, -1
    }
    field(:animal_cursor, 340) {
        number 32, true
    }
    field(:dwarf_column, 344) {
        number 32, true
    }
    field(:supply_column, 348) {
        number 32, true
    }
    field(:display_row, 352) {
        number 32, true
    }
    field(:show_play_now, 356) {
        number 8, true
    }
    field(:anon_1, 360) {
        stl_vector(1) {
            number 8, true
        }
    }
    field(:anon_2, 376) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:choice, 392) {
        number 32, true
    }
    field(:profile_name, 396) {
        stl_string
    }
    field(:anon_3, 424) {
        stl_vector
    }
    field(:anon_4, 440) {
        number 32, true
    }
    field(:anon_5, 444) {
        number 8, true
    }
    field(:in_save_profile, 445) {
        number 8, true
    }
    field(:anon_6, 446) {
        number 8, true
    }
    field(:item_choice, 448) {
        global :EmbarkItemChoice
    }
    field(:animals, 2160) {
        compound(:ViewscreenSetupdwarfgamest_TAnimals) {
            field(:race, 0) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def race_tg ; race.map { |i| df.world.raws.creatures.all[i] } ; end
            field(:caste, 16) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            field(:profession, 32) {
                stl_vector(2) {
                    number 16, true, nil, Profession
                }
            }
            field(:count, 48) {
                stl_vector(2) {
                    number 16, true
                }
            }
        }
    }
    field(:fort_name, 2224) {
        global :LanguageName
    }
    field(:group_name, 2332) {
        global :LanguageName
    }
    field(:anon_7, 2440) {
        number 8, true
    }
    field(:location, 2444) {
        global :EmbarkLocation
    }
    field(:units, 2496) {
        stl_vector(4) {
            pointer {
                global :Unit
            }
        }
    }
    field(:items, 2512) {
        stl_vector(4) {
            pointer {
                global :Item
            }
        }
    }
    field(:anon_8, 2528) {
        number 32, true
    }
    field(:points_remaining, 2532) {
        number 32, true
    }
    field(:add_item_type, 2536) {
        number 16, true, nil, ItemType
    }
    field(:add_item_subtype, 2538) {
        number 16, true, -1
    }
    field(:add_mattype, 2540) {
        number 16, true, -1
    }
    field(:add_matindex, 2544) {
        number 32, true
    }
    field(:adding_item, 2548) {
        number 32, true
    }
end

class ViewscreenStoresst < Viewscreen
    sizeof 432

    rtti_classname :viewscreen_storesst

    field(:title, 16) {
        static_string(256)
    }
    field(:category_cursor, 272) {
        number 32, true
    }
    field(:item_cursor, 276) {
        number 32, true
    }
    field(:in_right_list, 280) {
        number 16, true
    }
    field(:in_group_mode, 282) {
        number 16, true
    }
    field(:category_total, 284) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:category_busy, 300) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:items, 316) {
        stl_vector(4) {
            pointer {
                global :Item
            }
        }
    }
    field(:group_item_type, 332) {
        stl_vector(2) {
            number 16, true, nil, ItemType
        }
    }
    field(:group_item_subtype, 348) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:group_mat_type, 364) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:group_mat_index, 380) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:group_count, 396) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:category_order, 412) {
        stl_vector(2) {
            number 16, true, nil, ItemType
        }
    }
    field(:can_zoom, 428) {
        number 8, true, nil, BooleanEnum
    }
end

class ViewscreenTextviewerst < Viewscreen
    sizeof 264

    rtti_classname :viewscreen_textviewerst

    field(:title, 16) {
        stl_string
    }
    field(:title_colors, 44) {
        stl_string
    }
    field(:src_text, 72) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:outvar_type, 88) {
        stl_string
    }
    field(:outvar_name, 116) {
        stl_string
    }
    field(:meeting_context, 144) {
        global :MeetingContext
    }
    field(:help_filename, 160) {
        stl_string
    }
    field(:page_filename, 188) {
        stl_string
    }
    field(:formatted_text, 216) {
        stl_vector(4) {
            pointer {
                compound(:ViewscreenTextviewerst_TFormattedText) {
                    sizeof 24

                    field(:text, 0) {
                        pointer {
                            static_string(-1)
                        }
                    }
                    field(:format, 4) {
                        pointer {
                            static_string(-1)
                        }
                    }
                    field(:flags, 8) {
                        compound(:ViewscreenTextviewerst_TFormattedText_TFlags) {
                            field(:_whole, 0) {
                                number 16, false
                            }
                            field(:hyperlink, 0) { bit 0 }
                            field(:no_newline, 0) { bit 1 }
                        }
                    }
                    field(:pause_depth, 12) {
                        number 32, true
                    }
                    field(:return_val, 16) {
                        number 32, true
                    }
                    field(:indent, 20) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:hyperlinks, 232) {
        stl_vector(4) {
            pointer {
                static_string(-1)
            }
        }
    }
    field(:logged_error, 248) {
        number 8, true
    }
    field(:scroll_pos, 252) {
        number 32, true
    }
    field(:cursor_line, 256) {
        number 32, true
    }
    field(:pause_depth, 260) {
        number 32, true
    }
end

class ViewscreenTitlest < Viewscreen
    sizeof 932

    rtti_classname :viewscreen_titlest

    field(:str_histories, 16) {
        static_string(256)
    }
    field(:menu_items, 272) {
        static_string(256)
    }
    field(:sel_subpage, 528) {
        class ::DFHack::ViewscreenTitlest_TSelSubpage < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :None ; NUME[:None] = 0
            ENUM[1] = :StartSelectWorld ; NUME[:StartSelectWorld] = 1
            ENUM[2] = :StartSelectMode ; NUME[:StartSelectMode] = 2
            ENUM[3] = :Arena ; NUME[:Arena] = 3
            ENUM[4] = :About ; NUME[:About] = 4
        end

        number 16, true, nil, ViewscreenTitlest_TSelSubpage
    }
    field(:sel_menu_line, 532) {
        number 32, true
    }
    field(:sel_submenu_line, 536) {
        number 32, true
    }
    field(:loading, 540) {
        number 8, true
    }
    field(:menu_line_id, 544) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:submenu_line_id, 560) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:submenu_line_text, 576) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:start_savegames, 592) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:continue_savegames, 608) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:str_slaves, 624) {
        stl_string
    }
    field(:str_chapter, 652) {
        stl_string
    }
    field(:str_copyright, 680) {
        stl_string
    }
    field(:str_version, 708) {
        stl_string
    }
    field(:str_unk, 736) {
        stl_string
    }
    field(:str_programmed, 764) {
        stl_string
    }
    field(:str_designed, 792) {
        stl_string
    }
    field(:str_visit, 820) {
        stl_string
    }
    field(:str_site, 848) {
        stl_string
    }
    field(:unk_36c, 876) {
        stl_string
    }
    field(:unk_388, 904) {
        number 32, true
    }
    field(:unk_38c, 908) {
        number 8, true
    }
    field(:unk_390, 912) {
        number 32, true
    }
    field(:unk_394, 916) {
        number 8, true
    }
    field(:unk_398, 920) {
        number 32, true
    }
    field(:unk_39c, 924) {
        number 8, true
    }
    field(:unk_3a0, 928) {
        number 32, true
    }
end

class ViewscreenTopicmeetingFillLandHolderPositionst < Viewscreen
    sizeof 360

    rtti_classname :viewscreen_topicmeeting_fill_land_holder_positionst

    field(:anon_1, 16) {
        static_string(256)
    }
    field(:anon_2, 272) {
        number 32, true
    }
    field(:anon_3, 276) {
        number 32, true
    }
    field(:anon_4, 280) {
        number 32, true
    }
    field(:anon_5, 284) {
        number 32, true
    }
    field(:anon_6, 288) {
        stl_vector
    }
    field(:anon_7, 304) {
        stl_vector
    }
    field(:anon_8, 320) {
        stl_vector
    }
    field(:anon_9, 336) {
        stl_vector
    }
    field(:anon_10, 352) {
        number 32, true
    }
    field(:anon_11, 356) {
        number 32, true
    }
end

class ViewscreenTopicmeetingTakerequestsst < Viewscreen
    sizeof 304

    rtti_classname :viewscreen_topicmeeting_takerequestsst

    field(:title, 16) {
        static_string(256)
    }
    field(:popup, 272) {
        pointer {
            global :DipscriptPopup
        }
    }
    field(:meeting, 276) {
        pointer {
            global :MeetingDiplomatInfo
        }
    }
    field(:type_categories, 280) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:type_idx, 296) {
        number 32, true
    }
    field(:good_idx, 300) {
        number 32, true
    }
end

class ViewscreenTopicmeetingst < Viewscreen
    sizeof 44

    rtti_classname :viewscreen_topicmeetingst

    field(:popup, 16) {
        pointer {
            global :DipscriptPopup
        }
    }
    field(:meeting, 20) {
        pointer {
            global :MeetingDiplomatInfo
        }
    }
    field(:text, 24) {
        stl_vector(4) {
            pointer {
                stl_string
            }
        }
    }
    field(:unk_28, 40) {
        number 32, true
    }
end

class ViewscreenTradeagreementst < Viewscreen
    sizeof 308

    rtti_classname :viewscreen_tradeagreementst

    field(:requests, 16) {
        pointer {
            global :EntitySellPrices
        }
    }
    field(:civ_id, 20) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ_id) ; end
    field(:anon_1, 24) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:type_idx, 40) {
        number 32, true
    }
    field(:good_idx, 44) {
        number 32, true
    }
    field(:title, 48) {
        static_string(256)
    }
    field(:civ, 304) {
        pointer {
            global :HistoricalEntity
        }
    }
end

class ViewscreenTradegoodsst < Viewscreen
    sizeof 520

    rtti_classname :viewscreen_tradegoodsst

    field(:title, 16) {
        static_string(256)
    }
    field(:merchant_name, 272) {
        stl_string
    }
    field(:merchant_entity, 300) {
        stl_string
    }
    field(:depot, 328) {
        pointer {
            global :BuildingTradedepotst
        }
    }
    field(:caravan, 332) {
        pointer {
            global :CaravanState
        }
    }
    field(:entity, 336) {
        pointer {
            global :HistoricalEntity
        }
    }
    field(:is_unloading, 340) {
        number 8, true, nil, BooleanEnum
    }
    field(:has_traders, 341) {
        number 8, true, nil, BooleanEnum
    }
    field(:trader, 344) {
        pointer {
            global :Unit
        }
    }
    field(:broker, 348) {
        pointer {
            global :Unit
        }
    }
    field(:trader_items, 352) {
        stl_vector(4) {
            pointer {
                global :Item
            }
        }
    }
    field(:broker_items, 368) {
        stl_vector(4) {
            pointer {
                global :Item
            }
        }
    }
    field(:trader_selected, 384) {
        stl_vector(1) {
            number 8, true, nil, BooleanEnum
        }
    }
    field(:broker_selected, 400) {
        stl_vector(1) {
            number 8, true, nil, BooleanEnum
        }
    }
    field(:trader_count, 416) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:broker_count, 432) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:trader_cursor, 448) {
        number 32, true
    }
    field(:broker_cursor, 452) {
        number 32, true
    }
    field(:in_right_pane, 456) {
        number 8, true, nil, BooleanEnum
    }
    field(:trade_reply, 458) {
        number 16, true
    }
    field(:anon_1, 460) {
        number 16, true
    }
    field(:anon_2, 464) {
        number 32, true
    }
    field(:has_offer, 468) {
        number 8, true
    }
    field(:counteroffer, 472) {
        stl_vector(4) {
            pointer {
                global :Item
            }
        }
    }
    field(:in_edit_count, 488) {
        number 8, true
    }
    field(:edit_count, 492) {
        stl_string
    }
end

class ViewscreenTradelistst < Viewscreen
    sizeof 40

    rtti_classname :viewscreen_tradelistst

    field(:unk_10, 16) {
        number 32, true
    }
    field(:depot, 20) {
        pointer {
            global :BuildingTradedepotst
        }
    }
    field(:caravans, 24) {
        stl_vector(4) {
            pointer {
                global :CaravanState
            }
        }
    }
end

class ViewscreenTreasurelistst < Viewscreen
    sizeof 20

    rtti_classname :viewscreen_treasurelistst

    field(:sel_idx, 16) {
        number 32, true
    }
end

class ViewscreenUnitlistst < Viewscreen
    sizeof 168

    rtti_classname :viewscreen_unitlistst

    field(:allow_zoom, 16) {
        number 8, true, nil, BooleanEnum
    }
    field(:page, 20) {
        number 32, true, nil, ViewscreenUnitlistPage
    }
    field(:cursor_pos, 24) {
        static_array(4, 4, ViewscreenUnitlistPage) {
            number 32, true, -1
        }
    }
    field(:jobs, 40) {
        static_array(4, 16, ViewscreenUnitlistPage) {
            stl_vector(4) {
                pointer {
                    global :Job
                }
            }
        }
    }
    field(:units, 104) {
        static_array(4, 16, ViewscreenUnitlistPage) {
            stl_vector(4) {
                pointer {
                    global :Unit
                }
            }
        }
    }
end

class ViewscreenUnitst < Viewscreen
    sizeof 36

    rtti_classname :viewscreen_unitst

    field(:unit, 16) {
        pointer {
            global :Unit
        }
    }
    field(:anon_1, 20) {
        number 32, true
    }
    field(:anon_2, 24) {
        number 32, true
    }
    field(:anon_3, 28) {
        number 32, true
    }
    field(:anon_4, 32) {
        number 8, true
    }
end

class ViewscreenUpdateRegionst < Viewscreen
    sizeof 24

    rtti_classname :viewscreen_update_regionst

    field(:year, 16) {
        number 32, true
    }
    field(:year_tick, 20) {
        number 32, true
    }
end

class ViewscreenWagesst < Viewscreen
    sizeof 20

    rtti_classname :viewscreen_wagesst

    field(:profession_category, 16) {
        number 16, true
    }
end

class WeaponAttack < MemHack::Compound
    sizeof 112

    field(:edged, 0) {
        number 8, true, nil, BooleanEnum
    }
    field(:contact, 4) {
        number 32, true
    }
    field(:penetration, 8) {
        number 32, true
    }
    field(:velocity_mult, 12) {
        number 32, true
    }
    field(:verb_2nd, 16) {
        stl_string
    }
    field(:verb_3rd, 44) {
        stl_string
    }
    field(:noun, 72) {
        stl_string
    }
    field(:prepare, 100) {
        number 32, true
    }
    field(:recover, 104) {
        number 32, true
    }
    field(:flags, 108) {
        compound(:WeaponAttack_TFlags) {
            field(:_whole, 0) {
                number 32, true
            }
            field(:bad_multiattack, 0) { bit 1 }
        }
    }
end

class WebCluster < MemHack::Compound
    sizeof 64

    field(:x, 0) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:y, 16) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:z, 32) {
        number 16, true
    }
    field(:race, 34) {
        number 16, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:caste, 36) {
        number 16, true, -1
    }
    def caste_tg ; df.world.raws.creatures.all[race].caste[caste] ; end
    field(:pos_min, 38) {
        global :Coord2d
    }
    field(:pos_max, 42) {
        global :Coord2d
    }
    field(:ambushers, 48) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def ambushers_tg ; ambushers.map { |i| df.world.units.all.binsearch(i) } ; end
end

class WorkshopProfile < MemHack::Compound
    sizeof 24

    field(:permitted_workers, 0) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def permitted_workers_tg ; permitted_workers.map { |i| df.world.units.all.binsearch(i) } ; end
    field(:min_level, 16) {
        number 32, true
    }
    field(:max_level, 20) {
        number 32, true, 3000
    }
end

class World < MemHack::Compound
    sizeof 2484248

    field(:glowing_barriers, 0) {
        stl_vector(4) {
            pointer {
                global :GlowingBarrier
            }
        }
    }
    field(:deep_vein_hollows, 16) {
        stl_vector(4) {
            pointer {
                global :DeepVeinHollow
            }
        }
    }
    field(:unk_20, 32) {
        stl_vector(4) {
            pointer {
                global :WorldUnk20
            }
        }
    }
    field(:engravings, 48) {
        stl_vector(4) {
            pointer {
                global :Engraving
            }
        }
    }
    field(:vermin, 64) {
        compound(:World_TVermin) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :Vermin
                    }
                }
            }
            field(:colonies, 16) {
                stl_vector(4) {
                    pointer {
                        global :Vermin
                    }
                }
            }
        }
    }
    field(:unk_3C, 96) {
        stl_vector(4) {
            pointer {
                global :Coord
            }
        }
    }
    field(:campfires, 112) {
        stl_vector(4) {
            pointer {
                global :Campfire
            }
        }
    }
    field(:web_clusters, 128) {
        stl_vector(4) {
            pointer {
                global :WebCluster
            }
        }
    }
    field(:fires, 144) {
        stl_vector(4) {
            pointer {
                global :Fire
            }
        }
    }
    field(:unk_6C, 160) {
        stl_vector(4) {
            pointer {
                global :WorldUnk6c
            }
        }
    }
    field(:ocean_waves, 176) {
        stl_vector(4) {
            pointer {
                global :OceanWave
            }
        }
    }
    field(:constructions, 192) {
        stl_vector(4) {
            pointer {
                global :Construction
            }
        }
    }
    field(:unk_90, 208) {
        stl_vector(4) {
            pointer {
                global :WorldUnk90
            }
        }
    }
    field(:unk_9C, 224) {
        stl_vector(4) {
            pointer {
                global :WorldUnk9c
            }
        }
    }
    field(:unk_A8, 240) {
        stl_vector(4) {
            pointer {
                global :WorldUnkA8
            }
        }
    }
    field(:unk_B4, 256) {
        stl_vector(4) {
            pointer {
                global :WorldUnkB4
            }
        }
    }
    field(:unk_C0, 272) {
        stl_vector(4) {
            pointer {
                global :WorldUnkC0
            }
        }
    }
    field(:unk_CC, 288) {
        stl_vector(4) {
            pointer {
                global :Engraving
            }
        }
    }
    field(:unk_D8, 304) {
        stl_vector(4) {
            pointer {
                global :Construction
            }
        }
    }
    field(:unk_E4, 320) {
        stl_vector(4) {
            pointer {
                global :WorldUnk9c
            }
        }
    }
    field(:unk_F0, 336) {
        stl_vector(4) {
            pointer {
                global :WorldUnk6c
            }
        }
    }
    field(:unk_FC, 352) {
        stl_vector(4) {
            pointer {
                global :WorldUnk90
            }
        }
    }
    field(:effects, 368) {
        stl_vector(4) {
            pointer {
                global :EffectInfo
            }
        }
    }
    field(:coin_batches, 384) {
        stl_vector(4) {
            pointer {
                global :CoinBatch
            }
        }
    }
    field(:populations, 400) {
        stl_vector(4) {
            pointer {
                global :LocalPopulation
            }
        }
    }
    field(:manager_orders, 416) {
        stl_vector(4) {
            pointer {
                global :ManagerOrder
            }
        }
    }
    field(:mandates, 432) {
        stl_vector(4) {
            pointer {
                global :Mandate
            }
        }
    }
    field(:entities, 448) {
        compound(:World_TEntities) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :HistoricalEntity
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :HistoricalEntity
                    }
                }
            }
        }
    }
    field(:worldgen_coord_buf, 480) {
        compound(:World_TWorldgenCoordBuf) {
            field(:slots, 0) {
                static_array(20000, 4) {
                    global :Coord2d
                }
            }
            field(:next_slot, 80000) {
                number 16, true
            }
        }
    }
    field(:units, 80484) {
        compound(:World_TUnits) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :Unit
                    }
                }
            }
            field(:active, 16) {
                stl_vector(4) {
                    pointer {
                        global :Unit
                    }
                }
            }
            field(:other, 32) {
                static_array(2, 16, UnitsOtherId) {
                    stl_vector(4) {
                        pointer {
                            global :Unit
                        }
                    }
                }
            }
            field(:bad, 64) {
                stl_vector(4) {
                    pointer {
                        global :Unit
                    }
                }
            }
        }
    }
    field(:unit_chunks, 80564) {
        stl_vector(4) {
            pointer {
                global :UnitChunk
            }
        }
    }
    field(:art_image_chunks, 80580) {
        stl_vector(4) {
            pointer {
                global :ArtImageChunk
            }
        }
    }
    field(:nemesis, 80596) {
        compound(:World_TNemesis) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :NemesisRecord
                    }
                }
            }
            field(:other, 16) {
                static_array(2, 16) {
                    stl_vector(4) {
                        pointer {
                            global :NemesisRecord
                        }
                    }
                }
            }
            field(:bad, 48) {
                stl_vector(4) {
                    pointer {
                        global :NemesisRecord
                    }
                }
            }
        }
    }
    field(:unk4, 80660) {
        number 8, true, nil, BooleanEnum
    }
    field(:items, 80664) {
        compound(:World_TItems) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :Item
                    }
                }
            }
            field(:other, 16) {
                static_array(129, 16, ItemsOtherId) {
                    stl_vector(4) {
                        pointer {
                            global :Item
                        }
                    }
                }
            }
            field(:bad, 2080) {
                stl_vector(4) {
                    pointer {
                        global :Item
                    }
                }
            }
            field(:bad_tag, 2096) {
                stl_vector(4) {
                    number 32, true
                }
            }
        }
    }
    field(:artifacts, 82776) {
        compound(:World_TArtifacts) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :ArtifactRecord
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :ArtifactRecord
                    }
                }
            }
        }
    }
    field(:job_list, 82808) {
        df_linked_list {
            global :JobListLink
        }
    }
    field(:anon_1, 82820) {
        stl_vector(4) {
            pointer {
                compound(:World_TAnon1) {
                    sizeof 16

                    field(:unk_0, 0) {
                        number 32, true
                    }
                    field(:job, 4) {
                        pointer {
                            global :Job
                        }
                    }
                    field(:flags, 8) {
                        number 32, true
                    }
                    field(:anon_1, 12) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:anon_2, 82836) {
        static_array(2000, 12) {
            compound(:World_TAnon2) {
                field(:unk_0, 0) {
                    number 32, true
                }
                field(:anon_1, 4) {
                    number 32, true
                }
                field(:anon_2, 8) {
                    number 32, true
                }
            }
        }
    }
    field(:anon_3, 106836) {
        number 32, true
    }
    field(:proj_list, 106840) {
        df_linked_list {
            global :ProjListLink
        }
    }
    field(:buildings, 106852) {
        compound(:World_TBuildings) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :Building
                    }
                }
            }
            field(:other, 16) {
                static_array(87, 16, BuildingsOtherId) {
                    stl_vector(4) {
                        pointer {
                            global :Building
                        }
                    }
                }
            }
            field(:bad, 1408) {
                stl_vector(4) {
                    pointer {
                        global :Building
                    }
                }
            }
        }
    }
    field(:check_bridge_collapse, 108276) {
        number 8, true, nil, BooleanEnum
    }
    field(:check_machine_collapse, 108277) {
        number 8, true, nil, BooleanEnum
    }
    field(:machines, 108280) {
        compound(:World_TMachines) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :Machine
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :Machine
                    }
                }
            }
        }
    }
    field(:flow_guides, 108312) {
        compound(:World_TFlowGuides) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :FlowGuide
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :FlowGuide
                    }
                }
            }
        }
    }
    field(:stockpile, 108344) {
        compound(:World_TStockpile) {
            field(:num_jobs, 0) {
                static_array(10, 4, HaulerType) {
                    number 32, true
                }
            }
            field(:num_haulers, 40) {
                static_array(10, 4, HaulerType) {
                    number 32, true
                }
            }
            field(:simple1, 80) {
                compound(:World_TStockpile_TSimple1) {
                    field(:anon_1, 0) {
                        number 8, true
                    }
                    field(:food, 1) {
                        number 8, true
                    }
                    field(:anon_2, 2) {
                        number 8, true
                    }
                    field(:anon_3, 3) {
                        number 8, true
                    }
                }
            }
            field(:seeds, 84) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:plants, 100) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:cheese, 116) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:meat_fish, 132) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:eggs, 148) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:leaves, 164) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:plant_powder, 180) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:simple2, 196) {
                compound(:World_TStockpile_TSimple2) {
                    field(:seeds, 0) {
                        number 8, true
                    }
                    field(:plants, 1) {
                        number 8, true
                    }
                    field(:cheese, 2) {
                        number 8, true
                    }
                    field(:fish, 3) {
                        number 8, true
                    }
                    field(:meat, 4) {
                        number 8, true
                    }
                    field(:leaves, 5) {
                        number 8, true
                    }
                    field(:powder, 6) {
                        number 8, true
                    }
                    field(:eggs, 7) {
                        number 8, true
                    }
                }
            }
            field(:liquid_plant, 204) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:liquid_animal, 220) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:liquid_builtin, 236) {
                stl_vector(1) {
                    number 8, true
                }
            }
            field(:simple3, 252) {
                compound(:World_TStockpile_TSimple3) {
                    field(:glob_fat, 0) {
                        number 8, true
                    }
                    field(:glob_tallow, 1) {
                        number 8, true
                    }
                    field(:glob_paste, 2) {
                        number 8, true
                    }
                    field(:glob_pressed, 3) {
                        number 8, true
                    }
                    field(:weapons, 4) {
                        number 8, true
                    }
                    field(:shields, 5) {
                        number 8, true
                    }
                    field(:ammo, 6) {
                        number 8, true
                    }
                    field(:coins, 7) {
                        number 8, true
                    }
                    field(:bar_blocks, 8) {
                        number 8, true
                    }
                    field(:gems, 9) {
                        number 8, true
                    }
                    field(:finished_goods, 10) {
                        number 8, true
                    }
                    field(:tanned_skins, 11) {
                        number 8, true
                    }
                    field(:thread_cloth, 12) {
                        number 8, true
                    }
                    field(:anon_1, 13) {
                        number 8, true
                    }
                    field(:anon_2, 14) {
                        number 8, true
                    }
                    field(:anon_3, 15) {
                        number 8, true
                    }
                }
            }
        }
    }
    field(:plants, 108612) {
        compound(:World_TPlants) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :Plant
                    }
                }
            }
            field(:shrub_dry, 16) {
                stl_vector(4) {
                    pointer {
                        global :Plant
                    }
                }
            }
            field(:shrub_wet, 32) {
                stl_vector(4) {
                    pointer {
                        global :Plant
                    }
                }
            }
            field(:tree_dry, 48) {
                stl_vector(4) {
                    pointer {
                        global :Plant
                    }
                }
            }
            field(:tree_wet, 64) {
                stl_vector(4) {
                    pointer {
                        global :Plant
                    }
                }
            }
            field(:empty, 80) {
                stl_vector(4) {
                    pointer {
                        global :Plant
                    }
                }
            }
        }
    }
    field(:enemy_status_cache, 108708) {
        compound(:World_TEnemyStatusCache) {
            field(:slot_used, 0) {
                static_array(500, 1) {
                    number 8, true, nil, BooleanEnum
                }
            }
            field(:rel_map, 500) {
                static_array(500, 2000) {
                    static_array(500, 4) {
                        number 32, true
                    }
                }
            }
            field(:next_slot, 1000500) {
                number 32, true
            }
        }
    }
    field(:schedules, 1109212) {
        compound(:World_TSchedules) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :ScheduleInfo
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :ScheduleInfo
                    }
                }
            }
        }
    }
    field(:squads, 1109244) {
        compound(:World_TSquads) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :Squad
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :Squad
                    }
                }
            }
        }
    }
    field(:formations, 1109276) {
        compound(:World_TFormations) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        number 32, true
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
        }
    }
    field(:activities, 1109308) {
        compound(:World_TActivities) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :ActivityEntry
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :ActivityEntry
                    }
                }
            }
        }
    }
    field(:status, 1109340) {
        compound(:World_TStatus) {
            field(:reports, 0) {
                stl_vector(4) {
                    pointer {
                        global :Report
                    }
                }
            }
            field(:announcements, 16) {
                stl_vector(4) {
                    pointer {
                        global :Report
                    }
                }
            }
            field(:popups, 32) {
                stl_vector(4) {
                    pointer {
                        global :PopupMessage
                    }
                }
            }
            field(:next_report_id, 48) {
                number 32, true
            }
            field(:flags, 52) {
                compound(:World_TStatus_TFlags) {
                    field(:_whole, 0) {
                        number 32, true
                    }
                    field(:combat, 0) { bit 0 }
                    field(:hunting, 0) { bit 1 }
                    field(:sparring, 0) { bit 2 }
                }
            }
            field(:anon_1, 56) {
            }
            field(:display_timer, 92) {
                number 32, true
            }
            field(:slots, 96) {
                static_array(100, 144) {
                    compound(:World_TStatus_TSlots) {
                        field(:type, 0) {
                            number 16, true, nil, CombatReportEventType
                        }
                        field(:item, 4) {
                            number 32, true
                        }
                        field(:unk1b, 8) {
                            number 32, true
                        }
                        field(:unk1c, 12) {
                            number 32, true
                        }
                        field(:unk1d, 16) {
                            number 32, true
                        }
                        field(:body_part, 20) {
                            number 16, true
                        }
                        field(:unk2b, 22) {
                            number 16, true
                        }
                        field(:unk2c, 24) {
                            number 16, true
                        }
                        field(:unk2d, 26) {
                            number 16, true
                        }
                        field(:target_bp_name, 28) {
                            stl_string
                        }
                        field(:verb, 56) {
                            stl_string
                        }
                        field(:with_item_name, 84) {
                            stl_string
                        }
                        field(:unk3d, 112) {
                            stl_string
                        }
                        field(:flags, 140) {
                            compound(:World_TStatus_TSlots_TFlags) {
                                field(:_whole, 0) {
                                    number 32, true
                                }
                                field(:behind, 0) { bit 0 }
                                field(:side, 0) { bit 1 }
                                field(:by, 0) { bit 2 }
                                field(:item, 0) { bit 3 }
                                field(:tap, 0) { bit 4 }
                                field(:sever, 0) { bit 5 }
                            }
                        }
                    }
                }
            }
            field(:slot_id_used, 14496) {
                static_array(37, 2, CombatReportEventType) {
                    number 16, true
                }
            }
            field(:slot_id_idx1, 14570) {
                static_array(37, 2, CombatReportEventType) {
                    number 16, true
                }
            }
            field(:slot_id_idx2, 14644) {
                static_array(37, 2, CombatReportEventType) {
                    number 16, true
                }
            }
            field(:slots_used, 14718) {
                number 16, true
            }
        }
    }
    field(:interaction_instances, 1124060) {
        compound(:World_TInteractionInstances) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :InteractionInstance
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :InteractionInstance
                    }
                }
            }
        }
    }
    field(:written_contents, 1124092) {
        compound(:World_TWrittenContents) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :WrittenContent
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :WrittenContent
                    }
                }
            }
        }
    }
    field(:identities, 1124124) {
        compound(:World_TIdentities) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :Identity
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :Identity
                    }
                }
            }
        }
    }
    field(:incidents, 1124156) {
        compound(:World_TIncidents) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :Incident
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :Incident
                    }
                }
            }
        }
    }
    field(:crimes, 1124188) {
        compound(:World_TCrimes) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :Crime
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :Crime
                    }
                }
            }
        }
    }
    field(:vehicles, 1124220) {
        compound(:World_TVehicles) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :Vehicle
                    }
                }
            }
            field(:active, 16) {
                stl_vector(4) {
                    pointer {
                        global :Vehicle
                    }
                }
            }
            field(:bad, 32) {
                stl_vector(4) {
                    pointer {
                        global :Vehicle
                    }
                }
            }
        }
    }
    field(:armies, 1124268) {
        compound(:World_TArmies) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :Army
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :Army
                    }
                }
            }
        }
    }
    field(:army_controllers, 1124300) {
        compound(:World_TArmyControllers) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :ArmyController
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :ArmyController
                    }
                }
            }
        }
    }
    field(:army_tracking_info, 1124332) {
        compound(:World_TArmyTrackingInfo) {
            field(:all, 0) {
                stl_vector
            }
            field(:bad, 16) {
                stl_vector
            }
        }
    }
    field(:cultural_identities, 1124364) {
        compound(:World_TCulturalIdentities) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :CulturalIdentity
                    }
                }
            }
            field(:bad, 16) {
                stl_vector(4) {
                    pointer {
                        global :CulturalIdentity
                    }
                }
            }
        }
    }
    field(:agreements, 1124396) {
        compound(:World_TAgreements) {
            field(:all, 0) {
                stl_vector
            }
            field(:bad, 16) {
                stl_vector
            }
        }
    }
    field(:selected_building, 1124428) {
        pointer {
            global :Building
        }
    }
    field(:selected_stockpile_type, 1124432) {
        number 16, true, nil, StockpileCategory
    }
    field(:update_selected_building, 1124434) {
        number 8, true, nil, BooleanEnum
    }
    field(:building_width, 1124436) {
        number 16, true
    }
    field(:building_height, 1124438) {
        number 16, true
    }
    field(:selected_direction, 1124440) {
        number 8, true, nil, ScrewPumpDirection
    }
    field(:map, 1124444) {
        compound(:World_TMap) {
            field(:map_blocks, 0) {
                stl_vector(4) {
                    pointer {
                        global :MapBlock
                    }
                }
            }
            field(:block_index, 16) {
                pointer_ary(4) {
                    pointer_ary(4) {
                        pointer_ary(4) {
                            pointer {
                                global :MapBlock
                            }
                        }
                    }
                }
            }
            field(:map_block_columns, 20) {
                stl_vector(4) {
                    pointer {
                        global :MapBlockColumn
                    }
                }
            }
            field(:column_index, 36) {
                pointer_ary(4) {
                    pointer_ary(4) {
                        pointer {
                            global :MapBlockColumn
                        }
                    }
                }
            }
            field(:x_count_block, 40) {
                number 32, true
            }
            field(:y_count_block, 44) {
                number 32, true
            }
            field(:z_count_block, 48) {
                number 32, true
            }
            field(:x_count, 52) {
                number 32, true
            }
            field(:y_count, 56) {
                number 32, true
            }
            field(:z_count, 60) {
                number 32, true
            }
            field(:region_x, 64) {
                number 32, true
            }
            field(:region_y, 68) {
                number 32, true
            }
            field(:region_z, 72) {
                number 32, true
            }
        }
    }
    field(:distance_lookup, 1124520) {
        static_array(53, 106) {
            static_array(53, 2) {
                number 16, true
            }
        }
    }
    field(:unk_v40_1a, 1130140) {
        static_array(112, 16, Profession) {
            stl_vector(2) {
                number 16, true
            }
        }
    }
    field(:unk_v40_1b, 1131932) {
        static_array(112, 16, Profession) {
            stl_vector(2) {
                number 16, true
            }
        }
    }
    field(:unk_v40_2a, 1133724) {
        static_array(80, 4) {
            number 32, true
        }
    }
    field(:unk_v40_2b, 1134048) {
        static_array(181, 8) {
            double
        }
    }
    field(:unk_v40_2c, 1135496) {
        static_array(121, 8) {
            double
        }
    }
    field(:map_extras, 1136464) {
        compound(:World_TMapExtras) {
            field(:rotation, 0) {
                number 8, false
            }
            field(:z_level_flags, 4) {
                pointer_ary(4) {
                    global :ZLevelFlags
                }
            }
            field(:unk_v40_3a, 8) {
                stl_vector(4) {
                    pointer {
                        global :BlockSquareEvent
                    }
                }
            }
            field(:unk_v40_3b, 24) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:unk_v40_3c, 40) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:unk_v40_3d, 56) {
                stl_vector(2) {
                    number 16, true
                }
            }
        }
    }
    field(:world_data, 1136536) {
        pointer {
            global :WorldData
        }
    }
    field(:worldgen_status, 1136540) {
        compound(:World_TWorldgenStatus) {
            field(:state, 0) {
                number 16, true
            }
            field(:num_rejects, 4) {
                number 32, true
            }
            field(:anon_1, 8) {
                static_array(53, 4) {
                    number 32, true
                }
            }
            field(:anon_2, 220) {
                static_array(53, 4) {
                    number 32, true
                }
            }
            field(:rejection_reason, 432) {
                number 16, true
            }
            field(:lakes_total, 436) {
                number 32, true
            }
            field(:anon_3, 440) {
                number 32, true
            }
            field(:anon_4, 444) {
                number 16, true
            }
            field(:lakes_cur, 448) {
                number 32, true
            }
            field(:anon_5, 452) {
                number 32, true
            }
            field(:anon_6, 456) {
                number 32, true
            }
            field(:anon_7, 460) {
                static_array(100, 4) {
                    number 32, true
                }
            }
            field(:anon_8, 860) {
                static_array(100, 1) {
                    number 8, true
                }
            }
            field(:anon_9, 960) {
                static_array(100, 2) {
                    number 16, true
                }
            }
            field(:anon_10, 1160) {
                number 32, true
            }
            field(:finalized_civ_mats, 1164) {
                number 32, true
            }
            field(:finalized_art, 1168) {
                number 32, true
            }
            field(:finalized_uniforms, 1172) {
                number 32, true
            }
            field(:finalized_sites, 1176) {
                number 32, true
            }
            field(:anon_11, 1180) {
                number 32, true
            }
            field(:anon_12, 1184) {
                number 32, true
            }
            field(:anon_13, 1188) {
                number 32, true
            }
            field(:anon_14, 1192) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:anon_15, 1208) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:width, 1224) {
                number 32, true
            }
            field(:height, 1228) {
                number 32, true
            }
            field(:anon_16, 1232) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:anon_17, 1248) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:rivers_total, 1264) {
                number 32, true
            }
            field(:rivers_cur, 1268) {
                number 32, true
            }
            field(:anon_18, 1272) {
                number 8, true
            }
            field(:last_param_set, 1276) {
                stl_string
            }
            field(:last_seed, 1304) {
                stl_string
            }
            field(:last_name_seed, 1332) {
                stl_string
            }
            field(:last_history_seed, 1360) {
                stl_string
            }
            field(:last_creature_seed, 1388) {
                stl_string
            }
            field(:placed_caves, 1416) {
                number 8, true, nil, BooleanEnum
            }
            field(:placed_good_evil, 1417) {
                number 8, true, nil, BooleanEnum
            }
            field(:placed_megabeasts, 1418) {
                number 8, true, nil, BooleanEnum
            }
            field(:placed_other_beasts, 1419) {
                number 8, true, nil, BooleanEnum
            }
            field(:made_cave_pops, 1420) {
                number 8, true, nil, BooleanEnum
            }
            field(:made_cave_civs, 1421) {
                number 8, true, nil, BooleanEnum
            }
            field(:placed_civs, 1422) {
                number 8, true, nil, BooleanEnum
            }
            field(:finished_prehistory, 1423) {
                number 8, true, nil, BooleanEnum
            }
            field(:anon_19, 1424) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:anon_20, 1440) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:anon_21, 1456) {
                number 32, true
            }
            field(:anon_22, 1460) {
                number 8, true
            }
            field(:anon_23, 1461) {
                number 8, true
            }
            field(:anon_24, 1462) {
                number 8, true
            }
            field(:anon_25, 1463) {
                number 8, true
            }
            field(:anon_26, 1464) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:anon_27, 1480) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:anon_28, 1496) {
                number 32, true
            }
            field(:anon_29, 1500) {
                number 32, true
            }
            field(:anon_30, 1504) {
                static_array(10, 16) {
                    stl_vector
                }
            }
            field(:anon_31, 1664) {
                static_array(10, 16) {
                    stl_vector
                }
            }
            field(:anon_32, 1824) {
                static_array(10, 16) {
                    stl_vector
                }
            }
            field(:anon_33, 1984) {
                stl_vector
            }
            field(:anon_34, 2000) {
                stl_vector
            }
            field(:anon_35, 2016) {
                stl_vector
            }
            field(:anon_36, 2032) {
                stl_vector
            }
            field(:anon_37, 2048) {
                stl_vector
            }
            field(:anon_38, 2064) {
                stl_vector
            }
            field(:anon_39, 2080) {
                number 32, true
            }
            field(:anon_40, 2084) {
                number 32, true
            }
        }
    }
    field(:unk_10d298, 1138628) {
        stl_vector
    }
    field(:unk_10d2a4, 1138644) {
        stl_vector
    }
    field(:orphaned_flow_pool, 1138660) {
        global :FlowReusePool
    }
    field(:raws, 1138668) {
        global :WorldRaws
    }
    field(:unk_59dc4, 1167308) {
        compound(:World_TUnk59dc4) {
            field(:regions, 0) {
                global :Coord2dPath
            }
            field(:unk1, 32) {
                stl_vector(4) {
                    pointer {
                        compound(:World_TUnk59dc4_TUnk1) {
                            sizeof 40

                            field(:ref, 0) {
                                global :WorldPopulationRef
                            }
                            field(:unk, 24) {
                                stl_vector(4) {
                                    number 32, true
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    field(:flow_engine, 1167356) {
        compound(:World_TFlowEngine) {
            field(:rnd_16, 0) {
                number 8, true
            }
            field(:rnd_256, 2) {
                number 16, true
            }
            field(:rnd_pos, 4) {
                number 16, true
            }
            field(:rnd_x, 6) {
                static_array(16, 2) {
                    number 16, true
                }
            }
            field(:rnd_y, 38) {
                static_array(16, 2) {
                    number 16, true
                }
            }
            field(:block_idx, 72) {
                number 32, true, -1
            }
            field(:unk7a, 76) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:unk7b, 92) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:unk7c, 108) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:unk7_cntdn, 124) {
                stl_vector(2) {
                    number 16, true
                }
            }
        }
    }
    field(:busy_buildings, 1167496) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def busy_buildings_tg ; busy_buildings.map { |i| df.world.buildings.all.binsearch(i) } ; end
    field(:cavein_flags, 1167512) {
        df_flagarray
    }
    field(:original_save_version, 1167520) {
        number 32, true
    }
    field(:worldgen, 1167524) {
        compound(:World_TWorldgen) {
            field(:version, 0) {
                stl_string
            }
            field(:next_unit_chunk_id, 28) {
                number 32, true
            }
            field(:next_unit_chunk_offset, 32) {
                number 16, true
            }
            field(:next_art_image_chunk_id, 36) {
                number 32, true
            }
            field(:next_art_image_chunk_offset, 40) {
                number 16, true
            }
            field(:worldgen_parms, 44) {
                compound(:World_TWorldgen_TWorldgenParms) {
                    field(:title, 0) {
                        stl_string
                    }
                    field(:seed, 28) {
                        stl_string
                    }
                    field(:history_seed, 56) {
                        stl_string
                    }
                    field(:name_seed, 84) {
                        stl_string
                    }
                    field(:creature_seed, 112) {
                        stl_string
                    }
                    field(:dim_x, 140) {
                        number 32, true
                    }
                    field(:dim_y, 144) {
                        number 32, true
                    }
                    field(:custom_name, 148) {
                        stl_string
                    }
                    field(:has_seed, 176) {
                        number 8, true, nil, BooleanEnum
                    }
                    field(:has_history_seed, 177) {
                        number 8, true, nil, BooleanEnum
                    }
                    field(:has_name_seed, 178) {
                        number 8, true, nil, BooleanEnum
                    }
                    field(:has_creature_seed, 179) {
                        number 8, true, nil, BooleanEnum
                    }
                    field(:embark_points, 180) {
                        number 32, true
                    }
                    field(:peak_number_min, 184) {
                        number 32, true
                    }
                    field(:partial_ocean_edge_min, 188) {
                        number 32, true
                    }
                    field(:complete_ocean_edge_min, 192) {
                        number 32, true
                    }
                    field(:volcano_min, 196) {
                        number 32, true
                    }
                    field(:region_counts, 200) {
                        static_array(3, 40) {
                            static_array(10, 4, WorldgenRegionType) {
                                number 32, true
                            }
                        }
                    }
                    field(:river_mins, 320) {
                        static_array(2, 4) {
                            number 32, true
                        }
                    }
                    field(:subregion_max, 328) {
                        number 32, true
                    }
                    field(:cavern_layer_count, 332) {
                        number 32, true
                    }
                    field(:cavern_layer_openness_min, 336) {
                        number 32, true
                    }
                    field(:cavern_layer_openness_max, 340) {
                        number 32, true
                    }
                    field(:cavern_layer_passage_density_min, 344) {
                        number 32, true
                    }
                    field(:cavern_layer_passage_density_max, 348) {
                        number 32, true
                    }
                    field(:cavern_layer_water_min, 352) {
                        number 32, true
                    }
                    field(:cavern_layer_water_max, 356) {
                        number 32, true
                    }
                    field(:have_bottom_layer_1, 360) {
                        number 8, true, nil, BooleanEnum
                    }
                    field(:have_bottom_layer_2, 361) {
                        number 8, true, nil, BooleanEnum
                    }
                    field(:levels_above_ground, 364) {
                        number 32, true
                    }
                    field(:levels_above_layer_1, 368) {
                        number 32, true
                    }
                    field(:levels_above_layer_2, 372) {
                        number 32, true
                    }
                    field(:levels_above_layer_3, 376) {
                        number 32, true
                    }
                    field(:levels_above_layer_4, 380) {
                        number 32, true
                    }
                    field(:levels_above_layer_5, 384) {
                        number 32, true
                    }
                    field(:levels_at_bottom, 388) {
                        number 32, true
                    }
                    field(:cave_min_size, 392) {
                        number 32, true
                    }
                    field(:cave_max_size, 396) {
                        number 32, true
                    }
                    field(:mountain_cave_min, 400) {
                        number 32, true
                    }
                    field(:non_mountain_cave_min, 404) {
                        number 32, true
                    }
                    field(:total_civ_number, 408) {
                        number 32, true
                    }
                    field(:rain_ranges_1, 412) {
                        number 32, true
                    }
                    field(:rain_ranges_0, 416) {
                        number 32, true
                    }
                    field(:rain_ranges_2, 420) {
                        number 32, true
                    }
                    field(:drainage_ranges_1, 424) {
                        number 32, true
                    }
                    field(:drainage_ranges_0, 428) {
                        number 32, true
                    }
                    field(:drainage_ranges_2, 432) {
                        number 32, true
                    }
                    field(:savagery_ranges_1, 436) {
                        number 32, true
                    }
                    field(:savagery_ranges_0, 440) {
                        number 32, true
                    }
                    field(:savagery_ranges_2, 444) {
                        number 32, true
                    }
                    field(:volcanism_ranges_1, 448) {
                        number 32, true
                    }
                    field(:volcanism_ranges_0, 452) {
                        number 32, true
                    }
                    field(:volcanism_ranges_2, 456) {
                        number 32, true
                    }
                    field(:ranges, 460) {
                        static_array(4, 96) {
                            static_array(24, 4, WorldgenRangeType) {
                                number 32, true
                            }
                        }
                    }
                    field(:beast_end_year, 844) {
                        number 32, true
                    }
                    field(:end_year, 848) {
                        number 32, true
                    }
                    field(:beast_end_year_percent, 852) {
                        number 32, true
                    }
                    field(:total_civ_population, 856) {
                        number 32, true
                    }
                    field(:site_cap, 860) {
                        number 32, true
                    }
                    field(:elevation_ranges_1, 864) {
                        number 32, true
                    }
                    field(:elevation_ranges_0, 868) {
                        number 32, true
                    }
                    field(:elevation_ranges_2, 872) {
                        number 32, true
                    }
                    field(:mineral_scarcity, 876) {
                        number 32, true
                    }
                    field(:megabeast_cap, 880) {
                        number 32, true
                    }
                    field(:semimegabeast_cap, 884) {
                        number 32, true
                    }
                    field(:titan_number, 888) {
                        number 32, true
                    }
                    field(:titan_attack_trigger, 892) {
                        static_array(3, 4) {
                            number 32, true
                        }
                    }
                    field(:demon_number, 904) {
                        number 32, true
                    }
                    field(:night_troll_number, 908) {
                        number 32, true
                    }
                    field(:bogeyman_number, 912) {
                        number 32, true
                    }
                    field(:vampire_number, 916) {
                        number 32, true
                    }
                    field(:werebeast_number, 920) {
                        number 32, true
                    }
                    field(:secret_number, 924) {
                        number 32, true
                    }
                    field(:regional_interaction_number, 928) {
                        number 32, true
                    }
                    field(:disturbance_interaction_number, 932) {
                        number 32, true
                    }
                    field(:evil_cloud_number, 936) {
                        number 32, true
                    }
                    field(:evil_rain_number, 940) {
                        number 32, true
                    }
                    field(:anon_1, 944) {
                        number 32, true
                    }
                    field(:good_sq_counts_0, 948) {
                        number 32, true
                    }
                    field(:evil_sq_counts_0, 952) {
                        number 32, true
                    }
                    field(:good_sq_counts_1, 956) {
                        number 32, true
                    }
                    field(:evil_sq_counts_1, 960) {
                        number 32, true
                    }
                    field(:good_sq_counts_2, 964) {
                        number 32, true
                    }
                    field(:evil_sq_counts_2, 968) {
                        number 32, true
                    }
                    field(:elevation_frequency, 972) {
                        static_array(6, 4) {
                            number 32, true
                        }
                    }
                    field(:rain_frequency, 996) {
                        static_array(6, 4) {
                            number 32, true
                        }
                    }
                    field(:drainage_frequency, 1020) {
                        static_array(6, 4) {
                            number 32, true
                        }
                    }
                    field(:savagery_frequency, 1044) {
                        static_array(6, 4) {
                            number 32, true
                        }
                    }
                    field(:temperature_frequency, 1068) {
                        static_array(6, 4) {
                            number 32, true
                        }
                    }
                    field(:volcanism_frequency, 1092) {
                        static_array(6, 4) {
                            number 32, true
                        }
                    }
                    field(:ps, 1116) {
                        pointer {
                        }
                    }
                    field(:reveal_all_history, 1120) {
                        number 32, true
                    }
                    field(:cull_historical_figures, 1124) {
                        number 32, true
                    }
                    field(:erosion_cycle_count, 1128) {
                        number 32, true
                    }
                    field(:periodically_erode_extremes, 1132) {
                        number 32, true
                    }
                    field(:orographic_precipitation, 1136) {
                        number 32, true
                    }
                    field(:playable_civilization_required, 1140) {
                        number 32, true
                    }
                    field(:all_caves_visible, 1144) {
                        number 32, true
                    }
                    field(:show_embark_tunnel, 1148) {
                        number 32, true
                    }
                    field(:pole, 1152) {
                        number 32, true
                    }
                    field(:anon_2, 1156) {
                        number 8, true, nil, BooleanEnum
                    }
                }
            }
        }
    }
    field(:history, 1168728) {
        global :WorldHistory
    }
    field(:entity_populations, 1169336) {
        stl_vector(4) {
            pointer {
                global :EntityPopulation
            }
        }
    }
    field(:unk_v40_6a, 1169352) {
        static_array(336, 16) {
            stl_vector(4) {
                number 32, true
            }
        }
    }
    field(:unk_v40_6b, 1174728) {
        static_array(336, 16) {
            stl_vector(4) {
                number 32, true
            }
        }
    }
    field(:unk_v40_6c, 1180104) {
        static_array(336, 16) {
            stl_vector(4) {
                number 32, true
            }
        }
    }
    field(:unk_v40_6d, 1185480) {
        static_array(336, 16) {
            stl_vector(4) {
                number 32, true
            }
        }
    }
    field(:unk_v40_6e, 1190856) {
        static_array(336, 16) {
            stl_vector(4) {
                number 32, true
            }
        }
    }
    field(:unk_v40_6f, 1196232) {
        static_array(336, 16) {
            stl_vector(4) {
                number 32, true
            }
        }
    }
    field(:unk_v40_7, 1201608) {
        stl_vector
    }
    field(:reindex_pathfinding, 1201624) {
        number 8, true, nil, BooleanEnum
    }
    field(:frame_counter, 1201628) {
        number 32, true
    }
    field(:orphaned_flows, 1201632) {
        stl_vector(4) {
            pointer {
                global :FlowInfo
            }
        }
    }
    field(:pathfinder, 1201648) {
        compound(:World_TPathfinder) {
            field(:boundary_heap, 0) {
                static_array(80000, 16) {
                    compound(:World_TPathfinder_TBoundaryHeap) {
                        field(:total_cost, 0) {
                            number 32, true
                        }
                        field(:local_cost, 4) {
                            number 32, true
                        }
                        field(:x, 8) {
                            number 16, true
                        }
                        field(:y, 10) {
                            number 16, true
                        }
                        field(:z, 12) {
                            number 32, true
                        }
                    }
                }
            }
            field(:heap_count, 1280000) {
                number 32, true
            }
            field(:pos1, 1280004) {
                global :Coord
            }
            field(:pos2, 1280010) {
                global :Coord
            }
            field(:dist_x, 1280016) {
                number 32, true
            }
            field(:dist_y, 1280020) {
                number 32, true
            }
            field(:dist_z, 1280024) {
                number 32, true
            }
            field(:next_path_cost, 1280028) {
                number 32, true
            }
            field(:wipe_path_cost, 1280032) {
                number 8, true, nil, BooleanEnum
            }
            field(:next_path_tag, 1280034) {
                number 16, false
            }
            field(:wipe_path_tag, 1280036) {
                number 8, true, nil, BooleanEnum
            }
            field(:next_walkable_id, 1280038) {
                number 16, true
            }
            field(:plant_update_step, 1280040) {
                number 16, true
            }
            field(:anon_1, 1280042) {
                number 8, true, nil, BooleanEnum
            }
            field(:anon_2, 1280044) {
                number 32, true
            }
        }
    }
    field(:cur_savegame, 2481696) {
        compound(:World_TCurSavegame) {
            field(:save_dir, 0) {
                stl_string
            }
            field(:anon_1, 28) {
            }
            field(:unk_v40_1, 32) {
                number 32, true
            }
            field(:unk_v40_2, 36) {
                number 32, true
            }
            field(:unk_v40_3, 40) {
                number 32, true
            }
            field(:unk_v40_4, 44) {
                number 32, true
            }
            field(:unk_v40_5, 48) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
            field(:unk_v40_6, 64) {
                number 32, true
            }
            field(:unk_v40_7, 68) {
                number 32, true
            }
        }
    }
    field(:features, 2481768) {
        compound(:World_TFeatures) {
            field(:map_features, 0) {
                stl_vector(4) {
                    pointer {
                        global :FeatureInit
                    }
                }
            }
            field(:feature_x, 16) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:feature_y, 32) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:feature_local_idx, 48) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:feature_global_idx, 64) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def feature_global_tgx ; feature_global_idx.map { |i| df.world.world_data.underground_regions[i] } ; end
            field(:anon_1, 80) {
                stl_vector(4) {
                    pointer {
                        global :FeatureInit
                    }
                }
            }
            field(:anon_2, 96) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_3, 112) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_4, 128) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_5, 144) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_6, 160) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_7, 176) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:anon_8, 192) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:anon_9, 208) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_10, 224) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_11, 240) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_12, 256) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_13, 272) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_14, 288) {
                stl_vector(2) {
                    number 16, true
                }
            }
            field(:anon_15, 304) {
                stl_bit_vector
            }
        }
    }
    field(:anon_4, 2482092) {
        number 8, true, nil, BooleanEnum
    }
    field(:anon_5, 2482093) {
        number 8, true, nil, BooleanEnum
    }
    field(:arena_spawn, 2482096) {
        compound(:World_TArenaSpawn) {
            field(:race, 0) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            def race_tg ; race.map { |i| df.world.raws.creatures.all[i] } ; end
            field(:caste, 16) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            field(:type, 32) {
                number 32, true, -1
            }
            field(:anon_1, 36) {
                stl_string
            }
            field(:item_types, 64) {
                static_array(107, 16) {
                    stl_vector(4) {
                        pointer {
                            compound(:World_TArenaSpawn_TItemTypes) {
                                sizeof 16

                                field(:item_type, 0) {
                                    number 16, true, nil, ItemType
                                }
                                field(:item_subtype, 2) {
                                    number 16, true, -1
                                }
                                field(:mattype, 4) {
                                    number 16, true, -1
                                }
                                field(:matindex, 8) {
                                    number 32, true
                                }
                                field(:anon_1, 12) {
                                    number 8, true, nil, BooleanEnum
                                }
                            }
                        }
                    }
                }
            }
            field(:anon_2, 1776) {
                stl_vector
            }
            field(:anon_3, 1792) {
                stl_vector
            }
            field(:anon_4, 1808) {
                stl_vector
            }
            field(:equipment, 1824) {
                compound(:World_TArenaSpawn_TEquipment) {
                    field(:skills, 0) {
                        stl_vector(2) {
                            number 16, true, nil, JobSkill
                        }
                    }
                    field(:skill_levels, 16) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:item_types, 32) {
                        stl_vector(2) {
                            number 16, true, nil, ItemType
                        }
                    }
                    field(:item_subtypes, 48) {
                        stl_vector(2) {
                            number 16, true, -1
                        }
                    }
                    field(:item_materials, 64) {
                        global :MaterialVecRef
                    }
                    field(:item_counts, 96) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                }
            }
            field(:side, 1936) {
                number 32, true
            }
            field(:interaction, 1940) {
                number 32, true, -1
            }
            field(:interactions, 1944) {
                stl_vector(4) {
                    pointer {
                    }
                }
            }
            field(:creature_cnt, 1960) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:anon_5, 1976) {
                number 32, true
            }
            field(:conflict_level, 1980) {
                number 32, true
            }
            field(:morale_enable, 1984) {
                number 8, true, nil, BooleanEnum
            }
            field(:anon_6, 1986) {
                number 16, true
            }
            field(:temperature, 1988) {
                number 16, false
            }
            field(:time, 1990) {
                number 16, true
            }
            field(:weather_column, 1992) {
                number 32, true
            }
            field(:weather_row, 1996) {
                number 32, true
            }
            field(:tree_types, 2000) {
                stl_vector(4) {
                    pointer {
                        global :PlantRaw
                    }
                }
            }
            field(:tree_cursor, 2016) {
                number 32, true
            }
            field(:tree_age, 2020) {
                number 32, true
            }
            field(:tree_filter, 2024) {
                stl_string
            }
            field(:tree_age_str, 2052) {
                stl_string
            }
        }
    }
    field(:anon_6, 2484176) {
    }
    field(:unk_19325c, 2484180) {
        compound(:World_TUnk19325c) {
            field(:anon_1, 0) {
                stl_vector(4) {
                    pointer {
                        compound(:World_TUnk19325c_TAnon1) {
                            sizeof 24

                            field(:anon_1, 0) {
                                number 32, true
                            }
                            field(:anon_2, 4) {
                                number 32, true
                            }
                            field(:anon_3, 8) {
                                number 16, true
                            }
                            field(:anon_4, 12) {
                                number 32, true
                            }
                            field(:anon_5, 16) {
                                number 32, true
                            }
                            field(:anon_6, 20) {
                                number 32, true
                            }
                        }
                    }
                }
            }
            field(:anon_2, 16) {
                stl_vector(4) {
                    pointer {
                        compound(:World_TUnk19325c_TAnon2) {
                            sizeof 8

                            field(:anon_1, 0) {
                                number 32, true
                            }
                            field(:anon_2, 4) {
                                number 32, true
                            }
                        }
                    }
                }
            }
            field(:anon_3, 32) {
                stl_vector(4) {
                    pointer {
                        compound(:World_TUnk19325c_TAnon3) {
                            sizeof 16

                            field(:anon_1, 0) {
                                number 16, true
                            }
                            field(:anon_2, 4) {
                                number 32, true
                            }
                            field(:anon_3, 8) {
                                number 32, true
                            }
                            field(:anon_4, 12) {
                                number 32, true
                            }
                        }
                    }
                }
            }
            field(:anon_4, 48) {
                number 32, true
            }
            field(:anon_5, 52) {
                number 32, true
            }
            field(:anon_6, 56) {
                number 32, true
            }
        }
    }
    field(:anon_7, 2484240) {
        number 32, true
    }
end

class WorldConstruction < MemHack::Compound
    sizeof 56

    rtti_classname :world_constructionst

    field(:id, 4) {
        number 32, true
    }
    field(:square_obj, 8) {
        stl_vector(4) {
            pointer {
                global :WorldConstructionSquare
            }
        }
    }
    field(:square_pos, 24) {
        global :Coord2dPath
    }
    def getType()
        WorldConstructionType.sym(DFHack.vmethod_call(self, 0))
    end
    def getName()
        ptr = DFHack.vmethod_call(self, 4)
        class << self
            global :LanguageName
        end._at(ptr) if ptr != 0
    end
    def write_file(file)
        DFHack.vmethod_call(self, 8, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 12, file, loadversion) ; nil
    end
end

class WorldConstructionBridgest < WorldConstruction
    sizeof 164

    rtti_classname :world_construction_bridgest

    field(:name, 56) {
        global :LanguageName
    }
end

class WorldConstructionRoadst < WorldConstruction
    sizeof 164

    rtti_classname :world_construction_roadst

    field(:name, 56) {
        global :LanguageName
    }
end

class WorldConstructionSquare < MemHack::Compound
    sizeof 76

    rtti_classname :world_construction_squarest

    field(:region_pos, 4) {
        global :Coord2d
    }
    field(:construction_id, 8) {
        number 32, true, -1
    }
    def construction_tg ; df.world.world_data.constructions.list.binsearch(construction_id) ; end
    field(:embark_x, 12) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:embark_y, 28) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:embark_unk, 44) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:embark_z, 60) {
        stl_vector(2) {
            number 16, true
        }
    }
    def getType()
        WorldConstructionType.sym(DFHack.vmethod_call(self, 0))
    end
    def write_file(file)
        DFHack.vmethod_call(self, 4, file) ; nil
    end
    def read_file(file, loadversion)
        DFHack.vmethod_call(self, 8, file, loadversion) ; nil
    end
end

class WorldConstructionSquareBridgest < WorldConstructionSquare
    sizeof 92

    rtti_classname :world_construction_square_bridgest

    field(:road_id, 76) {
        number 32, true, -1
    }
    def road_tg ; df.world.world_data.constructions.list.binsearch(road_id) ; end
    field(:item_type, 80) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 82) {
        number 16, true, -1
    }
    field(:mat_type, 84) {
        number 16, true, -1
    }
    field(:mat_index, 88) {
        number 32, true
    }
end

class WorldConstructionSquareRoadst < WorldConstructionSquare
    sizeof 88

    rtti_classname :world_construction_square_roadst

    field(:item_type, 76) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 78) {
        number 16, true, -1
    }
    field(:mat_type, 80) {
        number 16, true, -1
    }
    field(:mat_index, 84) {
        number 32, true
    }
end

class WorldConstructionSquareTunnelst < WorldConstructionSquare
    sizeof 76

    rtti_classname :world_construction_square_tunnelst

end

class WorldConstructionSquareWallst < WorldConstructionSquare
    sizeof 88

    rtti_classname :world_construction_square_wallst

    field(:item_type, 76) {
        number 16, true, nil, ItemType
    }
    field(:item_subtype, 78) {
        number 16, true, -1
    }
    field(:mat_type, 80) {
        number 16, true, -1
    }
    field(:mat_index, 84) {
        number 32, true
    }
end

class WorldConstructionTunnelst < WorldConstruction
    sizeof 164

    rtti_classname :world_construction_tunnelst

    field(:name, 56) {
        global :LanguageName
    }
end

class WorldConstructionWallst < WorldConstruction
    sizeof 164

    rtti_classname :world_construction_wallst

    field(:name, 56) {
        global :LanguageName
    }
end

class WorldData < MemHack::Compound
    sizeof 1575700

    field(:name, 0) {
        global :LanguageName
    }
    field(:unk1, 108) {
        static_array(15, 1) {
            number 8, true
        }
    }
    field(:next_site_id, 124) {
        number 32, true
    }
    field(:next_site_unk136_id, 128) {
        number 32, true
    }
    field(:next_unk_140_id, 132) {
        number 32, true
    }
    field(:next_unk_150_id, 136) {
        number 32, true
    }
    field(:anon_1, 140) {
        number 32, true
    }
    field(:anon_2, 144) {
        number 32, true
    }
    field(:world_width, 148) {
        number 32, true
    }
    field(:world_height, 152) {
        number 32, true
    }
    field(:unk_78, 156) {
        number 32, true
    }
    field(:moon_phase, 160) {
        number 32, true
    }
    field(:flip_latitude, 164) {
        number 16, true
    }
    field(:flip_longitude, 166) {
        number 16, true
    }
    field(:unk_84, 168) {
        number 16, true
    }
    field(:unk_86, 170) {
        number 16, true
    }
    field(:unk_88, 172) {
        number 16, true
    }
    field(:unk_8a, 174) {
        number 16, true
    }
    field(:anon_3, 176) {
        number 16, true
    }
    field(:anon_4, 178) {
        number 16, true
    }
    field(:unk_b4, 180) {
        compound(:WorldData_TUnkB4) {
            field(:world_width2, 0) {
                number 32, true
            }
            field(:world_height2, 4) {
                number 32, true
            }
            field(:anon_1, 8) {
                pointer_ary(4) {
                    number 32, false
                }
            }
            field(:anon_2, 12) {
                pointer_ary(4) {
                    number 32, false
                }
            }
            field(:anon_3, 16) {
                pointer_ary(4) {
                    number 32, false
                }
            }
            field(:anon_4, 20) {
                pointer_ary(1) {
                    number 8, false
                }
            }
        }
    }
    field(:region_details, 204) {
        stl_vector(4) {
            pointer {
                global :WorldRegionDetails
            }
        }
    }
    field(:adv_region_x, 220) {
        number 32, true
    }
    field(:adv_region_y, 224) {
        number 32, true
    }
    field(:adv_emb_x, 228) {
        number 32, true
    }
    field(:adv_emb_y, 232) {
        number 32, true
    }
    field(:unk_x1, 236) {
        number 16, true
    }
    field(:unk_y1, 238) {
        number 16, true
    }
    field(:unk_x2, 240) {
        number 16, true
    }
    field(:unk_y2, 242) {
        number 16, true
    }
    field(:constructions, 244) {
        compound(:WorldData_TConstructions) {
            field(:width, 0) {
                number 16, true
            }
            field(:height, 2) {
                number 16, true
            }
            field(:map, 4) {
                pointer_ary(4) {
                    pointer_ary(16) {
                        stl_vector(4) {
                            pointer {
                                global :WorldConstructionSquare
                            }
                        }
                    }
                }
            }
            field(:list, 8) {
                stl_vector(4) {
                    pointer {
                        global :WorldConstruction
                    }
                }
            }
            field(:next_id, 24) {
                number 32, true
            }
        }
    }
    field(:entity_claims1, 272) {
        global :EntityClaimMask
    }
    field(:entity_claims2, 280) {
        global :EntityClaimMask
    }
    field(:sites, 288) {
        stl_vector(4) {
            pointer {
                global :WorldSite
            }
        }
    }
    field(:site_unk130, 304) {
        stl_vector(4) {
            pointer {
                global :WorldSiteUnk130
            }
        }
    }
    field(:resource_allotments, 320) {
        stl_vector(4) {
            pointer {
                global :ResourceAllotmentData
            }
        }
    }
    field(:unk_150, 336) {
        stl_vector(4) {
            pointer {
                compound(:WorldData_TUnk150) {
                    sizeof 56

                    field(:index, 0) {
                        number 32, true
                    }
                    field(:unk_4, 4) {
                        number 32, true
                    }
                    field(:unk_8, 8) {
                        stl_vector(4) {
                            pointer {
                                compound(:WorldData_TUnk150_TUnk8) {
                                    sizeof 12

                                    field(:index, 0) {
                                        number 32, true
                                    }
                                    field(:unk_4, 4) {
                                        number 32, true
                                    }
                                    field(:unk_8, 8) {
                                        number 32, true
                                    }
                                }
                            }
                        }
                    }
                    field(:unk_18, 24) {
                        stl_vector(4) {
                            pointer {
                                compound(:WorldData_TUnk150_TUnk18) {
                                    sizeof 12

                                    field(:index, 0) {
                                        number 32, true
                                    }
                                    field(:unk_4, 4) {
                                        number 32, true
                                    }
                                    field(:unk_8, 8) {
                                        number 32, true
                                    }
                                }
                            }
                        }
                    }
                    field(:unk_28, 40) {
                        stl_vector(4) {
                            pointer {
                                compound(:WorldData_TUnk150_TUnk28) {
                                    sizeof 8

                                    field(:unk_0, 0) {
                                        number 32, true
                                    }
                                    field(:unk_4, 4) {
                                        number 32, true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    field(:unk_170, 352) {
        stl_vector(4) {
            pointer {
                compound(:WorldData_TUnk170) {
                    sizeof 72

                    field(:index, 0) {
                        number 32, true
                    }
                    field(:unk_4, 4) {
                        stl_vector(4) {
                            pointer {
                                compound(:WorldData_TUnk170_TUnk4) {
                                    sizeof 32

                                    field(:unk_0, 0) {
                                        number 32, true
                                    }
                                    field(:unk_4, 4) {
                                        number 32, true
                                    }
                                    field(:unk_8, 8) {
                                        number 32, true
                                    }
                                    field(:unk_c, 12) {
                                        number 32, true
                                    }
                                    field(:unk_10, 16) {
                                        number 32, true
                                    }
                                    field(:unk_14, 20) {
                                        number 32, true
                                    }
                                    field(:unk_18, 24) {
                                        number 32, true
                                    }
                                    field(:unk_1c, 28) {
                                        number 32, true
                                    }
                                }
                            }
                        }
                    }
                    field(:unk_14, 20) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:unk_24, 36) {
                        number 32, true
                    }
                    field(:unk_28, 40) {
                        number 32, true
                    }
                    field(:unk_2c, 44) {
                        number 32, true
                    }
                    field(:unk_30, 48) {
                        number 32, true
                    }
                    field(:unk_34, 52) {
                        number 32, true
                    }
                    field(:unk_38, 56) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                }
            }
        }
    }
    field(:freakish_weather, 368) {
        stl_vector(4) {
            pointer {
                compound(:WorldData_TFreakishWeather) {
                    sizeof 56

                    field(:unk_0, 0) {
                        number 32, true
                    }
                    field(:unk_4, 4) {
                        number 32, true
                    }
                    field(:mat_type, 8) {
                        number 16, true, -1
                    }
                    field(:mat_index, 12) {
                        number 32, true
                    }
                    field(:unk_10, 16) {
                        number 32, true
                    }
                    field(:region_x, 20) {
                        number 32, true
                    }
                    field(:region_y, 24) {
                        number 32, true
                    }
                    field(:unk_1c, 28) {
                        number 32, true, -30000
                    }
                    field(:unk_20, 32) {
                        number 32, true, -30000
                    }
                    field(:unk_24, 36) {
                        number 32, true, -30000
                    }
                    field(:unk_28, 40) {
                        number 32, true
                    }
                    field(:unk_2c, 44) {
                        number 32, true
                    }
                    field(:unk_30, 48) {
                        number 32, true
                    }
                    field(:unk_34, 52) {
                        number 32, true, -1
                    }
                }
            }
        }
    }
    field(:object_data, 384) {
        stl_vector(4) {
            pointer {
                global :WorldObjectData
            }
        }
    }
    field(:landmasses, 400) {
        stl_vector(4) {
            pointer {
                global :WorldLandmass
            }
        }
    }
    field(:regions, 416) {
        stl_vector(4) {
            pointer {
                global :WorldRegion
            }
        }
    }
    field(:underground_regions, 432) {
        stl_vector(4) {
            pointer {
                global :WorldUndergroundRegion
            }
        }
    }
    field(:geo_biomes, 448) {
        stl_vector(4) {
            pointer {
                global :WorldGeoBiome
            }
        }
    }
    field(:mountain_peaks, 464) {
        stl_vector(4) {
            pointer {
                compound(:WorldData_TMountainPeaks) {
                    sizeof 124

                    field(:name, 0) {
                        global :LanguageName
                    }
                    field(:pos, 108) {
                        global :Coord2d
                    }
                    field(:flags, 112) {
                        df_flagarray
                    }
                    field(:height, 120) {
                        number 16, true
                    }
                }
            }
        }
    }
    field(:rivers, 480) {
        stl_vector(4) {
            pointer {
                global :WorldRiver
            }
        }
    }
    field(:region_map, 496) {
        pointer_ary(4) {
            pointer_ary(92) {
                global :RegionMapEntry
            }
        }
    }
    field(:unk_1c4, 500) {
        pointer {
        }
    }
    field(:unk_1c8, 504) {
    }
    field(:unk_1cc, 508) {
        stl_vector
    }
    field(:unk_1dc, 524) {
        pointer_ary(4) {
            pointer_ary(16) {
                stl_vector
            }
        }
    }
    field(:unk_1e0, 528) {
        pointer_ary(4) {
            pointer_ary(16) {
                stl_vector
            }
        }
    }
    field(:unk_1e4, 532) {
        pointer_ary(4) {
            pointer_ary(16) {
                stl_vector
            }
        }
    }
    field(:unk_1e8, 536) {
        pointer_ary(4) {
            pointer_ary(16) {
                stl_vector
            }
        }
    }
    field(:unk_1ec, 540) {
        pointer_ary(4) {
            pointer_ary(16) {
                stl_vector
            }
        }
    }
    field(:unk_1f0, 544) {
        pointer_ary(4) {
            pointer_ary(16) {
                stl_vector
            }
        }
    }
    field(:anon_5, 548) {
        number 32, true
    }
    field(:anon_6, 552) {
        number 32, true
    }
    field(:anon_7, 556) {
        number 32, true
    }
    field(:anon_8, 560) {
        number 32, true
    }
    field(:anon_9, 564) {
        number 32, true
    }
    field(:anon_10, 568) {
        number 32, true
    }
    field(:anon_11, 572) {
        number 32, true
    }
    field(:anon_12, 576) {
        number 32, true
    }
    field(:anon_13, 580) {
        number 32, true
    }
    field(:anon_14, 584) {
        number 32, true
    }
    field(:anon_15, 588) {
        number 32, true
    }
    field(:anon_16, 592) {
        number 32, true
    }
    field(:anon_17, 596) {
        number 32, true
    }
    field(:anon_18, 600) {
        number 32, true
    }
    field(:anon_19, 604) {
        number 32, true
    }
    field(:anon_20, 608) {
        number 32, true
    }
    field(:anon_21, 612) {
    }
    field(:anon_22, 295532) {
        number 8, true
    }
    field(:anon_23, 295533) {
        number 8, true
    }
    field(:active_site, 295536) {
        stl_vector(4) {
            pointer {
                global :WorldSite
            }
        }
    }
    field(:feature_map, 295552) {
        pointer_ary(4) {
            pointer_ary(16) {
                compound(:WorldData_TFeatureMap) {
                    sizeof 16

                    field(:x, 0) {
                        number 16, true
                    }
                    field(:y, 2) {
                        number 16, true
                    }
                    field(:features, 4) {
                        pointer {
                            compound(:WorldData_TFeatureMap_TFeatures) {
                                sizeof 34816

                                field(:feature_init, 0) {
                                    static_array(16, 256) {
                                        static_array(16, 16) {
                                            stl_vector(4) {
                                                pointer {
                                                    global :FeatureInit
                                                }
                                            }
                                        }
                                    }
                                }
                                field(:unk, 4096) {
                                    static_array(16, 1920) {
                                        static_array(16, 120) {
                                            static_array(30, 4) {
                                                number 32, true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    field(:unk_8, 8) {
                        pointer_ary(2) {
                            number 16, true
                        }
                    }
                    field(:unk_c, 12) {
                        pointer_ary(4) {
                            number 32, true
                        }
                    }
                }
            }
        }
    }
    field(:old_sites, 295556) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def old_sites_tg ; old_sites.map { |i| df.world.world_data.sites.binsearch(i) } ; end
    field(:old_site_x, 295572) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:old_site_y, 295588) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:land_rgns, 295604) {
        global :Coord2dPath
    }
    field(:unk_260, 295636) {
        number 32, true
    }
    field(:unk_264, 295640) {
        number 8, true
    }
    field(:unk_268, 295644) {
        number 32, true
    }
    field(:unk_26c, 295648) {
        number 8, true
    }
    field(:unk_270, 295652) {
        number 32, true
    }
    field(:unk_274, 295656) {
        stl_vector(4) {
            pointer {
                compound(:WorldData_TUnk274) {
                    sizeof 52

                    field(:unk_0, 0) {
                        stl_vector(4) {
                            pointer {
                                global :HistoricalFigure
                            }
                        }
                    }
                    field(:unk_10, 16) {
                        stl_vector(4) {
                            pointer {
                                compound(:WorldData_TUnk274_TUnk10) {
                                    sizeof 12

                                    field(:unk_0, 0) {
                                        number 32, true
                                    }
                                    field(:unk_4, 4) {
                                        number 32, true
                                    }
                                    field(:unk_8, 8) {
                                        number 32, true
                                    }
                                }
                            }
                        }
                    }
                    field(:unk_20, 32) {
                        pointer {
                            global :HistoricalEntity
                        }
                    }
                    field(:unk_24, 36) {
                        number 32, true
                    }
                    field(:unk_28, 40) {
                        pointer {
                            global :LanguageName
                        }
                    }
                    field(:unk_2c, 44) {
                        number 32, true
                    }
                    field(:unk_30, 48) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:unk_482f8, 295672) {
        compound(:WorldData_TUnk482f8) {
            field(:anon_1, 0) {
                static_array(320000, 4) {
                    number 32, true
                }
            }
            field(:anon_2, 1280000) {
                number 32, true
            }
            field(:anon_3, 1280004) {
                number 32, true
            }
            field(:anon_4, 1280008) {
                number 32, true
            }
            field(:anon_5, 1280012) {
                number 32, true
            }
            field(:anon_6, 1280016) {
                number 32, true
            }
            field(:anon_7, 1280020) {
                number 32, true
            }
            field(:anon_8, 1280024) {
                number 32, true
            }
        }
    }
end

class WorldGeoBiome < MemHack::Compound
    sizeof 20

    field(:unk1, 0) {
        number 16, true
    }
    field(:index, 2) {
        number 16, true
    }
    field(:layers, 4) {
        stl_vector(4) {
            pointer {
                global :WorldGeoLayer
            }
        }
    }
end

class WorldGeoLayer < MemHack::Compound
    sizeof 76

    field(:type, 0) {
        number 16, true, nil, GeoLayerType
    }
    field(:mat_index, 4) {
        number 32, true, -1
    }
    def mat_index_tg ; df.world.raws.inorganics[mat_index] ; end
    field(:vein_mat, 8) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def vein_mat_tg ; vein_mat.map { |i| df.world.raws.inorganics[i] } ; end
    field(:vein_nested_in, 24) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:vein_type, 40) {
        stl_vector(1) {
            number 8, true, nil, InclusionType
        }
    }
    field(:vein_unk_38, 56) {
        stl_vector(1) {
            number 8, true
        }
    }
    field(:top_height, 72) {
        number 16, true
    }
    field(:bottom_height, 74) {
        number 16, true
    }
end

class WorldHistory < MemHack::Compound
    sizeof 608

    field(:events, 0) {
        stl_vector(4) {
            pointer {
                global :HistoryEvent
            }
        }
    }
    field(:events2, 16) {
        stl_vector(4) {
            pointer {
                global :HistoryEvent
            }
        }
    }
    field(:figures, 32) {
        stl_vector(4) {
            pointer {
                global :HistoricalFigure
            }
        }
    }
    field(:event_collections, 48) {
        compound(:WorldHistory_TEventCollections) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :HistoryEventCollection
                    }
                }
            }
            field(:other, 16) {
                static_array(9, 16) {
                    stl_vector(4) {
                        pointer {
                            global :HistoryEventCollection
                        }
                    }
                }
            }
        }
    }
    field(:eras, 208) {
        stl_vector(4) {
            pointer {
                global :HistoryEra
            }
        }
    }
    field(:unk1, 224) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk2, 240) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_1, 256) {
        number 32, true
    }
    field(:total_powers, 260) {
        number 32, true
    }
    field(:total_megabeasts, 264) {
        number 32, true
    }
    field(:total_semimegabeasts, 268) {
        number 32, true
    }
    field(:anon_2, 272) {
        stl_vector
    }
    field(:anon_3, 288) {
        stl_vector
    }
    field(:anon_4, 304) {
        stl_vector
    }
    field(:anon_5, 320) {
        stl_vector
    }
    field(:anon_6, 336) {
        stl_vector
    }
    field(:anon_7, 352) {
        stl_vector
    }
    field(:unk_v40_1, 368) {
        static_array(12, 16) {
            stl_vector
        }
    }
    field(:anon_8, 560) {
        stl_vector
    }
    field(:anon_9, 576) {
        number 8, true, nil, BooleanEnum
    }
    field(:anon_10, 580) {
        stl_vector
    }
    field(:anon_11, 596) {
        number 32, true
    }
    field(:anon_12, 600) {
        number 32, true
    }
    field(:anon_13, 604) {
        number 32, true
    }
end

class WorldLandmass < MemHack::Compound
    sizeof 164

    field(:name, 0) {
        global :LanguageName
    }
    field(:index, 108) {
        number 32, true
    }
    field(:area, 112) {
        number 32, true
    }
    field(:min_x, 116) {
        number 32, true
    }
    field(:max_x, 120) {
        number 32, true
    }
    field(:min_y, 124) {
        number 32, true
    }
    field(:max_y, 128) {
        number 32, true
    }
    field(:unk_74, 132) {
        stl_vector
    }
    field(:unk_84, 148) {
        stl_vector
    }
end

class WorldObjectData < MemHack::Compound
    sizeof 288

    field(:id, 0) {
        number 32, true
    }
    field(:altered_items, 4) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:offloaded_items, 20) {
        stl_vector(4) {
            pointer {
                compound(:WorldObjectData_TOffloadedItems) {
                    sizeof 28

                    field(:item, 0) {
                        pointer {
                            global :Item
                        }
                    }
                    field(:global_x, 4) {
                        number 32, true
                    }
                    field(:global_y, 8) {
                        number 32, true
                    }
                    field(:global_z, 12) {
                        number 32, true
                    }
                    field(:container, 16) {
                        number 32, true, -1
                    }
                    def container_tg ; df.world.items.all.binsearch(container) ; end
                    field(:building, 20) {
                        number 32, true, -1
                    }
                    def building_tg ; df.world.buildings.all.binsearch(building) ; end
                    field(:unk_18, 24) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:unk_24, 36) {
        stl_vector
    }
    field(:unk_34, 52) {
        stl_vector
    }
    field(:unk_44, 68) {
        stl_vector
    }
    field(:unk_54, 84) {
        stl_vector
    }
    field(:unk_64, 100) {
        stl_vector
    }
    field(:altered_buildings, 116) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:offloaded_buildings, 132) {
        stl_vector(4) {
            pointer {
                compound(:WorldObjectData_TOffloadedBuildings) {
                    sizeof 20

                    field(:building, 0) {
                        pointer {
                            global :Building
                        }
                    }
                    field(:global_x, 4) {
                        number 32, true
                    }
                    field(:global_y, 8) {
                        number 32, true
                    }
                    field(:global_z, 12) {
                        number 32, true
                    }
                    field(:unk_10, 16) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:unk_94, 148) {
        stl_vector(4) {
            pointer {
                compound(:WorldObjectData_TUnk94) {
                    sizeof 16

                    field(:global_x, 0) {
                        number 32, true
                    }
                    field(:global_y, 4) {
                        number 32, true
                    }
                    field(:global_z, 8) {
                        number 32, true
                    }
                    field(:unk_c, 12) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:creation_zone_alterations, 164) {
        stl_vector(4) {
            pointer {
            }
        }
    }
    field(:unk_v40_1, 180) {
        number 32, true
    }
    field(:year, 184) {
        number 32, true
    }
    field(:year_tick, 188) {
        number 32, true
    }
    field(:unk_c0, 192) {
        stl_vector
    }
    field(:unk_d0, 208) {
        stl_vector
    }
    field(:unk_e0, 224) {
        stl_vector
    }
    field(:unk_f0, 240) {
        stl_vector
    }
    field(:unk_100, 256) {
        stl_vector
    }
    field(:unk_110, 272) {
        stl_vector
    }
end

class WorldPopulation < MemHack::Compound
    sizeof 36

    field(:type, 0) {
        number 16, true, nil, WorldPopulationType
    }
    field(:race, 2) {
        number 16, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:plant, 2) {
        number 16, true, -1
    }
    def plant_tg ; df.world.raws.plants.all[plant] ; end
    field(:count_min, 4) {
        number 32, true, 10000001
    }
    field(:count_max, 8) {
        number 32, true, 10000001
    }
    field(:unk_c, 12) {
        number 32, true
    }
    field(:owner, 16) {
        number 32, true, -1
    }
    def owner_tg ; df.world.entities.all.binsearch(owner) ; end
    field(:unk_10, 20) {
        number 32, true, -1
    }
    field(:unk_14, 24) {
        number 32, true, -1
    }
    field(:unk_18, 28) {
        number 32, true, -1
    }
    field(:unk_1c, 32) {
        number 32, true, -1
    }
end

class WorldPopulationRef < MemHack::Compound
    sizeof 24

    field(:region_x, 0) {
        number 16, true
    }
    field(:region_y, 2) {
        number 16, true
    }
    field(:feature_idx, 4) {
        number 16, true, -1
    }
    field(:cave_id, 8) {
        number 32, true, -1
    }
    def cave_tg ; df.world.world_data.underground_regions[cave_id] ; end
    field(:unk_28, 12) {
        number 32, true
    }
    field(:population_idx, 16) {
        number 32, true
    }
    field(:depth, 20) {
        number 16, true
    }
end

class WorldRaws < MemHack::Compound
    sizeof 28640

    field(:material_templates, 0) {
        stl_vector(4) {
            pointer {
                global :MaterialTemplate
            }
        }
    }
    field(:inorganics, 16) {
        stl_vector(4) {
            pointer {
                global :InorganicRaw
            }
        }
    }
    field(:inorganics_subset, 32) {
        stl_vector(4) {
            pointer {
                global :InorganicRaw
            }
        }
    }
    field(:plants, 48) {
        compound(:WorldRaws_TPlants) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :PlantRaw
                    }
                }
            }
            field(:bushes, 16) {
                stl_vector(4) {
                    pointer {
                        global :PlantRaw
                    }
                }
            }
            field(:bushes_idx, 32) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def bushes_tgx ; bushes_idx.map { |i| df.world.raws.plants.all[i] } ; end
            field(:trees, 48) {
                stl_vector(4) {
                    pointer {
                        global :PlantRaw
                    }
                }
            }
            field(:trees_idx, 64) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def trees_tgx ; trees_idx.map { |i| df.world.raws.plants.all[i] } ; end
            field(:grasses, 80) {
                stl_vector(4) {
                    pointer {
                        global :PlantRaw
                    }
                }
            }
            field(:grasses_idx, 96) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def grasses_tgx ; grasses_idx.map { |i| df.world.raws.plants.all[i] } ; end
        }
    }
    field(:tissue_templates, 160) {
        stl_vector(4) {
            pointer {
                global :TissueTemplate
            }
        }
    }
    field(:body_detail_plans, 176) {
        stl_vector(4) {
            pointer {
                global :BodyDetailPlan
            }
        }
    }
    field(:body_templates, 192) {
        stl_vector(4) {
            pointer {
                global :BodyTemplate
            }
        }
    }
    field(:bodyglosses, 208) {
        stl_vector(4) {
            pointer {
                compound(:WorldRaws_TBodyglosses) {
                    sizeof 140

                    field(:id, 0) {
                        stl_string
                    }
                    field(:old_singular, 28) {
                        stl_string
                    }
                    field(:new_singular, 56) {
                        stl_string
                    }
                    field(:old_plural, 84) {
                        stl_string
                    }
                    field(:new_plural, 112) {
                        stl_string
                    }
                }
            }
        }
    }
    field(:creature_variations, 224) {
        stl_vector(4) {
            pointer {
                global :CreatureVariation
            }
        }
    }
    field(:creatures, 240) {
        compound(:WorldRaws_TCreatures) {
            field(:alphabetic, 0) {
                stl_vector(4) {
                    pointer {
                        global :CreatureRaw
                    }
                }
            }
            field(:all, 16) {
                stl_vector(4) {
                    pointer {
                        global :CreatureRaw
                    }
                }
            }
            field(:num_caste, 32) {
                number 32, true
            }
            field(:list_creature, 36) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:list_caste, 52) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:action_strings, 68) {
                stl_vector(4) {
                    pointer {
                        stl_string
                    }
                }
            }
        }
    }
    field(:itemdefs, 324) {
        compound(:WorldRaws_TItemdefs) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :Itemdef
                    }
                }
            }
            field(:weapons, 16) {
                stl_vector(4) {
                    pointer {
                        global :ItemdefWeaponst
                    }
                }
            }
            field(:trapcomps, 32) {
                stl_vector(4) {
                    pointer {
                        global :ItemdefTrapcompst
                    }
                }
            }
            field(:toys, 48) {
                stl_vector(4) {
                    pointer {
                        global :ItemdefToyst
                    }
                }
            }
            field(:tools, 64) {
                stl_vector(4) {
                    pointer {
                        global :ItemdefToolst
                    }
                }
            }
            field(:tools_by_type, 80) {
                static_array(18, 16, ToolUses) {
                    stl_vector(4) {
                        pointer {
                            global :ItemdefToolst
                        }
                    }
                }
            }
            field(:instruments, 368) {
                stl_vector(4) {
                    pointer {
                        global :ItemdefInstrumentst
                    }
                }
            }
            field(:armor, 384) {
                stl_vector(4) {
                    pointer {
                        global :ItemdefArmorst
                    }
                }
            }
            field(:ammo, 400) {
                stl_vector(4) {
                    pointer {
                        global :ItemdefAmmost
                    }
                }
            }
            field(:siege_ammo, 416) {
                stl_vector(4) {
                    pointer {
                        global :ItemdefSiegeammost
                    }
                }
            }
            field(:gloves, 432) {
                stl_vector(4) {
                    pointer {
                        global :ItemdefGlovesst
                    }
                }
            }
            field(:shoes, 448) {
                stl_vector(4) {
                    pointer {
                        global :ItemdefShoesst
                    }
                }
            }
            field(:shields, 464) {
                stl_vector(4) {
                    pointer {
                        global :ItemdefShieldst
                    }
                }
            }
            field(:helms, 480) {
                stl_vector(4) {
                    pointer {
                        global :ItemdefHelmst
                    }
                }
            }
            field(:pants, 496) {
                stl_vector(4) {
                    pointer {
                        global :ItemdefPantsst
                    }
                }
            }
            field(:food, 512) {
                stl_vector(4) {
                    pointer {
                        global :ItemdefFoodst
                    }
                }
            }
        }
    }
    field(:entities, 852) {
        stl_vector(4) {
            pointer {
                global :EntityRaw
            }
        }
    }
    field(:language, 868) {
        compound(:WorldRaws_TLanguage) {
            field(:words, 0) {
                stl_vector(4) {
                    pointer {
                        global :LanguageWord
                    }
                }
            }
            field(:symbols, 16) {
                stl_vector(4) {
                    pointer {
                        global :LanguageSymbol
                    }
                }
            }
            field(:translations, 32) {
                stl_vector(4) {
                    pointer {
                        global :LanguageTranslation
                    }
                }
            }
            field(:word_table, 48) {
                static_array(2, 11520) {
                    static_array(60, 192) {
                        global :LanguageWordTable
                    }
                }
            }
            field(:colors, 23088) {
                stl_vector(4) {
                    pointer {
                        global :DescriptorColor
                    }
                }
            }
            field(:shapes, 23104) {
                stl_vector(4) {
                    pointer {
                        global :DescriptorShape
                    }
                }
            }
            field(:patterns, 23120) {
                stl_vector(4) {
                    pointer {
                        global :DescriptorPattern
                    }
                }
            }
        }
    }
    field(:reactions, 24004) {
        stl_vector(4) {
            pointer {
                global :Reaction
            }
        }
    }
    field(:buildings, 24020) {
        compound(:WorldRaws_TBuildings) {
            field(:all, 0) {
                stl_vector(4) {
                    pointer {
                        global :BuildingDef
                    }
                }
            }
            field(:workshops, 16) {
                stl_vector(4) {
                    pointer {
                        global :BuildingDefWorkshopst
                    }
                }
            }
            field(:furnaces, 32) {
                stl_vector(4) {
                    pointer {
                        global :BuildingDefFurnacest
                    }
                }
            }
            field(:next_id, 48) {
                number 32, true
            }
        }
    }
    field(:interactions, 24072) {
        stl_vector(4) {
            pointer {
                global :Interaction
            }
        }
    }
    field(:mat_table, 24088) {
        global :SpecialMatTable
    }
    field(:syndromes, 28500) {
        compound(:WorldRaws_TSyndromes) {
            field(:mat_types, 0) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            field(:mat_indexes, 16) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:interactions, 32) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def interactions_tg ; interactions.map { |i| df.world.raws.interactions.binsearch(i) } ; end
            field(:all, 48) {
                stl_vector(4) {
                    pointer {
                        global :Syndrome
                    }
                }
            }
        }
    }
    field(:effects, 28564) {
        compound(:WorldRaws_TEffects) {
            field(:mat_types, 0) {
                stl_vector(2) {
                    number 16, true, -1
                }
            }
            field(:mat_indexes, 16) {
                stl_vector(4) {
                    number 32, true
                }
            }
            field(:interactions, 32) {
                stl_vector(4) {
                    number 32, true, -1
                }
            }
            def interactions_tg ; interactions.map { |i| df.world.raws.interactions.binsearch(i) } ; end
            field(:all, 48) {
                stl_vector(4) {
                    pointer {
                        global :CreatureInteractionEffect
                    }
                }
            }
        }
    }
    field(:anon_1, 28628) {
        number 32, true
    }
    field(:anon_2, 28632) {
        number 32, true
    }
    field(:anon_3, 28636) {
        number 32, true
    }
end

class WorldRegion < MemHack::Compound
    sizeof 536

    field(:name, 0) {
        global :LanguageName
    }
    field(:index, 108) {
        number 32, true
    }
    field(:type, 112) {
        number 16, true, nil, WorldRegionType
    }
    field(:region_coords, 116) {
        global :Coord2dPath
    }
    field(:unk_94, 148) {
        number 32, true
    }
    field(:unk_98, 152) {
        number 32, true
    }
    field(:unk_9c, 156) {
        number 32, true
    }
    field(:unk_a0, 160) {
        number 32, true
    }
    field(:unk_a4, 164) {
        number 32, true
    }
    field(:population, 168) {
        stl_vector(4) {
            pointer {
                global :WorldPopulation
            }
        }
    }
    field(:unk_118, 184) {
        static_array(51, 4) {
            number 32, true
        }
    }
    field(:unk_184, 388) {
        stl_vector(2) {
            number 16, true, -1
        }
    }
    field(:unk_194, 404) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:unk_1a4, 420) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:unk_1b4, 436) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:unk_1c4, 452) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:unk_1d4, 468) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:unk_1e4, 484) {
        number 16, true
    }
    field(:unk_1e6, 486) {
        number 16, true
    }
    field(:unk_1e8, 488) {
        number 16, true
    }
    field(:lake_surface, 490) {
        number 16, true
    }
    field(:unk_1f0, 492) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_200, 508) {
    }
    field(:mid_x, 512) {
        number 32, true
    }
    field(:mid_y, 516) {
        number 32, true
    }
    field(:min_x, 520) {
        number 32, true
    }
    field(:max_x, 524) {
        number 32, true
    }
    field(:min_y, 528) {
        number 32, true
    }
    field(:max_y, 532) {
        number 32, true
    }
end

class WorldRegionDetails < MemHack::Compound
    sizeof 16856

    field(:biome, 0) {
        static_array(17, 17) {
            static_array(17, 1) {
                number 8, true
            }
        }
    }
    field(:elevation, 290) {
        static_array(17, 34) {
            static_array(17, 2) {
                number 16, true
            }
        }
    }
    field(:seed, 868) {
        static_array(16, 64) {
            static_array(16, 4) {
                number 32, false
            }
        }
    }
    field(:edges, 1892) {
        compound(:WorldRegionDetails_TEdges) {
            field(:split_x, 0) {
                static_array(16, 68) {
                    static_array(17, 4) {
                        global :Coord2d
                    }
                }
            }
            field(:split_y, 1088) {
                static_array(17, 64) {
                    static_array(16, 4) {
                        global :Coord2d
                    }
                }
            }
            field(:biome_corner, 2176) {
                static_array(16, 16) {
                    static_array(16, 1) {
                        number 8, true
                    }
                }
            }
            field(:biome_x, 2432) {
                static_array(16, 16) {
                    static_array(16, 1) {
                        number 8, true
                    }
                }
            }
            field(:biome_y, 2688) {
                static_array(16, 16) {
                    static_array(16, 1) {
                        number 8, true
                    }
                }
            }
        }
    }
    field(:pos, 4836) {
        global :Coord2d
    }
    field(:unk12e8, 4840) {
        number 16, true
    }
    field(:anon_1, 4842) {
        number 16, true
    }
    field(:anon_2, 4844) {
        number 16, true
    }
    field(:anon_3, 4846) {
        number 16, true
    }
    field(:anon_4, 4848) {
        number 16, true
    }
    field(:rivers_vertical, 4850) {
        compound(:WorldRegionDetails_TRiversVertical) {
            field(:x_min, 0) {
                static_array(16, 34) {
                    static_array(17, 2) {
                        number 16, true
                    }
                }
            }
            field(:x_max, 544) {
                static_array(16, 34) {
                    static_array(17, 2) {
                        number 16, true
                    }
                }
            }
            field(:active, 1088) {
                static_array(16, 17) {
                    static_array(17, 1) {
                        number 8, true
                    }
                }
            }
            field(:elevation, 1360) {
                static_array(16, 34) {
                    static_array(17, 2) {
                        number 16, true
                    }
                }
            }
        }
    }
    field(:rivers_horizontal, 6754) {
        compound(:WorldRegionDetails_TRiversHorizontal) {
            field(:y_min, 0) {
                static_array(17, 32) {
                    static_array(16, 2) {
                        number 16, true
                    }
                }
            }
            field(:y_max, 544) {
                static_array(17, 32) {
                    static_array(16, 2) {
                        number 16, true
                    }
                }
            }
            field(:active, 1088) {
                static_array(17, 16) {
                    static_array(16, 1) {
                        number 8, true
                    }
                }
            }
            field(:elevation, 1360) {
                static_array(17, 32) {
                    static_array(16, 2) {
                        number 16, true
                    }
                }
            }
        }
    }
    field(:unk11, 8658) {
        static_array(16, 16) {
            static_array(16, 1) {
                number 8, true
            }
        }
    }
    field(:features, 8916) {
        static_array(16, 256) {
            static_array(16, 16) {
                stl_vector(4) {
                    pointer {
                        global :WorldRegionFeature
                    }
                }
            }
        }
    }
    field(:lava_stone, 13012) {
        number 16, true, -1
    }
    def lava_stone_tg ; df.world.raws.inorganics[lava_stone] ; end
    field(:unk_12, 13014) {
        static_array(1152, 2) {
            number 16, true
        }
    }
    field(:elevation2, 15318) {
        static_array(16, 32) {
            static_array(16, 2) {
                number 16, true
            }
        }
    }
    field(:undef13, 15832) {
        static_array(256, 4) {
            number 32, true
        }
    }
end

class WorldRegionFeature < MemHack::Compound
    sizeof 88

    field(:feature_idx, 0) {
        number 16, true
    }
    field(:layer, 4) {
        number 32, true, -1
    }
    def layer_tg ; df.world.world_data.underground_regions[layer] ; end
    field(:region_tile_idx, 8) {
        number 32, true
    }
    field(:min_z, 12) {
        number 16, true
    }
    field(:max_z, 14) {
        number 16, true
    }
    field(:unk_c, 16) {
        static_array(6, 4) {
            global :Coord2d
        }
    }
    field(:unk_28, 40) {
        number 32, true
    }
    field(:seed, 44) {
        number 32, false
    }
    field(:unk_30, 48) {
        df_flagarray
    }
    field(:unk_38, 56) {
        static_array(15, 2) {
            number 16, true
        }
    }
    field(:top_layer_idx, 86) {
        number 16, true
    }
end

class WorldRiver < MemHack::Compound
    sizeof 200

    field(:name, 0) {
        global :LanguageName
    }
    field(:path, 108) {
        global :Coord2dPath
    }
    field(:unk_8c, 140) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_9c, 156) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:elevation, 172) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:end_pos, 188) {
        global :Coord2d
    }
    field(:flags, 192) {
        df_flagarray
    }
end

class WorldSite < MemHack::Compound
    sizeof 716

    field(:name, 0) {
        global :LanguageName
    }
    field(:civ_id, 108) {
        number 32, true, -1
    }
    def civ_tg ; df.world.entities.all.binsearch(civ_id) ; end
    field(:cur_owner_id, 112) {
        number 32, true, -1
    }
    def cur_owner_tg ; df.world.entities.all.binsearch(cur_owner_id) ; end
    field(:type, 116) {
        number 16, true, nil, WorldSiteType
    }
    field(:pos, 118) {
        global :Coord2d
    }
    field(:id, 124) {
        number 32, true
    }
    field(:nemesis, 128) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def nemesis_tg ; nemesis.map { |i| df.world.nemesis.all.binsearch(i) } ; end
    field(:artifacts, 144) {
        stl_vector(4) {
            pointer {
                global :ArtifactRecord
            }
        }
    }
    field(:animals, 160) {
        stl_vector(4) {
            pointer {
                global :WorldPopulation
            }
        }
    }
    field(:inhabitants, 176) {
        stl_vector(4) {
            pointer {
                global :WorldSiteInhabitant
            }
        }
    }
    field(:units, 192) {
        stl_vector(4) {
            pointer {
                compound(:WorldSite_TUnits) {
                    sizeof 20

                    field(:unit_id, 0) {
                        number 32, true, -1
                    }
                    def unit_tg ; df.world.units.all.binsearch(unit_id) ; end
                    field(:pos_x, 4) {
                        number 32, true
                    }
                    field(:pos_y, 8) {
                        number 32, true
                    }
                    field(:pos_z, 12) {
                        number 32, true
                    }
                    field(:unk_10, 16) {
                        number 32, true, -1
                    }
                }
            }
        }
    }
    field(:unk_d4, 208) {
        stl_vector
    }
    field(:unk_v40_1a, 224) {
        stl_vector
    }
    field(:anon_1, 240) {
    }
    field(:unk_v40_1b, 244) {
        stl_vector
    }
    field(:unk_v40_1c, 260) {
        stl_vector
    }
    field(:unk_v40_1d, 276) {
        stl_vector
    }
    field(:unk_v40_1e, 292) {
        stl_vector
    }
    field(:unk_v40_1f, 308) {
        stl_vector
    }
    field(:unk_v40_1g, 324) {
        stl_vector
    }
    field(:unk_v40_1h, 340) {
        stl_vector
    }
    field(:index, 356) {
        number 32, true
    }
    field(:rgn_min_x, 360) {
        number 16, true
    }
    field(:rgn_max_x, 362) {
        number 16, true
    }
    field(:rgn_min_y, 364) {
        number 16, true
    }
    field(:rgn_max_y, 366) {
        number 16, true
    }
    field(:rgn_min_z, 368) {
        number 16, true
    }
    field(:rgn_max_z, 370) {
        number 16, true
    }
    field(:global_min_x, 372) {
        number 32, true
    }
    field(:global_min_y, 376) {
        number 32, true
    }
    field(:global_max_x, 380) {
        number 32, true
    }
    field(:global_max_y, 384) {
        number 32, true
    }
    field(:seed1, 388) {
        number 32, false
    }
    field(:seed2, 392) {
        number 32, false
    }
    field(:resident_count, 396) {
        number 32, true
    }
    field(:unk_110, 400) {
        number 32, true
    }
    field(:unk_114, 404) {
        number 32, true
    }
    field(:unk_118, 408) {
        number 32, true
    }
    field(:unk_11c, 412) {
        number 32, true
    }
    field(:unk_120, 416) {
        number 32, true
    }
    field(:unk_124, 420) {
        number 32, true
    }
    field(:unk_128, 424) {
        number 32, true
    }
    field(:unk_12c, 428) {
        number 32, true
    }
    field(:unk_130, 432) {
        number 32, true
    }
    field(:unk_134, 436) {
        number 32, true
    }
    field(:unk_138, 440) {
        number 32, true
    }
    field(:site_level, 444) {
        number 32, true
    }
    field(:unk_13c, 448) {
        stl_vector(4) {
            pointer {
                compound(:WorldSite_TUnk13c) {
                    sizeof 52

                    field(:unk_0, 0) {
                        number 32, true
                    }
                    field(:unk_4, 4) {
                        number 32, true
                    }
                    field(:unk_8, 8) {
                        number 32, true
                    }
                    field(:unk_c, 12) {
                        number 32, true
                    }
                    field(:unk_10, 16) {
                        stl_vector
                    }
                    field(:unk_20, 32) {
                        stl_vector
                    }
                    field(:unk_30, 48) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:unk_v40_2, 464) {
        stl_vector(4) {
            pointer {
                compound(:WorldSite_TUnkV402) {
                    sizeof 52

                    field(:unk_0, 0) {
                        number 32, true
                    }
                    field(:unk_4, 4) {
                        number 32, true
                    }
                    field(:unk_8, 8) {
                        number 32, true
                    }
                    field(:unk_c, 12) {
                        number 32, true
                    }
                    field(:unk_10, 16) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:unk_20, 32) {
                        stl_vector(4) {
                            number 32, true
                        }
                    }
                    field(:unk_30, 48) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:flags, 480) {
        df_flagarray(WorldSiteFlags)
    }
    field(:buildings, 488) {
        stl_vector(4) {
            pointer {
                global :AbstractBuilding
            }
        }
    }
    field(:next_building_id, 504) {
        number 32, true
    }
    field(:created_tick, 508) {
        number 32, true
    }
    field(:created_year, 512) {
        number 32, true
    }
    field(:unk_170, 516) {
        number 32, true
    }
    field(:unk_174, 520) {
        number 32, true
    }
    field(:unk_178, 524) {
        global :Coord
    }
    field(:realization, 532) {
        pointer {
            global :WorldSiteRealization
        }
    }
    field(:subtype_info, 536) {
        pointer {
            compound(:WorldSite_TSubtypeInfo) {
                sizeof 44

                field(:is_tower, 0) {
                    number 16, true, -1
                }
                field(:is_monument, 2) {
                    number 16, true, -1
                }
                field(:lair_type, 4) {
                    number 16, true
                }
                field(:unk_8, 8) {
                    stl_vector(2) {
                        number 16, true
                    }
                }
                field(:unk_14, 24) {
                    number 32, true, -1000000
                }
                field(:unk_18, 28) {
                    number 32, true, -1000000
                }
                field(:unk_1c, 32) {
                    number 32, true, -1000000
                }
                field(:creator, 36) {
                    number 32, true, -1
                }
                def creator_tg ; df.world.history.figures.binsearch(creator) ; end
                field(:unk_28, 40) {
                    number 32, true
                }
            }
        }
    }
    field(:unk_21c, 540) {
        stl_vector(4) {
            pointer {
                compound(:WorldSite_TUnk21c) {
                    sizeof 32

                    field(:unk_0, 0) {
                        number 32, true
                    }
                    field(:unk_4, 4) {
                        number 32, true
                    }
                    field(:unk_8, 8) {
                        number 32, true
                    }
                    field(:unk_c, 12) {
                        number 32, true
                    }
                    field(:unk_10, 16) {
                        number 32, true
                    }
                    field(:unk_14, 20) {
                        number 32, true
                    }
                    field(:unk_18, 24) {
                        number 32, true
                    }
                    field(:unk_1c, 28) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:unk_22c, 556) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:unk_v40_3a, 572) {
        number 32, true
    }
    field(:unk_v40_3b, 576) {
        number 32, true
    }
    field(:unk_v40_4a, 580) {
        stl_vector(4) {
            pointer {
                compound(:WorldSite_TUnkV404a) {
                    sizeof 20

                    field(:unk_0, 0) {
                        number 32, true
                    }
                    field(:entity_id, 4) {
                        number 32, true, -1
                    }
                    def entity_tg ; df.world.entities.all.binsearch(entity_id) ; end
                    field(:year, 8) {
                        number 32, true
                    }
                    field(:year_tick, 12) {
                        number 32, true
                    }
                    field(:unk_10, 16) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:unk_v40_4b, 596) {
        stl_vector
    }
    field(:unk_v40_4c, 612) {
        stl_vector
    }
    field(:unk_v40_4d, 628) {
        stl_vector
    }
    field(:unk_v40_5, 644) {
        number 32, true
    }
    field(:unk_188, 648) {
        pointer {
            global :WorldSiteUnk130
        }
    }
    field(:unk_18c, 652) {
        stl_vector
    }
    field(:unk_19c, 668) {
        stl_vector
    }
    field(:entity_links, 684) {
        stl_vector(4) {
            pointer {
                global :EntitySiteLink
            }
        }
    }
    field(:cultural_identities, 700) {
        stl_vector(4) {
            pointer {
                global :CulturalIdentity
            }
        }
    }
end

class WorldSiteInhabitant < MemHack::Compound
    sizeof 44

    field(:count, 0) {
        number 32, true
    }
    field(:race, 4) {
        number 32, true, -1
    }
    def race_tg ; df.world.raws.creatures.all[race] ; end
    field(:unk_8, 8) {
        number 32, true
    }
    field(:outcast_id, 12) {
        number 32, true, -1
    }
    def outcast_tg ; df.world.entities.all.binsearch(outcast_id) ; end
    field(:unk_10, 16) {
        number 32, true, -1
    }
    field(:unk_14, 20) {
        number 32, true, -1
    }
    field(:unk_18, 24) {
        number 32, true, -1
    }
    field(:unk_1c, 28) {
        number 32, true, -1
    }
    field(:unk_20, 32) {
        number 32, true, -1
    }
    def unk_20_tg ; df.world.entities.all.binsearch(unk_20) ; end
    field(:unk_24, 36) {
        number 32, true, -1
    }
    field(:unk_28, 40) {
        number 32, true, -1
    }
end

class WorldSiteRealization < MemHack::Compound
    sizeof 225636

    field(:buildings, 0) {
        stl_vector(4) {
            pointer {
                global :SiteRealizationBuilding
            }
        }
    }
    field(:num_buildings, 16) {
        number 32, true
    }
    field(:unk_14, 20) {
        number 32, true
    }
    field(:num_areas, 24) {
        number 32, true
    }
    field(:mini_rivers, 28) {
        static_array(17, 17) {
            static_array(17, 1) {
                number 8, true
            }
        }
    }
    field(:mini_tiles, 317) {
        static_array(17, 17) {
            static_array(17, 1) {
                number 8, false
            }
        }
    }
    field(:mini_colors, 606) {
        static_array(17, 34) {
            static_array(17, 2) {
                number 16, true
            }
        }
    }
    field(:road_map, 1184) {
        static_array(51, 204) {
            static_array(51, 4) {
                pointer {
                    global :SiteRealizationCrossroads
                }
            }
        }
    }
    field(:unk_2d44, 11588) {
        static_array(51, 204) {
            static_array(51, 4) {
                pointer {
                }
            }
        }
    }
    field(:unk_55e8, 21992) {
        static_array(17, 2176) {
            static_array(17, 128) {
                compound(:WorldSiteRealization_TUnk55e8) {
                    field(:unk_55e8, 0) {
                        number 32, true
                    }
                    field(:unk_55ec, 4) {
                        number 32, true
                    }
                    field(:unk_v40_1a, 8) {
                        number 32, true, -30000
                    }
                    field(:unk_v40_1b, 12) {
                        number 32, true, -30000
                    }
                    field(:unk_v40_1c, 16) {
                        number 32, true, -30000
                    }
                    field(:unk_v40_1d, 20) {
                        number 32, true, -30000
                    }
                    field(:unk_v40_2, 24) {
                        stl_vector(4) {
                            pointer {
                                compound(:WorldSiteRealization_TUnk55e8_TUnkV402) {
                                    sizeof 32

                                    field(:unk_0, 0) {
                                        number 32, true
                                    }
                                    field(:unk_4, 4) {
                                        number 32, true
                                    }
                                    field(:unk_8, 8) {
                                        number 16, true
                                    }
                                    field(:unk_a, 10) {
                                        number 16, true
                                    }
                                    field(:unk_c, 12) {
                                        number 32, true
                                    }
                                    field(:unk_10, 16) {
                                        number 32, true
                                    }
                                    field(:unk_14, 20) {
                                        number 16, true
                                    }
                                    field(:unk_16, 22) {
                                        number 16, true
                                    }
                                    field(:unk_18, 24) {
                                        number 32, true
                                    }
                                    field(:unk_1c, 28) {
                                        number 32, true
                                    }
                                }
                            }
                        }
                    }
                    field(:unk_55f0, 40) {
                        number 32, true
                    }
                    field(:unk_55f4, 44) {
                        number 32, true
                    }
                    field(:unk_55f8, 48) {
                        number 16, true
                    }
                    field(:unk_55fa, 50) {
                        number 16, true
                    }
                    field(:unk_55fc, 52) {
                        number 32, true
                    }
                    field(:unk_5600, 56) {
                        number 32, true
                    }
                    field(:unk_5604, 60) {
                        number 32, true
                    }
                    field(:unk_5608, 64) {
                        number 32, true
                    }
                    field(:unk_560c, 68) {
                        number 32, true
                    }
                    field(:unk_5610, 72) {
                        number 32, true
                    }
                    field(:unk_5614, 76) {
                        number 32, true
                    }
                    field(:unk_5618, 80) {
                        stl_vector
                    }
                    field(:unk_5628, 96) {
                        number 32, true
                    }
                    field(:unk_562c, 100) {
                        number 32, true
                    }
                    field(:unk_5630, 104) {
                        number 32, true
                    }
                    field(:unk_5634, 108) {
                        number 32, true
                    }
                    field(:unk_v40_3a, 112) {
                        number 32, true, -1
                    }
                    field(:unk_v40_3b, 116) {
                        number 32, true, -1
                    }
                    field(:unk_v40_3c, 120) {
                        number 32, true, -1
                    }
                    field(:unk_v40_3d, 124) {
                        number 32, true, -1
                    }
                }
            }
        }
    }
    field(:building_map, 58984) {
        static_array(17, 748) {
            static_array(17, 44) {
                compound(:WorldSiteRealization_TBuildingMap) {
                    field(:anon_1, 0) {
                    }
                    field(:buildings, 4) {
                        stl_vector(4) {
                            pointer {
                                global :SiteRealizationBuilding
                            }
                        }
                    }
                    field(:unk4, 20) {
                        number 32, true
                    }
                    field(:unk5, 24) {
                        number 32, false
                    }
                    field(:unk6, 28) {
                        stl_vector
                    }
                }
            }
        }
    }
    field(:unk_v40_1, 71700) {
        static_array(51, 204) {
            static_array(51, 4) {
                number 32, false
            }
        }
    }
    field(:zoom_tiles, 82104) {
        static_array(51, 51) {
            static_array(51, 1) {
                number 8, false
            }
        }
    }
    field(:zoom_colors, 84706) {
        static_array(51, 102) {
            static_array(51, 2) {
                number 16, true
            }
        }
    }
    field(:zoom_movemask, 89908) {
        static_array(51, 51) {
            static_array(51, 1) {
                number 8, true
            }
        }
    }
    field(:area_map, 92512) {
        static_array(52, 208) {
            static_array(52, 4) {
                number 32, true, -1
            }
        }
    }
    field(:areas, 103328) {
        stl_vector(4) {
            pointer {
                compound(:WorldSiteRealization_TAreas) {
                    sizeof 36

                    field(:unk_0, 0) {
                        number 32, true
                    }
                    field(:index, 4) {
                        number 32, true
                    }
                    field(:unk_8, 8) {
                        number 32, true
                    }
                    field(:min_x, 12) {
                        number 32, true
                    }
                    field(:max_x, 16) {
                        number 32, true
                    }
                    field(:min_y, 20) {
                        number 32, true
                    }
                    field(:max_y, 24) {
                        number 32, true
                    }
                    field(:unk_1c, 28) {
                        number 32, true, -1
                    }
                    field(:unk_20, 32) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:anon_1, 103344) {
        number 32, true
    }
    field(:anon_2, 103348) {
        number 32, true
    }
    field(:anon_3, 103352) {
        number 32, true
    }
    field(:unk_193bc, 103356) {
        static_array(500, 244) {
            compound(:WorldSiteRealization_TUnk193bc) {
                field(:anon_1, 0) {
                    number 32, true
                }
                field(:anon_2, 4) {
                    number 32, true
                }
                field(:unk_8, 8) {
                    compound(:WorldSiteRealization_TUnk193bc_TUnk8) {
                        field(:anon_1, 0) {
                            number 32, true
                        }
                        field(:anon_2, 4) {
                            number 32, true
                        }
                        field(:anon_3, 8) {
                            number 32, true
                        }
                        field(:anon_4, 12) {
                            number 32, true
                        }
                        field(:anon_5, 16) {
                            number 32, true
                        }
                        field(:anon_6, 20) {
                            number 32, true
                        }
                        field(:anon_7, 24) {
                            number 32, true
                        }
                        field(:anon_8, 28) {
                            number 32, true
                        }
                        field(:anon_9, 32) {
                            number 32, true
                        }
                    }
                }
                field(:anon_3, 44) {
                    number 32, true
                }
                field(:anon_4, 48) {
                    number 16, true
                }
                field(:anon_5, 50) {
                    number 16, true
                }
                field(:anon_6, 52) {
                    number 16, true
                }
                field(:anon_7, 54) {
                    number 16, true
                }
                field(:anon_8, 56) {
                    number 16, true
                }
                field(:anon_9, 58) {
                    number 16, true
                }
                field(:anon_10, 60) {
                    number 32, true
                }
                field(:anon_11, 64) {
                    number 32, true
                }
                field(:anon_12, 68) {
                    number 32, true
                }
                field(:anon_13, 72) {
                    static_array(20, 4) {
                        number 32, true
                    }
                }
                field(:anon_14, 152) {
                    static_array(20, 4) {
                        number 32, true
                    }
                }
                field(:anon_15, 232) {
                    number 16, true
                }
                field(:anon_16, 234) {
                    number 16, true
                }
                field(:anon_17, 236) {
                    number 32, true
                }
                field(:anon_18, 240) {
                    number 32, true
                }
            }
        }
    }
    field(:num_unk_193bc, 225356) {
        number 32, true
    }
    field(:anon_4, 225360) {
        number 32, true
    }
    field(:anon_5, 225364) {
        number 32, true
    }
    field(:building_type13, 225368) {
        static_array(20, 4) {
            pointer {
                global :SiteRealizationBuilding
            }
        }
    }
    field(:num_building_type13, 225448) {
        number 32, true
    }
    field(:building_type5, 225452) {
        static_array(20, 4) {
            pointer {
                global :SiteRealizationBuilding
            }
        }
    }
    field(:num_building_type5, 225532) {
        number 32, true
    }
    field(:building_shop_house, 225536) {
        static_array(20, 4) {
            pointer {
                global :SiteRealizationBuilding
            }
        }
    }
    field(:num_building_shop_house, 225616) {
        number 32, true
    }
    field(:anon_6, 225620) {
        number 32, true
    }
    field(:anon_7, 225624) {
        number 32, true
    }
    field(:anon_8, 225628) {
        number 32, true
    }
    field(:anon_9, 225632) {
        number 32, true
    }
end

class WorldSiteUnk130 < MemHack::Compound
    sizeof 68

    field(:index, 0) {
        number 32, true
    }
    field(:unk_4, 4) {
        static_array(4, 16) {
            stl_vector(4) {
                pointer {
                    compound(:WorldSiteUnk130_TUnk4) {
                        sizeof 28

                        field(:unk_0, 0) {
                            number 32, true
                        }
                        field(:index, 4) {
                            number 32, true
                        }
                        field(:unk_8, 8) {
                            number 32, true
                        }
                        field(:unk_c, 12) {
                            stl_vector(4) {
                                number 32, true
                            }
                        }
                    }
                }
            }
        }
    }
end

class WorldUndergroundRegion < MemHack::Compound
    sizeof 220

    field(:type, 0) {
        class ::DFHack::WorldUndergroundRegion_TType < MemHack::Enum
            ENUM = Hash.new
            NUME = Hash.new
            ENUM[0] = :Cavern ; NUME[:Cavern] = 0
            ENUM[1] = :MagmaSea ; NUME[:MagmaSea] = 1
            ENUM[2] = :Underworld ; NUME[:Underworld] = 2
        end

        number 16, true, nil, WorldUndergroundRegion_TType
    }
    field(:name, 4) {
        global :LanguageName
    }
    field(:index, 112) {
        number 32, true
    }
    field(:layer_depth, 116) {
        number 16, true
    }
    field(:layer_depth_p1a, 118) {
        number 16, true
    }
    field(:layer_depth_p1b, 120) {
        number 16, true
    }
    field(:unk_7a, 122) {
        number 16, true
    }
    field(:unk_7c, 124) {
        number 16, true
    }
    field(:unk_7e, 126) {
        number 16, true
    }
    field(:unk_80, 128) {
        number 16, true
    }
    field(:unk_82, 130) {
        number 16, true
    }
    field(:passage_density, 132) {
        number 16, true
    }
    field(:region_coords, 136) {
        global :Coord2dPath
    }
    field(:region_min_z, 168) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:region_max_z, 184) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:unk_c8, 200) {
        stl_vector
    }
    field(:feature_init, 216) {
        pointer {
            global :FeatureInit
        }
    }
end

class WorldUnk20 < MemHack::Compound
    sizeof 72

    field(:anon_1, 0) {
        number 8, true
    }
    field(:anon_2, 4) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_3, 20) {
        number 32, true
    }
    field(:anon_4, 24) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_5, 40) {
        number 32, true
    }
    field(:anon_6, 44) {
        number 32, true
    }
    field(:anon_7, 48) {
        stl_vector(4) {
            pointer {
                compound(:WorldUnk20_TAnon7) {
                    sizeof 24

                    field(:anon_1, 0) {
                        number 32, true
                    }
                    field(:anon_2, 4) {
                        number 32, true
                    }
                    field(:anon_3, 8) {
                        number 32, true
                    }
                    field(:anon_4, 12) {
                        number 32, true
                    }
                    field(:anon_5, 16) {
                        number 32, true
                    }
                    field(:anon_6, 20) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:anon_8, 64) {
        number 16, true
    }
    field(:anon_9, 66) {
        number 16, true
    }
    field(:anon_10, 68) {
        number 16, true
    }
end

class WorldUnk6c < MemHack::Compound
    sizeof 72

    field(:anon_1, 0) {
        global :Coord
    }
    field(:anon_2, 6) {
        number 8, true
    }
    field(:anon_3, 8) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_4, 24) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_5, 40) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_6, 56) {
        stl_vector(2) {
            number 16, true
        }
    }
end

class WorldUnk90 < MemHack::Compound
    sizeof 10

    field(:x1, 0) {
        number 16, true
    }
    field(:y1, 2) {
        number 16, true
    }
    field(:x2, 4) {
        number 16, true
    }
    field(:y2, 6) {
        number 16, true
    }
    field(:z, 8) {
        number 16, true
    }
end

class WorldUnk9c < MemHack::Compound
    sizeof 32

    field(:region, 0) {
        global :Coord2d
    }
    field(:embark, 4) {
        global :Coord2d
    }
    field(:local_feature_idx, 8) {
        number 16, true
    }
    field(:global_feature_idx, 12) {
        number 32, true, -1
    }
    def global_feature_tgx ; df.world.world_data.underground_regions[global_feature_idx] ; end
    field(:unk10, 16) {
        number 32, true
    }
    field(:unk14, 20) {
        number 16, true
    }
    field(:local, 22) {
        global :Coord2d
    }
    field(:z_min, 26) {
        number 16, true
    }
    field(:z_max, 28) {
        number 16, true
    }
end

class WorldUnkA8 < MemHack::Compound
    sizeof 32

    field(:anon_1, 0) {
        number 8, true
    }
    field(:anon_2, 4) {
        number 32, true
    }
    field(:anon_3, 8) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_4, 24) {
        number 16, true
    }
    field(:anon_5, 26) {
        number 16, true
    }
    field(:anon_6, 28) {
        number 16, true
    }
end

class WorldUnkB4 < MemHack::Compound
    sizeof 64

    field(:anon_1, 0) {
        number 8, true
    }
    field(:anon_2, 4) {
        number 32, true
    }
    field(:anon_3, 8) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_4, 24) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_5, 40) {
        stl_vector(2) {
            number 16, true
        }
    }
    field(:anon_6, 56) {
        number 16, true
    }
    field(:anon_7, 58) {
        number 16, true
    }
    field(:anon_8, 60) {
        number 16, true
    }
end

class WorldUnkC0 < MemHack::Compound
    sizeof 72

    field(:anon_1, 0) {
        number 8, true
    }
    field(:anon_2, 4) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_3, 20) {
        number 32, true
    }
    field(:anon_4, 24) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_5, 40) {
        number 32, true
    }
    field(:anon_6, 44) {
        number 32, true
    }
    field(:anon_7, 48) {
        stl_vector(4) {
            pointer {
                compound(:WorldUnkC0_TAnon7) {
                    sizeof 24

                    field(:anon_1, 0) {
                        number 32, true
                    }
                    field(:anon_2, 4) {
                        number 32, true
                    }
                    field(:anon_3, 8) {
                        number 32, true
                    }
                    field(:anon_4, 12) {
                        number 32, true
                    }
                    field(:anon_5, 16) {
                        number 32, true
                    }
                    field(:anon_6, 20) {
                        number 32, true
                    }
                }
            }
        }
    }
    field(:anon_8, 64) {
        number 16, true
    }
    field(:anon_9, 66) {
        number 16, true
    }
    field(:anon_10, 68) {
        number 16, true
    }
end

class WoundCurseInfo < MemHack::Compound
    sizeof 216

    field(:unk_v40_1, 0) {
        number 32, true
    }
    field(:add_tags1, 4) {
        global :CieAddTagMask1
    }
    field(:rem_tags1, 8) {
        global :CieAddTagMask1
    }
    field(:add_tags2, 12) {
        global :CieAddTagMask2
    }
    field(:rem_tags2, 16) {
        global :CieAddTagMask2
    }
    field(:name_visible, 20) {
        number 8, true, nil, BooleanEnum
    }
    field(:name, 24) {
        stl_string
    }
    field(:name_plural, 52) {
        stl_string
    }
    field(:name_adjective, 80) {
        stl_string
    }
    field(:sym_and_color1, 108) {
        number 32, false, 0x400
    }
    field(:sym_and_color2, 112) {
        number 32, false, 0x400
    }
    field(:flash_period, 116) {
        number 32, false
    }
    field(:flash_time2, 120) {
        number 32, false
    }
    field(:speed_add, 124) {
        number 32, false
    }
    field(:speed_mul_percent, 128) {
        number 32, false, 100
    }
    field(:attr_change, 132) {
        pointer {
            global :CurseAttrChange
        }
    }
    field(:luck_mul_percent, 136) {
        number 32, false, 100
    }
    field(:interaction_id, 140) {
        stl_vector(4) {
            number 32, true, -1
        }
    }
    def interaction_tg ; interaction_id.map { |i| df.world.raws.effects.all[i] } ; end
    field(:interaction_time, 156) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:time_counter, 172) {
        number 32, true
    }
    field(:were_race, 176) {
        number 32, true, -1
    }
    def were_race_tg ; df.world.raws.creatures.all[were_race] ; end
    field(:were_caste, 180) {
        number 32, true, -1
    }
    def were_caste_tg ; df.world.raws.creatures.all[were_race].caste[were_caste] ; end
    field(:body_appearance, 184) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:bp_appearance, 200) {
        stl_vector(4) {
            number 32, true
        }
    }
end

class WoundDamageFlags1 < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:cut, 0) { bit 0 }
    field(:smashed, 0) { bit 1 }
    field(:scar_cut, 0) { bit 2 }
    field(:scar_smashed, 0) { bit 3 }
    field(:tendon_bruised, 0) { bit 4 }
    field(:tendon_strained, 0) { bit 5 }
    field(:tendon_torn, 0) { bit 6 }
    field(:ligament_bruised, 0) { bit 7 }
    field(:ligament_sprained, 0) { bit 8 }
    field(:ligament_torn, 0) { bit 9 }
    field(:motor_nerve_severed, 0) { bit 10 }
    field(:sensory_nerve_severed, 0) { bit 11 }
    field(:edged_damage, 0) { bit 12 }
    field(:smashed_apart, 0) { bit 13 }
    field(:major_artery, 0) { bit 14 }
    field(:guts_spilled, 0) { bit 15 }
    field(:edged_shake1, 0) { bit 16 }
    field(:scar_edged_shake1, 0) { bit 17 }
    field(:edged_shake2, 0) { bit 18 }
    field(:broken, 0) { bit 19 }
    field(:scar_broken, 0) { bit 20 }
    field(:gouged, 0) { bit 21 }
    field(:blunt_shake1, 0) { bit 22 }
    field(:scar_blunt_shake1, 0) { bit 23 }
    field(:blunt_shake2, 0) { bit 24 }
    field(:joint_bend1, 0) { bit 25 }
    field(:scar_joint_bend1, 0) { bit 26 }
    field(:joint_bend2, 0) { bit 27 }
    field(:compound_fracture, 0) { bit 28 }
    field(:diagnosed, 0) { bit 29 }
    field(:artery, 0) { bit 30 }
    field(:overlapping_fracture, 0) { bit 31 }
end

class WoundDamageFlags2 < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:needs_setting, 0) { bit 0 }
    field(:entire_surface, 0) { bit 1 }
    field(:gelded, 0) { bit 2 }
end

class WrittenContent < MemHack::Compound
    sizeof 96

    field(:id, 0) {
        number 32, true
    }
    field(:page_start, 4) {
        number 32, true
    }
    field(:page_end, 8) {
        number 32, true
    }
    field(:refs, 12) {
        stl_vector(4) {
            pointer {
                global :GeneralRef
            }
        }
    }
    field(:ref_aux, 28) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:anon_1, 44) {
        number 32, true, -1
    }
    field(:anon_2, 48) {
        number 32, true, -1
    }
    field(:type, 52) {
        number 32, true, nil, WrittenContentType
    }
    field(:styles, 56) {
        stl_vector(4) {
            global :WrittenContentStyle
        }
    }
    field(:style_strength, 72) {
        stl_vector(4) {
            number 32, true
        }
    }
    field(:author, 88) {
        number 32, true, -1
    }
    def author_tg ; df.world.history.figures.binsearch(author) ; end
    field(:anon_3, 92) {
        number 32, true, -1
    }
end

class ZLevelFlags < MemHack::Compound
    field(:_whole, 0) {
        number 32, true
    }
    field(:update, 0) { bit 0 }
    field(:can_stop, 0) { bit 1 }
    field(:update_twice, 0) { bit 2 }
end

class GlobalObjects < MemHack::Compound
    addr = DFHack.get_global_address('cursor')
    if addr != 0
        field(:cursor, addr) {
            compound(:Global_TCursor) {
                field(:x, 0) {
                    number 32, true
                }
                field(:y, 4) {
                    number 32, true
                }
                field(:z, 8) {
                    number 32, true
                }
            }
        }
    end
    addr = DFHack.get_global_address('selection_rect')
    if addr != 0
        field(:selection_rect, addr) {
            compound(:Global_TSelectionRect) {
                field(:start_x, 0) {
                    number 32, true
                }
                field(:start_y, 4) {
                    number 32, true
                }
                field(:start_z, 8) {
                    number 32, true
                }
                field(:end_x, 12) {
                    number 32, true
                }
                field(:end_y, 16) {
                    number 32, true
                }
                field(:end_z, 20) {
                    number 32, true
                }
            }
        }
    end
    addr = DFHack.get_global_address('gamemode')
    if addr != 0
        field(:gamemode, addr) {
            number 32, true, nil, GameMode
        }
    end
    addr = DFHack.get_global_address('gametype')
    if addr != 0
        field(:gametype, addr) {
            number 32, true, nil, GameType
        }
    end
    addr = DFHack.get_global_address('ui_area_map_width')
    if addr != 0
        field(:ui_area_map_width, addr) {
            number 8, true
        }
    end
    addr = DFHack.get_global_address('ui_menu_width')
    if addr != 0
        field(:ui_menu_width, addr) {
            number 8, true
        }
    end
    addr = DFHack.get_global_address('created_item_type')
    if addr != 0
        field(:created_item_type, addr) {
            stl_vector(2) {
                number 16, true, nil, ItemType
            }
        }
    end
    addr = DFHack.get_global_address('created_item_subtype')
    if addr != 0
        field(:created_item_subtype, addr) {
            stl_vector(2) {
                number 16, true, -1
            }
        }
    end
    addr = DFHack.get_global_address('created_item_mattype')
    if addr != 0
        field(:created_item_mattype, addr) {
            stl_vector(2) {
                number 16, true, -1
            }
        }
    end
    addr = DFHack.get_global_address('created_item_matindex')
    if addr != 0
        field(:created_item_matindex, addr) {
            stl_vector(2) {
                number 16, true
            }
        }
    end
    addr = DFHack.get_global_address('created_item_count')
    if addr != 0
        field(:created_item_count, addr) {
            stl_vector(4) {
                number 32, true
            }
        }
    end
    addr = DFHack.get_global_address('map_renderer')
    if addr != 0
        field(:map_renderer, addr) {
            global :MapRenderer
        }
    end
    addr = DFHack.get_global_address('d_init')
    if addr != 0
        field(:d_init, addr) {
            global :DInit
        }
    end
    addr = DFHack.get_global_address('flows')
    if addr != 0
        field(:flows, addr) {
            stl_vector(4) {
                pointer {
                    global :FlowInfo
                }
            }
        }
    end
    addr = DFHack.get_global_address('enabler')
    if addr != 0
        field(:enabler, addr) {
            global :Enabler
        }
    end
    addr = DFHack.get_global_address('gps')
    if addr != 0
        field(:gps, addr) {
            global :Graphic
        }
    end
    addr = DFHack.get_global_address('gview')
    if addr != 0
        field(:gview, addr) {
            global :Interfacest
        }
    end
    addr = DFHack.get_global_address('init')
    if addr != 0
        field(:init, addr) {
            global :Init
        }
    end
    addr = DFHack.get_global_address('texture')
    if addr != 0
        field(:texture, addr) {
            global :TextureHandler
        }
    end
    addr = DFHack.get_global_address('timed_events')
    if addr != 0
        field(:timed_events, addr) {
            stl_vector(4) {
                pointer {
                    global :TimedEvent
                }
            }
        }
    end
    addr = DFHack.get_global_address('ui')
    if addr != 0
        field(:ui, addr) {
            global :Ui
        }
    end
    addr = DFHack.get_global_address('ui_advmode')
    if addr != 0
        field(:ui_advmode, addr) {
            global :UiAdvmode
        }
    end
    addr = DFHack.get_global_address('ui_build_selector')
    if addr != 0
        field(:ui_build_selector, addr) {
            global :UiBuildSelector
        }
    end
    addr = DFHack.get_global_address('ui_building_assign_type')
    if addr != 0
        field(:ui_building_assign_type, addr) {
            stl_vector(1) {
                number 8, true
            }
        }
    end
    addr = DFHack.get_global_address('ui_building_assign_is_marked')
    if addr != 0
        field(:ui_building_assign_is_marked, addr) {
            stl_vector(1) {
                number 8, true, nil, BooleanEnum
            }
        }
    end
    addr = DFHack.get_global_address('ui_building_assign_units')
    if addr != 0
        field(:ui_building_assign_units, addr) {
            stl_vector(4) {
                pointer {
                    global :Unit
                }
            }
        }
    end
    addr = DFHack.get_global_address('ui_building_assign_items')
    if addr != 0
        field(:ui_building_assign_items, addr) {
            stl_vector(4) {
                pointer {
                    global :Item
                }
            }
        }
    end
    addr = DFHack.get_global_address('ui_look_list')
    if addr != 0
        field(:ui_look_list, addr) {
            global :UiLookList
        }
    end
    addr = DFHack.get_global_address('ui_sidebar_menus')
    if addr != 0
        field(:ui_sidebar_menus, addr) {
            global :UiSidebarMenus
        }
    end
    addr = DFHack.get_global_address('world')
    if addr != 0
        field(:world, addr) {
            global :World
        }
    end
    addr = DFHack.get_global_address('activity_next_id')
    if addr != 0
        field(:activity_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('art_image_chunk_next_id')
    if addr != 0
        field(:art_image_chunk_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('artifact_next_id')
    if addr != 0
        field(:artifact_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('building_next_id')
    if addr != 0
        field(:building_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('crime_next_id')
    if addr != 0
        field(:crime_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('entity_next_id')
    if addr != 0
        field(:entity_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('flow_guide_next_id')
    if addr != 0
        field(:flow_guide_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('formation_next_id')
    if addr != 0
        field(:formation_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('hist_event_collection_next_id')
    if addr != 0
        field(:hist_event_collection_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('hist_event_next_id')
    if addr != 0
        field(:hist_event_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('hist_figure_next_id')
    if addr != 0
        field(:hist_figure_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('identity_next_id')
    if addr != 0
        field(:identity_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('incident_next_id')
    if addr != 0
        field(:incident_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('interaction_instance_next_id')
    if addr != 0
        field(:interaction_instance_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('item_next_id')
    if addr != 0
        field(:item_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('job_next_id')
    if addr != 0
        field(:job_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('machine_next_id')
    if addr != 0
        field(:machine_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('nemesis_next_id')
    if addr != 0
        field(:nemesis_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('proj_next_id')
    if addr != 0
        field(:proj_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('schedule_next_id')
    if addr != 0
        field(:schedule_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('squad_next_id')
    if addr != 0
        field(:squad_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('task_next_id')
    if addr != 0
        field(:task_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('unit_chunk_next_id')
    if addr != 0
        field(:unit_chunk_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('unit_next_id')
    if addr != 0
        field(:unit_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('vehicle_next_id')
    if addr != 0
        field(:vehicle_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('written_content_next_id')
    if addr != 0
        field(:written_content_next_id, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('announcements')
    if addr != 0
        field(:announcements, addr) {
            global :Announcements
        }
    end
    addr = DFHack.get_global_address('cur_year')
    if addr != 0
        field(:cur_year, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('cur_year_tick')
    if addr != 0
        field(:cur_year_tick, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('cur_year_tick_advmode')
    if addr != 0
        field(:cur_year_tick_advmode, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('cur_season')
    if addr != 0
        field(:cur_season, addr) {
            number 8, true
        }
    end
    addr = DFHack.get_global_address('cur_season_tick')
    if addr != 0
        field(:cur_season_tick, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('current_weather')
    if addr != 0
        field(:current_weather, addr) {
            static_array(5, 5) {
                static_array(5, 1) {
                    number 8, true, nil, WeatherType
                }
            }
        }
    end
    addr = DFHack.get_global_address('pause_state')
    if addr != 0
        field(:pause_state, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('process_dig')
    if addr != 0
        field(:process_dig, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('process_jobs')
    if addr != 0
        field(:process_jobs, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('ui_building_in_assign')
    if addr != 0
        field(:ui_building_in_assign, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('ui_building_in_resize')
    if addr != 0
        field(:ui_building_in_resize, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('ui_building_item_cursor')
    if addr != 0
        field(:ui_building_item_cursor, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('ui_look_cursor')
    if addr != 0
        field(:ui_look_cursor, addr) {
            number 32, true, -1
        }
    end
    addr = DFHack.get_global_address('ui_selected_unit')
    if addr != 0
        field(:ui_selected_unit, addr) {
            number 32, true, -1
        }
    end
    addr = DFHack.get_global_address('ui_unit_view_mode')
    if addr != 0
        field(:ui_unit_view_mode, addr) {
            global :UiUnitViewMode
        }
    end
    addr = DFHack.get_global_address('ui_workshop_in_add')
    if addr != 0
        field(:ui_workshop_in_add, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('ui_workshop_job_cursor')
    if addr != 0
        field(:ui_workshop_job_cursor, addr) {
            number 32, true, -1
        }
    end
    addr = DFHack.get_global_address('window_x')
    if addr != 0
        field(:window_x, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('window_y')
    if addr != 0
        field(:window_y, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('window_z')
    if addr != 0
        field(:window_z, addr) {
            number 32, true
        }
    end
    addr = DFHack.get_global_address('debug_nopause')
    if addr != 0
        field(:debug_nopause, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('debug_nomoods')
    if addr != 0
        field(:debug_nomoods, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('debug_combat')
    if addr != 0
        field(:debug_combat, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('debug_wildlife')
    if addr != 0
        field(:debug_wildlife, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('debug_nodrink')
    if addr != 0
        field(:debug_nodrink, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('debug_noeat')
    if addr != 0
        field(:debug_noeat, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('debug_nosleep')
    if addr != 0
        field(:debug_nosleep, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('debug_showambush')
    if addr != 0
        field(:debug_showambush, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('debug_fastmining')
    if addr != 0
        field(:debug_fastmining, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('debug_noberserk')
    if addr != 0
        field(:debug_noberserk, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('debug_turbospeed')
    if addr != 0
        field(:debug_turbospeed, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('save_on_exit')
    if addr != 0
        field(:save_on_exit, addr) {
            number 8, true, nil, BooleanEnum
        }
    end
    addr = DFHack.get_global_address('standing_orders_gather_minerals')
    if addr != 0
        field(:standing_orders_gather_minerals, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_gather_wood')
    if addr != 0
        field(:standing_orders_gather_wood, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_gather_food')
    if addr != 0
        field(:standing_orders_gather_food, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_gather_bodies')
    if addr != 0
        field(:standing_orders_gather_bodies, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_gather_animals')
    if addr != 0
        field(:standing_orders_gather_animals, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_gather_furniture')
    if addr != 0
        field(:standing_orders_gather_furniture, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_farmer_harvest')
    if addr != 0
        field(:standing_orders_farmer_harvest, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_job_cancel_announce')
    if addr != 0
        field(:standing_orders_job_cancel_announce, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_mix_food')
    if addr != 0
        field(:standing_orders_mix_food, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_gather_refuse')
    if addr != 0
        field(:standing_orders_gather_refuse, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_gather_refuse_outside')
    if addr != 0
        field(:standing_orders_gather_refuse_outside, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_gather_vermin_remains')
    if addr != 0
        field(:standing_orders_gather_vermin_remains, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_dump_corpses')
    if addr != 0
        field(:standing_orders_dump_corpses, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_dump_skulls')
    if addr != 0
        field(:standing_orders_dump_skulls, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_dump_skins')
    if addr != 0
        field(:standing_orders_dump_skins, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_dump_bones')
    if addr != 0
        field(:standing_orders_dump_bones, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_dump_hair')
    if addr != 0
        field(:standing_orders_dump_hair, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_dump_shells')
    if addr != 0
        field(:standing_orders_dump_shells, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_dump_other')
    if addr != 0
        field(:standing_orders_dump_other, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_forbid_used_ammo')
    if addr != 0
        field(:standing_orders_forbid_used_ammo, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_forbid_other_dead_items')
    if addr != 0
        field(:standing_orders_forbid_other_dead_items, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_forbid_own_dead')
    if addr != 0
        field(:standing_orders_forbid_own_dead, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_forbid_other_nohunt')
    if addr != 0
        field(:standing_orders_forbid_other_nohunt, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_forbid_own_dead_items')
    if addr != 0
        field(:standing_orders_forbid_own_dead_items, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_auto_loom')
    if addr != 0
        field(:standing_orders_auto_loom, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_auto_collect_webs')
    if addr != 0
        field(:standing_orders_auto_collect_webs, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_auto_slaughter')
    if addr != 0
        field(:standing_orders_auto_slaughter, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_auto_butcher')
    if addr != 0
        field(:standing_orders_auto_butcher, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_auto_tan')
    if addr != 0
        field(:standing_orders_auto_tan, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_auto_fishery')
    if addr != 0
        field(:standing_orders_auto_fishery, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_auto_kitchen')
    if addr != 0
        field(:standing_orders_auto_kitchen, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_auto_kiln')
    if addr != 0
        field(:standing_orders_auto_kiln, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_auto_smelter')
    if addr != 0
        field(:standing_orders_auto_smelter, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_auto_other')
    if addr != 0
        field(:standing_orders_auto_other, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_use_dyed_cloth')
    if addr != 0
        field(:standing_orders_use_dyed_cloth, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_zoneonly_drink')
    if addr != 0
        field(:standing_orders_zoneonly_drink, addr) {
            number 8, false
        }
    end
    addr = DFHack.get_global_address('standing_orders_zoneonly_fish')
    if addr != 0
        field(:standing_orders_zoneonly_fish, addr) {
            number 8, false
        }
    end
end
    Global = GlobalObjects.new._at(0)
    def self.cursor ; Global.cursor ; end
    def self.cursor=(v) ; Global.cursor = v ; end
    def self.selection_rect ; Global.selection_rect ; end
    def self.selection_rect=(v) ; Global.selection_rect = v ; end
    def self.gamemode ; Global.gamemode ; end
    def self.gamemode=(v) ; Global.gamemode = v ; end
    def self.gametype ; Global.gametype ; end
    def self.gametype=(v) ; Global.gametype = v ; end
    def self.ui_area_map_width ; Global.ui_area_map_width ; end
    def self.ui_area_map_width=(v) ; Global.ui_area_map_width = v ; end
    def self.ui_menu_width ; Global.ui_menu_width ; end
    def self.ui_menu_width=(v) ; Global.ui_menu_width = v ; end
    def self.created_item_type ; Global.created_item_type ; end
    def self.created_item_type=(v) ; Global.created_item_type = v ; end
    def self.created_item_subtype ; Global.created_item_subtype ; end
    def self.created_item_subtype=(v) ; Global.created_item_subtype = v ; end
    def self.created_item_mattype ; Global.created_item_mattype ; end
    def self.created_item_mattype=(v) ; Global.created_item_mattype = v ; end
    def self.created_item_matindex ; Global.created_item_matindex ; end
    def self.created_item_matindex=(v) ; Global.created_item_matindex = v ; end
    def self.created_item_count ; Global.created_item_count ; end
    def self.created_item_count=(v) ; Global.created_item_count = v ; end
    def self.map_renderer ; Global.map_renderer ; end
    def self.map_renderer=(v) ; Global.map_renderer = v ; end
    def self.d_init ; Global.d_init ; end
    def self.d_init=(v) ; Global.d_init = v ; end
    def self.flows ; Global.flows ; end
    def self.flows=(v) ; Global.flows = v ; end
    def self.enabler ; Global.enabler ; end
    def self.enabler=(v) ; Global.enabler = v ; end
    def self.gps ; Global.gps ; end
    def self.gps=(v) ; Global.gps = v ; end
    def self.gview ; Global.gview ; end
    def self.gview=(v) ; Global.gview = v ; end
    def self.init ; Global.init ; end
    def self.init=(v) ; Global.init = v ; end
    def self.texture ; Global.texture ; end
    def self.texture=(v) ; Global.texture = v ; end
    def self.timed_events ; Global.timed_events ; end
    def self.timed_events=(v) ; Global.timed_events = v ; end
    def self.ui ; Global.ui ; end
    def self.ui=(v) ; Global.ui = v ; end
    def self.ui_advmode ; Global.ui_advmode ; end
    def self.ui_advmode=(v) ; Global.ui_advmode = v ; end
    def self.ui_build_selector ; Global.ui_build_selector ; end
    def self.ui_build_selector=(v) ; Global.ui_build_selector = v ; end
    def self.ui_building_assign_type ; Global.ui_building_assign_type ; end
    def self.ui_building_assign_type=(v) ; Global.ui_building_assign_type = v ; end
    def self.ui_building_assign_is_marked ; Global.ui_building_assign_is_marked ; end
    def self.ui_building_assign_is_marked=(v) ; Global.ui_building_assign_is_marked = v ; end
    def self.ui_building_assign_units ; Global.ui_building_assign_units ; end
    def self.ui_building_assign_units=(v) ; Global.ui_building_assign_units = v ; end
    def self.ui_building_assign_items ; Global.ui_building_assign_items ; end
    def self.ui_building_assign_items=(v) ; Global.ui_building_assign_items = v ; end
    def self.ui_look_list ; Global.ui_look_list ; end
    def self.ui_look_list=(v) ; Global.ui_look_list = v ; end
    def self.ui_sidebar_menus ; Global.ui_sidebar_menus ; end
    def self.ui_sidebar_menus=(v) ; Global.ui_sidebar_menus = v ; end
    def self.world ; Global.world ; end
    def self.world=(v) ; Global.world = v ; end
    def self.activity_next_id ; Global.activity_next_id ; end
    def self.activity_next_id=(v) ; Global.activity_next_id = v ; end
    def self.art_image_chunk_next_id ; Global.art_image_chunk_next_id ; end
    def self.art_image_chunk_next_id=(v) ; Global.art_image_chunk_next_id = v ; end
    def self.artifact_next_id ; Global.artifact_next_id ; end
    def self.artifact_next_id=(v) ; Global.artifact_next_id = v ; end
    def self.building_next_id ; Global.building_next_id ; end
    def self.building_next_id=(v) ; Global.building_next_id = v ; end
    def self.crime_next_id ; Global.crime_next_id ; end
    def self.crime_next_id=(v) ; Global.crime_next_id = v ; end
    def self.entity_next_id ; Global.entity_next_id ; end
    def self.entity_next_id=(v) ; Global.entity_next_id = v ; end
    def self.flow_guide_next_id ; Global.flow_guide_next_id ; end
    def self.flow_guide_next_id=(v) ; Global.flow_guide_next_id = v ; end
    def self.formation_next_id ; Global.formation_next_id ; end
    def self.formation_next_id=(v) ; Global.formation_next_id = v ; end
    def self.hist_event_collection_next_id ; Global.hist_event_collection_next_id ; end
    def self.hist_event_collection_next_id=(v) ; Global.hist_event_collection_next_id = v ; end
    def self.hist_event_next_id ; Global.hist_event_next_id ; end
    def self.hist_event_next_id=(v) ; Global.hist_event_next_id = v ; end
    def self.hist_figure_next_id ; Global.hist_figure_next_id ; end
    def self.hist_figure_next_id=(v) ; Global.hist_figure_next_id = v ; end
    def self.identity_next_id ; Global.identity_next_id ; end
    def self.identity_next_id=(v) ; Global.identity_next_id = v ; end
    def self.incident_next_id ; Global.incident_next_id ; end
    def self.incident_next_id=(v) ; Global.incident_next_id = v ; end
    def self.interaction_instance_next_id ; Global.interaction_instance_next_id ; end
    def self.interaction_instance_next_id=(v) ; Global.interaction_instance_next_id = v ; end
    def self.item_next_id ; Global.item_next_id ; end
    def self.item_next_id=(v) ; Global.item_next_id = v ; end
    def self.job_next_id ; Global.job_next_id ; end
    def self.job_next_id=(v) ; Global.job_next_id = v ; end
    def self.machine_next_id ; Global.machine_next_id ; end
    def self.machine_next_id=(v) ; Global.machine_next_id = v ; end
    def self.nemesis_next_id ; Global.nemesis_next_id ; end
    def self.nemesis_next_id=(v) ; Global.nemesis_next_id = v ; end
    def self.proj_next_id ; Global.proj_next_id ; end
    def self.proj_next_id=(v) ; Global.proj_next_id = v ; end
    def self.schedule_next_id ; Global.schedule_next_id ; end
    def self.schedule_next_id=(v) ; Global.schedule_next_id = v ; end
    def self.squad_next_id ; Global.squad_next_id ; end
    def self.squad_next_id=(v) ; Global.squad_next_id = v ; end
    def self.task_next_id ; Global.task_next_id ; end
    def self.task_next_id=(v) ; Global.task_next_id = v ; end
    def self.unit_chunk_next_id ; Global.unit_chunk_next_id ; end
    def self.unit_chunk_next_id=(v) ; Global.unit_chunk_next_id = v ; end
    def self.unit_next_id ; Global.unit_next_id ; end
    def self.unit_next_id=(v) ; Global.unit_next_id = v ; end
    def self.vehicle_next_id ; Global.vehicle_next_id ; end
    def self.vehicle_next_id=(v) ; Global.vehicle_next_id = v ; end
    def self.written_content_next_id ; Global.written_content_next_id ; end
    def self.written_content_next_id=(v) ; Global.written_content_next_id = v ; end
    def self.announcements ; Global.announcements ; end
    def self.announcements=(v) ; Global.announcements = v ; end
    def self.cur_year ; Global.cur_year ; end
    def self.cur_year=(v) ; Global.cur_year = v ; end
    def self.cur_year_tick ; Global.cur_year_tick ; end
    def self.cur_year_tick=(v) ; Global.cur_year_tick = v ; end
    def self.cur_year_tick_advmode ; Global.cur_year_tick_advmode ; end
    def self.cur_year_tick_advmode=(v) ; Global.cur_year_tick_advmode = v ; end
    def self.cur_season ; Global.cur_season ; end
    def self.cur_season=(v) ; Global.cur_season = v ; end
    def self.cur_season_tick ; Global.cur_season_tick ; end
    def self.cur_season_tick=(v) ; Global.cur_season_tick = v ; end
    def self.current_weather ; Global.current_weather ; end
    def self.current_weather=(v) ; Global.current_weather = v ; end
    def self.pause_state ; Global.pause_state ; end
    def self.pause_state=(v) ; Global.pause_state = v ; end
    def self.process_dig ; Global.process_dig ; end
    def self.process_dig=(v) ; Global.process_dig = v ; end
    def self.process_jobs ; Global.process_jobs ; end
    def self.process_jobs=(v) ; Global.process_jobs = v ; end
    def self.ui_building_in_assign ; Global.ui_building_in_assign ; end
    def self.ui_building_in_assign=(v) ; Global.ui_building_in_assign = v ; end
    def self.ui_building_in_resize ; Global.ui_building_in_resize ; end
    def self.ui_building_in_resize=(v) ; Global.ui_building_in_resize = v ; end
    def self.ui_building_item_cursor ; Global.ui_building_item_cursor ; end
    def self.ui_building_item_cursor=(v) ; Global.ui_building_item_cursor = v ; end
    def self.ui_look_cursor ; Global.ui_look_cursor ; end
    def self.ui_look_cursor=(v) ; Global.ui_look_cursor = v ; end
    def self.ui_selected_unit ; Global.ui_selected_unit ; end
    def self.ui_selected_unit=(v) ; Global.ui_selected_unit = v ; end
    def self.ui_unit_view_mode ; Global.ui_unit_view_mode ; end
    def self.ui_unit_view_mode=(v) ; Global.ui_unit_view_mode = v ; end
    def self.ui_workshop_in_add ; Global.ui_workshop_in_add ; end
    def self.ui_workshop_in_add=(v) ; Global.ui_workshop_in_add = v ; end
    def self.ui_workshop_job_cursor ; Global.ui_workshop_job_cursor ; end
    def self.ui_workshop_job_cursor=(v) ; Global.ui_workshop_job_cursor = v ; end
    def self.window_x ; Global.window_x ; end
    def self.window_x=(v) ; Global.window_x = v ; end
    def self.window_y ; Global.window_y ; end
    def self.window_y=(v) ; Global.window_y = v ; end
    def self.window_z ; Global.window_z ; end
    def self.window_z=(v) ; Global.window_z = v ; end
    def self.debug_nopause ; Global.debug_nopause ; end
    def self.debug_nopause=(v) ; Global.debug_nopause = v ; end
    def self.debug_nomoods ; Global.debug_nomoods ; end
    def self.debug_nomoods=(v) ; Global.debug_nomoods = v ; end
    def self.debug_combat ; Global.debug_combat ; end
    def self.debug_combat=(v) ; Global.debug_combat = v ; end
    def self.debug_wildlife ; Global.debug_wildlife ; end
    def self.debug_wildlife=(v) ; Global.debug_wildlife = v ; end
    def self.debug_nodrink ; Global.debug_nodrink ; end
    def self.debug_nodrink=(v) ; Global.debug_nodrink = v ; end
    def self.debug_noeat ; Global.debug_noeat ; end
    def self.debug_noeat=(v) ; Global.debug_noeat = v ; end
    def self.debug_nosleep ; Global.debug_nosleep ; end
    def self.debug_nosleep=(v) ; Global.debug_nosleep = v ; end
    def self.debug_showambush ; Global.debug_showambush ; end
    def self.debug_showambush=(v) ; Global.debug_showambush = v ; end
    def self.debug_fastmining ; Global.debug_fastmining ; end
    def self.debug_fastmining=(v) ; Global.debug_fastmining = v ; end
    def self.debug_noberserk ; Global.debug_noberserk ; end
    def self.debug_noberserk=(v) ; Global.debug_noberserk = v ; end
    def self.debug_turbospeed ; Global.debug_turbospeed ; end
    def self.debug_turbospeed=(v) ; Global.debug_turbospeed = v ; end
    def self.save_on_exit ; Global.save_on_exit ; end
    def self.save_on_exit=(v) ; Global.save_on_exit = v ; end
    def self.standing_orders_gather_minerals ; Global.standing_orders_gather_minerals ; end
    def self.standing_orders_gather_minerals=(v) ; Global.standing_orders_gather_minerals = v ; end
    def self.standing_orders_gather_wood ; Global.standing_orders_gather_wood ; end
    def self.standing_orders_gather_wood=(v) ; Global.standing_orders_gather_wood = v ; end
    def self.standing_orders_gather_food ; Global.standing_orders_gather_food ; end
    def self.standing_orders_gather_food=(v) ; Global.standing_orders_gather_food = v ; end
    def self.standing_orders_gather_bodies ; Global.standing_orders_gather_bodies ; end
    def self.standing_orders_gather_bodies=(v) ; Global.standing_orders_gather_bodies = v ; end
    def self.standing_orders_gather_animals ; Global.standing_orders_gather_animals ; end
    def self.standing_orders_gather_animals=(v) ; Global.standing_orders_gather_animals = v ; end
    def self.standing_orders_gather_furniture ; Global.standing_orders_gather_furniture ; end
    def self.standing_orders_gather_furniture=(v) ; Global.standing_orders_gather_furniture = v ; end
    def self.standing_orders_farmer_harvest ; Global.standing_orders_farmer_harvest ; end
    def self.standing_orders_farmer_harvest=(v) ; Global.standing_orders_farmer_harvest = v ; end
    def self.standing_orders_job_cancel_announce ; Global.standing_orders_job_cancel_announce ; end
    def self.standing_orders_job_cancel_announce=(v) ; Global.standing_orders_job_cancel_announce = v ; end
    def self.standing_orders_mix_food ; Global.standing_orders_mix_food ; end
    def self.standing_orders_mix_food=(v) ; Global.standing_orders_mix_food = v ; end
    def self.standing_orders_gather_refuse ; Global.standing_orders_gather_refuse ; end
    def self.standing_orders_gather_refuse=(v) ; Global.standing_orders_gather_refuse = v ; end
    def self.standing_orders_gather_refuse_outside ; Global.standing_orders_gather_refuse_outside ; end
    def self.standing_orders_gather_refuse_outside=(v) ; Global.standing_orders_gather_refuse_outside = v ; end
    def self.standing_orders_gather_vermin_remains ; Global.standing_orders_gather_vermin_remains ; end
    def self.standing_orders_gather_vermin_remains=(v) ; Global.standing_orders_gather_vermin_remains = v ; end
    def self.standing_orders_dump_corpses ; Global.standing_orders_dump_corpses ; end
    def self.standing_orders_dump_corpses=(v) ; Global.standing_orders_dump_corpses = v ; end
    def self.standing_orders_dump_skulls ; Global.standing_orders_dump_skulls ; end
    def self.standing_orders_dump_skulls=(v) ; Global.standing_orders_dump_skulls = v ; end
    def self.standing_orders_dump_skins ; Global.standing_orders_dump_skins ; end
    def self.standing_orders_dump_skins=(v) ; Global.standing_orders_dump_skins = v ; end
    def self.standing_orders_dump_bones ; Global.standing_orders_dump_bones ; end
    def self.standing_orders_dump_bones=(v) ; Global.standing_orders_dump_bones = v ; end
    def self.standing_orders_dump_hair ; Global.standing_orders_dump_hair ; end
    def self.standing_orders_dump_hair=(v) ; Global.standing_orders_dump_hair = v ; end
    def self.standing_orders_dump_shells ; Global.standing_orders_dump_shells ; end
    def self.standing_orders_dump_shells=(v) ; Global.standing_orders_dump_shells = v ; end
    def self.standing_orders_dump_other ; Global.standing_orders_dump_other ; end
    def self.standing_orders_dump_other=(v) ; Global.standing_orders_dump_other = v ; end
    def self.standing_orders_forbid_used_ammo ; Global.standing_orders_forbid_used_ammo ; end
    def self.standing_orders_forbid_used_ammo=(v) ; Global.standing_orders_forbid_used_ammo = v ; end
    def self.standing_orders_forbid_other_dead_items ; Global.standing_orders_forbid_other_dead_items ; end
    def self.standing_orders_forbid_other_dead_items=(v) ; Global.standing_orders_forbid_other_dead_items = v ; end
    def self.standing_orders_forbid_own_dead ; Global.standing_orders_forbid_own_dead ; end
    def self.standing_orders_forbid_own_dead=(v) ; Global.standing_orders_forbid_own_dead = v ; end
    def self.standing_orders_forbid_other_nohunt ; Global.standing_orders_forbid_other_nohunt ; end
    def self.standing_orders_forbid_other_nohunt=(v) ; Global.standing_orders_forbid_other_nohunt = v ; end
    def self.standing_orders_forbid_own_dead_items ; Global.standing_orders_forbid_own_dead_items ; end
    def self.standing_orders_forbid_own_dead_items=(v) ; Global.standing_orders_forbid_own_dead_items = v ; end
    def self.standing_orders_auto_loom ; Global.standing_orders_auto_loom ; end
    def self.standing_orders_auto_loom=(v) ; Global.standing_orders_auto_loom = v ; end
    def self.standing_orders_auto_collect_webs ; Global.standing_orders_auto_collect_webs ; end
    def self.standing_orders_auto_collect_webs=(v) ; Global.standing_orders_auto_collect_webs = v ; end
    def self.standing_orders_auto_slaughter ; Global.standing_orders_auto_slaughter ; end
    def self.standing_orders_auto_slaughter=(v) ; Global.standing_orders_auto_slaughter = v ; end
    def self.standing_orders_auto_butcher ; Global.standing_orders_auto_butcher ; end
    def self.standing_orders_auto_butcher=(v) ; Global.standing_orders_auto_butcher = v ; end
    def self.standing_orders_auto_tan ; Global.standing_orders_auto_tan ; end
    def self.standing_orders_auto_tan=(v) ; Global.standing_orders_auto_tan = v ; end
    def self.standing_orders_auto_fishery ; Global.standing_orders_auto_fishery ; end
    def self.standing_orders_auto_fishery=(v) ; Global.standing_orders_auto_fishery = v ; end
    def self.standing_orders_auto_kitchen ; Global.standing_orders_auto_kitchen ; end
    def self.standing_orders_auto_kitchen=(v) ; Global.standing_orders_auto_kitchen = v ; end
    def self.standing_orders_auto_kiln ; Global.standing_orders_auto_kiln ; end
    def self.standing_orders_auto_kiln=(v) ; Global.standing_orders_auto_kiln = v ; end
    def self.standing_orders_auto_smelter ; Global.standing_orders_auto_smelter ; end
    def self.standing_orders_auto_smelter=(v) ; Global.standing_orders_auto_smelter = v ; end
    def self.standing_orders_auto_other ; Global.standing_orders_auto_other ; end
    def self.standing_orders_auto_other=(v) ; Global.standing_orders_auto_other = v ; end
    def self.standing_orders_use_dyed_cloth ; Global.standing_orders_use_dyed_cloth ; end
    def self.standing_orders_use_dyed_cloth=(v) ; Global.standing_orders_use_dyed_cloth = v ; end
    def self.standing_orders_zoneonly_drink ; Global.standing_orders_zoneonly_drink ; end
    def self.standing_orders_zoneonly_drink=(v) ; Global.standing_orders_zoneonly_drink = v ; end
    def self.standing_orders_zoneonly_fish ; Global.standing_orders_zoneonly_fish ; end
    def self.standing_orders_zoneonly_fish=(v) ; Global.standing_orders_zoneonly_fish = v ; end
end
