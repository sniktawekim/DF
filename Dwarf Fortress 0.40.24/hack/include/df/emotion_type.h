/* THIS FILE WAS GENERATED. DO NOT EDIT. */
#ifndef DF_EMOTION_TYPE_H
#define DF_EMOTION_TYPE_H
namespace df {
  namespace enums {
    namespace emotion_type {
      enum emotion_type : int32_t {
        Anything = -1,
        Acceptance,
        Adoration,
        Affection,
        Agitation,
        Aggravation,
        Agony,
        Alarm,
        Alienation,
        Amazement,
        Ambivalence,
        Amusement,
        Anger,
        anon_1,
        Anguish,
        Annoyance,
        anon_2,
        Anxiety,
        Apathy,
        anon_3,
        Arousal,
        Astonishment,
        anon_4,
        Aversion,
        Awe,
        Bitterness,
        Bliss,
        Boredom,
        Caring,
        anon_5,
        Confusion,
        Contempt,
        Contentment,
        anon_6,
        anon_7,
        anon_8,
        Dejection,
        Delight,
        anon_9,
        anon_10,
        Despair,
        Disappointment,
        Disgust,
        Disillusioned,
        Dislike,
        Dismay,
        Displeasure,
        Distress,
        anon_11,
        anon_12,
        Eagerness,
        anon_13,
        Elation,
        Embarrassment,
        Empathy,
        Emptiness,
        Enjoyment,
        anon_14,
        anon_15,
        anon_16,
        anon_17,
        Exasperation,
        anon_18,
        Exhilaration,
        anon_19,
        Fear,
        Ferocity,
        Fondness,
        Free,
        Fright,
        Frustration,
        anon_20,
        anon_21,
        anon_22,
        Glee,
        Gloom,
        Glumness,
        Gratitude,
        anon_23,
        Grief,
        GrimSatisfaction,
        Grouchiness,
        Grumpiness,
        Guilt,
        Happiness,
        Hatred,
        anon_24,
        Hope,
        Hopelessness,
        Horror,
        anon_25,
        Humiliation,
        anon_26,
        anon_27,
        anon_28,
        anon_29,
        Insult,
        Interest,
        Irritation,
        Isolation,
        anon_30,
        Jolliness,
        Jovialty,
        Joy,
        Jubilation,
        anon_31,
        Loathing,
        Loneliness,
        anon_32,
        Love,
        anon_33,
        Lust,
        anon_34,
        Misery,
        Mortification,
        anon_35,
        Nervousness,
        Nostalgia,
        Optimism,
        Outrage,
        Panic,
        Patience,
        Passion,
        anon_36,
        anon_37,
        Pleasure,
        Pride,
        Rage,
        Rapture,
        Rejection,
        Relief,
        Regret,
        Remorse,
        Repentance,
        Resentment,
        anon_38,
        RighteousIndignation,
        Sadness,
        Satisfaction,
        anon_39,
        SelfPity,
        anon_40,
        Servile,
        Shaken,
        Shame,
        Shock,
        anon_41,
        anon_42,
        anon_43,
        anon_44,
        Suspicion,
        Sympathy,
        Tenderness,
        anon_45,
        Terror,
        Thrill,
        anon_46,
        Triumph,
        Uneasiness,
        Unhappiness,
        Vengefulness,
        anon_47,
        Wonder,
        Worry,
        Wrath,
        Zeal,
        anon_48,
        anon_49,
        anon_50,
        Restless,
        Admiration
      };
    }
  }
  using enums::emotion_type::emotion_type;
  template<> struct DFHACK_EXPORT identity_traits<emotion_type> {
    static enum_identity identity;
    static enum_identity *get() { return &identity; }
  };
  template<> struct DFHACK_EXPORT enum_traits<emotion_type> {
    typedef int32_t base_type;
    typedef emotion_type enum_type;
    static const base_type first_item_value = -1;
    static const base_type last_item_value = 169;
    static inline bool is_valid(enum_type value) {
      return (base_type(value) >= first_item_value && base_type(value) <= last_item_value);
    }
    static const enum_type first_item = (enum_type)first_item_value;
    static const enum_type last_item = (enum_type)last_item_value;
    static const char *const key_table[171];
    struct attr_entry_type {
      int8_t color;
      int8_t divider;
      static struct_identity _identity;
    };
    static const attr_entry_type attr_table[171+1];
    static const attr_entry_type &attrs(enum_type value);
  };
}
#endif
