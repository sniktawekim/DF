/* THIS FILE WAS GENERATED. DO NOT EDIT. */
#ifndef DF_UNIT_THOUGHT_TYPE_H
#define DF_UNIT_THOUGHT_TYPE_H
namespace df {
  namespace enums {
    namespace unit_thought_type {
      enum unit_thought_type : int32_t {
        Conflict,
        Trauma,
        WitnessDeath,
        UnexpectedDeath,
        Death,
        Kill,
        LoveSeparated,
        LoveReunited,
        JoinConflict,
        MakeMasterwork,
        MadeArtifact,
        MasterSkill,
        NewRomance,
        BecomeParent,
        NearConflict,
        CancelAgreement,
        JoinTravel,
        SiteControlled,
        TributeCancel,
        Incident,
        HearRumor,
        MilitaryRemoved,
        StrangerWeapon,
        StrangerSneaking,
        SawDrinkBlood,
        Complained,
        ReceivedComplaint,
        AdmireBuilding,
        AdmireOwnBuilding,
        AdmireArrangedBuilding,
        AdmireOwnArrangedBuilding,
        LostPet,
        ThrownStuff,
        JailReleased,
        Miscarriage,
        SpouseMiscarriage,
        OldClothing,
        TatteredClothing,
        RottedClothing,
        GhostNightmare,
        GhostHaunt,
        Spar,
        UnableComplain,
        LongPatrol,
        SunNausea,
        SunIrritated,
        Drowsy,
        VeryDrowsy,
        Thirsty,
        Dehydrated,
        Hungry,
        Starving,
        MajorInjuries,
        MinorInjuries,
        SleepNoise,
        Rest,
        FreakishWeather,
        Rain,
        SnowStorm,
        Miasma,
        Smoke,
        Waterfall,
        Dust,
        Demands,
        ImproperPunishment,
        PunishmentReduced,
        Elected,
        Reelected,
        RequestApproved,
        RequestIgnored,
        NoPunishment,
        PunishmentDelayed,
        DelayedPunishment,
        ScarceCageChain,
        MandateIgnored,
        MandateDeadlineMissed,
        LackWork,
        SmashedBuilding,
        ToppledStuff,
        NoblePromotion,
        BecomeNoble,
        Cavein,
        MandateDeadlineMet,
        Uncovered,
        NoShirt,
        NoShoes,
        EatPet,
        EatLikedCreature,
        EatVermin,
        FistFight,
        GaveBeating,
        GotBeaten,
        GaveHammering,
        GotHammered,
        NoHammer,
        SameFood,
        AteRotten,
        GoodMeal,
        GoodDrink,
        MoreChests,
        MoreCabinets,
        MoreWeaponRacks,
        MoreArmorStands,
        RoomPretension,
        LackTables,
        CrowdedTables,
        DiningQuality,
        NoDining,
        LackChairs,
        TrainingBond,
        Rescued,
        RescuedOther,
        SatisfiedAtWork,
        TaxedLostProperty,
        Taxed,
        LackProtection,
        TaxRoomUnreachable,
        TaxRoomMisinformed,
        PleasedNoble,
        TaxCollectionSmooth,
        DisappointedNoble,
        TaxCollectionRough,
        MadeFriend,
        FormedGrudge,
        AnnoyedVermin,
        NearVermin,
        PesteredVermin,
        AcquiredItem,
        AdoptedPet,
        Jailed,
        Bath,
        SoapyBath,
        SparringAccident,
        Attacked,
        AttackedByDead,
        SameBooze,
        DrinkBlood,
        DrinkSlime,
        DrinkVomit,
        DrinkGoo,
        DrinkIchor,
        DrinkPus,
        NastyWater,
        DrankSpoiled,
        LackWell,
        NearCaged,
        NearCaged2,
        LackBedroom,
        BedroomQuality,
        SleptFloor,
        SleptMud,
        SleptGrass,
        SleptRoughFloor,
        SleptRocks,
        SleptIce,
        SleptDirt,
        SleptDriftwood,
        ArtDefacement,
        Evicted,
        GaveBirth,
        SpouseGaveBirth,
        ReceivedWater,
        GaveWater,
        ReceivedFood,
        GaveFood,
        Talked,
        OfficeQuality,
        MeetingInBedroom,
        MeetingInDiningRoom,
        NoRooms,
        TombQuality,
        TombLack,
        TalkToNoble,
        InteractPet,
        ConvictionCorpse,
        ConvictionAnimal,
        ConvictionVictim,
        ConvictionJusticeSelf,
        ConvictionJusticeFamily,
        Decay
      };
    }
  }
  using enums::unit_thought_type::unit_thought_type;
  template<> struct DFHACK_EXPORT identity_traits<unit_thought_type> {
    static enum_identity identity;
    static enum_identity *get() { return &identity; }
  };
  template<> struct DFHACK_EXPORT enum_traits<unit_thought_type> {
    typedef int32_t base_type;
    typedef unit_thought_type enum_type;
    static const base_type first_item_value = 0;
    static const base_type last_item_value = 179;
    static inline bool is_valid(enum_type value) {
      return (base_type(value) >= first_item_value && base_type(value) <= last_item_value);
    }
    static const enum_type first_item = (enum_type)first_item_value;
    static const enum_type last_item = (enum_type)last_item_value;
    static const char *const key_table[180];
    struct attr_entry_type {
      const char* caption;
      static struct_identity _identity;
    };
    static const attr_entry_type attr_table[180+1];
    static const attr_entry_type &attrs(enum_type value);
  };
}
#endif
