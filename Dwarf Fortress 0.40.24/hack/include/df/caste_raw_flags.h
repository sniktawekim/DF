/* THIS FILE WAS GENERATED. DO NOT EDIT. */
#ifndef DF_CASTE_RAW_FLAGS_H
#define DF_CASTE_RAW_FLAGS_H
namespace df {
  namespace enums {
    namespace caste_raw_flags {
      enum caste_raw_flags : int32_t {
        AMPHIBIOUS,
        AQUATIC,
        LOCKPICKER,
        MISCHIEVOUS,
        PATTERNFLIER,
        CURIOUSBEAST_ANY,
        CURIOUSBEAST_ITEM,
        CURIOUSBEAST_GUZZLER,
        FLEEQUICK,
        AT_PEACE_WITH_WILDLIFE,
        SWIMS_LEARNED,
        OPPOSED_TO_LIFE,
        CURIOUSBEAST_EATER,
        NO_EAT,
        NO_DRINK,
        NO_SLEEP,
        COMMON_DOMESTIC,
        WAGON_PULLER,
        PACK_ANIMAL,
        FLIER,
        LARGE_PREDATOR,
        MAGMA_VISION,
        FIREIMMUNE,
        FIREIMMUNE_SUPER,
        WEBBER,
        WEBIMMUNE,
        FISHITEM,
        IMMOBILE_LAND,
        IMMOLATE,
        MILKABLE,
        NO_SPRING,
        NO_SUMMER,
        NO_AUTUMN,
        NO_WINTER,
        BENIGN,
        VERMIN_NOROAM,
        VERMIN_NOTRAP,
        VERMIN_NOFISH,
        HAS_NERVES,
        NO_DIZZINESS,
        NO_FEVERS,
        NO_UNIT_TYPE_COLOR,
        NO_CONNECTIONS_FOR_MOVEMENT,
        unk_2b,
        AMBUSHPREDATOR,
        unk_2d,
        NOT_BUTCHERABLE,
        COOKABLE_LIVE,
        SECRETION,
        IMMOBILE,
        MULTIPART_FULL_VISION,
        MEANDERER,
        THICKWEB,
        TRAINABLE_HUNTING,
        PET,
        PET_EXOTIC,
        unk_38,
        CAN_SPEAK,
        CAN_LEARN,
        UTTERANCES,
        BONECARN,
        CARNIVORE,
        UNDERSWIM,
        NOEXERT,
        NOPAIN,
        EXTRAVISION,
        NOBREATHE,
        NOSTUN,
        NONAUSEA,
        BLOOD,
        TRANCES,
        NOEMOTION,
        SLOW_LEARNER,
        NOSTUCKINS,
        PUS,
        NOSKULL,
        NOSKIN,
        NOBONES,
        NOMEAT,
        PARALYZEIMMUNE,
        NOFEAR,
        CANOPENDOORS,
        /**
         * set if the tag is present; corpse parts go to map_renderer.cursor_other
         */
        ITEMCORPSE,
        GETS_WOUND_INFECTIONS,
        NOSMELLYROT,
        REMAINS_UNDETERMINED,
        HASSHELL,
        PEARL,
        TRAINABLE_WAR,
        NO_THOUGHT_CENTER_FOR_MOVEMENT,
        ARENA_RESTRICTED,
        LAIR_HUNTER,
        LIKES_FIGHTING,
        VERMIN_HATEABLE,
        VEGETATION,
        MAGICAL,
        NATURAL,
        BABY,
        CHILD,
        MULTIPLE_LITTER_RARE,
        MOUNT,
        MOUNT_EXOTIC,
        FEATURE_ATTACK_GROUP,
        VERMIN_MICRO,
        EQUIPS,
        LAYS_EGGS,
        GRAZER,
        NOTHOUGHT,
        TRAPAVOID,
        CAVE_ADAPT,
        MEGABEAST,
        SEMIMEGABEAST,
        ALL_ACTIVE,
        DIURNAL,
        NOCTURNAL,
        CREPUSCULAR,
        MATUTINAL,
        VESPERTINE,
        LIGHT_GEN,
        LISP,
        GETS_INFECTIONS_FROM_ROT,
        unk_79,
        ALCOHOL_DEPENDENT,
        SWIMS_INNATE,
        POWER,
        unk_7d,
        unk_7e,
        CASTE_TILE,
        CASTE_COLOR,
        unk_81,
        unk_82,
        FEATURE_BEAST,
        TITAN,
        UNIQUE_DEMON,
        DEMON,
        MANNERISM_LAUGH,
        MANNERISM_SMILE,
        MANNERISM_WALK,
        MANNERISM_SIT,
        MANNERISM_BREATH,
        MANNERISM_POSTURE,
        MANNERISM_STRETCH,
        MANNERISM_EYELIDS,
        NIGHT_CREATURE_ANY,
        NIGHT_CREATURE_HUNTER,
        NIGHT_CREATURE_BOGEYMAN,
        CONVERTED_SPOUSE,
        SPOUSE_CONVERTER,
        SPOUSE_CONVERSION_TARGET,
        DIE_WHEN_VERMIN_BITE,
        REMAINS_ON_VERMIN_BITE_DEATH,
        COLONY_EXTERNAL,
        LAYS_UNUSUAL_EGGS,
        RETURNS_VERMIN_KILLS_TO_OWNER,
        HUNTS_VERMIN,
        ADOPTS_OWNER,
        SOUND_ALERT,
        SOUND_PEACEFUL_INTERMITTENT,
        unk_9e,
        unk_9f,
        unk_a0,
        CRAZED,
        BLOODSUCKER,
        NO_VEGETATION_PERTURB,
        DIVE_HUNTS_VERMIN,
        GOBBLE_VERMIN,
        CANNOT_JUMP,
        STANCE_CLIMBER,
        CANNOT_CLIMB
      };
    }
  }
  using enums::caste_raw_flags::caste_raw_flags;
  template<> struct DFHACK_EXPORT identity_traits<caste_raw_flags> {
    static enum_identity identity;
    static enum_identity *get() { return &identity; }
  };
  template<> struct DFHACK_EXPORT enum_traits<caste_raw_flags> {
    typedef int32_t base_type;
    typedef caste_raw_flags enum_type;
    static const base_type first_item_value = 0;
    static const base_type last_item_value = 168;
    static inline bool is_valid(enum_type value) {
      return (base_type(value) >= first_item_value && base_type(value) <= last_item_value);
    }
    static const enum_type first_item = (enum_type)first_item_value;
    static const enum_type last_item = (enum_type)last_item_value;
    static const char *const key_table[169];
  };
}
#endif
