/* THIS FILE WAS GENERATED. DO NOT EDIT. */
#include "abstract_building_dungeonst.h"
#include "abstract_building_type.h"
#include "activity_event.h"
#include "activity_event_type.h"
#include "activity_info.h"
#include "agreement_conclusion_reason.h"
#include "ammo_flags.h"
#include "animal_training_level.h"
#include "announcement_flags.h"
#include "announcement_type.h"
#include "appearance_modifier_type.h"
#include "armor_flags.h"
#include "armor_general_flags.h"
#include "art_facet_type.h"
#include "art_image_element_type.h"
#include "art_image_property_type.h"
#include "art_image_property_verb.h"
#include "assign_trade_status.h"
#include "barrack_preference_category.h"
#include "biome_type.h"
#include "block_flags.h"
#include "block_square_event_mineralst.h"
#include "block_square_event_type.h"
#include "body_layer_status.h"
#include "body_part_layer_flags.h"
#include "body_part_raw_flags.h"
#include "body_part_status.h"
#include "body_part_template_contype.h"
#include "body_part_template_flags.h"
#include "breath_attack_type.h"
#include "build_req_choice_type.h"
#include "building_archerytargetst.h"
#include "building_bedst.h"
#include "building_bridgest.h"
#include "building_cagest.h"
#include "building_chainst.h"
#include "building_civzonest.h"
#include "building_coffinst.h"
#include "building_design.h"
#include "building_flags.h"
#include "building_gear_assemblyst.h"
#include "building_shopst.h"
#include "building_siegeenginest.h"
#include "building_supportst.h"
#include "building_tablest.h"
#include "building_tradedepotst.h"
#include "building_trapst.h"
#include "building_type.h"
#include "building_wellst.h"
#include "buildings_other_id.h"
#include "builtin_mats.h"
#include "caravan_state.h"
#include "caste_attack.h"
#include "caste_body_info.h"
#include "caste_raw_flags.h"
#include "cie_add_tag_mask1.h"
#include "cie_add_tag_mask2.h"
#include "civzone_type.h"
#include "combat_report_event_type.h"
#include "construction_flags.h"
#include "construction_type.h"
#include "conversation.h"
#include "corpse_material_type.h"
#include "craft_material_class.h"
#include "creature_graphics_role.h"
#include "creature_interaction_effect_flags.h"
#include "creature_interaction_effect_target_mode.h"
#include "creature_interaction_effect_type.h"
#include "creature_raw_flags.h"
#include "crime.h"
#include "d_init_embark_confirm.h"
#include "d_init_flags1.h"
#include "d_init_flags2.h"
#include "d_init_flags3.h"
#include "d_init_flags4.h"
#include "d_init_idlers.h"
#include "d_init_nickname.h"
#include "d_init_tunnel.h"
#include "d_init_z_view.h"
#include "death_type.h"
#include "descriptor_shape.h"
#include "dfhack_material_category.h"
#include "dipscript_popup.h"
#include "door_flags.h"
#include "embark_finder_option.h"
#include "emotion_type.h"
#include "enabler.h"
#include "engraving_flags.h"
#include "entity_action_type.h"
#include "entity_activity_statistics.h"
#include "entity_entity_link_type.h"
#include "entity_event_type.h"
#include "entity_material_category.h"
#include "entity_position_flags.h"
#include "entity_position_raw_flags.h"
#include "entity_position_responsibility.h"
#include "entity_raw_flags.h"
#include "entity_sell_category.h"
#include "environment_type.h"
#include "era_type.h"
#include "ethic_response.h"
#include "ethic_type.h"
#include "feature_alteration_type.h"
#include "feature_init_flags.h"
#include "feature_type.h"
#include "flow_guide_type.h"
#include "flow_reuse_pool.h"
#include "flow_type.h"
#include "furnace_type.h"
#include "furniture_type.h"
#include "gait_info.h"
#include "gait_type.h"
#include "game_mode.h"
#include "game_type.h"
#include "gate_flags.h"
#include "general_ref_creaturest.h"
#include "general_ref_entity_popst.h"
#include "general_ref_type.h"
#include "general_ref_unit_itemownerst.h"
#include "geo_layer_type.h"
#include "ghost_goal.h"
#include "ghost_type.h"
#include "gloves_flags.h"
#include "goal_type.h"
#include "guild_id.h"
#include "hauler_type.h"
#include "health_view_bits1.h"
#include "health_view_bits2.h"
#include "health_view_bits3.h"
#include "helm_flags.h"
#include "hillock_house_type.h"
#include "histfig_body_state.h"
#include "histfig_entity_link_type.h"
#include "histfig_flags.h"
#include "histfig_hf_link_type.h"
#include "histfig_relationship_type.h"
#include "histfig_site_link_type.h"
#include "historical_entity.h"
#include "historical_entity_type.h"
#include "historical_kills.h"
#include "history_event_collection_type.h"
#include "history_event_simple_battle_subtype.h"
#include "history_event_type.h"
#include "hive_flags.h"
#include "hospital_supplies.h"
#include "improvement_type.h"
#include "incident.h"
#include "inclusion_type.h"
#include "init_display.h"
#include "init_display_flags.h"
#include "init_font.h"
#include "init_input_flags.h"
#include "init_media_flags.h"
#include "init_window_flags.h"
#include "inorganic_flags.h"
#include "instrument_flags.h"
#include "insurrection_outcome.h"
#include "interaction_effect.h"
#include "interaction_effect_location_hint.h"
#include "interaction_effect_type.h"
#include "interaction_source_regionst.h"
#include "interaction_source_secretst.h"
#include "interaction_source_type.h"
#include "interaction_source_usage_hint.h"
#include "interaction_target_info.h"
#include "interaction_target_location_type.h"
#include "interaction_target_materialst.h"
#include "interaction_target_type.h"
#include "interface_breakdown_types.h"
#include "interface_key.h"
#include "invasion_info.h"
#include "item_body_component.h"
#include "item_eggst.h"
#include "item_flags.h"
#include "item_flags2.h"
#include "item_magicness_type.h"
#include "item_matstate.h"
#include "item_quality.h"
#include "item_type.h"
#include "itemimprovement_coveredst.h"
#include "items_other_id.h"
#include "job_flags.h"
#include "job_item_flags1.h"
#include "job_item_flags2.h"
#include "job_item_flags3.h"
#include "job_item_ref.h"
#include "job_item_vector_id.h"
#include "job_material_category.h"
#include "job_skill.h"
#include "job_skill_class.h"
#include "job_subtype_surgery.h"
#include "job_type.h"
#include "job_type_class.h"
#include "language_word_flags.h"
#include "local_population.h"
#include "machine.h"
#include "machine_conn_modes.h"
#include "machine_info.h"
#include "machine_type.h"
#include "masterpiece_loss_type.h"
#include "material_flags.h"
#include "matter_state.h"
#include "meeting_diplomat_info.h"
#include "meeting_event_type.h"
#include "meeting_topic.h"
#include "mental_attribute_type.h"
#include "misc_trait_type.h"
#include "mood_type.h"
#include "nemesis_flags.h"
#include "organic_mat_category.h"
#include "orientation_flags.h"
#include "pants_flags.h"
#include "part_of_speech.h"
#include "pattern_type.h"
#include "personality_facet_type.h"
#include "physical_attribute_type.h"
#include "plant.h"
#include "plant_flags.h"
#include "plant_growth.h"
#include "plant_raw_flags.h"
#include "plant_tree_tile.h"
#include "pressure_plate_info.h"
#include "profession.h"
#include "projectile_flags.h"
#include "projectile_type.h"
#include "reaction_flags.h"
#include "reaction_product_improvement_flags.h"
#include "reaction_product_item_flags.h"
#include "reaction_product_type.h"
#include "reaction_reagent_flags.h"
#include "reaction_reagent_type.h"
#include "region_map_entry.h"
#include "region_map_entry_flags.h"
#include "report.h"
#include "resource_allotment_specifier_type.h"
#include "room_rent_info.h"
#include "route_stockpile_link.h"
#include "screw_pump_direction.h"
#include "shoes_flags.h"
#include "shop_type.h"
#include "siegeengine_type.h"
#include "site_dispute_type.h"
#include "site_realization_building_type.h"
#include "site_shop_type.h"
#include "site_type.h"
#include "skill_rating.h"
#include "slab_engraving_type.h"
#include "spatter.h"
#include "spatter_common.h"
#include "specific_ref_type.h"
#include "sphere_type.h"
#include "squad_ammo_spec.h"
#include "squad_event_type.h"
#include "squad_order_cannot_reason.h"
#include "squad_order_type.h"
#include "squad_use_flags.h"
#include "stockpile_category.h"
#include "stockpile_group_set.h"
#include "stockpile_list.h"
#include "stop_depart_condition.h"
#include "strain_type.h"
#include "syndrome_flags.h"
#include "talk_choice_type.h"
#include "tile_building_occ.h"
#include "tile_designation.h"
#include "tile_dig_designation.h"
#include "tile_liquid.h"
#include "tile_liquid_flow.h"
#include "tile_liquid_flow_dir.h"
#include "tile_occupancy.h"
#include "tile_traffic.h"
#include "tiletype.h"
#include "tiletype_material.h"
#include "tiletype_shape.h"
#include "tiletype_shape_basic.h"
#include "tiletype_special.h"
#include "tiletype_variant.h"
#include "timed_event_type.h"
#include "tissue_flags.h"
#include "tool_flags.h"
#include "tool_uses.h"
#include "toy_flags.h"
#include "training_assignment.h"
#include "training_knowledge_level.h"
#include "trap_type.h"
#include "trapcomp_flags.h"
#include "tree_house_type.h"
#include "ui.h"
#include "ui_advmode.h"
#include "ui_advmode_menu.h"
#include "ui_hotkey.h"
#include "ui_look_list.h"
#include "ui_sidebar_menus.h"
#include "ui_sidebar_mode.h"
#include "ui_unit_view_mode.h"
#include "uniform_category.h"
#include "uniform_flags.h"
#include "uniform_indiv_choice.h"
#include "unit.h"
#include "unit_action_type.h"
#include "unit_bp_health_flags.h"
#include "unit_complaint.h"
#include "unit_demand.h"
#include "unit_flags1.h"
#include "unit_flags2.h"
#include "unit_flags3.h"
#include "unit_ghost_info.h"
#include "unit_health_flags.h"
#include "unit_inventory_item.h"
#include "unit_labor.h"
#include "unit_path_goal.h"
#include "unit_preference.h"
#include "unit_relationship_type.h"
#include "unit_report_type.h"
#include "unit_request.h"
#include "unit_station_type.h"
#include "unit_syndrome.h"
#include "unit_thought_type.h"
#include "unit_wound.h"
#include "units_other_id.h"
#include "value_type.h"
#include "vermin_flags.h"
#include "viewscreen_adventure_logst.h"
#include "viewscreen_choose_start_sitest.h"
#include "viewscreen_game_cleanerst.h"
#include "viewscreen_layer_militaryst.h"
#include "viewscreen_layer_noblelistst.h"
#include "viewscreen_petst.h"
#include "viewscreen_setupadventurest.h"
#include "viewscreen_textviewerst.h"
#include "viewscreen_titlest.h"
#include "viewscreen_unitlist_page.h"
#include "weapon_attack.h"
#include "weapon_flags.h"
#include "weather_type.h"
#include "workshop_type.h"
#include "world.h"
#include "world_construction_type.h"
#include "world_population_type.h"
#include "world_region_type.h"
#include "world_site_flags.h"
#include "world_site_type.h"
#include "world_underground_region.h"
#include "worldgen_range_type.h"
#include "worldgen_region_type.h"
#include "wound_damage_flags1.h"
#include "wound_damage_flags2.h"
#include "wound_effect_type.h"
#include "written_content_style.h"
#include "written_content_type.h"
#include "z_level_flags.h"
#include "zoom_commands.h"
namespace df {
  const char *const enum_traits<abstract_building_dungeonst::T_dungeon_type>::key_table[3] = {
    "DUNGEON",
    "SEWERS",
    "CATACOMBS"
  };
  enum_identity identity_traits<abstract_building_dungeonst::T_dungeon_type>::identity(sizeof(abstract_building_dungeonst::T_dungeon_type), &abstract_building_dungeonst::_identity, "T_dungeon_type", TID(int16_t), 0, 2, enum_traits<abstract_building_dungeonst::T_dungeon_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<abstract_building_type>::key_table[8] = {
    "MEAD_HALL",
    "KEEP",
    "TEMPLE",
    "DARK_TOWER",
    "MARKET",
    "TOMB",
    "DUNGEON",
    "UNDERWORLD_SPIRE"
  };
  enum_identity identity_traits<abstract_building_type>::identity(sizeof(abstract_building_type), NULL, "abstract_building_type", TID(int32_t), 0, 7, enum_traits<abstract_building_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<activity_event::T_flags>::bits[bit_count] = {
    { "dismissed", 1 },
    { "squad", 1 }
  };
  bitfield_identity identity_traits<activity_event::T_flags>::identity(sizeof(activity_event::T_flags), &activity_event::_identity, "T_flags", bitfield_traits<activity_event::T_flags>::bit_count, bitfield_traits<activity_event::T_flags>::bits);
  const char *const enum_traits<activity_event_type>::key_table[11] = {
    "TrainingSession",
    "CombatTraining",
    "SkillDemonstration",
    "IndividualSkillDrill",
    "Sparring",
    "RangedPractice",
    "Harassment",
    "Conversation",
    "Conflict",
    "Guard",
    "Reunion"
  };
  enum_identity identity_traits<activity_event_type>::identity(sizeof(activity_event_type), NULL, "activity_event_type", TID(int32_t), 0, 10, enum_traits<activity_event_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<activity_info::T_flags>::bits[bit_count] = {
    { "next_step", 1 },
    { "checked_building", 1 },
    { "add_delay", 1 },
    { "topic_discussed", 1 },
    { "meeting_done", 1 }
  };
  bitfield_identity identity_traits<activity_info::T_flags>::identity(sizeof(activity_info::T_flags), &activity_info::_identity, "T_flags", bitfield_traits<activity_info::T_flags>::bit_count, bitfield_traits<activity_info::T_flags>::bits);
  const char *const enum_traits<agreement_conclusion_reason>::key_table[42] = {
    "None",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    "Whim",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    "ShouldHaveReachedGoal",
    "InsufficientProgressTowardGoal",
    "GoingWrongDirection",
    "ArrivedAtLocation",
    "EntityNoLongerRules",
    "LeftSite",
    "ReunitedWithLovedOne",
    "ViolentDisagreement",
    "Adopted",
    NULL,
    "ArrivedAtPerson"
  };
  enum_identity identity_traits<agreement_conclusion_reason>::identity(sizeof(agreement_conclusion_reason), NULL, "agreement_conclusion_reason", TID(int32_t), 0, 41, enum_traits<agreement_conclusion_reason>::key_table,
                NULL, NULL);
  const char *const enum_traits<ammo_flags>::key_table[1] = {
    "HAS_EDGE_ATTACK"
  };
  enum_identity identity_traits<ammo_flags>::identity(sizeof(ammo_flags), NULL, "ammo_flags", TID(int32_t), 0, 0, enum_traits<ammo_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<animal_training_level>::key_table[10] = {
    "SemiWild",
    "Trained",
    "WellTrained",
    "SkilfullyTrained",
    "ExpertlyTrained",
    "ExceptionallyTrained",
    "MasterfullyTrained",
    "Domesticated",
    "Unk8",
    "WildUntamed"
  };
  enum_identity identity_traits<animal_training_level>::identity(sizeof(animal_training_level), NULL, "animal_training_level", TID(int32_t), 0, 9, enum_traits<animal_training_level>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<announcement_flags>::bits[bit_count] = {
    { "DO_MEGA", 1 },
    { "PAUSE", 1 },
    { "RECENTER", 1 },
    { "A_DISPLAY", 1 },
    { "D_DISPLAY", 1 },
    { "UNIT_COMBAT_REPORT", 1 },
    { "UNIT_COMBAT_REPORT_ALL_ACTIVE", 1 }
  };
  bitfield_identity identity_traits<announcement_flags>::identity(sizeof(announcement_flags), NULL, "announcement_flags", bitfield_traits<announcement_flags>::bit_count, bitfield_traits<announcement_flags>::bits);
  const char *const enum_traits<announcement_type>::key_table[299] = {
    "REACHED_PEAK",
    "ERA_CHANGE",
    "FEATURE_DISCOVERY",
    "STRUCK_DEEP_METAL",
    "STRUCK_MINERAL",
    "STRUCK_ECONOMIC_MINERAL",
    "COMBAT_TWIST_WEAPON",
    "COMBAT_LET_ITEM_DROP",
    "COMBAT_START_CHARGE",
    "COMBAT_SURPRISE_CHARGE",
    "COMBAT_JUMP_DODGE_PROJ",
    "COMBAT_JUMP_DODGE_STRIKE",
    "COMBAT_DODGE",
    "COMBAT_COUNTERSTRIKE",
    "COMBAT_BLOCK",
    "COMBAT_PARRY",
    "COMBAT_CHARGE_COLLISION",
    "COMBAT_CHARGE_DEFENDER_TUMBLES",
    "COMBAT_CHARGE_DEFENDER_KNOCKED_OVER",
    "COMBAT_CHARGE_ATTACKER_TUMBLES",
    "COMBAT_CHARGE_ATTACKER_BOUNCE_BACK",
    "COMBAT_CHARGE_TANGLE_TOGETHER",
    "COMBAT_CHARGE_TANGLE_TUMBLE",
    "COMBAT_CHARGE_RUSH_BY",
    "COMBAT_CHARGE_MANAGE_STOP",
    "COMBAT_CHARGE_OBSTACLE_SLAM",
    "COMBAT_WRESTLE_LOCK",
    "COMBAT_WRESTLE_CHOKEHOLD",
    "COMBAT_WRESTLE_TAKEDOWN",
    "COMBAT_WRESTLE_THROW",
    "COMBAT_WRESTLE_RELEASE_LOCK",
    "COMBAT_WRESTLE_RELEASE_CHOKE",
    "COMBAT_WRESTLE_RELEASE_GRIP",
    "COMBAT_WRESTLE_STRUGGLE",
    "COMBAT_WRESTLE_RELEASE_LATCH",
    "COMBAT_WRESTLE_STRANGLE_KO",
    "COMBAT_WRESTLE_ADJUST_GRIP",
    "COMBAT_GRAB_TEAR",
    "COMBAT_STRIKE_DETAILS",
    "COMBAT_STRIKE_DETAILS_2",
    "COMBAT_EVENT_ENRAGED",
    "COMBAT_EVENT_STUCKIN",
    "COMBAT_EVENT_LATCH_BP",
    "COMBAT_EVENT_LATCH_GENERAL",
    "COMBAT_EVENT_PROPELLED_AWAY",
    "COMBAT_EVENT_KNOCKED_OUT",
    "COMBAT_EVENT_STUNNED",
    "COMBAT_EVENT_WINDED",
    "COMBAT_EVENT_NAUSEATED",
    "MIGRANT_ARRIVAL_NAMED",
    "MIGRANT_ARRIVAL",
    "DIG_CANCEL_WARM",
    "DIG_CANCEL_DAMP",
    "AMBUSH_DEFENDER",
    "AMBUSH_RESIDENT",
    "AMBUSH_THIEF",
    "AMBUSH_THIEF_SUPPORT_SKULKING",
    "AMBUSH_THIEF_SUPPORT_NATURE",
    "AMBUSH_THIEF_SUPPORT",
    "AMBUSH_MISCHIEVOUS",
    "AMBUSH_SNATCHER",
    "AMBUSH_SNATCHER_SUPPORT",
    "AMBUSH_AMBUSHER_NATURE",
    "AMBUSH_AMBUSHER",
    "AMBUSH_INJURED",
    "AMBUSH_OTHER",
    "AMBUSH_INCAPACITATED",
    "CARAVAN_ARRIVAL",
    "NOBLE_ARRIVAL",
    "D_MIGRANTS_ARRIVAL",
    "D_MIGRANT_ARRIVAL",
    "D_MIGRANT_ARRIVAL_DISCOURAGED",
    "D_NO_MIGRANT_ARRIVAL",
    "ANIMAL_TRAP_CATCH",
    "ANIMAL_TRAP_ROBBED",
    "MISCHIEF_LEVER",
    "MISCHIEF_PLATE",
    "MISCHIEF_CAGE",
    "MISCHIEF_CHAIN",
    "DIPLOMAT_ARRIVAL",
    "LIAISON_ARRIVAL",
    "TRADE_DIPLOMAT_ARRIVAL",
    "CAVE_COLLAPSE",
    "BIRTH_CITIZEN",
    "BIRTH_ANIMAL",
    "STRANGE_MOOD",
    "MADE_ARTIFACT",
    "NAMED_ARTIFACT",
    "ITEM_ATTACHMENT",
    "VERMIN_CAGE_ESCAPE",
    "TRIGGER_WEB",
    "MOOD_BUILDING_CLAIMED",
    "ARTIFACT_BEGUN",
    "MEGABEAST_ARRIVAL",
    "BERSERK_CITIZEN",
    "MAGMA_DEFACES_ENGRAVING",
    "ENGRAVING_MELTS",
    "MASTERPIECE_ARCHITECTURE",
    "MASTERPIECE_CONSTRUCTION",
    "MASTER_ARCHITECTURE_LOST",
    "MASTER_CONSTRUCTION_LOST",
    "ADV_AWAKEN",
    "ADV_SLEEP_INTERRUPTED",
    "CANCEL_JOB",
    "ADV_CREATURE_DEATH",
    "CITIZEN_DEATH",
    "PET_DEATH",
    "ENDGAME_EVENT_1",
    "ENDGAME_EVENT_2",
    "FALL_OVER",
    "CAUGHT_IN_FLAMES",
    "CAUGHT_IN_WEB",
    "UNIT_PROJECTILE_SLAM_BLOW_APART",
    "UNIT_PROJECTILE_SLAM",
    "UNIT_PROJECTILE_SLAM_INTO_UNIT",
    "VOMIT",
    "LOSE_HOLD_OF_ITEM",
    "REGAIN_CONSCIOUSNESS",
    "FREE_FROM_WEB",
    "PARALYZED",
    "OVERCOME_PARALYSIS",
    "NOT_STUNNED",
    "EXHAUSTION",
    "PAIN_KO",
    "BREAK_GRIP",
    "NO_BREAK_GRIP",
    "BLOCK_FIRE",
    "BREATHE_FIRE",
    "SHOOT_WEB",
    "PULL_OUT_DROP",
    "STAND_UP",
    "MARTIAL_TRANCE",
    "MAT_BREATH",
    "ADV_REACTION_PRODUCTS",
    "NIGHT_ATTACK_STARTS",
    "NIGHT_ATTACK_ENDS",
    "NIGHT_ATTACK_TRAVEL",
    "GHOST_ATTACK",
    "FLAME_HIT",
    "TRAVEL_SITE_DISCOVERY",
    "TRAVEL_SITE_BUMP",
    "ADVENTURE_INTRO",
    "CREATURE_SOUND",
    "CREATURE_STEALS_OBJECT",
    "FOUND_TRAP",
    "BODY_TRANSFORMATION",
    "INTERACTION_ACTOR",
    "INTERACTION_TARGET",
    "UNDEAD_ATTACK",
    "CITIZEN_MISSING",
    "PET_MISSING",
    "EMBRACE",
    "STRANGE_RAIN_SNOW",
    "STRANGE_CLOUD",
    "SIMPLE_ANIMAL_ACTION",
    "FLOUNDER_IN_LIQUID",
    "TRAINING_DOWN_TO_SEMI_WILD",
    "TRAINING_FULL_REVERSION",
    "ANIMAL_TRAINING_KNOWLEDGE",
    "SKIP_ON_LIQUID",
    "DODGE_FLYING_OBJECT",
    "REGULAR_CONVERSATION",
    "BANDIT_EMPTY_CONTAINER",
    "BANDIT_GRAB_ITEM",
    "COMBAT_EVENT_ATTACK_INTERRUPTED",
    "COMBAT_WRESTLE_CATCH_ATTACK",
    "FAIL_TO_GRAB_SURFACE",
    "LOSE_HOLD_OF_SURFACE",
    "TRAVEL_COMPLAINT",
    "LOSE_EMOTION",
    "REORGANIZE_POSSESSIONS",
    "PUSH_ITEM",
    "DRAW_ITEM",
    "STRAP_ITEM",
    "GAIN_SITE_CONTROL",
    "CONFLICT_CONVERSATION",
    "FORT_POSITION_SUCCESSION",
    "MECHANISM_SOUND",
    "BIRTH_WILD_ANIMAL",
    "STRESSED_CITIZEN",
    "CITIZEN_LOST_TO_STRESS",
    "CITIZEN_TANTRUM",
    "MOVED_OUT_OF_RANGE",
    "CANNOT_JUMP",
    "NO_TRACKS",
    "ALREADY_SEARCHED_AREA",
    "SEARCH_FOUND_SOMETHING",
    "SEARCH_FOUND_NOTHING",
    "NOTHING_TO_INTERACT",
    "NOTHING_TO_EXAMINE",
    "YOU_YIELDED",
    "YOU_UNYIELDED",
    "YOU_STRAP_ITEM",
    "YOU_DRAW_ITEM",
    "NO_GRASP_TO_DRAW_ITEM",
    "NO_ITEM_TO_STRAP",
    "NO_INV_TO_REMOVE",
    "NO_INV_TO_WEAR",
    "NO_INV_TO_EAT",
    "NO_INV_TO_CONTAIN",
    "NO_INV_TO_DROP",
    "NOTHING_TO_PICK_UP",
    "NO_INV_TO_THROW",
    "NO_INV_TO_FIRE",
    "CURRENT_SMELL",
    "CURRENT_WEATHER",
    "CURRENT_TEMPERATURE",
    "CURRENT_DATE",
    "NO_GRASP_FOR_PICKUP",
    "TRAVEL_ADVISORY",
    "CANNOT_CLIMB",
    "CANNOT_STAND",
    "MUST_UNRETRACT_FIRST",
    "CANNOT_REST",
    "CANNOT_MAKE_CAMPFIRE",
    "MADE_CAMPFIRE",
    "CANNOT_SET_FIRE",
    "SET_FIRE",
    "DAWN_BREAKS",
    "NOON",
    "NIGHTFALL",
    "NO_INV_INTERACTION",
    "EMPTY_CONTAINER",
    "TAKE_OUT_OF_CONTAINER",
    "NO_CONTAINER_FOR_ITEM",
    "PUT_INTO_CONTAINER",
    "EAT_ITEM",
    "DRINK_ITEM",
    "CONSUME_FAILURE",
    "DROP_ITEM",
    "PICK_UP_ITEM",
    "YOU_BUILDING_INTERACTION",
    "YOU_ITEM_INTERACTION",
    "YOU_TEMPERATURE_EFFECTS",
    "PROFESSION_CHANGES",
    "RECRUIT_PROMOTED",
    "SOLDIER_BECOMES_MASTER",
    "RESOLVE_SHARED_ITEMS",
    "COUGH_BLOOD",
    "VOMIT_BLOOD",
    "MERCHANTS_UNLOADING",
    "MERCHANTS_NEED_DEPOT",
    "MERCHANT_WAGONS_BYPASSED",
    "MERCHANTS_LEAVING_SOON",
    "MERCHANTS_EMBARKED",
    "PET_LOSES_DEAD_OWNER",
    "PET_ADOPTS_OWNER",
    "VERMIN_BITE",
    "UNABLE_TO_COMPLETE_BUILDING",
    "JOBS_REMOVED_FROM_UNPOWERED_BUILDING",
    "CITIZEN_SNATCHED",
    "VERMIN_DISTURBED",
    "LAND_GAINS_STATUS",
    "LAND_ELEVATED_STATUS",
    "MASTERPIECE_CRAFTED",
    "ARTWORK_DEFACED",
    "POWER_LEARNED",
    "YOU_FEED_ON_SUCKEE",
    "ANIMAL_TRAINED",
    "DYED_MASTERPIECE",
    "COOKED_MASTERPIECE",
    "MANDATE_ENDS",
    "SLOWDOWN_ENDS",
    "FAREWELL_HELPER",
    "ELECTION_RESULTS",
    "SITE_PRESENT",
    "CONSTRUCTION_SUSPENDED",
    "LINKAGE_SUSPENDED",
    "QUOTA_FILLED",
    "JOB_OVERWRITTEN",
    "NOTHING_TO_CATCH_IN_WATER",
    "DEMAND_FORGOTTEN",
    "NEW_DEMAND",
    "NEW_MANDATE",
    "PRICES_ALTERED",
    "NAMED_RESIDENT_CREATURE",
    "SOMEBODY_GROWS_UP",
    "GUILD_REQUEST_TAKEN",
    "GUILD_WAGES_CHANGED",
    "NEW_WORK_MANDATE",
    "CITIZEN_BECOMES_SOLDIER",
    "CITIZEN_BECOMES_NONSOLDIER",
    "PARTY_ORGANIZED",
    "POSSESSED_TANTRUM",
    "BUILDING_TOPPLED_BY_GHOST",
    "MASTERFUL_IMPROVEMENT",
    "MASTERPIECE_ENGRAVING",
    "MARRIAGE",
    "NO_MARRIAGE_CELEBRATION",
    "CURIOUS_GUZZLER",
    "WEATHER_BECOMES_CLEAR",
    "WEATHER_BECOMES_SNOW",
    "WEATHER_BECOMES_RAIN",
    "SEASON_WET",
    "SEASON_DRY",
    "SEASON_SPRING",
    "SEASON_SUMMER",
    "SEASON_AUTUMN",
    "SEASON_WINTER"
  };
  enum_identity identity_traits<announcement_type>::identity(sizeof(announcement_type), NULL, "announcement_type", TID(int16_t), 0, 298, enum_traits<announcement_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<appearance_modifier_type>::key_table[24] = {
    "HEIGHT",
    "BROADNESS",
    "LENGTH",
    "CLOSE_SET",
    "DEEP_SET",
    "HIGH_POSITION",
    "LARGE_IRIS",
    "WRINKLY",
    "CURLY",
    "CONVEX",
    "DENSE",
    "THICKNESS",
    "UPTURNED",
    "SPLAYED_OUT",
    "HANGING_LOBES",
    "GAPS",
    "HIGH_CHEEKBONES",
    "BROAD_CHIN",
    "JUTTING_CHIN",
    "SQUARE_CHIN",
    "ROUND_VS_NARROW",
    "GREASY",
    "DEEP_VOICE",
    "RASPY_VOICE"
  };
  enum_identity identity_traits<appearance_modifier_type>::identity(sizeof(appearance_modifier_type), NULL, "appearance_modifier_type", TID(int16_t), 0, 23, enum_traits<appearance_modifier_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<armor_flags>::key_table[1] = {
    "METAL_ARMOR_LEVELS"
  };
  enum_identity identity_traits<armor_flags>::identity(sizeof(armor_flags), NULL, "armor_flags", TID(int32_t), 0, 0, enum_traits<armor_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<armor_general_flags>::key_table[11] = {
    "SOFT",
    "HARD",
    "METAL",
    "BARRED",
    "SCALED",
    "LEATHER",
    "SHAPED",
    "CHAIN_METAL_TEXT",
    "STRUCTURAL_ELASTICITY_WOVEN_THREAD",
    "STRUCTURAL_ELASTICITY_CHAIN_METAL",
    "STRUCTURAL_ELASTICITY_CHAIN_ALL"
  };
  enum_identity identity_traits<armor_general_flags>::identity(sizeof(armor_general_flags), NULL, "armor_general_flags", TID(int32_t), 0, 10, enum_traits<armor_general_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<art_facet_type>::key_table[4] = {
    "OWN_RACE",
    "FANCIFUL",
    "GOOD",
    "EVIL"
  };
  enum_identity identity_traits<art_facet_type>::identity(sizeof(art_facet_type), NULL, "art_facet_type", TID(int32_t), 0, 3, enum_traits<art_facet_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<art_image_element_type>::key_table[5] = {
    "CREATURE",
    "PLANT",
    "TREE",
    "SHAPE",
    "ITEM"
  };
  enum_identity identity_traits<art_image_element_type>::identity(sizeof(art_image_element_type), NULL, "art_image_element_type", TID(int32_t), 0, 4, enum_traits<art_image_element_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<art_image_property_type>::key_table[2] = {
    "transitive_verb",
    "intransitive_verb"
  };
  enum_identity identity_traits<art_image_property_type>::identity(sizeof(art_image_property_type), NULL, "art_image_property_type", TID(int32_t), 0, 1, enum_traits<art_image_property_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<art_image_property_verb>::key_table[48] = {
    "Withering",
    "SurroundedBy",
    "Massacring",
    "Fighting",
    "Laboring",
    "Greeting",
    "Refusing",
    "Speaking",
    "Embracing",
    "StrikingDown",
    "MenacingPose",
    "Traveling",
    "Raising",
    "Hiding",
    "LookingConfused",
    "LookingTerrified",
    "Devouring",
    "Admiring",
    "Burning",
    "Weeping",
    "LookingDejected",
    "Cringing",
    "Screaming",
    "SubmissiveGesture",
    "FetalPosition",
    "SmearedIntoSpiral",
    "Falling",
    "Dead",
    "Laughing",
    "LookingOffended",
    "BeingShot",
    "PlaintiveGesture",
    "Melting",
    "Shooting",
    "Torturing",
    "CommittingDepravedAct",
    "Praying",
    "Contemplating",
    "Cooking",
    "Engraving",
    "Prostrating",
    "Suffering",
    "BeingImpaled",
    "BeingContorted",
    "BeingFlayed",
    "HangingFrom",
    "BeingMutilated",
    "TriumphantPose"
  };
  enum_identity identity_traits<art_image_property_verb>::identity(sizeof(art_image_property_verb), NULL, "art_image_property_verb", TID(int16_t), 0, 47, enum_traits<art_image_property_verb>::key_table,
                NULL, NULL);
  const char *const enum_traits<assign_trade_status::T_status>::key_table[6] = {
    "RemoveTrading",
    "RemovePending",
    "None",
    "AddPending",
    "Pending",
    "Trading"
  };
  enum_identity identity_traits<assign_trade_status::T_status>::identity(sizeof(assign_trade_status::T_status), &assign_trade_status::_identity, "T_status", TID(int8_t), -2, 3, enum_traits<assign_trade_status::T_status>::key_table,
                NULL, NULL);
  const char *const enum_traits<barrack_preference_category>::key_table[4] = {
    "Bed",
    "Armorstand",
    "Box",
    "Cabinet"
  };
  enum_identity identity_traits<barrack_preference_category>::identity(sizeof(barrack_preference_category), NULL, "barrack_preference_category", TID(int32_t), 0, 3, enum_traits<barrack_preference_category>::key_table,
                NULL, NULL);
  const char *const enum_traits<biome_type>::key_table[51] = {
    "MOUNTAIN",
    "GLACIER",
    "TUNDRA",
    "SWAMP_TEMPERATE_FRESHWATER",
    "SWAMP_TEMPERATE_SALTWATER",
    "MARSH_TEMPERATE_FRESHWATER",
    "MARSH_TEMPERATE_SALTWATER",
    "SWAMP_TROPICAL_FRESHWATER",
    "SWAMP_TROPICAL_SALTWATER",
    "SWAMP_MANGROVE",
    "MARSH_TROPICAL_FRESHWATER",
    "MARSH_TROPICAL_SALTWATER",
    "FOREST_TAIGA",
    "FOREST_TEMPERATE_CONIFER",
    "FOREST_TEMPERATE_BROADLEAF",
    "FOREST_TROPICAL_CONIFER",
    "FOREST_TROPICAL_DRY_BROADLEAF",
    "FOREST_TROPICAL_MOIST_BROADLEAF",
    "GRASSLAND_TEMPERATE",
    "SAVANNA_TEMPERATE",
    "SHRUBLAND_TEMPERATE",
    "GRASSLAND_TROPICAL",
    "SAVANNA_TROPICAL",
    "SHRUBLAND_TROPICAL",
    "DESERT_BADLAND",
    "DESERT_ROCK",
    "DESERT_SAND",
    "OCEAN_TROPICAL",
    "OCEAN_TEMPERATE",
    "OCEAN_ARCTIC",
    "POOL_TEMPERATE_FRESHWATER",
    "POOL_TEMPERATE_BRACKISHWATER",
    "POOL_TEMPERATE_SALTWATER",
    "POOL_TROPICAL_FRESHWATER",
    "POOL_TROPICAL_BRACKISHWATER",
    "POOL_TROPICAL_SALTWATER",
    "LAKE_TEMPERATE_FRESHWATER",
    "LAKE_TEMPERATE_BRACKISHWATER",
    "LAKE_TEMPERATE_SALTWATER",
    "LAKE_TROPICAL_FRESHWATER",
    "LAKE_TROPICAL_BRACKISHWATER",
    "LAKE_TROPICAL_SALTWATER",
    "RIVER_TEMPERATE_FRESHWATER",
    "RIVER_TEMPERATE_BRACKISHWATER",
    "RIVER_TEMPERATE_SALTWATER",
    "RIVER_TROPICAL_FRESHWATER",
    "RIVER_TROPICAL_BRACKISHWATER",
    "RIVER_TROPICAL_SALTWATER",
    "SUBTERRANEAN_WATER",
    "SUBTERRANEAN_CHASM",
    "SUBTERRANEAN_LAVA"
  };
  enum_identity identity_traits<biome_type>::identity(sizeof(biome_type), NULL, "biome_type", TID(int32_t), 0, 50, enum_traits<biome_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<block_flags>::bits[bit_count] = {
    { "designated", 1 },
    { "update_temperature", 1 },
    { "update_liquid", 1 },
    { "update_liquid_twice", 1 },
    { "repath_on_freeze", 1 },
    { "repath_on_melt", 1 },
    { "has_aquifer", 1 },
    { "check_aquifer", 1 }
  };
  bitfield_identity identity_traits<block_flags>::identity(sizeof(block_flags), NULL, "block_flags", bitfield_traits<block_flags>::bit_count, bitfield_traits<block_flags>::bits);
  const bitfield_item_info bitfield_traits<block_square_event_mineralst::T_flags>::bits[bit_count] = {
    { "discovered", 1 },
    { "cluster", 1 },
    { "vein", 1 },
    { "cluster_small", 1 },
    { "cluster_one", 1 }
  };
  bitfield_identity identity_traits<block_square_event_mineralst::T_flags>::identity(sizeof(block_square_event_mineralst::T_flags), &block_square_event_mineralst::_identity, "T_flags", bitfield_traits<block_square_event_mineralst::T_flags>::bit_count, bitfield_traits<block_square_event_mineralst::T_flags>::bits);
  const char *const enum_traits<block_square_event_type>::key_table[8] = {
    "mineral",
    "frozen_liquid",
    "world_construction",
    "material_spatter",
    "grass",
    "spoor",
    "item_spatter",
    "designation_priority"
  };
  enum_identity identity_traits<block_square_event_type>::identity(sizeof(block_square_event_type), NULL, "block_square_event_type", TID(int32_t), 0, 7, enum_traits<block_square_event_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<body_layer_status>::bits[bit_count] = {
    { "gone", 1 },
    { "leaking", 1 }
  };
  bitfield_identity identity_traits<body_layer_status>::identity(sizeof(body_layer_status), NULL, "body_layer_status", bitfield_traits<body_layer_status>::bit_count, bitfield_traits<body_layer_status>::bits);
  const char *const enum_traits<body_part_layer_flags>::key_table[1] = {
    "CONNECTS"
  };
  enum_identity identity_traits<body_part_layer_flags>::identity(sizeof(body_part_layer_flags), NULL, "body_part_layer_flags", TID(int32_t), 0, 0, enum_traits<body_part_layer_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<body_part_raw_flags>::key_table[34] = {
    "HEAD",
    "UPPERBODY",
    "LOWERBODY",
    "SIGHT",
    "EMBEDDED",
    "INTERNAL",
    "CIRCULATION",
    "SKELETON",
    "LIMB",
    "GRASP",
    "STANCE",
    "GUTS",
    "BREATHE",
    "SMALL",
    "THROAT",
    "JOINT",
    "THOUGHT",
    "NERVOUS",
    "RIGHT",
    "LEFT",
    "HEAR",
    "SMELL",
    "FLIER",
    "DIGIT",
    "MOUTH",
    "APERTURE",
    "SOCKET",
    "TOTEMABLE",
    NULL,
    NULL,
    "UNDER_PRESSURE",
    NULL,
    "VERMIN_BUTCHER_ITEM",
    "CONNECTOR"
  };
  enum_identity identity_traits<body_part_raw_flags>::identity(sizeof(body_part_raw_flags), NULL, "body_part_raw_flags", TID(int32_t), 0, 33, enum_traits<body_part_raw_flags>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<body_part_status>::bits[bit_count] = {
    { "on_fire", 1 },
    { "missing", 1 },
    { "organ_loss", 1 },
    { "organ_damage", 1 },
    { "muscle_loss", 1 },
    { "muscle_damage", 1 },
    { "bone_loss", 1 },
    { "bone_damage", 1 },
    { "skin_damage", 1 },
    { "motor_nerve_severed", 1 },
    { "sensory_nerve_severed", 1 },
    { "spilled_guts", 1 },
    { "has_splint", 1 },
    { "has_bandage", 1 },
    { "has_plaster_cast", 1 },
    { "grime", 3 },
    { NULL, -1 },
    { NULL, -2 },
    { "severed_or_jammed", 1 },
    { "under_shell", 1 },
    { "is_shell", 1 },
    { "unk19", 1 },
    { "unk20", 1 }
  };
  bitfield_identity identity_traits<body_part_status>::identity(sizeof(body_part_status), NULL, "body_part_status", bitfield_traits<body_part_status>::bit_count, bitfield_traits<body_part_status>::bits);
  const char *const enum_traits<body_part_template_contype>::key_table[5] = {
    "UPPERBODY",
    "LOWERBODY",
    "HEAD",
    "GRASP",
    "STANCE"
  };
  enum_identity identity_traits<body_part_template_contype>::identity(sizeof(body_part_template_contype), NULL, "body_part_template_contype", TID(int16_t), 0, 4, enum_traits<body_part_template_contype>::key_table,
                NULL, NULL);
  const char *const enum_traits<body_part_template_flags>::key_table[31] = {
    "HEAD",
    "UPPERBODY",
    "LOWERBODY",
    "SIGHT",
    "EMBEDDED",
    "INTERNAL",
    "CIRCULATION",
    "SKELETON",
    "LIMB",
    "GRASP",
    "STANCE",
    "GUTS",
    "BREATHE",
    "SMALL",
    "THROAT",
    "JOINT",
    "THOUGHT",
    "NERVOUS",
    "RIGHT",
    "LEFT",
    "HEAR",
    "SMELL",
    "FLIER",
    "DIGIT",
    "MOUTH",
    "APERTURE",
    "SOCKET",
    "TOTEMABLE",
    "UNDER_PRESSURE",
    "VERMIN_BUTCHER_ITEM",
    "CONNECTOR"
  };
  enum_identity identity_traits<body_part_template_flags>::identity(sizeof(body_part_template_flags), NULL, "body_part_template_flags", TID(int32_t), 0, 30, enum_traits<body_part_template_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<breath_attack_type>::key_table[20] = {
    "TRAILING_DUST_FLOW",
    "TRAILING_VAPOR_FLOW",
    "TRAILING_GAS_FLOW",
    "SOLID_GLOB",
    "LIQUID_GLOB",
    "UNDIRECTED_GAS",
    "UNDIRECTED_VAPOR",
    "UNDIRECTED_DUST",
    "WEB_SPRAY",
    "DRAGONFIRE",
    "FIREJET",
    "FIREBALL",
    "WEATHER_CREEPING_GAS",
    "WEATHER_CREEPING_VAPOR",
    "WEATHER_CREEPING_DUST",
    "WEATHER_FALLING_MATERIAL",
    "SPATTER_POWDER",
    "SPATTER_LIQUID",
    "UNDIRECTED_ITEM_CLOUD",
    "TRAILING_ITEM_FLOW"
  };
  enum_identity identity_traits<breath_attack_type>::identity(sizeof(breath_attack_type), NULL, "breath_attack_type", TID(int16_t), 0, 19, enum_traits<breath_attack_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<build_req_choice_type>::key_table[2] = {
    "General",
    "Specific"
  };
  enum_identity identity_traits<build_req_choice_type>::identity(sizeof(build_req_choice_type), NULL, "build_req_choice_type", TID(int32_t), 0, 1, enum_traits<build_req_choice_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<building_archerytargetst::T_archery_direction>::key_table[4] = {
    "TopToBottom",
    "BottomToTop",
    "LeftToRight",
    "RightToLeft"
  };
  enum_identity identity_traits<building_archerytargetst::T_archery_direction>::identity(sizeof(building_archerytargetst::T_archery_direction), &building_archerytargetst::_identity, "T_archery_direction", TID(int8_t), 0, 3, enum_traits<building_archerytargetst::T_archery_direction>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<building_bedst::T_anon_1>::bits[bit_count] = {
    { "barracks", 1 },
    { "dormitory", 1 }
  };
  bitfield_identity identity_traits<building_bedst::T_anon_1>::identity(sizeof(building_bedst::T_anon_1), &building_bedst::_identity, "T_anon_1", bitfield_traits<building_bedst::T_anon_1>::bit_count, bitfield_traits<building_bedst::T_anon_1>::bits);
  const char *const enum_traits<building_bridgest::T_direction>::key_table[5] = {
    "Retracting",
    "Left",
    "Right",
    "Up",
    "Down"
  };
  enum_identity identity_traits<building_bridgest::T_direction>::identity(sizeof(building_bridgest::T_direction), &building_bridgest::_identity, "T_direction", TID(int8_t), -1, 3, enum_traits<building_bridgest::T_direction>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<building_cagest::T_cage_flags>::bits[bit_count] = {
    { "triggered", 1 }
  };
  bitfield_identity identity_traits<building_cagest::T_cage_flags>::identity(sizeof(building_cagest::T_cage_flags), &building_cagest::_identity, "T_cage_flags", bitfield_traits<building_cagest::T_cage_flags>::bit_count, bitfield_traits<building_cagest::T_cage_flags>::bits);
  const bitfield_item_info bitfield_traits<building_chainst::T_chain_flags>::bits[bit_count] = {
    { "triggered", 1 }
  };
  bitfield_identity identity_traits<building_chainst::T_chain_flags>::identity(sizeof(building_chainst::T_chain_flags), &building_chainst::_identity, "T_chain_flags", bitfield_traits<building_chainst::T_chain_flags>::bit_count, bitfield_traits<building_chainst::T_chain_flags>::bits);
  const bitfield_item_info bitfield_traits<building_civzonest::T_zone_flags>::bits[bit_count] = {
    { "water_source", 1 },
    { "garbage_dump", 1 },
    { "sand", 1 },
    { "active", 1 },
    { "fishing", 1 },
    { "pit_pond", 1 },
    { "meeting_area", 1 },
    { "hospital", 1 },
    { "pen_pasture", 1 },
    { "clay", 1 },
    { "animal_training", 1 },
    { "gather", 1 }
  };
  bitfield_identity identity_traits<building_civzonest::T_zone_flags>::identity(sizeof(building_civzonest::T_zone_flags), &building_civzonest::_identity, "T_zone_flags", bitfield_traits<building_civzonest::T_zone_flags>::bit_count, bitfield_traits<building_civzonest::T_zone_flags>::bits);
  const bitfield_item_info bitfield_traits<building_civzonest::T_pit_flags>::bits[bit_count] = {
    { "is_pond", 1 },
    { NULL, 1 }
  };
  bitfield_identity identity_traits<building_civzonest::T_pit_flags>::identity(sizeof(building_civzonest::T_pit_flags), &building_civzonest::_identity, "T_pit_flags", bitfield_traits<building_civzonest::T_pit_flags>::bit_count, bitfield_traits<building_civzonest::T_pit_flags>::bits);
  const bitfield_item_info bitfield_traits<building_civzonest::T_gather_flags>::bits[bit_count] = {
    { "pick_trees", 1 },
    { "pick_shrubs", 1 },
    { "gather_fallen", 1 }
  };
  bitfield_identity identity_traits<building_civzonest::T_gather_flags>::identity(sizeof(building_civzonest::T_gather_flags), &building_civzonest::_identity, "T_gather_flags", bitfield_traits<building_civzonest::T_gather_flags>::bit_count, bitfield_traits<building_civzonest::T_gather_flags>::bits);
  const bitfield_item_info bitfield_traits<building_coffinst::T_burial_mode>::bits[bit_count] = {
    { "allow_burial", 1 },
    { "no_pets", 1 },
    { "no_citizens", 1 }
  };
  bitfield_identity identity_traits<building_coffinst::T_burial_mode>::identity(sizeof(building_coffinst::T_burial_mode), &building_coffinst::_identity, "T_burial_mode", bitfield_traits<building_coffinst::T_burial_mode>::bit_count, bitfield_traits<building_coffinst::T_burial_mode>::bits);
  const bitfield_item_info bitfield_traits<building_design::T_flags>::bits[bit_count] = {
    { "rough", 1 },
    { "built", 1 },
    { "designed", 1 }
  };
  bitfield_identity identity_traits<building_design::T_flags>::identity(sizeof(building_design::T_flags), &building_design::_identity, "T_flags", bitfield_traits<building_design::T_flags>::bit_count, bitfield_traits<building_design::T_flags>::bits);
  const bitfield_item_info bitfield_traits<building_flags>::bits[bit_count] = {
    { "exists", 1 },
    { "site_blocked", 1 },
    { "room_collision", 1 },
    { NULL, 1 },
    { "justice", 1 },
    { "almost_deleted", 1 },
    { "in_update", 1 },
    { "from_worldgen", 1 }
  };
  bitfield_identity identity_traits<building_flags>::identity(sizeof(building_flags), NULL, "building_flags", bitfield_traits<building_flags>::bit_count, bitfield_traits<building_flags>::bits);
  const bitfield_item_info bitfield_traits<building_gear_assemblyst::T_gear_flags>::bits[bit_count] = {
    { "disengaged", 1 }
  };
  bitfield_identity identity_traits<building_gear_assemblyst::T_gear_flags>::identity(sizeof(building_gear_assemblyst::T_gear_flags), &building_gear_assemblyst::_identity, "T_gear_flags", bitfield_traits<building_gear_assemblyst::T_gear_flags>::bit_count, bitfield_traits<building_gear_assemblyst::T_gear_flags>::bits);
  const bitfield_item_info bitfield_traits<building_shopst::T_shop_flags>::bits[bit_count] = {
    { "for_sale", 1 }
  };
  bitfield_identity identity_traits<building_shopst::T_shop_flags>::identity(sizeof(building_shopst::T_shop_flags), &building_shopst::_identity, "T_shop_flags", bitfield_traits<building_shopst::T_shop_flags>::bit_count, bitfield_traits<building_shopst::T_shop_flags>::bits);
  const char *const enum_traits<building_siegeenginest::T_facing>::key_table[4] = {
    "Left",
    "Up",
    "Right",
    "Down"
  };
  enum_identity identity_traits<building_siegeenginest::T_facing>::identity(sizeof(building_siegeenginest::T_facing), &building_siegeenginest::_identity, "T_facing", TID(int8_t), 0, 3, enum_traits<building_siegeenginest::T_facing>::key_table,
                NULL, NULL);
  const char *const enum_traits<building_siegeenginest::T_action>::key_table[3] = {
    "NotInUse",
    "PrepareToFire",
    "FireAtWill"
  };
  enum_identity identity_traits<building_siegeenginest::T_action>::identity(sizeof(building_siegeenginest::T_action), &building_siegeenginest::_identity, "T_action", TID(int8_t), 0, 2, enum_traits<building_siegeenginest::T_action>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<building_supportst::T_support_flags>::bits[bit_count] = {
    { "triggered", 1 }
  };
  bitfield_identity identity_traits<building_supportst::T_support_flags>::identity(sizeof(building_supportst::T_support_flags), &building_supportst::_identity, "T_support_flags", bitfield_traits<building_supportst::T_support_flags>::bit_count, bitfield_traits<building_supportst::T_support_flags>::bits);
  const bitfield_item_info bitfield_traits<building_tablest::T_table_flags>::bits[bit_count] = {
    { "meeting_hall", 1 }
  };
  bitfield_identity identity_traits<building_tablest::T_table_flags>::identity(sizeof(building_tablest::T_table_flags), &building_tablest::_identity, "T_table_flags", bitfield_traits<building_tablest::T_table_flags>::bit_count, bitfield_traits<building_tablest::T_table_flags>::bits);
  const bitfield_item_info bitfield_traits<building_tradedepotst::T_trade_flags>::bits[bit_count] = {
    { "trader_requested", 1 },
    { "anyone_can_trade", 1 }
  };
  bitfield_identity identity_traits<building_tradedepotst::T_trade_flags>::identity(sizeof(building_tradedepotst::T_trade_flags), &building_tradedepotst::_identity, "T_trade_flags", bitfield_traits<building_tradedepotst::T_trade_flags>::bit_count, bitfield_traits<building_tradedepotst::T_trade_flags>::bits);
  const bitfield_item_info bitfield_traits<building_trapst::T_stop_flags>::bits[bit_count] = {
    { "disabled", 1 },
    { "disabling", 1 },
    { "enabling", 1 }
  };
  bitfield_identity identity_traits<building_trapst::T_stop_flags>::identity(sizeof(building_trapst::T_stop_flags), &building_trapst::_identity, "T_stop_flags", bitfield_traits<building_trapst::T_stop_flags>::bit_count, bitfield_traits<building_trapst::T_stop_flags>::bits);
  const char *const enum_traits<building_type>::key_table[52] = {
    "NONE",
    "Chair",
    "Bed",
    "Table",
    "Coffin",
    "FarmPlot",
    "Furnace",
    "TradeDepot",
    "Shop",
    "Door",
    "Floodgate",
    "Box",
    "Weaponrack",
    "Armorstand",
    "Workshop",
    "Cabinet",
    "Statue",
    "WindowGlass",
    "WindowGem",
    "Well",
    "Bridge",
    "RoadDirt",
    "RoadPaved",
    "SiegeEngine",
    "Trap",
    "AnimalTrap",
    "Support",
    "ArcheryTarget",
    "Chain",
    "Cage",
    "Stockpile",
    "Civzone",
    "Weapon",
    "Wagon",
    "ScrewPump",
    "Construction",
    "Hatch",
    "GrateWall",
    "GrateFloor",
    "BarsVertical",
    "BarsFloor",
    "GearAssembly",
    "AxleHorizontal",
    "AxleVertical",
    "WaterWheel",
    "Windmill",
    "TractionBench",
    "Slab",
    "Nest",
    "NestBox",
    "Hive",
    "Rollers"
  };
  const enum_traits<building_type>::attr_entry_type enum_traits<building_type>::attr_table[52+1] = {
    { NULL },
    { "building_chairst" },
    { "building_bedst" },
    { "building_tablest" },
    { "building_coffinst" },
    { "building_farmplotst" },
    { "building_furnacest" },
    { "building_tradedepotst" },
    { "building_shopst" },
    { "building_doorst" },
    { "building_floodgatest" },
    { "building_boxst" },
    { "building_weaponrackst" },
    { "building_armorstandst" },
    { "building_workshopst" },
    { "building_cabinetst" },
    { "building_statuest" },
    { "building_window_glassst" },
    { "building_window_gemst" },
    { "building_wellst" },
    { "building_bridgest" },
    { "building_road_dirtst" },
    { "building_road_pavedst" },
    { "building_siegeenginest" },
    { "building_trapst" },
    { "building_animaltrapst" },
    { "building_supportst" },
    { "building_archerytargetst" },
    { "building_chainst" },
    { "building_cagest" },
    { "building_stockpilest" },
    { "building_civzonest" },
    { "building_weaponst" },
    { "building_wagonst" },
    { "building_screw_pumpst" },
    { "building_constructionst" },
    { "building_hatchst" },
    { "building_grate_wallst" },
    { "building_grate_floorst" },
    { "building_bars_verticalst" },
    { "building_bars_floorst" },
    { "building_gear_assemblyst" },
    { "building_axle_horizontalst" },
    { "building_axle_verticalst" },
    { "building_water_wheelst" },
    { "building_windmillst" },
    { "building_traction_benchst" },
    { "building_slabst" },
    { "building_nestst" },
    { "building_nest_boxst" },
    { "building_hivest" },
    { "building_rollersst" },
    { NULL }
  };
  const enum_traits<building_type>::attr_entry_type & enum_traits<building_type>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[52];
  }
  enum_identity identity_traits<building_type>::identity(sizeof(building_type), NULL, "building_type", TID(int32_t), -1, 50, enum_traits<building_type>::key_table,
                enum_traits<building_type>::attr_table, &enum_traits<building_type>::attr_entry_type::_identity);
  const bitfield_item_info bitfield_traits<building_wellst::T_well_flags>::bits[bit_count] = {
    { "lowering", 1 },
    { "just_raised", 1 }
  };
  bitfield_identity identity_traits<building_wellst::T_well_flags>::identity(sizeof(building_wellst::T_well_flags), &building_wellst::_identity, "T_well_flags", bitfield_traits<building_wellst::T_well_flags>::bit_count, bitfield_traits<building_wellst::T_well_flags>::bits);
  const char *const enum_traits<buildings_other_id>::key_table[88] = {
    "ANY",
    "IN_PLAY",
    "STOCKPILE",
    "ANY_ZONE",
    "ACTIVITY_ZONE",
    "ANY_ACTUAL",
    "ANY_MACHINE",
    "ANY_HOSPITAL_STORAGE",
    "ANY_STORAGE",
    "ANY_BARRACKS",
    "ANY_NOBLE_ROOM",
    "ANY_HOSPITAL",
    "BOX",
    "CABINET",
    "TRAP",
    "DOOR",
    "FLOODGATE",
    "HATCH",
    "GRATE_WALL",
    "GRATE_FLOOR",
    "BARS_VERTICAL",
    "BARS_FLOOR",
    "WINDOW_ANY",
    "WELL",
    "TABLE",
    "BRIDGE",
    "CHAIR",
    "TRADE_DEPOT",
    "NEST",
    "NEST_BOX",
    "HIVE",
    "WAGON",
    "SHOP",
    "BED",
    "TRACTION_BENCH",
    "ANY_ROAD",
    "FARM_PLOT",
    "GEAR_ASSEMBLY",
    "ROLLERS",
    "AXLE_HORIZONTAL",
    "AXLE_VERTICAL",
    "SUPPORT",
    "ARCHERY_TARGET",
    "SCREW_PUMP",
    "WATER_WHEEL",
    "WINDMILL",
    "CHAIN",
    "CAGE",
    "STATUE",
    "SLAB",
    "COFFIN",
    "WEAPON_RACK",
    "ARMOR_STAND",
    "FURNACE_ANY",
    "FURNACE_WOOD",
    "FURNACE_SMELTER_ANY",
    "FURNACE_SMELTER_MAGMA",
    "FURNACE_KILN_ANY",
    "FURNACE_GLASS_ANY",
    "FURNACE_CUSTOM",
    "WORKSHOP_ANY",
    "WORKSHOP_BUTCHER",
    "WORKSHOP_MASON",
    "WORKSHOP_KENNEL",
    "WORKSHOP_FISHERY",
    "WORKSHOP_JEWELER",
    "WORKSHOP_LOOM",
    "WORKSHOP_TANNER",
    "WORKSHOP_DYER",
    "WORKSHOP_MILL_ANY",
    "WORKSHOP_QUERN",
    "WORKSHOP_TOOL",
    "WORKSHOP_MILLSTONE",
    "WORKSHOP_KITCHEN",
    "WORKSHOP_STILL",
    "WORKSHOP_FARMER",
    "WORKSHOP_ASHERY",
    "WORKSHOP_CARPENTER",
    "WORKSHOP_CRAFTSDWARF",
    "WORKSHOP_MECHANIC",
    "WORKSHOP_SIEGE",
    "WORKSHOP_CLOTHIER",
    "WORKSHOP_LEATHER",
    "WORKSHOP_BOWYER",
    "WORKSHOP_MAGMA_FORGE",
    "WORKSHOP_FORGE_ANY",
    "WORKSHOP_CUSTOM",
    "WEAPON_UPRIGHT"
  };
  static const df::civzone_type _list_items_0[] = { civzone_type::ActivityZone };
  static const df::building_type _list_items_1[] = { building_type::ScrewPump, building_type::GearAssembly, building_type::AxleHorizontal, building_type::AxleVertical, building_type::WaterWheel, building_type::Windmill, building_type::Workshop };
  static const df::workshop_type _list_items_2[] = { workshop_type::Millstone };
  static const df::building_type _list_items_3[] = { building_type::Box, building_type::Cabinet };
  static const df::building_type _list_items_4[] = { building_type::Box, building_type::Cabinet, building_type::Weaponrack, building_type::Armorstand };
  static const df::building_type _list_items_5[] = { building_type::Bed, building_type::Box, building_type::Cabinet, building_type::Weaponrack, building_type::Armorstand };
  static const df::building_type _list_items_6[] = { building_type::Chair, building_type::Bed, building_type::Table, building_type::Coffin };
  static const df::building_type _list_items_7[] = { building_type::Bed, building_type::TractionBench };
  static const df::building_type _list_items_8[] = { building_type::WindowGlass, building_type::WindowGem };
  static const df::building_type _list_items_9[] = { building_type::RoadDirt, building_type::RoadPaved };
  static const df::furnace_type _list_items_10[] = { furnace_type::WoodFurnace };
  static const df::furnace_type _list_items_11[] = { furnace_type::Smelter, furnace_type::MagmaSmelter };
  static const df::furnace_type _list_items_12[] = { furnace_type::MagmaSmelter };
  static const df::furnace_type _list_items_13[] = { furnace_type::Kiln, furnace_type::MagmaKiln };
  static const df::furnace_type _list_items_14[] = { furnace_type::GlassFurnace, furnace_type::MagmaGlassFurnace };
  static const df::furnace_type _list_items_15[] = { furnace_type::Custom };
  static const df::workshop_type _list_items_16[] = { workshop_type::Butchers };
  static const df::workshop_type _list_items_17[] = { workshop_type::Masons };
  static const df::workshop_type _list_items_18[] = { workshop_type::Kennels };
  static const df::workshop_type _list_items_19[] = { workshop_type::Fishery };
  static const df::workshop_type _list_items_20[] = { workshop_type::Jewelers };
  static const df::workshop_type _list_items_21[] = { workshop_type::Loom };
  static const df::workshop_type _list_items_22[] = { workshop_type::Tanners };
  static const df::workshop_type _list_items_23[] = { workshop_type::Dyers };
  static const df::workshop_type _list_items_24[] = { workshop_type::Quern, workshop_type::Millstone };
  static const df::workshop_type _list_items_25[] = { workshop_type::Quern };
  static const df::workshop_type _list_items_26[] = { workshop_type::Tool };
  static const df::workshop_type _list_items_27[] = { workshop_type::Millstone };
  static const df::workshop_type _list_items_28[] = { workshop_type::Kitchen };
  static const df::workshop_type _list_items_29[] = { workshop_type::Still };
  static const df::workshop_type _list_items_30[] = { workshop_type::Farmers };
  static const df::workshop_type _list_items_31[] = { workshop_type::Ashery };
  static const df::workshop_type _list_items_32[] = { workshop_type::Carpenters };
  static const df::workshop_type _list_items_33[] = { workshop_type::Craftsdwarfs };
  static const df::workshop_type _list_items_34[] = { workshop_type::Mechanics };
  static const df::workshop_type _list_items_35[] = { workshop_type::Siege };
  static const df::workshop_type _list_items_36[] = { workshop_type::Clothiers };
  static const df::workshop_type _list_items_37[] = { workshop_type::Leatherworks };
  static const df::workshop_type _list_items_38[] = { workshop_type::Bowyers };
  static const df::workshop_type _list_items_39[] = { workshop_type::MagmaForge };
  static const df::workshop_type _list_items_40[] = { workshop_type::MetalsmithsForge, workshop_type::MagmaForge };
  static const df::workshop_type _list_items_41[] = { workshop_type::Custom };
  const enum_traits<buildings_other_id>::attr_entry_type enum_traits<buildings_other_id>::attr_table[88+1] = {
    { building_type::NONE, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::NONE, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Stockpile, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Civzone, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Civzone, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 1, _list_items_0 } },
    { building_type::NONE, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::NONE, { 7, _list_items_1 }, { 1, _list_items_2 }, { 0, NULL }, { 0, NULL } },
    { building_type::NONE, { 2, _list_items_3 }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::NONE, { 4, _list_items_4 }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::NONE, { 5, _list_items_5 }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::NONE, { 4, _list_items_6 }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::NONE, { 2, _list_items_7 }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Box, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Cabinet, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Trap, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Door, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Floodgate, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Hatch, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::GrateWall, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::GrateFloor, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::BarsVertical, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::BarsFloor, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::NONE, { 2, _list_items_8 }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Well, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Table, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Bridge, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Chair, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::TradeDepot, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Nest, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::NestBox, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Hive, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Wagon, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Shop, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Bed, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::TractionBench, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::NONE, { 2, _list_items_9 }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::FarmPlot, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::GearAssembly, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Rollers, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::AxleHorizontal, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::AxleVertical, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Support, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::ArcheryTarget, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::ScrewPump, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::WaterWheel, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Windmill, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Chain, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Cage, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Statue, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Slab, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Coffin, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Weaponrack, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Armorstand, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Furnace, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Furnace, { 0, NULL }, { 0, NULL }, { 1, _list_items_10 }, { 0, NULL } },
    { building_type::Furnace, { 0, NULL }, { 0, NULL }, { 2, _list_items_11 }, { 0, NULL } },
    { building_type::Furnace, { 0, NULL }, { 0, NULL }, { 1, _list_items_12 }, { 0, NULL } },
    { building_type::Furnace, { 0, NULL }, { 0, NULL }, { 2, _list_items_13 }, { 0, NULL } },
    { building_type::Furnace, { 0, NULL }, { 0, NULL }, { 2, _list_items_14 }, { 0, NULL } },
    { building_type::Furnace, { 0, NULL }, { 0, NULL }, { 1, _list_items_15 }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_16 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_17 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_18 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_19 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_20 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_21 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_22 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_23 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 2, _list_items_24 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_25 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_26 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_27 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_28 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_29 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_30 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_31 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_32 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_33 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_34 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_35 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_36 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_37 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_38 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_39 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 2, _list_items_40 }, { 0, NULL }, { 0, NULL } },
    { building_type::Workshop, { 0, NULL }, { 1, _list_items_41 }, { 0, NULL }, { 0, NULL } },
    { building_type::Weapon, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } },
    { building_type::NONE, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL } }
  };
  const enum_traits<buildings_other_id>::attr_entry_type & enum_traits<buildings_other_id>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[88];
  }
  enum_identity identity_traits<buildings_other_id>::identity(sizeof(buildings_other_id), NULL, "buildings_other_id", TID(int32_t), -1, 86, enum_traits<buildings_other_id>::key_table,
                enum_traits<buildings_other_id>::attr_table, &enum_traits<buildings_other_id>::attr_entry_type::_identity);
  const char *const enum_traits<builtin_mats>::key_table[19] = {
    "INORGANIC",
    "AMBER",
    "CORAL",
    "GLASS_GREEN",
    "GLASS_CLEAR",
    "GLASS_CRYSTAL",
    "WATER",
    "COAL",
    "POTASH",
    "ASH",
    "PEARLASH",
    "LYE",
    "MUD",
    "VOMIT",
    "SALT",
    "FILTH_B",
    "FILTH_Y",
    "UNKNOWN_SUBSTANCE",
    "GRIME"
  };
  enum_identity identity_traits<builtin_mats>::identity(sizeof(builtin_mats), NULL, "builtin_mats", TID(int32_t), 0, 18, enum_traits<builtin_mats>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<caravan_state::T_flags>::bits[bit_count] = {
    { "check_cleanup", 1 },
    { "casualty", 1 },
    { "hardship", 1 },
    { "communicate", 1 },
    { "seized", 1 },
    { "offended", 1 },
    { "announce", 1 }
  };
  bitfield_identity identity_traits<caravan_state::T_flags>::identity(sizeof(caravan_state::T_flags), &caravan_state::_identity, "T_flags", bitfield_traits<caravan_state::T_flags>::bit_count, bitfield_traits<caravan_state::T_flags>::bits);
  const bitfield_item_info bitfield_traits<caste_attack::T_flags>::bits[bit_count] = {
    { "with", 1 },
    { "latch", 1 },
    { "main", 1 },
    { "edge", 1 }
  };
  bitfield_identity identity_traits<caste_attack::T_flags>::identity(sizeof(caste_attack::T_flags), &caste_attack::_identity, "T_flags", bitfield_traits<caste_attack::T_flags>::bit_count, bitfield_traits<caste_attack::T_flags>::bits);
  const bitfield_item_info bitfield_traits<caste_body_info::T_flags>::bits[bit_count] = {
    { "unk0", 1 }
  };
  bitfield_identity identity_traits<caste_body_info::T_flags>::identity(sizeof(caste_body_info::T_flags), &caste_body_info::_identity, "T_flags", bitfield_traits<caste_body_info::T_flags>::bit_count, bitfield_traits<caste_body_info::T_flags>::bits);
  const char *const enum_traits<caste_raw_flags>::key_table[169] = {
    "AMPHIBIOUS",
    "AQUATIC",
    "LOCKPICKER",
    "MISCHIEVOUS",
    "PATTERNFLIER",
    "CURIOUSBEAST_ANY",
    "CURIOUSBEAST_ITEM",
    "CURIOUSBEAST_GUZZLER",
    "FLEEQUICK",
    "AT_PEACE_WITH_WILDLIFE",
    "SWIMS_LEARNED",
    "OPPOSED_TO_LIFE",
    "CURIOUSBEAST_EATER",
    "NO_EAT",
    "NO_DRINK",
    "NO_SLEEP",
    "COMMON_DOMESTIC",
    "WAGON_PULLER",
    "PACK_ANIMAL",
    "FLIER",
    "LARGE_PREDATOR",
    "MAGMA_VISION",
    "FIREIMMUNE",
    "FIREIMMUNE_SUPER",
    "WEBBER",
    "WEBIMMUNE",
    "FISHITEM",
    "IMMOBILE_LAND",
    "IMMOLATE",
    "MILKABLE",
    "NO_SPRING",
    "NO_SUMMER",
    "NO_AUTUMN",
    "NO_WINTER",
    "BENIGN",
    "VERMIN_NOROAM",
    "VERMIN_NOTRAP",
    "VERMIN_NOFISH",
    "HAS_NERVES",
    "NO_DIZZINESS",
    "NO_FEVERS",
    "NO_UNIT_TYPE_COLOR",
    "NO_CONNECTIONS_FOR_MOVEMENT",
    "unk_2b",
    "AMBUSHPREDATOR",
    "unk_2d",
    "NOT_BUTCHERABLE",
    "COOKABLE_LIVE",
    "SECRETION",
    "IMMOBILE",
    "MULTIPART_FULL_VISION",
    "MEANDERER",
    "THICKWEB",
    "TRAINABLE_HUNTING",
    "PET",
    "PET_EXOTIC",
    "unk_38",
    "CAN_SPEAK",
    "CAN_LEARN",
    "UTTERANCES",
    "BONECARN",
    "CARNIVORE",
    "UNDERSWIM",
    "NOEXERT",
    "NOPAIN",
    "EXTRAVISION",
    "NOBREATHE",
    "NOSTUN",
    "NONAUSEA",
    "BLOOD",
    "TRANCES",
    "NOEMOTION",
    "SLOW_LEARNER",
    "NOSTUCKINS",
    "PUS",
    "NOSKULL",
    "NOSKIN",
    "NOBONES",
    "NOMEAT",
    "PARALYZEIMMUNE",
    "NOFEAR",
    "CANOPENDOORS",
    "ITEMCORPSE",
    "GETS_WOUND_INFECTIONS",
    "NOSMELLYROT",
    "REMAINS_UNDETERMINED",
    "HASSHELL",
    "PEARL",
    "TRAINABLE_WAR",
    "NO_THOUGHT_CENTER_FOR_MOVEMENT",
    "ARENA_RESTRICTED",
    "LAIR_HUNTER",
    "LIKES_FIGHTING",
    "VERMIN_HATEABLE",
    "VEGETATION",
    "MAGICAL",
    "NATURAL",
    "BABY",
    "CHILD",
    "MULTIPLE_LITTER_RARE",
    "MOUNT",
    "MOUNT_EXOTIC",
    "FEATURE_ATTACK_GROUP",
    "VERMIN_MICRO",
    "EQUIPS",
    "LAYS_EGGS",
    "GRAZER",
    "NOTHOUGHT",
    "TRAPAVOID",
    "CAVE_ADAPT",
    "MEGABEAST",
    "SEMIMEGABEAST",
    "ALL_ACTIVE",
    "DIURNAL",
    "NOCTURNAL",
    "CREPUSCULAR",
    "MATUTINAL",
    "VESPERTINE",
    "LIGHT_GEN",
    "LISP",
    "GETS_INFECTIONS_FROM_ROT",
    "unk_79",
    "ALCOHOL_DEPENDENT",
    "SWIMS_INNATE",
    "POWER",
    "unk_7d",
    "unk_7e",
    "CASTE_TILE",
    "CASTE_COLOR",
    "unk_81",
    "unk_82",
    "FEATURE_BEAST",
    "TITAN",
    "UNIQUE_DEMON",
    "DEMON",
    "MANNERISM_LAUGH",
    "MANNERISM_SMILE",
    "MANNERISM_WALK",
    "MANNERISM_SIT",
    "MANNERISM_BREATH",
    "MANNERISM_POSTURE",
    "MANNERISM_STRETCH",
    "MANNERISM_EYELIDS",
    "NIGHT_CREATURE_ANY",
    "NIGHT_CREATURE_HUNTER",
    "NIGHT_CREATURE_BOGEYMAN",
    "CONVERTED_SPOUSE",
    "SPOUSE_CONVERTER",
    "SPOUSE_CONVERSION_TARGET",
    "DIE_WHEN_VERMIN_BITE",
    "REMAINS_ON_VERMIN_BITE_DEATH",
    "COLONY_EXTERNAL",
    "LAYS_UNUSUAL_EGGS",
    "RETURNS_VERMIN_KILLS_TO_OWNER",
    "HUNTS_VERMIN",
    "ADOPTS_OWNER",
    "SOUND_ALERT",
    "SOUND_PEACEFUL_INTERMITTENT",
    "unk_9e",
    "unk_9f",
    "unk_a0",
    "CRAZED",
    "BLOODSUCKER",
    "NO_VEGETATION_PERTURB",
    "DIVE_HUNTS_VERMIN",
    "GOBBLE_VERMIN",
    "CANNOT_JUMP",
    "STANCE_CLIMBER",
    "CANNOT_CLIMB"
  };
  enum_identity identity_traits<caste_raw_flags>::identity(sizeof(caste_raw_flags), NULL, "caste_raw_flags", TID(int32_t), 0, 168, enum_traits<caste_raw_flags>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<cie_add_tag_mask1>::bits[bit_count] = {
    { "EXTRAVISION", 1 },
    { "OPPOSED_TO_LIFE", 1 },
    { "NOT_LIVING", 1 },
    { "NOEXERT", 1 },
    { "NOPAIN", 1 },
    { "NOBREATHE", 1 },
    { "HAS_BLOOD", 1 },
    { "NOSTUN", 1 },
    { "NONAUSEA", 1 },
    { "NO_DIZZINESS", 1 },
    { "NO_FEVERS", 1 },
    { "TRANCES", 1 },
    { "NOEMOTION", 1 },
    { "LIKES_FIGHTING", 1 },
    { "PARALYZEIMMUNE", 1 },
    { "NOFEAR", 1 },
    { "NO_EAT", 1 },
    { "NO_DRINK", 1 },
    { "NO_SLEEP", 1 },
    { "MISCHIEVOUS", 1 },
    { "NO_PHYS_ATT_GAIN", 1 },
    { "NO_PHYS_ATT_RUST", 1 },
    { "NOTHOUGHT", 1 },
    { "NO_THOUGHT_CENTER_FOR_MOVEMENT", 1 },
    { "CAN_SPEAK", 1 },
    { "CAN_LEARN", 1 },
    { "UTTERANCES", 1 },
    { "CRAZED", 1 },
    { "BLOODSUCKER", 1 },
    { "NO_CONNECTIONS_FOR_MOVEMENT", 1 },
    { "SUPERNATURAL", 1 },
    { NULL, 1 }
  };
  bitfield_identity identity_traits<cie_add_tag_mask1>::identity(sizeof(cie_add_tag_mask1), NULL, "cie_add_tag_mask1", bitfield_traits<cie_add_tag_mask1>::bit_count, bitfield_traits<cie_add_tag_mask1>::bits);
  const bitfield_item_info bitfield_traits<cie_add_tag_mask2>::bits[bit_count] = {
    { "NO_AGING", 1 },
    { "MORTAL", 1 },
    { "STERILE", 1 },
    { "FIT_FOR_ANIMATION", 1 },
    { "FIT_FOR_RESURRECTION", 1 }
  };
  bitfield_identity identity_traits<cie_add_tag_mask2>::identity(sizeof(cie_add_tag_mask2), NULL, "cie_add_tag_mask2", bitfield_traits<cie_add_tag_mask2>::bit_count, bitfield_traits<cie_add_tag_mask2>::bits);
  const char *const enum_traits<civzone_type>::key_table[22] = {
    "Home",
    "CraftShop",
    "Basement",
    "WeaponsmithsShop",
    "ArmorsmithsShop",
    "GeneralStore",
    "FoodShop",
    "MeadHall",
    "ThroneRoom",
    "ActivityZone",
    "Temple",
    "Kitchen",
    "CaptiveRoom",
    "TowerTop",
    "Courtyard",
    "Treasury",
    "GuardPost",
    "Entrance",
    "SecretLibrary",
    "Library",
    "Plot",
    "MarketStall"
  };
  enum_identity identity_traits<civzone_type>::identity(sizeof(civzone_type), NULL, "civzone_type", TID(int16_t), 0, 21, enum_traits<civzone_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<combat_report_event_type>::key_table[35] = {
    NULL,
    "Deflected",
    NULL,
    NULL,
    NULL,
    NULL,
    "Unconscious",
    "Stunned",
    "MoreStunned",
    "Winded",
    "MoreWinded",
    "Nausea",
    "MoreNausea",
    NULL,
    NULL,
    "ExtractInjected",
    "ExtractSprayed",
    "BloodSucked",
    "SeveredPart",
    NULL,
    "KnockedBack",
    "StuckIn",
    "LatchOnPart",
    "LatchOn",
    "Enraged",
    "PassThrough",
    "GlancesAway",
    NULL,
    NULL,
    "MajorArtery",
    "Artery",
    "MotorNerve",
    "SensoryNerve",
    "NoForce",
    "Interrupted"
  };
  enum_identity identity_traits<combat_report_event_type>::identity(sizeof(combat_report_event_type), NULL, "combat_report_event_type", TID(int16_t), 0, 34, enum_traits<combat_report_event_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<construction_flags>::bits[bit_count] = {
    { "no_build_item", 1 },
    { "top_of_wall", 1 }
  };
  bitfield_identity identity_traits<construction_flags>::identity(sizeof(construction_flags), NULL, "construction_flags", bitfield_traits<construction_flags>::bit_count, bitfield_traits<construction_flags>::bits);
  const char *const enum_traits<construction_type>::key_table[37] = {
    "Fortification",
    "Wall",
    "Floor",
    "UpStair",
    "DownStair",
    "UpDownStair",
    "Ramp",
    "TrackN",
    "TrackS",
    "TrackE",
    "TrackW",
    "TrackNS",
    "TrackNE",
    "TrackNW",
    "TrackSE",
    "TrackSW",
    "TrackEW",
    "TrackNSE",
    "TrackNSW",
    "TrackNEW",
    "TrackSEW",
    "TrackNSEW",
    "TrackRampN",
    "TrackRampS",
    "TrackRampE",
    "TrackRampW",
    "TrackRampNS",
    "TrackRampNE",
    "TrackRampNW",
    "TrackRampSE",
    "TrackRampSW",
    "TrackRampEW",
    "TrackRampNSE",
    "TrackRampNSW",
    "TrackRampNEW",
    "TrackRampSEW",
    "TrackRampNSEW"
  };
  enum_identity identity_traits<construction_type>::identity(sizeof(construction_type), NULL, "construction_type", TID(int16_t), 0, 36, enum_traits<construction_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<conversation::T_state>::key_table[4] = {
    "started",
    "active",
    "finished",
    "quit"
  };
  enum_identity identity_traits<conversation::T_state>::identity(sizeof(conversation::T_state), &conversation::_identity, "T_state", TID(int32_t), 0, 3, enum_traits<conversation::T_state>::key_table,
                NULL, NULL);
  const char *const enum_traits<corpse_material_type>::key_table[12] = {
    "Plant",
    "Silk",
    "Leather",
    "Bone",
    "Shell",
    NULL,
    "Soap",
    "Tooth",
    "Horn",
    "Pearl",
    "HairWool",
    "Yarn"
  };
  enum_identity identity_traits<corpse_material_type>::identity(sizeof(corpse_material_type), NULL, "corpse_material_type", TID(int32_t), 0, 11, enum_traits<corpse_material_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<craft_material_class>::key_table[13] = {
    "None",
    "Metal",
    "Wood",
    "Gem",
    "Glass",
    "Stone",
    "Bone",
    "Ivory",
    "Horn",
    "Pearl",
    "Shell",
    "Leather",
    "Cloth"
  };
  const enum_traits<craft_material_class>::attr_entry_type enum_traits<craft_material_class>::attr_table[13+1] = {
    { job_skill::NONE, job_skill::NONE },
    { job_skill::FORGE_FURNITURE, job_skill::METALCRAFT },
    { job_skill::CARPENTRY, job_skill::WOODCRAFT },
    { job_skill::CUTGEM, job_skill::ENCRUSTGEM },
    { job_skill::GLASSMAKER, job_skill::NONE },
    { job_skill::MASONRY, job_skill::NONE },
    { job_skill::BONECARVE, job_skill::BONECARVE },
    { job_skill::BONECARVE, job_skill::BONECARVE },
    { job_skill::BONECARVE, job_skill::BONECARVE },
    { job_skill::BONECARVE, job_skill::BONECARVE },
    { job_skill::BONECARVE, job_skill::BONECARVE },
    { job_skill::LEATHERWORK, job_skill::LEATHERWORK },
    { job_skill::CLOTHESMAKING, job_skill::CLOTHESMAKING },
    { job_skill::NONE, job_skill::NONE }
  };
  const enum_traits<craft_material_class>::attr_entry_type & enum_traits<craft_material_class>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[13];
  }
  enum_identity identity_traits<craft_material_class>::identity(sizeof(craft_material_class), NULL, "craft_material_class", TID(int32_t), -1, 11, enum_traits<craft_material_class>::key_table,
                enum_traits<craft_material_class>::attr_table, &enum_traits<craft_material_class>::attr_entry_type::_identity);
  const char *const enum_traits<creature_graphics_role>::key_table[6] = {
    "DEFAULT",
    "ADVENTURER",
    "GUARD",
    "ROYALGUARD",
    "ANIMATED",
    "GHOST"
  };
  enum_identity identity_traits<creature_graphics_role>::identity(sizeof(creature_graphics_role), NULL, "creature_graphics_role", TID(int32_t), 0, 5, enum_traits<creature_graphics_role>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<creature_interaction_effect_flags>::bits[bit_count] = {
    { "SIZE_DELAYS", 1 },
    { "SIZE_DILUTES", 1 },
    { "VASCULAR_ONLY", 1 },
    { "MUSCULAR_ONLY", 1 },
    { "RESISTABLE", 1 },
    { "LOCALIZED", 1 },
    { "MOON_PHASE", 1 },
    { "COUNTER_TRIGGER", 1 }
  };
  bitfield_identity identity_traits<creature_interaction_effect_flags>::identity(sizeof(creature_interaction_effect_flags), NULL, "creature_interaction_effect_flags", bitfield_traits<creature_interaction_effect_flags>::bit_count, bitfield_traits<creature_interaction_effect_flags>::bits);
  const char *const enum_traits<creature_interaction_effect_target_mode>::key_table[3] = {
    "BY_TYPE",
    "BY_TOKEN",
    "BY_CATEGORY"
  };
  enum_identity identity_traits<creature_interaction_effect_target_mode>::identity(sizeof(creature_interaction_effect_target_mode), NULL, "creature_interaction_effect_target_mode", TID(int16_t), 0, 2, enum_traits<creature_interaction_effect_target_mode>::key_table,
                NULL, NULL);
  const char *const enum_traits<creature_interaction_effect_type>::key_table[33] = {
    "PAIN",
    "SWELLING",
    "OOZING",
    "BRUISING",
    "BLISTERS",
    "NUMBNESS",
    "PARALYSIS",
    "FEVER",
    "BLEEDING",
    "COUGH_BLOOD",
    "VOMIT_BLOOD",
    "NAUSEA",
    "UNCONSCIOUSNESS",
    "NECROSIS",
    "IMPAIR_FUNCTION",
    "DROWSINESS",
    "DIZZINESS",
    "ADD_TAG",
    "REMOVE_TAG",
    "DISPLAY_TILE",
    "FLASH_TILE",
    "SPEED_CHANGE",
    "CAN_DO_INTERACTION",
    "SKILL_ROLL_ADJUST",
    "BODY_TRANSFORMATION",
    "PHYS_ATT_CHANGE",
    "MENT_ATT_CHANGE",
    "MATERIAL_FORCE_MULTIPLIER",
    "BODY_MAT_INTERACTION",
    "BODY_APPEARANCE_MODIFIER",
    "BP_APPEARANCE_MODIFIER",
    "DISPLAY_NAME",
    "SENSE_CREATURE_CLASS"
  };
  enum_identity identity_traits<creature_interaction_effect_type>::identity(sizeof(creature_interaction_effect_type), NULL, "creature_interaction_effect_type", TID(int32_t), 0, 32, enum_traits<creature_interaction_effect_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<creature_raw_flags>::key_table[112] = {
    "unk_wagon",
    "EQUIPMENT_WAGON",
    "MUNDANE",
    "VERMIN_EATER",
    "VERMIN_GROUNDER",
    "VERMIN_ROTTER",
    "VERMIN_SOIL",
    "VERMIN_SOIL_COLONY",
    "LARGE_ROAMING",
    "VERMIN_FISH",
    "LOOSE_CLUSTERS",
    "FANCIFUL",
    "BIOME_MOUNTAIN",
    "BIOME_GLACIER",
    "BIOME_TUNDRA",
    "BIOME_SWAMP_TEMPERATE_FRESHWATER",
    "BIOME_SWAMP_TEMPERATE_SALTWATER",
    "BIOME_MARSH_TEMPERATE_FRESHWATER",
    "BIOME_MARSH_TEMPERATE_SALTWATER",
    "BIOME_SWAMP_TROPICAL_FRESHWATER",
    "BIOME_SWAMP_TROPICAL_SALTWATER",
    "BIOME_SWAMP_MANGROVE",
    "BIOME_MARSH_TROPICAL_FRESHWATER",
    "BIOME_MARSH_TROPICAL_SALTWATER",
    "BIOME_FOREST_TAIGA",
    "BIOME_FOREST_TEMPERATE_CONIFER",
    "BIOME_FOREST_TEMPERATE_BROADLEAF",
    "BIOME_FOREST_TROPICAL_CONIFER",
    "BIOME_FOREST_TROPICAL_DRY_BROADLEAF",
    "BIOME_FOREST_TROPICAL_MOIST_BROADLEAF",
    "BIOME_GRASSLAND_TEMPERATE",
    "BIOME_SAVANNA_TEMPERATE",
    "BIOME_SHRUBLAND_TEMPERATE",
    "BIOME_GRASSLAND_TROPICAL",
    "BIOME_SAVANNA_TROPICAL",
    "BIOME_SHRUBLAND_TROPICAL",
    "BIOME_DESERT_BADLAND",
    "BIOME_DESERT_ROCK",
    "BIOME_DESERT_SAND",
    "BIOME_OCEAN_TROPICAL",
    "BIOME_OCEAN_TEMPERATE",
    "BIOME_OCEAN_ARCTIC",
    "BIOME_SUBTERRANEAN_WATER",
    "BIOME_SUBTERRANEAN_CHASM",
    "BIOME_SUBTERRANEAN_LAVA",
    "BIOME_POOL_TEMPERATE_FRESHWATER",
    "BIOME_POOL_TEMPERATE_BRACKISHWATER",
    "BIOME_POOL_TEMPERATE_SALTWATER",
    "BIOME_POOL_TROPICAL_FRESHWATER",
    "BIOME_POOL_TROPICAL_BRACKISHWATER",
    "BIOME_POOL_TROPICAL_SALTWATER",
    "BIOME_LAKE_TEMPERATE_FRESHWATER",
    "BIOME_LAKE_TEMPERATE_BRACKISHWATER",
    "BIOME_LAKE_TEMPERATE_SALTWATER",
    "BIOME_LAKE_TROPICAL_FRESHWATER",
    "BIOME_LAKE_TROPICAL_BRACKISHWATER",
    "BIOME_LAKE_TROPICAL_SALTWATER",
    "BIOME_RIVER_TEMPERATE_FRESHWATER",
    "BIOME_RIVER_TEMPERATE_BRACKISHWATER",
    "BIOME_RIVER_TEMPERATE_SALTWATER",
    "BIOME_RIVER_TROPICAL_FRESHWATER",
    "BIOME_RIVER_TROPICAL_BRACKISHWATER",
    "BIOME_RIVER_TROPICAL_SALTWATER",
    "GOOD",
    "EVIL",
    "SAVAGE",
    "NOT_ASEXUAL",
    "unk_43",
    "unk_44",
    "unk_45",
    "any_vermin",
    "CASTE_CAN_LEARN",
    "CASTE_VERMIN_HATEABLE",
    "unk_49",
    "CASTE_LARGE_PREDATOR",
    "CASTE_CURIOUSBEAST",
    "CASTE_BENIGN",
    "CASTE_NATURAL",
    "CASTE_MEGABEAST",
    "CASTE_SEMIMEGABEAST",
    "CASTE_POWER",
    "CASTE_VERMIN_MICRO",
    "CASTE_NOT_FIREIMMUNE",
    "CASTE_MUST_BREATHE_AIR",
    "CASTE_MUST_BREATHE_WATER",
    "unk_55",
    "CASTE_SWIMS_LEARNED",
    "CASTE_COMMON_DOMESTIC",
    "CASTE_UTTERANCES",
    "CASTE_CAN_SPEAK",
    "CASTE_FEATURE_BEAST",
    "GENERATED",
    "CASTE_TITAN",
    "CASTE_UNIQUE_DEMON",
    "DOES_NOT_EXIST",
    "CASTE_unk_9e",
    "CASTE_MISCHIEVOUS",
    "CASTE_FLIER",
    "CASTE_DEMON",
    "CASTE_NIGHT_CREATURE_ANY",
    "CASTE_NIGHT_CREATURE_HUNTER",
    "CASTE_NIGHT_CREATURE_BOGEYMAN",
    "CASTE_CARNIVORE",
    "ARTIFICIAL_HIVEABLE",
    "UBIQUITOUS",
    "unk_69",
    "CASTE_unk_2b",
    "CASTE_BLOOD",
    "CASTE_GRAZER",
    "CASTE_unk_31",
    "unk_6e",
    "unk_6f"
  };
  enum_identity identity_traits<creature_raw_flags>::identity(sizeof(creature_raw_flags), NULL, "creature_raw_flags", TID(int32_t), 0, 111, enum_traits<creature_raw_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<crime::T_mode>::key_table[11] = {
    "ProductionOrderViolation",
    "ExportViolation",
    "JobOrderViolation",
    "ConspiracyToSlowLabor",
    "Murder",
    "DisorderlyBehavior",
    "BuildingDestruction",
    "Vandalism",
    "Theft",
    "Robbery",
    "BloodDrinking"
  };
  enum_identity identity_traits<crime::T_mode>::identity(sizeof(crime::T_mode), &crime::_identity, "T_mode", TID(int32_t), 0, 10, enum_traits<crime::T_mode>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<crime::T_flags>::bits[bit_count] = {
    { "sentenced", 1 },
    { "discovered", 1 },
    { "needs_trial", 1 }
  };
  bitfield_identity identity_traits<crime::T_flags>::identity(sizeof(crime::T_flags), &crime::_identity, "T_flags", bitfield_traits<crime::T_flags>::bit_count, bitfield_traits<crime::T_flags>::bits);
  const char *const enum_traits<d_init_embark_confirm>::key_table[3] = {
    "ALWAYS",
    "IF_POINTS_REMAIN",
    "NO"
  };
  enum_identity identity_traits<d_init_embark_confirm>::identity(sizeof(d_init_embark_confirm), NULL, "d_init_embark_confirm", TID(int32_t), 0, 2, enum_traits<d_init_embark_confirm>::key_table,
                NULL, NULL);
  const char *const enum_traits<d_init_flags1>::key_table[4] = {
    "VARIED_GROUND_TILES",
    "ENGRAVINGS_START_OBSCURED",
    "SHOW_IMP_QUALITY",
    "SHOW_FLOW_AMOUNTS"
  };
  enum_identity identity_traits<d_init_flags1>::identity(sizeof(d_init_flags1), NULL, "d_init_flags1", TID(int32_t), 0, 3, enum_traits<d_init_flags1>::key_table,
                NULL, NULL);
  const char *const enum_traits<d_init_flags2>::key_table[3] = {
    "MORE",
    "ADVENTURER_TRAPS",
    "ADVENTURER_ALWAYS_CENTER"
  };
  enum_identity identity_traits<d_init_flags2>::identity(sizeof(d_init_flags2), NULL, "d_init_flags2", TID(int32_t), 0, 2, enum_traits<d_init_flags2>::key_table,
                NULL, NULL);
  const char *const enum_traits<d_init_flags3>::key_table[1] = {
    "COFFIN_NO_PETS_DEFAULT"
  };
  enum_identity identity_traits<d_init_flags3>::identity(sizeof(d_init_flags3), NULL, "d_init_flags3", TID(int32_t), 0, 0, enum_traits<d_init_flags3>::key_table,
                NULL, NULL);
  const char *const enum_traits<d_init_flags4>::key_table[19] = {
    "TEMPERATURE",
    "WEATHER",
    "ECONOMY",
    "ZERO_RENT",
    "AUTOSAVE_SEASONAL",
    "AUTOSAVE_YEARLY",
    "AUTOSAVE_PAUSE",
    "AUTOBACKUP",
    "INITIAL_SAVE",
    "INVADERS",
    "CAVEINS",
    "ARTIFACTS",
    "LOG_MAP_REJECTS",
    "PAUSE_ON_LOAD",
    "EMBARK_WARNING_ALWAYS",
    "SHOW_ALL_HISTORY_IN_DWARF_MODE",
    "TESTING_ARENA",
    "WALKING_SPREADS_SPATTER_DWF",
    "WALKING_SPREADS_SPATTER_ADV"
  };
  enum_identity identity_traits<d_init_flags4>::identity(sizeof(d_init_flags4), NULL, "d_init_flags4", TID(int32_t), 0, 18, enum_traits<d_init_flags4>::key_table,
                NULL, NULL);
  const char *const enum_traits<d_init_idlers>::key_table[3] = {
    "OFF",
    "TOP",
    "BOTTOM"
  };
  enum_identity identity_traits<d_init_idlers>::identity(sizeof(d_init_idlers), NULL, "d_init_idlers", TID(int16_t), -1, 1, enum_traits<d_init_idlers>::key_table,
                NULL, NULL);
  const char *const enum_traits<d_init_nickname>::key_table[3] = {
    "REPLACE_FIRST",
    "CENTRALIZE",
    "REPLACE_ALL"
  };
  enum_identity identity_traits<d_init_nickname>::identity(sizeof(d_init_nickname), NULL, "d_init_nickname", TID(int32_t), 0, 2, enum_traits<d_init_nickname>::key_table,
                NULL, NULL);
  const char *const enum_traits<d_init_tunnel>::key_table[3] = {
    "NO",
    "FINDER",
    "ALWAYS"
  };
  enum_identity identity_traits<d_init_tunnel>::identity(sizeof(d_init_tunnel), NULL, "d_init_tunnel", TID(int16_t), 0, 2, enum_traits<d_init_tunnel>::key_table,
                NULL, NULL);
  const char *const enum_traits<d_init_z_view>::key_table[4] = {
    "OFF",
    "UNHIDDEN",
    "CREATURE",
    "ON"
  };
  enum_identity identity_traits<d_init_z_view>::identity(sizeof(d_init_z_view), NULL, "d_init_z_view", TID(int32_t), 0, 3, enum_traits<d_init_z_view>::key_table,
                NULL, NULL);
  const char *const enum_traits<death_type>::key_table[52] = {
    "OLD_AGE",
    "HUNGER",
    "THIRST",
    "SHOT",
    "BLEED",
    "DROWN",
    "SUFFOCATE",
    "STRUCK_DOWN",
    "SCUTTLE",
    "COLLISION",
    "MAGMA",
    "MAGMA_MIST",
    "DRAGONFIRE",
    "FIRE",
    "SCALD",
    "CAVEIN",
    "DRAWBRIDGE",
    "FALLING_ROCKS",
    "CHASM",
    "CAGE",
    "MURDER",
    "TRAP",
    "VANISH",
    "QUIT",
    "ABANDON",
    "HEAT",
    "COLD",
    "SPIKE",
    "ENCASE_LAVA",
    "ENCASE_MAGMA",
    "ENCASE_ICE",
    "BEHEAD",
    "CRUCIFY",
    "BURY_ALIVE",
    "DROWN_ALT",
    "BURN_ALIVE",
    "FEED_TO_BEASTS",
    "HACK_TO_PIECES",
    "LEAVE_OUT_IN_AIR",
    "BOIL",
    "MELT",
    "CONDENSE",
    "SOLIDIFY",
    "INFECTION",
    "MEMORIALIZE",
    "SCARE",
    "DARKNESS",
    "COLLAPSE",
    "DRAIN_BLOOD",
    "SLAUGHTER",
    "VEHICLE",
    "FALLING_OBJECT"
  };
  enum_identity identity_traits<death_type>::identity(sizeof(death_type), NULL, "death_type", TID(int32_t), 0, 51, enum_traits<death_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<descriptor_shape::T_gems_use>::bits[bit_count] = {
    { "noun", 1 },
    { "adj", 1 },
    { "adj_noun", 1 }
  };
  bitfield_identity identity_traits<descriptor_shape::T_gems_use>::identity(sizeof(descriptor_shape::T_gems_use), &descriptor_shape::_identity, "T_gems_use", bitfield_traits<descriptor_shape::T_gems_use>::bit_count, bitfield_traits<descriptor_shape::T_gems_use>::bits);
  const bitfield_item_info bitfield_traits<dfhack_material_category>::bits[bit_count] = {
    { "plant", 1 },
    { "wood", 1 },
    { "cloth", 1 },
    { "silk", 1 },
    { "leather", 1 },
    { "bone", 1 },
    { "shell", 1 },
    { "wood2", 1 },
    { "soap", 1 },
    { "tooth", 1 },
    { "horn", 1 },
    { "pearl", 1 },
    { "yarn", 1 },
    { "metal", 1 },
    { "stone", 1 },
    { "sand", 1 },
    { "glass", 1 },
    { "clay", 1 },
    { "milk", 1 }
  };
  bitfield_identity identity_traits<dfhack_material_category>::identity(sizeof(dfhack_material_category), NULL, "dfhack_material_category", bitfield_traits<dfhack_material_category>::bit_count, bitfield_traits<dfhack_material_category>::bits);
  const bitfield_item_info bitfield_traits<dipscript_popup::T_flags>::bits[bit_count] = {
    { "close_screen", 1 },
    { "new_screen", 1 }
  };
  bitfield_identity identity_traits<dipscript_popup::T_flags>::identity(sizeof(dipscript_popup::T_flags), &dipscript_popup::_identity, "T_flags", bitfield_traits<dipscript_popup::T_flags>::bit_count, bitfield_traits<dipscript_popup::T_flags>::bits);
  const bitfield_item_info bitfield_traits<door_flags>::bits[bit_count] = {
    { "forbidden", 1 },
    { "internal", 1 },
    { "taken_by_invaders", 1 },
    { "used_by_intruder", 1 },
    { "closed", 1 },
    { "operated_by_mechanisms", 1 },
    { "pet_passable", 1 }
  };
  bitfield_identity identity_traits<door_flags>::identity(sizeof(door_flags), NULL, "door_flags", bitfield_traits<door_flags>::bit_count, bitfield_traits<door_flags>::bits);
  const char *const enum_traits<embark_finder_option>::key_table[22] = {
    "DimensionX",
    "DimensionY",
    "Savagery",
    "Evil",
    "Elevation",
    "Temperature",
    "Rain",
    "Drainage",
    "FluxStone",
    "Aquifer",
    "River",
    "UndergroundRiver",
    "UndergroundPool",
    "MagmaPool",
    "MagmaPipe",
    "Chasm",
    "BottomlessPit",
    "OtherFeatures",
    "ShallowMetal",
    "DeepMetal",
    "Soil",
    "Clay"
  };
  enum_identity identity_traits<embark_finder_option>::identity(sizeof(embark_finder_option), NULL, "embark_finder_option", TID(int32_t), 0, 21, enum_traits<embark_finder_option>::key_table,
                NULL, NULL);
  const char *const enum_traits<emotion_type>::key_table[171] = {
    "Anything",
    "Acceptance",
    "Adoration",
    "Affection",
    "Agitation",
    "Aggravation",
    "Agony",
    "Alarm",
    "Alienation",
    "Amazement",
    "Ambivalence",
    "Amusement",
    "Anger",
    NULL,
    "Anguish",
    "Annoyance",
    NULL,
    "Anxiety",
    "Apathy",
    NULL,
    "Arousal",
    "Astonishment",
    NULL,
    "Aversion",
    "Awe",
    "Bitterness",
    "Bliss",
    "Boredom",
    "Caring",
    NULL,
    "Confusion",
    "Contempt",
    "Contentment",
    NULL,
    NULL,
    NULL,
    "Dejection",
    "Delight",
    NULL,
    NULL,
    "Despair",
    "Disappointment",
    "Disgust",
    "Disillusioned",
    "Dislike",
    "Dismay",
    "Displeasure",
    "Distress",
    NULL,
    NULL,
    "Eagerness",
    NULL,
    "Elation",
    "Embarrassment",
    "Empathy",
    "Emptiness",
    "Enjoyment",
    NULL,
    NULL,
    NULL,
    NULL,
    "Exasperation",
    NULL,
    "Exhilaration",
    NULL,
    "Fear",
    "Ferocity",
    "Fondness",
    "Free",
    "Fright",
    "Frustration",
    NULL,
    NULL,
    NULL,
    "Glee",
    "Gloom",
    "Glumness",
    "Gratitude",
    NULL,
    "Grief",
    "GrimSatisfaction",
    "Grouchiness",
    "Grumpiness",
    "Guilt",
    "Happiness",
    "Hatred",
    NULL,
    "Hope",
    "Hopelessness",
    "Horror",
    NULL,
    "Humiliation",
    NULL,
    NULL,
    NULL,
    NULL,
    "Insult",
    "Interest",
    "Irritation",
    "Isolation",
    NULL,
    "Jolliness",
    "Jovialty",
    "Joy",
    "Jubilation",
    NULL,
    "Loathing",
    "Loneliness",
    NULL,
    "Love",
    NULL,
    "Lust",
    NULL,
    "Misery",
    "Mortification",
    NULL,
    "Nervousness",
    "Nostalgia",
    "Optimism",
    "Outrage",
    "Panic",
    "Patience",
    "Passion",
    NULL,
    NULL,
    "Pleasure",
    "Pride",
    "Rage",
    "Rapture",
    "Rejection",
    "Relief",
    "Regret",
    "Remorse",
    "Repentance",
    "Resentment",
    NULL,
    "RighteousIndignation",
    "Sadness",
    "Satisfaction",
    NULL,
    "SelfPity",
    NULL,
    "Servile",
    "Shaken",
    "Shame",
    "Shock",
    NULL,
    NULL,
    NULL,
    NULL,
    "Suspicion",
    "Sympathy",
    "Tenderness",
    NULL,
    "Terror",
    "Thrill",
    NULL,
    "Triumph",
    "Uneasiness",
    "Unhappiness",
    "Vengefulness",
    NULL,
    "Wonder",
    "Worry",
    "Wrath",
    "Zeal",
    NULL,
    NULL,
    NULL,
    "Restless",
    "Admiration"
  };
  const enum_traits<emotion_type>::attr_entry_type enum_traits<emotion_type>::attr_table[171+1] = {
    { 7, 0 },
    { 7, -8 },
    { 11, -1 },
    { 11, -2 },
    { 6, 4 },
    { 6, 4 },
    { 14, 1 },
    { 12, 4 },
    { 6, 8 },
    { 9, 0 },
    { 7, 0 },
    { 10, -4 },
    { 12, 2 },
    { 7, 0 },
    { 14, 1 },
    { 6, 8 },
    { 7, 0 },
    { 6, 4 },
    { 7, 0 },
    { 7, 0 },
    { 11, -8 },
    { 9, 0 },
    { 7, 0 },
    { 6, 4 },
    { 9, 0 },
    { 6, 2 },
    { 10, -1 },
    { 6, 8 },
    { 11, -2 },
    { 7, 0 },
    { 6, 8 },
    { 6, 4 },
    { 10, -8 },
    { 7, 0 },
    { 7, 0 },
    { 7, 0 },
    { 6, 4 },
    { 10, -1 },
    { 7, 0 },
    { 7, 0 },
    { 14, 1 },
    { 6, 8 },
    { 14, 4 },
    { 6, 8 },
    { 6, 8 },
    { 14, 2 },
    { 6, 8 },
    { 14, 2 },
    { 7, 0 },
    { 7, 0 },
    { 9, -4 },
    { 7, 0 },
    { 10, -2 },
    { 6, 8 },
    { 11, -2 },
    { 14, 4 },
    { 10, -8 },
    { 7, 0 },
    { 7, 0 },
    { 7, 0 },
    { 7, 0 },
    { 6, 8 },
    { 7, 0 },
    { 9, -2 },
    { 7, 0 },
    { 12, 1 },
    { 12, 2 },
    { 11, -8 },
    { 10, -4 },
    { 14, 2 },
    { 6, 8 },
    { 7, 0 },
    { 7, 0 },
    { 7, 0 },
    { 10, -2 },
    { 6, 4 },
    { 6, 8 },
    { 11, -4 },
    { 7, 0 },
    { 14, 2 },
    { 13, 0 },
    { 6, 8 },
    { 6, 8 },
    { 6, 4 },
    { 10, -2 },
    { 12, 2 },
    { 7, 0 },
    { 10, -2 },
    { 14, 2 },
    { 12, 1 },
    { 7, 0 },
    { 14, 4 },
    { 7, 0 },
    { 7, 0 },
    { 7, 0 },
    { 7, 0 },
    { 6, 4 },
    { 9, -8 },
    { 6, 8 },
    { 6, 4 },
    { 7, 0 },
    { 10, -4 },
    { 10, -2 },
    { 10, -1 },
    { 10, -1 },
    { 7, 0 },
    { 12, 2 },
    { 6, 4 },
    { 7, 0 },
    { 11, -1 },
    { 7, 0 },
    { 11, -8 },
    { 7, 0 },
    { 14, 1 },
    { 14, 2 },
    { 7, 0 },
    { 6, 8 },
    { 9, -8 },
    { 10, -4 },
    { 12, 2 },
    { 14, 1 },
    { 7, -8 },
    { 11, -2 },
    { 7, 0 },
    { 7, 0 },
    { 11, -4 },
    { 11, -4 },
    { 12, 1 },
    { 11, -1 },
    { 6, 4 },
    { 10, -2 },
    { 6, 8 },
    { 6, 4 },
    { 9, -2 },
    { 6, 8 },
    { 7, 0 },
    { 6, 8 },
    { 14, 4 },
    { 10, -8 },
    { 7, 0 },
    { 6, 8 },
    { 7, 0 },
    { 9, 0 },
    { 14, 1 },
    { 14, 4 },
    { 14, 1 },
    { 7, 0 },
    { 7, 0 },
    { 7, 0 },
    { 7, 0 },
    { 13, 8 },
    { 11, -8 },
    { 11, -2 },
    { 7, 0 },
    { 12, 1 },
    { 9, -2 },
    { 7, 0 },
    { 10, -2 },
    { 6, 8 },
    { 6, 4 },
    { 12, 4 },
    { 7, 0 },
    { 9, -8 },
    { 6, 8 },
    { 12, 1 },
    { 9, -4 },
    { 7, 0 },
    { 7, 0 },
    { 7, 0 },
    { 6, 8 },
    { 11, -8 },
    { 7, 0 }
  };
  const enum_traits<emotion_type>::attr_entry_type & enum_traits<emotion_type>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[171];
  }
  enum_identity identity_traits<emotion_type>::identity(sizeof(emotion_type), NULL, "emotion_type", TID(int32_t), -1, 169, enum_traits<emotion_type>::key_table,
                enum_traits<emotion_type>::attr_table, &enum_traits<emotion_type>::attr_entry_type::_identity);
  const char *const enum_traits<enabler::T_async_tobox::T_queue::T_cmd>::key_table[5] = {
    "pause",
    "start",
    "render",
    "inc",
    "set_fps"
  };
  enum_identity identity_traits<enabler::T_async_tobox::T_queue::T_cmd>::identity(sizeof(enabler::T_async_tobox::T_queue::T_cmd), &enabler::T_async_tobox::T_queue::_identity, "T_cmd", TID(int32_t), 0, 4, enum_traits<enabler::T_async_tobox::T_queue::T_cmd>::key_table,
                NULL, NULL);
  const char *const enum_traits<enabler::T_async_frombox::T_queue::T_msg>::key_table[7] = {
    "quit",
    "complete",
    "set_fps",
    "set_gfps",
    "push_resize",
    "pop_resize",
    "reset_textures"
  };
  enum_identity identity_traits<enabler::T_async_frombox::T_queue::T_msg>::identity(sizeof(enabler::T_async_frombox::T_queue::T_msg), &enabler::T_async_frombox::T_queue::_identity, "T_msg", TID(int32_t), 0, 6, enum_traits<enabler::T_async_frombox::T_queue::T_msg>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<enabler::T_flag>::bits[bit_count] = {
    { "render", 1 },
    { "maxfps", 1 }
  };
  bitfield_identity identity_traits<enabler::T_flag>::identity(sizeof(enabler::T_flag), &enabler::_identity, "T_flag", bitfield_traits<enabler::T_flag>::bit_count, bitfield_traits<enabler::T_flag>::bits);
  const bitfield_item_info bitfield_traits<engraving_flags>::bits[bit_count] = {
    { "floor", 1 },
    { "west", 1 },
    { "east", 1 },
    { "north", 1 },
    { "south", 1 },
    { "hidden", 1 },
    { "northwest", 1 },
    { "northeast", 1 },
    { "southwest", 1 },
    { "southeast", 1 }
  };
  bitfield_identity identity_traits<engraving_flags>::identity(sizeof(engraving_flags), NULL, "engraving_flags", bitfield_traits<engraving_flags>::bit_count, bitfield_traits<engraving_flags>::bits);
  const char *const enum_traits<entity_action_type>::key_table[2] = {
    "entity_primary_criminals",
    "entity_relocate"
  };
  enum_identity identity_traits<entity_action_type>::identity(sizeof(entity_action_type), NULL, "entity_action_type", TID(int32_t), 0, 1, enum_traits<entity_action_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<entity_activity_statistics::T_found_misc>::bits[bit_count] = {
    { "deep_special", 1 }
  };
  bitfield_identity identity_traits<entity_activity_statistics::T_found_misc>::identity(sizeof(entity_activity_statistics::T_found_misc), &entity_activity_statistics::_identity, "T_found_misc", bitfield_traits<entity_activity_statistics::T_found_misc>::bit_count, bitfield_traits<entity_activity_statistics::T_found_misc>::bits);
  const char *const enum_traits<entity_entity_link_type>::key_table[2] = {
    "PARENT",
    "CHILD"
  };
  enum_identity identity_traits<entity_entity_link_type>::identity(sizeof(entity_entity_link_type), NULL, "entity_entity_link_type", TID(int32_t), 0, 1, enum_traits<entity_entity_link_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<entity_event_type>::key_table[25] = {
    "invasion",
    "abduction",
    "incident",
    "occupation",
    "beast",
    "group",
    "harass",
    "flee",
    "abandon",
    "reclaimed",
    "founded",
    "reclaiming",
    "founding",
    "leave",
    "insurrection",
    "insurrection_end",
    "succession",
    "claim",
    "accept_tribute_offer",
    "refuse_tribute_offer",
    "accept_tribute_demand",
    "refuse_tribute_demand",
    "accept_peace_offer",
    "refuse_peace_offer",
    "cease_tribute_offer"
  };
  enum_identity identity_traits<entity_event_type>::identity(sizeof(entity_event_type), NULL, "entity_event_type", TID(int32_t), 0, 24, enum_traits<entity_event_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<entity_material_category>::key_table[33] = {
    "None",
    "Clothing",
    "Leather",
    "Cloth",
    "Wood",
    "Crafts",
    "Stone",
    "Improvement",
    "Glass",
    "Wood2",
    "Bag",
    "Cage",
    "WeaponMelee",
    "WeaponRanged",
    "Ammo",
    "Ammo2",
    "Pick",
    "Armor",
    "Gem",
    "Bone",
    "Shell",
    "Pearl",
    "Ivory",
    "Horn",
    "Other",
    "Anvil",
    "Booze",
    "Metal",
    "PlantFiber",
    "Silk",
    "Wool",
    "Furniture",
    "MiscWood2"
  };
  enum_identity identity_traits<entity_material_category>::identity(sizeof(entity_material_category), NULL, "entity_material_category", TID(int16_t), -1, 31, enum_traits<entity_material_category>::key_table,
                NULL, NULL);
  const char *const enum_traits<entity_position_flags>::key_table[29] = {
    "IS_LAW_MAKER",
    "ELECTED",
    "DUTY_BOUND",
    "MILITARY_SCREEN_ONLY",
    "GENDER_MALE",
    "GENDER_FEMALE",
    "SUCCESSION_BY_HEIR",
    "HAS_RESPONSIBILITIES",
    "FLASHES",
    "BRAG_ON_KILL",
    "CHAT_WORTHY",
    "DO_NOT_CULL",
    "KILL_QUEST",
    "IS_LEADER",
    "IS_DIPLOMAT",
    "EXPORTED_IN_LEGENDS",
    "DETERMINES_COIN_DESIGN",
    "ACCOUNT_EXEMPT",
    "unk_12",
    "unk_13",
    "COLOR",
    "RULES_FROM_LOCATION",
    "MENIAL_WORK_EXEMPTION",
    "MENIAL_WORK_EXEMPTION_SPOUSE",
    "SLEEP_PRETENSION",
    "PUNISHMENT_EXEMPTION",
    "unk_1a",
    "unk_1b",
    "QUEST_GIVER"
  };
  enum_identity identity_traits<entity_position_flags>::identity(sizeof(entity_position_flags), NULL, "entity_position_flags", TID(int32_t), 0, 28, enum_traits<entity_position_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<entity_position_raw_flags>::key_table[25] = {
    "SITE",
    "ELECTED",
    "CONQUERED_SITE",
    "MILITARY_SCREEN_ONLY",
    "GENDER_MALE",
    "GENDER_FEMALE",
    "SUCCESSION_BY_HEIR",
    "EXPORTED_IN_LEGENDS",
    "FLASHES",
    "BRAG_ON_KILL",
    "CHAT_WORTHY",
    "DO_NOT_CULL",
    "KILL_QUEST",
    "DETERMINES_COIN_DESIGN",
    "ACCOUNT_EXEMPT",
    "DUTY_BOUND",
    "COLOR",
    "RULES_FROM_LOCATION",
    "MENIAL_WORK_EXEMPTION",
    "MENIAL_WORK_EXEMPTION_SPOUSE",
    "SLEEP_PRETENSION",
    "PUNISHMENT_EXEMPTION",
    "QUEST_GIVER",
    "SPECIAL_BURIAL",
    "REQUIRES_MARKET"
  };
  enum_identity identity_traits<entity_position_raw_flags>::identity(sizeof(entity_position_raw_flags), NULL, "entity_position_raw_flags", TID(int32_t), 0, 24, enum_traits<entity_position_raw_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<entity_position_responsibility>::key_table[25] = {
    "LAW_MAKING",
    "LAW_ENFORCEMENT",
    "RECEIVE_DIPLOMATS",
    "MEET_WORKERS",
    "MANAGE_PRODUCTION",
    "TRADE",
    "ACCOUNTING",
    "ESTABLISH_COLONY_TRADE_AGREEMENTS",
    "MAKE_INTRODUCTIONS",
    "MAKE_PEACE_AGREEMENTS",
    "MAKE_TOPIC_AGREEMENTS",
    "COLLECT_TAXES",
    "ESCORT_TAX_COLLECTOR",
    "EXECUTIONS",
    "TAME_EXOTICS",
    "RELIGION",
    "ATTACK_ENEMIES",
    "PATROL_TERRITORY",
    "MILITARY_GOALS",
    "MILITARY_STRATEGY",
    "UPGRADE_SQUAD_EQUIPMENT",
    "EQUIPMENT_MANIFESTS",
    "SORT_AMMUNITION",
    "BUILD_MORALE",
    "HEALTH_MANAGEMENT"
  };
  enum_identity identity_traits<entity_position_responsibility>::identity(sizeof(entity_position_responsibility), NULL, "entity_position_responsibility", TID(int32_t), 0, 24, enum_traits<entity_position_responsibility>::key_table,
                NULL, NULL);
  const char *const enum_traits<entity_raw_flags>::key_table[65] = {
    "CIV_CONTROLLABLE",
    "INDIV_CONTROLLABLE",
    "LAYER_LINKED",
    "INDOOR_WOOD",
    "WOOD_ARMOR",
    "SIEGER",
    "AMBUSHER",
    "BABYSNATCHER",
    "ITEM_THIEF",
    "CLOTHING",
    "CURRENCY_BY_YEAR",
    "METAL_PREF",
    "GEM_PREF",
    "STONE_PREF",
    "WOOD_WEAPONS",
    "BUILDS_OUTDOOR_FORTIFICATIONS",
    "RIVER_PRODUCTS",
    "OCEAN_PRODUCTS",
    "INDOOR_FARMING",
    "OUTDOOR_FARMING",
    "USE_CAVE_ANIMALS",
    "USE_EVIL_ANIMALS",
    "USE_ANIMAL_PRODUCTS",
    "COMMON_DOMESTIC_PACK",
    "COMMON_DOMESTIC_PULL",
    "COMMON_DOMESTIC_MOUNT",
    "COMMON_DOMESTIC_PET",
    "SUBTERRANEAN_CLOTHING",
    "USE_EVIL_WOOD",
    "USE_GOOD_WOOD",
    "USE_EVIL_PLANTS",
    "USE_GOOD_PLANTS",
    "USE_GOOD_ANIMALS",
    "USE_ANY_PET_RACE",
    "USE_MISC_PROCESSED_WOOD_PRODUCTS",
    "IMPROVED_BOWS",
    "OUTDOOR_WOOD",
    "LOCAL_BANDITRY",
    "BUILDS_OUTDOOR_TOMBS",
    "INVADERS_IGNORE_NEUTRALS",
    "AT_PEACE_WITH_WILDLIFE",
    "EQUIPMENT_IMPROVEMENTS",
    "ABUSE_BODIES",
    "UNDEAD_CANDIDATE",
    "GENERATED",
    "SKULKING",
    NULL,
    "MERCHANT_NOBILITY",
    "TREE_CAP_DIPLOMACY",
    "DIPLOMAT_BODYGUARDS",
    "MERCHANT_BODYGUARDS",
    "INDOOR_ORCHARDS",
    "OUTDOOR_ORCHARDS",
    "WANDERER",
    "BEAST_HUNTER",
    "SCOUT",
    "WILL_ACCEPT_TRIBUTE",
    "INDOOR_GARDENS",
    "OUTDOOR_GARDENS",
    "MERCENARY",
    "SITE_GUARDIAN",
    "DIVINE_MAT_WEAPONS",
    "DIVINE_MAT_ARMOR",
    "DIVINE_MAT_CRAFTS",
    "DIVINE_MAT_CLOTHING"
  };
  enum_identity identity_traits<entity_raw_flags>::identity(sizeof(entity_raw_flags), NULL, "entity_raw_flags", TID(int32_t), 0, 64, enum_traits<entity_raw_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<entity_sell_category>::key_table[62] = {
    "Leather",
    "ClothPlant",
    "ClothSilk",
    "Crafts",
    "Wood",
    "MetalBars",
    "SmallCutGems",
    "LargeCutGems",
    "StoneBlocks",
    "Seeds",
    "Anvils",
    "Weapons",
    "TrainingWeapons",
    "Ammo",
    "TrapComponents",
    "DiggingImplements",
    "Bodywear",
    "Headwear",
    "Handwear",
    "Footwear",
    "Legwear",
    "Shields",
    "Toys",
    "Instruments",
    "Pets",
    "Drinks",
    "Cheese",
    "Powders",
    "Extracts",
    "Meat",
    "Fish",
    "Plants",
    "FruitsNuts",
    "GardenVegetables",
    "MeatFishRecipes",
    "OtherRecipes",
    "Stone",
    "Cages",
    "BagsLeather",
    "BagsPlant",
    "BagsSilk",
    "ThreadPlant",
    "ThreadSilk",
    "RopesPlant",
    "RopesSilk",
    "Barrels",
    "FlasksWaterskins",
    "Quivers",
    "Backpacks",
    "Sand",
    "Glass",
    "Miscellaneous",
    "Buckets",
    "Splints",
    "Crutches",
    "Eggs",
    "BagsYarn",
    "RopesYarn",
    "ClothYarn",
    "ThreadYarn",
    "Tools",
    "Clay"
  };
  enum_identity identity_traits<entity_sell_category>::identity(sizeof(entity_sell_category), NULL, "entity_sell_category", TID(int32_t), 0, 61, enum_traits<entity_sell_category>::key_table,
                NULL, NULL);
  const char *const enum_traits<environment_type>::key_table[8] = {
    "SOIL",
    "SOIL_OCEAN",
    "SOIL_SAND",
    "METAMORPHIC",
    "SEDIMENTARY",
    "IGNEOUS_INTRUSIVE",
    "IGNEOUS_EXTRUSIVE",
    "ALLUVIAL"
  };
  enum_identity identity_traits<environment_type>::identity(sizeof(environment_type), NULL, "environment_type", TID(int16_t), 0, 7, enum_traits<environment_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<era_type>::key_table[13] = {
    "ThreePowers",
    "TwoPowers",
    "OnePower",
    "Myth",
    "Legends",
    "Twilight",
    "FairyTales",
    "Race",
    "Heroes",
    "Golden",
    "Death",
    "Civilization",
    "Emptiness"
  };
  enum_identity identity_traits<era_type>::identity(sizeof(era_type), NULL, "era_type", TID(int16_t), 0, 12, enum_traits<era_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<ethic_response>::key_table[17] = {
    "NOT_APPLICABLE",
    "ACCEPTABLE",
    "PERSONAL_MATTER",
    "JUSTIFIED_IF_NO_REPERCUSSIONS",
    "JUSTIFIED_IF_GOOD_REASON",
    "JUSTIFIED_IF_EXTREME_REASON",
    "JUSTIFIED_IF_SELF_DEFENSE",
    "ONLY_IF_SANCTIONED",
    "MISGUIDED",
    "SHUN",
    "APPALLING",
    "PUNISH_REPRIMAND",
    "PUNISH_SERIOUS",
    "PUNISH_EXILE",
    "PUNISH_CAPITAL",
    "UNTHINKABLE",
    "REQUIRED"
  };
  enum_identity identity_traits<ethic_response>::identity(sizeof(ethic_response), NULL, "ethic_response", TID(int16_t), 0, 16, enum_traits<ethic_response>::key_table,
                NULL, NULL);
  const char *const enum_traits<ethic_type>::key_table[22] = {
    "KILL_ENTITY_MEMBER",
    "KILL_NEUTRAL",
    "KILL_ENEMY",
    "KILL_ANIMAL",
    "KILL_PLANT",
    "TORTURE_AS_EXAMPLE",
    "TORTURE_FOR_INFORMATION",
    "TORTURE_FOR_FUN",
    "TORTURE_ANIMALS",
    "TREASON",
    "OATH_BREAKING",
    "LYING",
    "VANDALISM",
    "TRESPASSING",
    "THEFT",
    "ASSAULT",
    "SLAVERY",
    "EAT_SAPIENT_OTHER",
    "EAT_SAPIENT_KILL",
    "MAKE_TROPHY_SAME_RACE",
    "MAKE_TROPHY_SAPIENT",
    "MAKE_TROPHY_ANIMAL"
  };
  enum_identity identity_traits<ethic_type>::identity(sizeof(ethic_type), NULL, "ethic_type", TID(int32_t), 0, 21, enum_traits<ethic_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<feature_alteration_type>::key_table[2] = {
    "new_pop_max",
    "new_lava_fill_z"
  };
  enum_identity identity_traits<feature_alteration_type>::identity(sizeof(feature_alteration_type), NULL, "feature_alteration_type", TID(int32_t), 0, 1, enum_traits<feature_alteration_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<feature_init_flags>::key_table[4] = {
    NULL,
    NULL,
    NULL,
    "Discovered"
  };
  enum_identity identity_traits<feature_init_flags>::identity(sizeof(feature_init_flags), NULL, "feature_init_flags", TID(int32_t), 0, 3, enum_traits<feature_init_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<feature_type>::key_table[10] = {
    "outdoor_river",
    "cave",
    "pit",
    "magma_pool",
    "volcano",
    "deep_special_tube",
    "deep_surface_portal",
    "subterranean_from_layer",
    "magma_core_from_layer",
    "feature_underworld_from_layer"
  };
  enum_identity identity_traits<feature_type>::identity(sizeof(feature_type), NULL, "feature_type", TID(int32_t), 0, 9, enum_traits<feature_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<flow_guide_type>::key_table[2] = {
    "TrailingFlow",
    "ItemCloud"
  };
  enum_identity identity_traits<flow_guide_type>::identity(sizeof(flow_guide_type), NULL, "flow_guide_type", TID(int32_t), 0, 1, enum_traits<flow_guide_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<flow_reuse_pool::T_flags>::bits[bit_count] = {
    { "active", 1 }
  };
  bitfield_identity identity_traits<flow_reuse_pool::T_flags>::identity(sizeof(flow_reuse_pool::T_flags), &flow_reuse_pool::_identity, "T_flags", bitfield_traits<flow_reuse_pool::T_flags>::bit_count, bitfield_traits<flow_reuse_pool::T_flags>::bits);
  const char *const enum_traits<flow_type>::key_table[14] = {
    "Miasma",
    "Steam",
    "Mist",
    "MaterialDust",
    "MagmaMist",
    "Smoke",
    "Dragonfire",
    "Fire",
    "Web",
    "MaterialGas",
    "MaterialVapor",
    "OceanWave",
    "SeaFoam",
    "ItemCloud"
  };
  enum_identity identity_traits<flow_type>::identity(sizeof(flow_type), NULL, "flow_type", TID(int16_t), 0, 13, enum_traits<flow_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<furnace_type>::key_table[8] = {
    "WoodFurnace",
    "Smelter",
    "GlassFurnace",
    "Kiln",
    "MagmaSmelter",
    "MagmaGlassFurnace",
    "MagmaKiln",
    "Custom"
  };
  enum_identity identity_traits<furnace_type>::identity(sizeof(furnace_type), NULL, "furnace_type", TID(int16_t), 0, 7, enum_traits<furnace_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<furniture_type>::key_table[33] = {
    "FLOODGATE",
    "HATCH_COVER",
    "GRATE",
    "DOOR",
    "CATAPULTPARTS",
    "BALLISTAPARTS",
    "TRAPPARTS",
    "BED",
    "TRACTION_BENCH",
    "WINDOW",
    "CHAIR",
    "TABLE",
    "COFFIN",
    "STATUE",
    "SLAB",
    "QUERN",
    "MILLSTONE",
    "ARMORSTAND",
    "WEAPONRACK",
    "CABINET",
    "ANVIL",
    "BUCKET",
    "BIN",
    "BOX",
    "SIEGEAMMO",
    "BARREL",
    "BALLISTAARROWHEAD",
    "PIPE_SECTION",
    "FOOD_STORAGE",
    "MINECART",
    "WHEELBARROW",
    "OTHER_LARGE_TOOLS",
    "SAND_BAG"
  };
  enum_identity identity_traits<furniture_type>::identity(sizeof(furniture_type), NULL, "furniture_type", TID(int32_t), 0, 32, enum_traits<furniture_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<gait_info::T_flags>::bits[bit_count] = {
    { "layers_slow", 1 },
    { "strength", 1 },
    { "agility", 1 }
  };
  bitfield_identity identity_traits<gait_info::T_flags>::identity(sizeof(gait_info::T_flags), &gait_info::_identity, "T_flags", bitfield_traits<gait_info::T_flags>::bit_count, bitfield_traits<gait_info::T_flags>::bits);
  const char *const enum_traits<gait_type>::key_table[5] = {
    "WALK",
    "FLY",
    "SWIM",
    "CRAWL",
    "CLIMB"
  };
  enum_identity identity_traits<gait_type>::identity(sizeof(gait_type), NULL, "gait_type", TID(int32_t), 0, 4, enum_traits<gait_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<game_mode>::key_table[4] = {
    "DWARF",
    "ADVENTURE",
    "num",
    "NONE"
  };
  enum_identity identity_traits<game_mode>::identity(sizeof(game_mode), NULL, "game_mode", TID(int32_t), 0, 3, enum_traits<game_mode>::key_table,
                NULL, NULL);
  const char *const enum_traits<game_type>::key_table[12] = {
    "DWARF_MAIN",
    "ADVENTURE_MAIN",
    "VIEW_LEGENDS",
    "DWARF_RECLAIM",
    "DWARF_ARENA",
    "ADVENTURE_ARENA",
    "ADVENTURE_DUNGEON",
    "DWARF_TUTORIAL",
    "DWARF_UNRETIRE",
    "ADVENTURE_WORLD_DEBUG",
    "num",
    "NONE"
  };
  enum_identity identity_traits<game_type>::identity(sizeof(game_type), NULL, "game_type", TID(int32_t), 0, 11, enum_traits<game_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<gate_flags>::bits[bit_count] = {
    { "closed", 1 },
    { "closing", 1 },
    { "opening", 1 },
    { "collapsing", 1 },
    { "has_support", 1 }
  };
  bitfield_identity identity_traits<gate_flags>::identity(sizeof(gate_flags), NULL, "gate_flags", bitfield_traits<gate_flags>::bit_count, bitfield_traits<gate_flags>::bits);
  const bitfield_item_info bitfield_traits<general_ref_creaturest::T_flags>::bits[bit_count] = {
    { "animated_corpse", 1 },
    { "ghostly", 1 }
  };
  bitfield_identity identity_traits<general_ref_creaturest::T_flags>::identity(sizeof(general_ref_creaturest::T_flags), &general_ref_creaturest::_identity, "T_flags", bitfield_traits<general_ref_creaturest::T_flags>::bit_count, bitfield_traits<general_ref_creaturest::T_flags>::bits);
  const bitfield_item_info bitfield_traits<general_ref_entity_popst::T_flags>::bits[bit_count] = {
    { "animated_corpse", 1 },
    { "ghostly", 1 }
  };
  bitfield_identity identity_traits<general_ref_entity_popst::T_flags>::identity(sizeof(general_ref_entity_popst::T_flags), &general_ref_entity_popst::_identity, "T_flags", bitfield_traits<general_ref_entity_popst::T_flags>::bit_count, bitfield_traits<general_ref_entity_popst::T_flags>::bits);
  const char *const enum_traits<general_ref_type>::key_table[58] = {
    "ARTIFACT",
    "IS_ARTIFACT",
    "NEMESIS",
    "IS_NEMESIS",
    "ITEM",
    "ITEM_TYPE",
    "COINBATCH",
    "MAPSQUARE",
    "ENTITY_ART_IMAGE",
    "CONTAINS_UNIT",
    "CONTAINS_ITEM",
    "CONTAINED_IN_ITEM",
    "PROJECTILE",
    "UNIT",
    "UNIT_MILKEE",
    "UNIT_TRAINEE",
    "UNIT_ITEMOWNER",
    "UNIT_TRADEBRINGER",
    "UNIT_HOLDER",
    "UNIT_WORKER",
    "UNIT_CAGEE",
    "UNIT_BEATEE",
    "UNIT_FOODRECEIVER",
    "UNIT_KIDNAPEE",
    "UNIT_PATIENT",
    "UNIT_INFANT",
    "UNIT_SLAUGHTEREE",
    "UNIT_SHEAREE",
    "UNIT_SUCKEE",
    "UNIT_REPORTEE",
    "BUILDING",
    "BUILDING_CIVZONE_ASSIGNED",
    "BUILDING_TRIGGER",
    "BUILDING_TRIGGERTARGET",
    "BUILDING_CHAIN",
    "BUILDING_CAGED",
    "BUILDING_HOLDER",
    "BUILDING_WELL_TAG",
    "BUILDING_USE_TARGET_1",
    "BUILDING_USE_TARGET_2",
    "BUILDING_DESTINATION",
    "BUILDING_NEST_BOX",
    "ENTITY",
    "ENTITY_STOLEN",
    "ENTITY_OFFERED",
    "ENTITY_ITEMOWNER",
    "LOCATION",
    "INTERACTION",
    "ABSTRACT_BUILDING",
    "HISTORICAL_EVENT",
    "SPHERE",
    "SITE",
    "SUBREGION",
    "FEATURE_LAYER",
    "HISTORICAL_FIGURE",
    "ENTITY_POP",
    "CREATURE",
    "UNIT_RIDER"
  };
  enum_identity identity_traits<general_ref_type>::identity(sizeof(general_ref_type), NULL, "general_ref_type", TID(int32_t), 0, 57, enum_traits<general_ref_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<general_ref_unit_itemownerst::T_flags>::bits[bit_count] = {
    { "litter", 1 }
  };
  bitfield_identity identity_traits<general_ref_unit_itemownerst::T_flags>::identity(sizeof(general_ref_unit_itemownerst::T_flags), &general_ref_unit_itemownerst::_identity, "T_flags", bitfield_traits<general_ref_unit_itemownerst::T_flags>::bit_count, bitfield_traits<general_ref_unit_itemownerst::T_flags>::bits);
  const char *const enum_traits<geo_layer_type>::key_table[9] = {
    "SOIL",
    "SEDIMENTARY",
    "METAMORPHIC",
    "IGNEOUS_EXTRUSIVE",
    "IGNEOUS_INTRUSIVE",
    "SOIL_OCEAN",
    "SOIL_SAND",
    "SEDIMENTARY_OCEAN_SHALLOW",
    "SEDIMENTARY_OCEAN_DEEP"
  };
  const enum_traits<geo_layer_type>::attr_entry_type enum_traits<geo_layer_type>::attr_table[9+1] = {
    { inorganic_flags::SOIL },
    { inorganic_flags::SEDIMENTARY },
    { inorganic_flags::METAMORPHIC },
    { inorganic_flags::IGNEOUS_EXTRUSIVE },
    { inorganic_flags::IGNEOUS_INTRUSIVE },
    { inorganic_flags::SOIL_OCEAN },
    { inorganic_flags::SOIL_SAND },
    { inorganic_flags::SEDIMENTARY_OCEAN_SHALLOW },
    { inorganic_flags::SEDIMENTARY_OCEAN_DEEP },
    { (df::inorganic_flags)0 }
  };
  const enum_traits<geo_layer_type>::attr_entry_type & enum_traits<geo_layer_type>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[9];
  }
  enum_identity identity_traits<geo_layer_type>::identity(sizeof(geo_layer_type), NULL, "geo_layer_type", TID(int16_t), 0, 8, enum_traits<geo_layer_type>::key_table,
                enum_traits<geo_layer_type>::attr_table, &enum_traits<geo_layer_type>::attr_entry_type::_identity);
  const char *const enum_traits<ghost_goal>::key_table[9] = {
    "None",
    "ScareToDeath",
    "Stun",
    "Batter",
    "Possess",
    "MisplaceItem",
    "Haunt",
    "Torment",
    "ToppleBuilding"
  };
  enum_identity identity_traits<ghost_goal>::identity(sizeof(ghost_goal), NULL, "ghost_goal", TID(int16_t), -1, 7, enum_traits<ghost_goal>::key_table,
                NULL, NULL);
  const char *const enum_traits<ghost_type>::key_table[11] = {
    "MurderousGhost",
    "SadisticGhost",
    "SecretivePoltergeist",
    "EnergeticPoltergeist",
    "AngryGhost",
    "ViolentGhost",
    "MoaningSpirit",
    "HowlingSpirit",
    "TroublesomePoltergeist",
    "RestlessHaunt",
    "ForlornHaunt"
  };
  enum_identity identity_traits<ghost_type>::identity(sizeof(ghost_type), NULL, "ghost_type", TID(int16_t), 0, 10, enum_traits<ghost_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<gloves_flags>::key_table[1] = {
    "METAL_ARMOR_LEVELS"
  };
  enum_identity identity_traits<gloves_flags>::identity(sizeof(gloves_flags), NULL, "gloves_flags", TID(int32_t), 0, 0, enum_traits<gloves_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<goal_type>::key_table[12] = {
    "STAY_ALIVE",
    "MAINTAIN_ENTITY_STATUS",
    "START_A_FAMILY",
    "RULE_THE_WORLD",
    "CREATE_A_GREAT_WORK_OF_ART",
    "CRAFT_A_MASTERWORK",
    "BRING_PEACE_TO_THE_WORLD",
    "BECOME_A_LEGENDARY_WARRIOR",
    "MASTER_A_SKILL",
    "FALL_IN_LOVE",
    "SEE_THE_GREAT_NATURAL_SITES",
    "IMMORTALITY"
  };
  enum_identity identity_traits<goal_type>::identity(sizeof(goal_type), NULL, "goal_type", TID(int32_t), 0, 11, enum_traits<goal_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<guild_id>::key_table[7] = {
    "None",
    "Miners",
    "Carpenters",
    "Masons",
    "Metalsmiths",
    "Jewelers",
    "Craftsmen"
  };
  enum_identity identity_traits<guild_id>::identity(sizeof(guild_id), NULL, "guild_id", TID(int32_t), -1, 5, enum_traits<guild_id>::key_table,
                NULL, NULL);
  const char *const enum_traits<hauler_type>::key_table[10] = {
    "Any",
    "Stone",
    "Wood",
    "Item",
    "Bin",
    "Body",
    "Food",
    "Refuse",
    "Furniture",
    "Animal"
  };
  enum_identity identity_traits<hauler_type>::identity(sizeof(hauler_type), NULL, "hauler_type", TID(int32_t), 0, 9, enum_traits<hauler_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<health_view_bits1>::bits[bit_count] = {
    { "bleeding_heavy", 1 },
    { "bleeding", 1 },
    { "pale", 1 },
    { "blood_loss_severe", 1 },
    { "faint", 1 },
    { "blood_loss", 1 },
    { "paralyzed", 1 },
    { "paralyzed_partially", 1 },
    { "sluggish", 1 },
    { "numb_completely", 1 },
    { "numb_partially", 1 },
    { "numb_slightly", 1 },
    { "fever_serious", 1 },
    { "fever_moderate", 1 },
    { "fever_slight", 1 },
    { "pain_extreme", 1 },
    { "pain_moderate", 1 },
    { "pain_slight", 1 },
    { "exhausted", 1 },
    { "overexerted", 1 },
    { "tired", 1 },
    { "stunned", 1 },
    { "dizzy", 1 },
    { "drowning", 1 },
    { "winded", 1 },
    { "nauseous", 1 },
    { "drowsy_very", 1 },
    { "drowsy", 1 },
    { "dehydrated", 1 },
    { "thirsty", 1 },
    { "starving", 1 },
    { "hungry", 1 }
  };
  bitfield_identity identity_traits<health_view_bits1>::identity(sizeof(health_view_bits1), NULL, "health_view_bits1", bitfield_traits<health_view_bits1>::bit_count, bitfield_traits<health_view_bits1>::bits);
  const bitfield_item_info bitfield_traits<health_view_bits2>::bits[bit_count] = {
    { "breathe_cant", 1 },
    { "breathe_trouble", 1 },
    { "vision_lost", 1 },
    { "vision_impaired", 1 },
    { "vision_impaired2", 1 },
    { "stand_cant", 1 },
    { "stand_impaired", 1 },
    { "grasp_cant", 1 },
    { "grasp_impaired", 1 },
    { "fly_cant", 1 },
    { "fly_impaired", 1 },
    { "motor_nerve", 1 },
    { "sensory_nerve", 1 },
    { "spilled", 1 },
    { "artery_major", 1 },
    { "artery", 1 },
    { "tendon_torn", 1 },
    { "tendon_strain", 1 },
    { "tendon_bruise", 1 },
    { "ligament_torn", 1 },
    { "ligament_sprain", 1 },
    { "ligament_bruise", 1 },
    { "fracture_compound", 1 },
    { "fracture_overlap", 1 },
    { "need_setting", 1 },
    { "tissue_broken", 1 },
    { "tissue_part_broken", 1 },
    { "damage_heavy", 1 },
    { "damage_moderate", 1 },
    { "damage_light", 1 },
    { "pain_extreme", 1 },
    { "pain_moderate", 1 }
  };
  bitfield_identity identity_traits<health_view_bits2>::identity(sizeof(health_view_bits2), NULL, "health_view_bits2", bitfield_traits<health_view_bits2>::bit_count, bitfield_traits<health_view_bits2>::bits);
  const bitfield_item_info bitfield_traits<health_view_bits3>::bits[bit_count] = {
    { "pain_minor", 1 },
    { "swell_extreme", 1 },
    { "swell_medium", 1 },
    { "swell_minor", 1 },
    { "infection", 1 },
    { "rq_diagnosis", 1 },
    { "rq_crutch", 1 },
    { "inoperable_rot", 1 },
    { "rq_cleaning", 1 },
    { "rq_surgery", 1 },
    { "rq_suture", 1 },
    { "rq_setting", 1 },
    { "rq_dressing", 1 },
    { "rq_traction", 1 },
    { "rq_immobilize", 1 }
  };
  bitfield_identity identity_traits<health_view_bits3>::identity(sizeof(health_view_bits3), NULL, "health_view_bits3", bitfield_traits<health_view_bits3>::bit_count, bitfield_traits<health_view_bits3>::bits);
  const char *const enum_traits<helm_flags>::key_table[1] = {
    "METAL_ARMOR_LEVELS"
  };
  enum_identity identity_traits<helm_flags>::identity(sizeof(helm_flags), NULL, "helm_flags", TID(int32_t), 0, 0, enum_traits<helm_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<hillock_house_type>::key_table[4] = {
    NULL,
    "CivicMound",
    "CastleMound",
    "DrinkingMound"
  };
  enum_identity identity_traits<hillock_house_type>::identity(sizeof(hillock_house_type), NULL, "hillock_house_type", TID(int32_t), 0, 3, enum_traits<hillock_house_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<histfig_body_state>::key_table[7] = {
    "Active",
    "BuriedAtSite",
    "UnburiedAtBattlefield",
    "UnburiedAtSubregion",
    "UnburiedAtFeatureLayer",
    "EntombedAtSite",
    "UnburiedAtSite"
  };
  enum_identity identity_traits<histfig_body_state>::identity(sizeof(histfig_body_state), NULL, "histfig_body_state", TID(int32_t), 0, 6, enum_traits<histfig_body_state>::key_table,
                NULL, NULL);
  const char *const enum_traits<histfig_entity_link_type>::key_table[15] = {
    "MEMBER",
    "FORMER_MEMBER",
    "MERCENARY",
    "FORMER_MERCENARY",
    "SLAVE",
    "FORMER_SLAVE",
    "PRISONER",
    "FORMER_PRISONER",
    "ENEMY",
    "CRIMINAL",
    "POSITION",
    "FORMER_POSITION",
    "POSITION_CLAIM",
    "SQUAD",
    "FORMER_SQUAD"
  };
  enum_identity identity_traits<histfig_entity_link_type>::identity(sizeof(histfig_entity_link_type), NULL, "histfig_entity_link_type", TID(int32_t), 0, 14, enum_traits<histfig_entity_link_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<histfig_flags>::key_table[8] = {
    NULL,
    NULL,
    "deity",
    "force",
    NULL,
    NULL,
    NULL,
    "ghost"
  };
  enum_identity identity_traits<histfig_flags>::identity(sizeof(histfig_flags), NULL, "histfig_flags", TID(int32_t), 0, 7, enum_traits<histfig_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<histfig_hf_link_type>::key_table[11] = {
    "MOTHER",
    "FATHER",
    "SPOUSE",
    "CHILD",
    "DEITY",
    "LOVER",
    "PRISONER",
    "IMPRISONER",
    "MASTER",
    "APPRENTICE",
    "COMPANION"
  };
  enum_identity identity_traits<histfig_hf_link_type>::identity(sizeof(histfig_hf_link_type), NULL, "histfig_hf_link_type", TID(int32_t), 0, 10, enum_traits<histfig_hf_link_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<histfig_relationship_type>::key_table[65] = {
    "Mother",
    "Father",
    "Parent",
    "Husband",
    "Wife",
    "Spouse",
    "SonEldest",
    "SonEldest2",
    "SonEldest3",
    "SonEldest4",
    "SonEldest5",
    "SonEldest6",
    "SonEldest7",
    "SonEldest8",
    "SonEldest9",
    "SonEldest10",
    "Son",
    "SonYoungest",
    "SonOnly",
    "DaughterEldest",
    "DaughterEldest2",
    "DaughterEldest3",
    "DaughterEldest4",
    "DaughterEldest5",
    "DaughterEldest6",
    "DaughterEldest7",
    "DaughterEldest8",
    "DaughterEldest9",
    "DaughterEldest10",
    "Daughter",
    "DaughterOnly",
    "DaughterYoungest",
    "ChildEldest",
    "ChildEldest2",
    "ChildEldest3",
    "ChildEldest4",
    "ChildEldest5",
    "ChildEldest6",
    "ChildEldest7",
    "ChildEldest8",
    "ChildEldest9",
    "ChildEldest10",
    "Child",
    "ChildYoungest",
    "ChildOnly",
    "PaternalGrandmother",
    "PaternalGrandfather",
    "MaternalGrandmother",
    "MaternalGrandfather",
    "Grandmother",
    "Grandfather",
    "Grandparent",
    "OlderBrother",
    "OlderSister",
    "OlderSibling",
    "YoungerBrother",
    "YoungerSister",
    "YoungerSibling",
    "Cousin",
    "Aunt",
    "Uncle",
    "Niece",
    "Nephew",
    "Sibling",
    "Grandchild"
  };
  enum_identity identity_traits<histfig_relationship_type>::identity(sizeof(histfig_relationship_type), NULL, "histfig_relationship_type", TID(int16_t), 0, 64, enum_traits<histfig_relationship_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<histfig_site_link_type>::key_table[6] = {
    "SEAT_OF_POWER",
    "HANGOUT",
    "HOME_SITE_ABSTRACT_BUILDING",
    "HOME_SITE_REALIZATION_BUILDING",
    "LAIR",
    "HOME_SITE_REALIZATION_SUL"
  };
  enum_identity identity_traits<histfig_site_link_type>::identity(sizeof(histfig_site_link_type), NULL, "histfig_site_link_type", TID(int32_t), 0, 5, enum_traits<histfig_site_link_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<historical_entity::T_flags>::bits[bit_count] = {
    { "foreign_civ", 1 },
    { "named_civ", 1 },
    { "unk2", 1 },
    { "unk3", 1 },
    { "unk4", 1 },
    { "worshipping", 1 }
  };
  bitfield_identity identity_traits<historical_entity::T_flags>::identity(sizeof(historical_entity::T_flags), &historical_entity::_identity, "T_flags", bitfield_traits<historical_entity::T_flags>::bit_count, bitfield_traits<historical_entity::T_flags>::bits);
  const char *const enum_traits<historical_entity_type>::key_table[8] = {
    "Civilization",
    "SiteGovernment",
    "VesselCrew",
    "MigratingGroup",
    "NomadicGroup",
    "Religion",
    "MilitaryUnit",
    "Outcast"
  };
  enum_identity identity_traits<historical_entity_type>::identity(sizeof(historical_entity_type), NULL, "historical_entity_type", TID(int32_t), 0, 7, enum_traits<historical_entity_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<historical_kills::T_killed_undead>::bits[bit_count] = {
    { "skeletal", 1 },
    { "zombie", 1 },
    { "ghostly", 1 }
  };
  bitfield_identity identity_traits<historical_kills::T_killed_undead>::identity(sizeof(historical_kills::T_killed_undead), &historical_kills::_identity, "T_killed_undead", bitfield_traits<historical_kills::T_killed_undead>::bit_count, bitfield_traits<historical_kills::T_killed_undead>::bits);
  const char *const enum_traits<history_event_collection_type>::key_table[9] = {
    "WAR",
    "BATTLE",
    "DUEL",
    "SITE_CONQUERED",
    "ABDUCTION",
    "THEFT",
    "BEAST_ATTACK",
    "JOURNEY",
    "INSURRECTION"
  };
  enum_identity identity_traits<history_event_collection_type>::identity(sizeof(history_event_collection_type), NULL, "history_event_collection_type", TID(int32_t), 0, 8, enum_traits<history_event_collection_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<history_event_simple_battle_subtype>::key_table[10] = {
    "SCUFFLE",
    "ATTACK",
    "SURPRISE",
    "AMBUSH",
    "HAPPEN_UPON",
    "CORNER",
    "CONFRONT",
    "LOSE_AFTER_RECEIVE_WOUND",
    "LOSE_AFTER_INFLICT_WOUND",
    "LOSE_AFTER_EXCHANGE_WOUND"
  };
  enum_identity identity_traits<history_event_simple_battle_subtype>::identity(sizeof(history_event_simple_battle_subtype), NULL, "history_event_simple_battle_subtype", TID(int32_t), 0, 9, enum_traits<history_event_simple_battle_subtype>::key_table,
                NULL, NULL);
  const char *const enum_traits<history_event_type>::key_table[82] = {
    "WAR_ATTACKED_SITE",
    "WAR_DESTROYED_SITE",
    "CREATED_SITE",
    "HIST_FIGURE_DIED",
    "ADD_HF_ENTITY_LINK",
    "REMOVE_HF_ENTITY_LINK",
    "FIRST_CONTACT",
    "FIRST_CONTACT_FAILED",
    "TOPICAGREEMENT_CONCLUDED",
    "TOPICAGREEMENT_REJECTED",
    "TOPICAGREEMENT_MADE",
    "WAR_PEACE_ACCEPTED",
    "WAR_PEACE_REJECTED",
    "DIPLOMAT_LOST",
    "AGREEMENTS_VOIDED",
    "MERCHANT",
    "ARTIFACT_HIDDEN",
    "ARTIFACT_POSSESSED",
    "ARTIFACT_CREATED",
    "ARTIFACT_LOST",
    "ARTIFACT_FOUND",
    "ARTIFACT_RECOVERED",
    "ARTIFACT_DROPPED",
    "RECLAIM_SITE",
    "HF_DESTROYED_SITE",
    "SITE_DIED",
    "SITE_RETIRED",
    "ENTITY_CREATED",
    "ENTITY_ACTION",
    "ENTITY_INCORPORATED",
    "CREATED_BUILDING",
    "REPLACED_BUILDING",
    "ADD_HF_SITE_LINK",
    "REMOVE_HF_SITE_LINK",
    "ADD_HF_HF_LINK",
    "REMOVE_HF_HF_LINK",
    "ENTITY_RAZED_BUILDING",
    "MASTERPIECE_CREATED_ARCH_DESIGN",
    "MASTERPIECE_CREATED_ARCH_CONSTRUCT",
    "MASTERPIECE_CREATED_ITEM",
    "MASTERPIECE_CREATED_DYE_ITEM",
    "MASTERPIECE_CREATED_ITEM_IMPROVEMENT",
    "MASTERPIECE_CREATED_FOOD",
    "MASTERPIECE_CREATED_ENGRAVING",
    "MASTERPIECE_LOST",
    "CHANGE_HF_STATE",
    "CHANGE_HF_JOB",
    "WAR_FIELD_BATTLE",
    "WAR_PLUNDERED_SITE",
    "WAR_SITE_NEW_LEADER",
    "WAR_SITE_TRIBUTE_FORCED",
    "WAR_SITE_TAKEN_OVER",
    "BODY_ABUSED",
    "HIST_FIGURE_ABDUCTED",
    "ITEM_STOLEN",
    "HF_RAZED_BUILDING",
    "CREATURE_DEVOURED",
    "HIST_FIGURE_WOUNDED",
    "HIST_FIGURE_SIMPLE_BATTLE_EVENT",
    "CREATED_WORLD_CONSTRUCTION",
    "HIST_FIGURE_REUNION",
    "HIST_FIGURE_REACH_SUMMIT",
    "HIST_FIGURE_TRAVEL",
    "HIST_FIGURE_NEW_PET",
    "ASSUME_IDENTITY",
    "CREATE_ENTITY_POSITION",
    "CHANGE_CREATURE_TYPE",
    "HIST_FIGURE_REVIVED",
    "HF_LEARNS_SECRET",
    "CHANGE_HF_BODY_STATE",
    "HF_ACT_ON_BUILDING",
    "HF_DOES_INTERACTION",
    "HF_CONFRONTED",
    "ENTITY_LAW",
    "HF_GAINS_SECRET_GOAL",
    "ARTIFACT_STORED",
    "AGREEMENT_FORMED",
    "SITE_DISPUTE",
    "AGREEMENT_CONCLUDED",
    "INSURRECTION_STARTED",
    "INSURRECTION_ENDED",
    "HF_ATTACKED_SITE"
  };
  enum_identity identity_traits<history_event_type>::identity(sizeof(history_event_type), NULL, "history_event_type", TID(int32_t), 0, 81, enum_traits<history_event_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<hive_flags>::bits[bit_count] = {
    { "do_install", 1 },
    { "do_gather", 1 },
    { "ready_split", 1 }
  };
  bitfield_identity identity_traits<hive_flags>::identity(sizeof(hive_flags), NULL, "hive_flags", bitfield_traits<hive_flags>::bit_count, bitfield_traits<hive_flags>::bits);
  const bitfield_item_info bitfield_traits<hospital_supplies::T_supplies_needed>::bits[bit_count] = {
    { "splints", 1 },
    { "thread", 1 },
    { "cloth", 1 },
    { "crutches", 1 },
    { "plaster", 1 },
    { "buckets", 1 },
    { "soap", 1 }
  };
  bitfield_identity identity_traits<hospital_supplies::T_supplies_needed>::identity(sizeof(hospital_supplies::T_supplies_needed), &hospital_supplies::_identity, "T_supplies_needed", bitfield_traits<hospital_supplies::T_supplies_needed>::bit_count, bitfield_traits<hospital_supplies::T_supplies_needed>::bits);
  const char *const enum_traits<improvement_type>::key_table[11] = {
    "ART_IMAGE",
    "COVERED",
    "RINGS_HANGING",
    "BANDS",
    "SPIKES",
    "ITEMSPECIFIC",
    "THREAD",
    "CLOTH",
    "SEWN_IMAGE",
    "PAGES",
    "ILLUSTRATION"
  };
  enum_identity identity_traits<improvement_type>::identity(sizeof(improvement_type), NULL, "improvement_type", TID(int32_t), 0, 10, enum_traits<improvement_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<incident::T_flags>::bits[bit_count] = {
    { "announced_missing", 1 },
    { "discovered", 1 },
    { "unk2", 1 }
  };
  bitfield_identity identity_traits<incident::T_flags>::identity(sizeof(incident::T_flags), &incident::_identity, "T_flags", bitfield_traits<incident::T_flags>::bit_count, bitfield_traits<incident::T_flags>::bits);
  const char *const enum_traits<inclusion_type>::key_table[5] = {
    NULL,
    "VEIN",
    "CLUSTER",
    "CLUSTER_SMALL",
    "CLUSTER_ONE"
  };
  enum_identity identity_traits<inclusion_type>::identity(sizeof(inclusion_type), NULL, "inclusion_type", TID(int16_t), 0, 4, enum_traits<inclusion_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<init_display::T_windowed>::key_table[3] = {
    "True",
    "False",
    "Prompt"
  };
  enum_identity identity_traits<init_display::T_windowed>::identity(sizeof(init_display::T_windowed), &init_display::_identity, "T_windowed", TID(int32_t), 0, 2, enum_traits<init_display::T_windowed>::key_table,
                NULL, NULL);
  const char *const enum_traits<init_display_flags>::key_table[15] = {
    "USE_GRAPHICS",
    "BLACK_SPACE",
    "PARTIAL_PRINT",
    "FRAME_BUFFER",
    "SINGLE_BUFFER",
    "ACCUM_BUFFER",
    "VBO",
    "RENDER_2D",
    "RENDER_2DHW",
    "RENDER_2DASYNC",
    "UNUSED_01_08",
    "TEXT",
    "SHADER",
    "NOT_RESIZABLE",
    "ARB_SYNC"
  };
  enum_identity identity_traits<init_display_flags>::identity(sizeof(init_display_flags), NULL, "init_display_flags", TID(int32_t), 0, 14, enum_traits<init_display_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<init_font::T_use_ttf>::key_table[3] = {
    "TTF_OFF",
    "TTF_ON",
    "TTF_AUTO"
  };
  enum_identity identity_traits<init_font::T_use_ttf>::identity(sizeof(init_font::T_use_ttf), &init_font::_identity, "T_use_ttf", TID(int32_t), 0, 2, enum_traits<init_font::T_use_ttf>::key_table,
                NULL, NULL);
  const char *const enum_traits<init_input_flags>::key_table[2] = {
    "MOUSE_OFF",
    "MOUSE_PICTURE"
  };
  enum_identity identity_traits<init_input_flags>::identity(sizeof(init_input_flags), NULL, "init_input_flags", TID(int32_t), 0, 1, enum_traits<init_input_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<init_media_flags>::key_table[3] = {
    "SOUND_OFF",
    "INTRO_OFF",
    "COMPRESS_SAVES"
  };
  enum_identity identity_traits<init_media_flags>::identity(sizeof(init_media_flags), NULL, "init_media_flags", TID(int32_t), 0, 2, enum_traits<init_media_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<init_window_flags>::key_table[4] = {
    "TOPMOST",
    "VSYNC_ON",
    "VSYNC_OFF",
    "TEXTURE_LINEAR"
  };
  enum_identity identity_traits<init_window_flags>::identity(sizeof(init_window_flags), NULL, "init_window_flags", TID(int32_t), 0, 3, enum_traits<init_window_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<inorganic_flags>::key_table[32] = {
    "LAVA",
    "GENERATED",
    "ENVIRONMENT_NON_SOIL_OCEAN",
    "SEDIMENTARY",
    "SEDIMENTARY_OCEAN_SHALLOW",
    "IGNEOUS_INTRUSIVE",
    "IGNEOUS_EXTRUSIVE",
    "METAMORPHIC",
    "DEEP_SURFACE",
    "METAL_ORE",
    "AQUIFER",
    "SOIL_ANY",
    "SOIL_OCEAN",
    "SOIL_SAND",
    "SEDIMENTARY_OCEAN_DEEP",
    "THREAD_METAL",
    "SPECIAL",
    "SOIL",
    "DEEP_SPECIAL",
    "DIVINE",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    "WAFERS",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
  };
  enum_identity identity_traits<inorganic_flags>::identity(sizeof(inorganic_flags), NULL, "inorganic_flags", TID(int32_t), 0, 31, enum_traits<inorganic_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<instrument_flags>::key_table[1] = {
    "HARD_MAT"
  };
  enum_identity identity_traits<instrument_flags>::identity(sizeof(instrument_flags), NULL, "instrument_flags", TID(int32_t), 0, 0, enum_traits<instrument_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<insurrection_outcome>::key_table[3] = {
    "LeadershipOverthrown",
    "PopulationGone",
    "Crushed"
  };
  enum_identity identity_traits<insurrection_outcome>::identity(sizeof(insurrection_outcome), NULL, "insurrection_outcome", TID(int32_t), 0, 2, enum_traits<insurrection_outcome>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<interaction_effect::T_flags>::bits[bit_count] = {
    { "IMMEDIATE", 1 }
  };
  bitfield_identity identity_traits<interaction_effect::T_flags>::identity(sizeof(interaction_effect::T_flags), &interaction_effect::_identity, "T_flags", bitfield_traits<interaction_effect::T_flags>::bit_count, bitfield_traits<interaction_effect::T_flags>::bits);
  const char *const enum_traits<interaction_effect_location_hint>::key_table[4] = {
    "IN_WATER",
    "IN_MAGMA",
    "NO_WATER",
    "NO_MAGMA"
  };
  enum_identity identity_traits<interaction_effect_location_hint>::identity(sizeof(interaction_effect_location_hint), NULL, "interaction_effect_location_hint", TID(int32_t), 0, 3, enum_traits<interaction_effect_location_hint>::key_table,
                NULL, NULL);
  const char *const enum_traits<interaction_effect_type>::key_table[7] = {
    "ANIMATE",
    "ADD_SYNDROME",
    "RESURRECT",
    "CLEAN",
    "CONTACT",
    "MATERIAL_EMISSION",
    "HIDE"
  };
  enum_identity identity_traits<interaction_effect_type>::identity(sizeof(interaction_effect_type), NULL, "interaction_effect_type", TID(int32_t), 0, 6, enum_traits<interaction_effect_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<interaction_source_regionst::T_region_flags>::bits[bit_count] = {
    { "NORMAL_ALLOWED", 1 },
    { "EVIL_ALLOWED", 1 },
    { "GOOD_ALLOWED", 1 },
    { "SAVAGE_ALLOWED", 1 },
    { "EVIL_ONLY", 1 },
    { "GOOD_ONLY", 1 },
    { "SAVAGE_ONLY", 1 }
  };
  bitfield_identity identity_traits<interaction_source_regionst::T_region_flags>::identity(sizeof(interaction_source_regionst::T_region_flags), &interaction_source_regionst::_identity, "T_region_flags", bitfield_traits<interaction_source_regionst::T_region_flags>::bit_count, bitfield_traits<interaction_source_regionst::T_region_flags>::bits);
  const bitfield_item_info bitfield_traits<interaction_source_secretst::T_learn_flags>::bits[bit_count] = {
    { "SUPERNATURAL_LEARNING_POSSIBLE", 1 },
    { "MUNDANE_RESEARCH_POSSIBLE", 1 },
    { "MUNDANE_RECORDING_POSSIBLE", 1 },
    { "MUNDANE_TEACHING_POSSIBLE", 1 }
  };
  bitfield_identity identity_traits<interaction_source_secretst::T_learn_flags>::identity(sizeof(interaction_source_secretst::T_learn_flags), &interaction_source_secretst::_identity, "T_learn_flags", bitfield_traits<interaction_source_secretst::T_learn_flags>::bit_count, bitfield_traits<interaction_source_secretst::T_learn_flags>::bits);
  const char *const enum_traits<interaction_source_type>::key_table[8] = {
    "REGION",
    "SECRET",
    "DISTURBANCE",
    "DEITY",
    "ATTACK",
    "INGESTION",
    "CREATURE_ACTION",
    "UNDERGROUND_SPECIAL"
  };
  enum_identity identity_traits<interaction_source_type>::identity(sizeof(interaction_source_type), NULL, "interaction_source_type", TID(int32_t), 0, 7, enum_traits<interaction_source_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<interaction_source_usage_hint>::key_table[8] = {
    "MAJOR_CURSE",
    "GREETING",
    "CLEAN_SELF",
    "CLEAN_FRIEND",
    "ATTACK",
    "FLEEING",
    "NEGATIVE_SOCIAL_RESPONSE",
    "TORMENT"
  };
  enum_identity identity_traits<interaction_source_usage_hint>::identity(sizeof(interaction_source_usage_hint), NULL, "interaction_source_usage_hint", TID(int32_t), 0, 7, enum_traits<interaction_source_usage_hint>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<interaction_target_info::T_restrictions>::bits[bit_count] = {
    { "CANNOT_TARGET_IF_ALREADY_AFFECTED", 1 }
  };
  bitfield_identity identity_traits<interaction_target_info::T_restrictions>::identity(sizeof(interaction_target_info::T_restrictions), &interaction_target_info::_identity, "T_restrictions", bitfield_traits<interaction_target_info::T_restrictions>::bit_count, bitfield_traits<interaction_target_info::T_restrictions>::bits);
  const char *const enum_traits<interaction_target_location_type>::key_table[7] = {
    "CONTEXT_NONE",
    "CONTEXT_REGION",
    "CONTEXT_CREATURE",
    "CONTEXT_ITEM",
    "CONTEXT_BP",
    "CONTEXT_LOCATION",
    "CONTEXT_CREATURE_OR_LOCATION"
  };
  enum_identity identity_traits<interaction_target_location_type>::identity(sizeof(interaction_target_location_type), NULL, "interaction_target_location_type", TID(int32_t), -1, 5, enum_traits<interaction_target_location_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<interaction_target_materialst::T_restrictions>::bits[bit_count] = {
    { "CONTEXT_MATERIAL", 1 }
  };
  bitfield_identity identity_traits<interaction_target_materialst::T_restrictions>::identity(sizeof(interaction_target_materialst::T_restrictions), &interaction_target_materialst::_identity, "T_restrictions", bitfield_traits<interaction_target_materialst::T_restrictions>::bit_count, bitfield_traits<interaction_target_materialst::T_restrictions>::bits);
  const char *const enum_traits<interaction_target_type>::key_table[4] = {
    "CORPSE",
    "CREATURE",
    "MATERIAL",
    "LOCATION"
  };
  enum_identity identity_traits<interaction_target_type>::identity(sizeof(interaction_target_type), NULL, "interaction_target_type", TID(int32_t), 0, 3, enum_traits<interaction_target_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<interface_breakdown_types>::key_table[4] = {
    "NONE",
    "QUIT",
    "STOPSCREEN",
    "TOFIRST"
  };
  enum_identity identity_traits<interface_breakdown_types>::identity(sizeof(interface_breakdown_types), NULL, "interface_breakdown_types", TID(int8_t), 0, 3, enum_traits<interface_breakdown_types>::key_table,
                NULL, NULL);
  const char *const enum_traits<interface_key>::key_table[1481] = {
    "NONE",
    "SELECT",
    "SEC_SELECT",
    "DESELECT",
    "SELECT_ALL",
    "DESELECT_ALL",
    "LEAVESCREEN",
    "LEAVESCREEN_ALL",
    "CLOSE_MEGA_ANNOUNCEMENT",
    "OPTIONS",
    "OPTION_EXPORT",
    "HELP",
    "TOGGLE_FULLSCREEN",
    "MOVIES",
    "ZOOM_IN",
    "ZOOM_OUT",
    "ZOOM_TOGGLE",
    "ZOOM_RESET",
    "MOVIE_RECORD",
    "MOVIE_PLAY",
    "MOVIE_SAVE",
    "MOVIE_LOAD",
    "TOGGLE_TTF",
    "FPS_UP",
    "FPS_DOWN",
    "CHANGETAB",
    "SEC_CHANGETAB",
    "STANDARDSCROLL_UP",
    "STANDARDSCROLL_DOWN",
    "STANDARDSCROLL_LEFT",
    "STANDARDSCROLL_RIGHT",
    "STANDARDSCROLL_PAGEUP",
    "STANDARDSCROLL_PAGEDOWN",
    "SECONDSCROLL_UP",
    "SECONDSCROLL_DOWN",
    "SECONDSCROLL_PAGEUP",
    "SECONDSCROLL_PAGEDOWN",
    "CURSOR_UP",
    "CURSOR_DOWN",
    "CURSOR_LEFT",
    "CURSOR_RIGHT",
    "CURSOR_UPLEFT",
    "CURSOR_UPRIGHT",
    "CURSOR_DOWNLEFT",
    "CURSOR_DOWNRIGHT",
    "CURSOR_UP_FAST",
    "CURSOR_DOWN_FAST",
    "CURSOR_LEFT_FAST",
    "CURSOR_RIGHT_FAST",
    "CURSOR_UPLEFT_FAST",
    "CURSOR_UPRIGHT_FAST",
    "CURSOR_DOWNLEFT_FAST",
    "CURSOR_DOWNRIGHT_FAST",
    "CURSOR_UP_Z",
    "CURSOR_DOWN_Z",
    "CURSOR_UP_Z_AUX",
    "CURSOR_DOWN_Z_AUX",
    "MENU_CONFIRM",
    "SAVE_BINDINGS",
    "LOAD_BINDINGS",
    "MACRO_BREAK",
    "RECORD_MACRO",
    "PLAY_MACRO",
    "SAVE_MACRO",
    "LOAD_MACRO",
    "PREFIX",
    "OPTION1",
    "OPTION2",
    "OPTION3",
    "OPTION4",
    "OPTION5",
    "OPTION6",
    "OPTION7",
    "OPTION8",
    "OPTION9",
    "OPTION10",
    "OPTION11",
    "OPTION12",
    "OPTION13",
    "OPTION14",
    "OPTION15",
    "OPTION16",
    "OPTION17",
    "OPTION18",
    "OPTION19",
    "OPTION20",
    "SEC_OPTION1",
    "SEC_OPTION2",
    "SEC_OPTION3",
    "SEC_OPTION4",
    "SEC_OPTION5",
    "SEC_OPTION6",
    "SEC_OPTION7",
    "SEC_OPTION8",
    "SEC_OPTION9",
    "SEC_OPTION10",
    "SEC_OPTION11",
    "SEC_OPTION12",
    "SEC_OPTION13",
    "SEC_OPTION14",
    "SEC_OPTION15",
    "SEC_OPTION16",
    "SEC_OPTION17",
    "SEC_OPTION18",
    "SEC_OPTION19",
    "SEC_OPTION20",
    "CUSTOM_A",
    "CUSTOM_B",
    "CUSTOM_C",
    "CUSTOM_D",
    "CUSTOM_E",
    "CUSTOM_F",
    "CUSTOM_G",
    "CUSTOM_H",
    "CUSTOM_I",
    "CUSTOM_J",
    "CUSTOM_K",
    "CUSTOM_L",
    "CUSTOM_M",
    "CUSTOM_N",
    "CUSTOM_O",
    "CUSTOM_P",
    "CUSTOM_Q",
    "CUSTOM_R",
    "CUSTOM_S",
    "CUSTOM_T",
    "CUSTOM_U",
    "CUSTOM_V",
    "CUSTOM_W",
    "CUSTOM_X",
    "CUSTOM_Y",
    "CUSTOM_Z",
    "CUSTOM_SHIFT_A",
    "CUSTOM_SHIFT_B",
    "CUSTOM_SHIFT_C",
    "CUSTOM_SHIFT_D",
    "CUSTOM_SHIFT_E",
    "CUSTOM_SHIFT_F",
    "CUSTOM_SHIFT_G",
    "CUSTOM_SHIFT_H",
    "CUSTOM_SHIFT_I",
    "CUSTOM_SHIFT_J",
    "CUSTOM_SHIFT_K",
    "CUSTOM_SHIFT_L",
    "CUSTOM_SHIFT_M",
    "CUSTOM_SHIFT_N",
    "CUSTOM_SHIFT_O",
    "CUSTOM_SHIFT_P",
    "CUSTOM_SHIFT_Q",
    "CUSTOM_SHIFT_R",
    "CUSTOM_SHIFT_S",
    "CUSTOM_SHIFT_T",
    "CUSTOM_SHIFT_U",
    "CUSTOM_SHIFT_V",
    "CUSTOM_SHIFT_W",
    "CUSTOM_SHIFT_X",
    "CUSTOM_SHIFT_Y",
    "CUSTOM_SHIFT_Z",
    "CUSTOM_CTRL_A",
    "CUSTOM_CTRL_B",
    "CUSTOM_CTRL_C",
    "CUSTOM_CTRL_D",
    "CUSTOM_CTRL_E",
    "CUSTOM_CTRL_F",
    "CUSTOM_CTRL_G",
    "CUSTOM_CTRL_H",
    "CUSTOM_CTRL_I",
    "CUSTOM_CTRL_J",
    "CUSTOM_CTRL_K",
    "CUSTOM_CTRL_L",
    "CUSTOM_CTRL_M",
    "CUSTOM_CTRL_N",
    "CUSTOM_CTRL_O",
    "CUSTOM_CTRL_P",
    "CUSTOM_CTRL_Q",
    "CUSTOM_CTRL_R",
    "CUSTOM_CTRL_S",
    "CUSTOM_CTRL_T",
    "CUSTOM_CTRL_U",
    "CUSTOM_CTRL_V",
    "CUSTOM_CTRL_W",
    "CUSTOM_CTRL_X",
    "CUSTOM_CTRL_Y",
    "CUSTOM_CTRL_Z",
    "CUSTOM_ALT_A",
    "CUSTOM_ALT_B",
    "CUSTOM_ALT_C",
    "CUSTOM_ALT_D",
    "CUSTOM_ALT_E",
    "CUSTOM_ALT_F",
    "CUSTOM_ALT_G",
    "CUSTOM_ALT_H",
    "CUSTOM_ALT_I",
    "CUSTOM_ALT_J",
    "CUSTOM_ALT_K",
    "CUSTOM_ALT_L",
    "CUSTOM_ALT_M",
    "CUSTOM_ALT_N",
    "CUSTOM_ALT_O",
    "CUSTOM_ALT_P",
    "CUSTOM_ALT_Q",
    "CUSTOM_ALT_R",
    "CUSTOM_ALT_S",
    "CUSTOM_ALT_T",
    "CUSTOM_ALT_U",
    "CUSTOM_ALT_V",
    "CUSTOM_ALT_W",
    "CUSTOM_ALT_X",
    "CUSTOM_ALT_Y",
    "CUSTOM_ALT_Z",
    "WORLD_PARAM_TITLE",
    "WORLD_PARAM_ADD",
    "WORLD_PARAM_COPY",
    "WORLD_PARAM_DELETE",
    "WORLD_PARAM_NAME_RANDOM",
    "WORLD_PARAM_NAME_ENTER",
    "WORLD_PARAM_SEED_RANDOM",
    "WORLD_PARAM_SEED_ENTER",
    "WORLD_PARAM_LOAD",
    "WORLD_PARAM_SAVE",
    "WORLD_PARAM_DIM_X_UP",
    "WORLD_PARAM_DIM_X_DOWN",
    "WORLD_PARAM_DIM_Y_UP",
    "WORLD_PARAM_DIM_Y_DOWN",
    "WORLD_PARAM_SET",
    "WORLD_PARAM_INCREASE",
    "WORLD_PARAM_DECREASE",
    "WORLD_PARAM_ENTER_VALUE",
    "WORLD_PARAM_NULLIFY",
    "WORLD_PARAM_PRESET",
    "WORLD_PARAM_REJECT_CONTINUE",
    "WORLD_PARAM_REJECT_ABORT",
    "WORLD_PARAM_REJECT_ALLOW_THIS",
    "WORLD_PARAM_REJECT_ALLOW_ALL",
    "WORLD_GEN_CONTINUE",
    "WORLD_GEN_USE",
    "WORLD_GEN_ABORT",
    "WORLDGEN_EXPORT_MAP",
    "LEGENDS_EXPORT_MAP",
    "LEGENDS_EXPORT_XML",
    "LEGENDS_EXPORT_DETAILED_MAP",
    "LEGENDS_TOGGLE_CIVSITE",
    "LEGENDS_STRING_FILTER",
    "A_RETURN_TO_ARENA",
    "A_MOVE_N",
    "A_MOVE_S",
    "A_MOVE_E",
    "A_MOVE_W",
    "A_MOVE_NW",
    "A_MOVE_NE",
    "A_MOVE_SW",
    "A_MOVE_SE",
    "A_MOVE_SAME_SQUARE",
    "A_CARE_MOVE_N",
    "A_CARE_MOVE_S",
    "A_CARE_MOVE_E",
    "A_CARE_MOVE_W",
    "A_CARE_MOVE_NW",
    "A_CARE_MOVE_NE",
    "A_CARE_MOVE_SW",
    "A_CARE_MOVE_SE",
    "A_CARE_MOVE_UPDOWN",
    "A_MOVE_N_UP",
    "A_MOVE_S_UP",
    "A_MOVE_E_UP",
    "A_MOVE_W_UP",
    "A_MOVE_NW_UP",
    "A_MOVE_NE_UP",
    "A_MOVE_SW_UP",
    "A_MOVE_SE_UP",
    "A_MOVE_UP",
    "A_MOVE_N_DOWN",
    "A_MOVE_S_DOWN",
    "A_MOVE_E_DOWN",
    "A_MOVE_W_DOWN",
    "A_MOVE_NW_DOWN",
    "A_MOVE_NE_DOWN",
    "A_MOVE_SW_DOWN",
    "A_MOVE_SE_DOWN",
    "A_MOVE_DOWN",
    "A_MOVE_UP_AUX",
    "A_MOVE_DOWN_AUX",
    "A_COMBAT_ATTACK",
    "A_COMBAT_DODGE",
    "A_COMBAT_CHARGEDEF",
    "A_STATUS",
    "A_STATUS_WRESTLE",
    "A_STATUS_CUSTOMIZE",
    "A_STATUS_KILLS",
    "A_STATUS_HEALTH",
    "A_STATUS_ATT_SKILL",
    "A_STATUS_DESC",
    "A_CLEAR_ANNOUNCEMENTS",
    "A_SLEEP",
    "A_SLEEP_SLEEP",
    "A_SLEEP_WAIT",
    "A_SLEEP_DAWN",
    "A_WAIT",
    "A_SHORT_WAIT",
    "A_ATTACK",
    "A_ATTACK_CONFIRM",
    "QUICK_ATTACK",
    "HEAVY_ATTACK",
    "WILD_ATTACK",
    "PRECISE_ATTACK",
    "CHARGE_ATTACK",
    "MULTI_ATTACK",
    "A_LOOK",
    "A_SEARCH",
    "A_ODOR",
    "A_DISPLAY_ODOR",
    "A_YIELD",
    "A_DISPLAY_TRACKS",
    "A_FRESHEST_TRACK",
    "A_INV_DRAW_WEAPON",
    "A_JUMP",
    "A_HOLD",
    "A_TALK",
    "A_INTERACT",
    "A_ACTION",
    "A_ACTION_CREATE",
    "A_ACTION_BUTCHER",
    "A_ACTION_ABILITY",
    "A_ACTION_POWER",
    "A_INV_LOOK",
    "A_INV_REMOVE",
    "A_INV_WEAR",
    "A_INV_EATDRINK",
    "A_INV_PUTIN",
    "A_INV_DROP",
    "A_GROUND",
    "A_THROW",
    "A_SHOOT",
    "A_ANNOUNCEMENTS",
    "A_COMBAT",
    "A_MOVEMENT",
    "A_MOVEMENT_SWIM",
    "A_SNEAK",
    "A_SPEED_SNEAK",
    "A_CENTER",
    "A_COMPANIONS",
    "A_BUILDING",
    "A_TRAVEL",
    "A_TRAVEL_SLEEP",
    "A_TRAVEL_MAP",
    "A_TRAVEL_HIDE_INSTRUCTIONS",
    "A_DATE",
    "A_WEATHER",
    "A_TEMPERATURE",
    "A_STANCE",
    "A_ENTER_NAME",
    "A_CUST_NAME",
    "A_RANDOM_NAME",
    "A_CHANGE_GENDER",
    "A_END_TRAVEL",
    "A_TRAVEL_CLOUDS",
    "A_LOG",
    "A_TRAVEL_LOG",
    "A_LOG_TASKS",
    "A_LOG_ENTITIES",
    "A_LOG_SITES",
    "A_LOG_SUBREGIONS",
    "A_LOG_FEATURE_LAYERS",
    "A_LOG_PEOPLE",
    "A_LOG_AGREEMENTS",
    "A_LOG_EVENTS",
    "A_LOG_BESTIARY",
    "A_LOG_FILTER",
    "A_LOG_ZOOM_CURRENT_LOCATION",
    "A_LOG_ZOOM_SELECTED",
    "A_LOG_LINE",
    "A_LOG_MAP",
    "A_BARTER_VIEW",
    "A_BARTER_CURRENCY_1",
    "A_BARTER_CURRENCY_2",
    "A_BARTER_TRADE",
    "SETUP_EMBARK",
    "SETUP_NAME_FORT",
    "SETUP_NAME_GROUP",
    "SETUP_RECLAIM",
    "SETUP_FIND",
    "SETUP_NOTES",
    "SETUP_NOTES_TAKE_NOTES",
    "SETUP_NOTES_DELETE_NOTE",
    "SETUP_NOTES_CHANGE_SYMBOL_SELECTION",
    "SETUP_NOTES_ADOPT_SYMBOL",
    "SETUP_LOCAL_Y_UP",
    "SETUP_LOCAL_Y_DOWN",
    "SETUP_LOCAL_X_UP",
    "SETUP_LOCAL_X_DOWN",
    "SETUP_LOCAL_Y_MUP",
    "SETUP_LOCAL_Y_MDOWN",
    "SETUP_LOCAL_X_MUP",
    "SETUP_LOCAL_X_MDOWN",
    "SETUP_BIOME_1",
    "SETUP_BIOME_2",
    "SETUP_BIOME_3",
    "SETUP_BIOME_4",
    "SETUP_BIOME_5",
    "SETUP_BIOME_6",
    "SETUP_BIOME_7",
    "SETUP_BIOME_8",
    "SETUP_BIOME_9",
    "CHOOSE_NAME_RANDOM",
    "CHOOSE_NAME_CLEAR",
    "CHOOSE_NAME_TYPE",
    "SETUPGAME_NEW",
    "SETUPGAME_VIEW",
    "SETUPGAME_CUSTOMIZE_UNIT",
    "SETUPGAME_SAVE_PROFILE",
    "SETUPGAME_SAVE_PROFILE_ABORT",
    "SETUPGAME_SAVE_PROFILE_GO",
    "SETUPGAME_VIEW_PROFILE_PROBLEMS",
    "BUILDJOB_ADD",
    "BUILDJOB_CANCEL",
    "BUILDJOB_PROMOTE",
    "BUILDJOB_NOW",
    "BUILDJOB_REPEAT",
    "BUILDJOB_SUSPEND",
    "BUILDJOB_WORKSHOP_PROFILE",
    "BUILDJOB_WELL_FREE",
    "BUILDJOB_WELL_SIZE",
    "BUILDJOB_TARGET_FREE",
    "BUILDJOB_TARGET_SIZE",
    "BUILDJOB_TARGET_DOWN",
    "BUILDJOB_TARGET_UP",
    "BUILDJOB_TARGET_RIGHT",
    "BUILDJOB_TARGET_LEFT",
    "BUILDJOB_STATUE_ASSIGN",
    "BUILDJOB_STATUE_FREE",
    "BUILDJOB_STATUE_SIZE",
    "BUILDJOB_CAGE_JUSTICE",
    "BUILDJOB_CAGE_FREE",
    "BUILDJOB_CAGE_SIZE",
    "BUILDJOB_CAGE_ASSIGN_OCC",
    "BUILDJOB_CAGE_WATER",
    "BUILDJOB_CAGE_ASSIGN",
    "BUILDJOB_CHAIN_ASSIGN_OCC",
    "BUILDJOB_CHAIN_JUSTICE",
    "BUILDJOB_CHAIN_ASSIGN",
    "BUILDJOB_CHAIN_FREE",
    "BUILDJOB_CHAIN_SIZE",
    "BUILDJOB_SIEGE_FIRING",
    "BUILDJOB_SIEGE_ORIENT",
    "BUILDJOB_DOOR_INTERNAL",
    "BUILDJOB_DOOR_LOCK",
    "BUILDJOB_DOOR_AJAR",
    "BUILDJOB_COFFIN_ASSIGN",
    "BUILDJOB_COFFIN_FREE",
    "BUILDJOB_COFFIN_SIZE",
    "BUILDJOB_COFFIN_BURIAL",
    "BUILDJOB_COFFIN_CIV",
    "BUILDJOB_COFFIN_PET",
    "BUILDJOB_CHAIR_ASSIGN",
    "BUILDJOB_CHAIR_FREE",
    "BUILDJOB_CHAIR_SIZE",
    "BUILDJOB_TABLE_ASSIGN",
    "BUILDJOB_TABLE_HALL",
    "BUILDJOB_TABLE_FREE",
    "BUILDJOB_TABLE_SIZE",
    "BUILDJOB_BED_ASSIGN",
    "BUILDJOB_BED_FREE",
    "BUILDJOB_BED_BARRACKS",
    "BUILDJOB_BED_DORMITORY",
    "BUILDJOB_BED_RENT",
    "BUILDJOB_BED_SIZE",
    "BUILDJOB_BED_NAME",
    "BUILDJOB_BED_SLEEP",
    "BUILDJOB_BED_TRAIN",
    "BUILDJOB_BED_INDIV_EQ",
    "BUILDJOB_BED_SQUAD_EQ",
    "BUILDJOB_BED_POSITION",
    "BUILDJOB_DEPOT_BRING",
    "BUILDJOB_DEPOT_TRADE",
    "BUILDJOB_DEPOT_REQUEST_TRADER",
    "BUILDJOB_DEPOT_BROKER_ONLY",
    "BUILDJOB_ANIMALTRAP_BAIT_NONE",
    "BUILDJOB_ANIMALTRAP_BAIT_MEAT",
    "BUILDJOB_ANIMALTRAP_BAIT_FISH",
    "BUILDJOB_ANIMALTRAP_BAIT_GEM",
    "BUILDJOB_FARM_FALLOW",
    "BUILDJOB_FARM_FERTILIZE",
    "BUILDJOB_FARM_SEASFERT",
    "BUILDJOB_FARM_SPRING",
    "BUILDJOB_FARM_SUMMER",
    "BUILDJOB_FARM_AUTUMN",
    "BUILDJOB_FARM_WINTER",
    "BUILDJOB_RACK_MAT_BONE",
    "BUILDJOB_RACK_MAT_BRONZE",
    "BUILDJOB_RACK_MAT_COPPER",
    "BUILDJOB_RACK_MAT_IRON",
    "BUILDJOB_RACK_MAT_STEEL",
    "BUILDJOB_RACK_MAT_WOOD",
    "BUILDJOB_RACK_MAT_METAL",
    "BUILDJOB_STAND_MAT_BONE",
    "BUILDJOB_STAND_MAT_LEATHER",
    "BUILDJOB_STAND_MAT_COPPER",
    "BUILDJOB_STAND_MAT_BRONZE",
    "BUILDJOB_STAND_MAT_STEEL",
    "BUILDJOB_STAND_MAT_IRON",
    "BUILDJOB_STAND_MAT_WOOD",
    "BUILDJOB_STAND_MAT_METAL",
    "BUILDJOB_RACKSTAND_ASSIGN",
    "BUILDJOB_RACKSTAND_FREE",
    "BUILDJOB_RACKSTAND_SIZE",
    "BUILDJOB_RACKSTAND_ITEM",
    "BUILDJOB_RACKSTAND_MAT",
    "BUILDJOB_RACKSTAND_DEFAULTS1",
    "BUILDJOB_RACKSTAND_KILL1",
    "BUILDJOB_RACKSTAND_DEFAULTS2",
    "BUILDJOB_RACKSTAND_KILL2",
    "HOTKEY_BUILDING_ARMORSTAND",
    "HOTKEY_BUILDING_BED",
    "HOTKEY_BUILDING_CHAIR",
    "HOTKEY_BUILDING_COFFIN",
    "HOTKEY_BUILDING_DOOR",
    "HOTKEY_BUILDING_FLOODGATE",
    "HOTKEY_BUILDING_HATCH",
    "HOTKEY_BUILDING_GRATE_WALL",
    "HOTKEY_BUILDING_GRATE_FLOOR",
    "HOTKEY_BUILDING_BARS_VERTICAL",
    "HOTKEY_BUILDING_BARS_FLOOR",
    "HOTKEY_BUILDING_CABINET",
    "HOTKEY_BUILDING_BOX",
    "HOTKEY_BUILDING_KENNEL",
    "HOTKEY_BUILDING_FARMPLOT",
    "HOTKEY_BUILDING_WEAPONRACK",
    "HOTKEY_BUILDING_STATUE",
    "HOTKEY_BUILDING_TABLE",
    "HOTKEY_BUILDING_ROAD_DIRT",
    "HOTKEY_BUILDING_ROAD_PAVED",
    "HOTKEY_BUILDING_BRIDGE",
    "HOTKEY_BUILDING_WELL",
    "HOTKEY_BUILDING_SIEGEENGINE",
    "HOTKEY_BUILDING_WORKSHOP",
    "HOTKEY_BUILDING_FURNACE",
    "HOTKEY_BUILDING_WINDOW_GLASS",
    "HOTKEY_BUILDING_WINDOW_GEM",
    "HOTKEY_BUILDING_SHOP",
    "HOTKEY_BUILDING_ANIMALTRAP",
    "HOTKEY_BUILDING_CHAIN",
    "HOTKEY_BUILDING_CAGE",
    "HOTKEY_BUILDING_TRADEDEPOT",
    "HOTKEY_BUILDING_TRAP",
    "HOTKEY_BUILDING_MACHINE",
    "HOTKEY_BUILDING_SUPPORT",
    "HOTKEY_BUILDING_ARCHERYTARGET",
    "HOTKEY_BUILDING_TRACTION_BENCH",
    "HOTKEY_BUILDING_SLAB",
    "HOTKEY_BUILDING_NEST_BOX",
    "HOTKEY_BUILDING_HIVE",
    "HOTKEY_BUILDING_MACHINE_SCREW_PUMP",
    "HOTKEY_BUILDING_MACHINE_WATER_WHEEL",
    "HOTKEY_BUILDING_MACHINE_WINDMILL",
    "HOTKEY_BUILDING_MACHINE_GEAR_ASSEMBLY",
    "HOTKEY_BUILDING_MACHINE_AXLE_VERTICAL",
    "HOTKEY_BUILDING_MACHINE_AXLE_HORIZONTAL",
    "HOTKEY_BUILDING_MACHINE_ROLLERS",
    "HOTKEY_BUILDING_SIEGEENGINE_BALLISTA",
    "HOTKEY_BUILDING_SIEGEENGINE_CATAPULT",
    "HOTKEY_BUILDING_TRAP_STONE",
    "HOTKEY_BUILDING_TRAP_WEAPON",
    "HOTKEY_BUILDING_TRAP_LEVER",
    "HOTKEY_BUILDING_TRAP_TRIGGER",
    "HOTKEY_BUILDING_TRAP_CAGE",
    "HOTKEY_BUILDING_TRAP_SPIKE",
    "HOTKEY_BUILDING_CONSTRUCTION",
    "HOTKEY_BUILDING_CONSTRUCTION_WALL",
    "HOTKEY_BUILDING_CONSTRUCTION_FLOOR",
    "HOTKEY_BUILDING_CONSTRUCTION_RAMP",
    "HOTKEY_BUILDING_CONSTRUCTION_STAIR_UP",
    "HOTKEY_BUILDING_CONSTRUCTION_STAIR_DOWN",
    "HOTKEY_BUILDING_CONSTRUCTION_STAIR_UPDOWN",
    "HOTKEY_BUILDING_CONSTRUCTION_FORTIFICATION",
    "HOTKEY_BUILDING_CONSTRUCTION_TRACK",
    "HOTKEY_BUILDING_CONSTRUCTION_TRACK_STOP",
    "HOTKEY_BUILDING_WORKSHOP_LEATHER",
    "HOTKEY_BUILDING_WORKSHOP_QUERN",
    "HOTKEY_BUILDING_WORKSHOP_MILLSTONE",
    "HOTKEY_BUILDING_WORKSHOP_LOOM",
    "HOTKEY_BUILDING_WORKSHOP_CLOTHES",
    "HOTKEY_BUILDING_WORKSHOP_BOWYER",
    "HOTKEY_BUILDING_WORKSHOP_CARPENTER",
    "HOTKEY_BUILDING_WORKSHOP_METALSMITH",
    "HOTKEY_BUILDING_WORKSHOP_LAVAMILL",
    "HOTKEY_BUILDING_WORKSHOP_JEWELER",
    "HOTKEY_BUILDING_WORKSHOP_MASON",
    "HOTKEY_BUILDING_WORKSHOP_BUTCHER",
    "HOTKEY_BUILDING_WORKSHOP_TANNER",
    "HOTKEY_BUILDING_WORKSHOP_DYER",
    "HOTKEY_BUILDING_WORKSHOP_CRAFTSMAN",
    "HOTKEY_BUILDING_WORKSHOP_SIEGE",
    "HOTKEY_BUILDING_WORKSHOP_MECHANIC",
    "HOTKEY_BUILDING_WORKSHOP_STILL",
    "HOTKEY_BUILDING_WORKSHOP_FARMER",
    "HOTKEY_BUILDING_WORKSHOP_KITCHEN",
    "HOTKEY_BUILDING_WORKSHOP_FISHERY",
    "HOTKEY_BUILDING_WORKSHOP_ASHERY",
    "HOTKEY_BUILDING_FURNACE_WOOD",
    "HOTKEY_BUILDING_FURNACE_SMELTER",
    "HOTKEY_BUILDING_FURNACE_GLASS",
    "HOTKEY_BUILDING_FURNACE_KILN",
    "HOTKEY_BUILDING_FURNACE_SMELTER_LAVA",
    "HOTKEY_BUILDING_FURNACE_GLASS_LAVA",
    "HOTKEY_BUILDING_FURNACE_KILN_LAVA",
    "HIVE_INSTALL_COLONY",
    "HIVE_GATHER_PRODUCTS",
    "BUILDING_DIM_Y_UP",
    "BUILDING_DIM_Y_DOWN",
    "BUILDING_DIM_X_UP",
    "BUILDING_DIM_X_DOWN",
    "BUILDING_ORIENT_UP",
    "BUILDING_ORIENT_LEFT",
    "BUILDING_ORIENT_RIGHT",
    "BUILDING_ORIENT_DOWN",
    "BUILDING_ORIENT_NONE",
    "BUILDING_VIEW_ITEM",
    "BUILDING_ADVANCE_STAGE",
    "BUILDING_EXPAND_CONTRACT",
    "BUILDING_TRIGGER_ENABLE_WATER",
    "BUILDING_TRIGGER_MIN_WATER_UP",
    "BUILDING_TRIGGER_MIN_WATER_DOWN",
    "BUILDING_TRIGGER_MAX_WATER_UP",
    "BUILDING_TRIGGER_MAX_WATER_DOWN",
    "BUILDING_TRIGGER_ENABLE_MAGMA",
    "BUILDING_TRIGGER_MIN_MAGMA_UP",
    "BUILDING_TRIGGER_MIN_MAGMA_DOWN",
    "BUILDING_TRIGGER_MAX_MAGMA_UP",
    "BUILDING_TRIGGER_MAX_MAGMA_DOWN",
    "BUILDING_TRIGGER_ENABLE_TRACK_CART",
    "BUILDING_TRIGGER_MIN_TRACK_CART_DOWN",
    "BUILDING_TRIGGER_MIN_TRACK_CART_UP",
    "BUILDING_TRIGGER_MAX_TRACK_CART_DOWN",
    "BUILDING_TRIGGER_MAX_TRACK_CART_UP",
    "BUILDING_TRIGGER_ENABLE_CREATURE",
    "BUILDING_TRIGGER_ENABLE_LOCALS",
    "BUILDING_TRIGGER_RESETS",
    "BUILDING_TRIGGER_MIN_SIZE_UP",
    "BUILDING_TRIGGER_MIN_SIZE_DOWN",
    "BUILDING_TRIGGER_MAX_SIZE_UP",
    "BUILDING_TRIGGER_MAX_SIZE_DOWN",
    "BUILDING_TRIGGER_MIN_SIZE_UP_PLUS",
    "BUILDING_TRIGGER_MIN_SIZE_DOWN_PLUS",
    "BUILDING_TRIGGER_MAX_SIZE_UP_PLUS",
    "BUILDING_TRIGGER_MAX_SIZE_DOWN_PLUS",
    "BUILDING_ROLLERS_SPEED_UP",
    "BUILDING_ROLLERS_SPEED_DOWN",
    "BUILDING_TRACK_STOP_FRICTION_UP",
    "BUILDING_TRACK_STOP_FRICTION_DOWN",
    "BUILDING_TRACK_STOP_DUMP",
    "DESTROYBUILDING",
    "SUSPENDBUILDING",
    "BUILDINGLIST_ZOOM_T",
    "BUILDINGLIST_ZOOM_Q",
    "RECENTER_ON_LEVER",
    "HOTKEY_MAKE_ASH",
    "HOTKEY_MAKE_CHARCOAL",
    "HOTKEY_MELT_OBJECT",
    "HOTKEY_GLASS_GREEN",
    "HOTKEY_GLASS_CLEAR",
    "HOTKEY_GLASS_CRYSTAL",
    "HOTKEY_COLLECT_SAND",
    "HOTKEY_COLLECT_CLAY",
    "HOTKEY_GLASS_ROUGH",
    "HOTKEY_GLASS_ARMORSTAND",
    "HOTKEY_GLASS_BOX",
    "HOTKEY_GLASS_CABINET",
    "HOTKEY_GLASS_COFFIN",
    "HOTKEY_GLASS_FLOODGATE",
    "HOTKEY_GLASS_HATCH_COVER",
    "HOTKEY_GLASS_GRATE",
    "HOTKEY_GLASS_GOBLET",
    "HOTKEY_GLASS_TOY",
    "HOTKEY_GLASS_INSTRUMENT",
    "HOTKEY_GLASS_DOOR",
    "HOTKEY_GLASS_STATUE",
    "HOTKEY_GLASS_TABLE",
    "HOTKEY_GLASS_CAGE",
    "HOTKEY_GLASS_CHAIR",
    "HOTKEY_GLASS_BLOCKS",
    "HOTKEY_GLASS_FLASK",
    "HOTKEY_GLASS_WEAPONRACK",
    "HOTKEY_GLASS_WINDOW",
    "HOTKEY_ASHERY_LYE",
    "HOTKEY_ASHERY_POTASH",
    "HOTKEY_ASHERY_POTASH_DIRECT",
    "HOTKEY_CARPENTER_BARREL",
    "HOTKEY_CARPENTER_BLOCKS",
    "HOTKEY_CARPENTER_BUCKET",
    "HOTKEY_CARPENTER_TRAP_ANIMAL",
    "HOTKEY_CARPENTER_CAGE",
    "HOTKEY_CARPENTER_ARMORSTAND",
    "HOTKEY_CARPENTER_BED",
    "HOTKEY_CARPENTER_CHAIR",
    "HOTKEY_CARPENTER_COFFIN",
    "HOTKEY_CARPENTER_DOOR",
    "HOTKEY_CARPENTER_FLOODGATE",
    "HOTKEY_CARPENTER_HATCH_COVER",
    "HOTKEY_CARPENTER_GRATE",
    "HOTKEY_CARPENTER_CABINET",
    "HOTKEY_CARPENTER_BIN",
    "HOTKEY_CARPENTER_BOX",
    "HOTKEY_CARPENTER_WEAPONRACK",
    "HOTKEY_CARPENTER_TABLE",
    "HOTKEY_SIEGE_BALLISTA",
    "HOTKEY_SIEGE_CATAPULT",
    "HOTKEY_LEATHER_BOX",
    "HOTKEY_LEATHER_FLASK",
    "HOTKEY_LEATHER_SHIRT",
    "HOTKEY_LEATHER_CLOAK",
    "HOTKEY_LEATHER_BACKPACK",
    "HOTKEY_LEATHER_QUIVER",
    "HOTKEY_LEATHER_IMAGE",
    "HOTKEY_CLOTHES_MAT_PLANT",
    "HOTKEY_CLOTHES_MAT_SILK",
    "HOTKEY_CLOTHES_MAT_YARN",
    "HOTKEY_CLOTHES_SHIRT",
    "HOTKEY_CLOTHES_CLOAK",
    "HOTKEY_CLOTHES_BOX",
    "HOTKEY_CLOTHES_CHAIN",
    "HOTKEY_CLOTHES_IMAGE",
    "HOTKEY_CRAFTS_MAT_STONE",
    "HOTKEY_CRAFTS_MAT_WOOD",
    "HOTKEY_CRAFTS_DEC_BONE",
    "HOTKEY_CRAFTS_DEC_SHELL",
    "HOTKEY_CRAFTS_DEC_TOOTH",
    "HOTKEY_CRAFTS_DEC_HORN",
    "HOTKEY_CRAFTS_DEC_PEARL",
    "HOTKEY_CRAFTS_TOTEM",
    "HOTKEY_CRAFTS_CLOTH",
    "HOTKEY_CRAFTS_SILK",
    "HOTKEY_CRAFTS_YARN",
    "HOTKEY_CRAFTS_SEL_WOOD",
    "HOTKEY_CRAFTS_SEL_BONE",
    "HOTKEY_CRAFTS_SEL_SHELL",
    "HOTKEY_CRAFTS_SHELL",
    "HOTKEY_CRAFTS_TOOTH",
    "HOTKEY_CRAFTS_HORN",
    "HOTKEY_CRAFTS_PEARL",
    "HOTKEY_CRAFTS_BONE",
    "HOTKEY_CRAFTS_LEATHER",
    "HOTKEY_CRAFTS_SLAB",
    "HOTKEY_CRAFTS_MAT_CRAFTS",
    "HOTKEY_CRAFTS_MAT_GOBLET",
    "HOTKEY_CRAFTS_MAT_INSTRUMENT",
    "HOTKEY_CRAFTS_MAT_TOY",
    "HOTKEY_SMITH_WEAPON",
    "HOTKEY_SMITH_ARMOR",
    "HOTKEY_SMITH_FURNITURE",
    "HOTKEY_SMITH_SIEGE",
    "HOTKEY_SMITH_TRAP",
    "HOTKEY_SMITH_OTHER",
    "HOTKEY_SMITH_METAL",
    "HOTKEY_ALCHEMIST_SOAP",
    "HOTKEY_STILL_BREW",
    "HOTKEY_STILL_EXTRACT",
    "HOTKEY_LOOM_COLLECT_SILK",
    "HOTKEY_LOOM_WEAVE_CLOTH",
    "HOTKEY_LOOM_WEAVE_SILK",
    "HOTKEY_LOOM_WEAVE_YARN",
    "HOTKEY_LOOM_WEAVE_METAL",
    "HOTKEY_KITCHEN_COOK_2",
    "HOTKEY_KITCHEN_COOK_3",
    "HOTKEY_KITCHEN_COOK_4",
    "HOTKEY_KITCHEN_RENDER_FAT",
    "HOTKEY_FARMER_PROCESS",
    "HOTKEY_FARMER_PROCESS_VIAL",
    "HOTKEY_FARMER_PROCESS_BAG",
    "HOTKEY_FARMER_PROCESS_BARREL",
    "HOTKEY_FARMER_CHEESE",
    "HOTKEY_FARMER_MILK",
    "HOTKEY_FARMER_SHEAR_CREATURE",
    "HOTKEY_FARMER_SPIN_THREAD",
    "HOTKEY_MILL_MILL",
    "HOTKEY_KENNEL_CATCH_VERMIN",
    "HOTKEY_KENNEL_TAME_VERMIN",
    "HOTKEY_FISHERY_PROCESS",
    "HOTKEY_FISHERY_EXTRACT",
    "HOTKEY_FISHERY_CATCH",
    "HOTKEY_BUTCHER_BUTCHER",
    "HOTKEY_BUTCHER_EXTRACT",
    "HOTKEY_BUTCHER_CATCH",
    "HOTKEY_TANNER_TAN",
    "HOTKEY_DYER_THREAD",
    "HOTKEY_DYER_CLOTH",
    "HOTKEY_JEWELER_FURNITURE",
    "HOTKEY_JEWELER_FINISHED",
    "HOTKEY_JEWELER_AMMO",
    "HOTKEY_JEWELER_CUT",
    "HOTKEY_JEWELER_ENCRUST",
    "HOTKEY_MECHANIC_PARTS",
    "HOTKEY_MECHANIC_TRACTION_BENCH",
    "HOTKEY_MASON_ARMORSTAND",
    "HOTKEY_MASON_BLOCKS",
    "HOTKEY_MASON_CHAIR",
    "HOTKEY_MASON_COFFIN",
    "HOTKEY_MASON_DOOR",
    "HOTKEY_MASON_FLOODGATE",
    "HOTKEY_MASON_HATCH_COVER",
    "HOTKEY_MASON_GRATE",
    "HOTKEY_MASON_CABINET",
    "HOTKEY_MASON_BOX",
    "HOTKEY_MASON_STATUE",
    "HOTKEY_MASON_TABLE",
    "HOTKEY_MASON_WEAPONRACK",
    "HOTKEY_MASON_QUERN",
    "HOTKEY_MASON_MILLSTONE",
    "HOTKEY_MASON_SLAB",
    "HOTKEY_TRAP_BRIDGE",
    "HOTKEY_TRAP_DOOR",
    "HOTKEY_TRAP_FLOODGATE",
    "HOTKEY_TRAP_SPIKE",
    "HOTKEY_TRAP_HATCH",
    "HOTKEY_TRAP_GRATE_WALL",
    "HOTKEY_TRAP_GRATE_FLOOR",
    "HOTKEY_TRAP_BARS_VERTICAL",
    "HOTKEY_TRAP_BARS_FLOOR",
    "HOTKEY_TRAP_SUPPORT",
    "HOTKEY_TRAP_CHAIN",
    "HOTKEY_TRAP_CAGE",
    "HOTKEY_TRAP_GEAR_ASSEMBLY",
    "HOTKEY_TRAP_TRACK_STOP",
    "HOTKEY_TRAP_PULL_LEVER",
    "BUILDJOB_STOCKPILE_MASTER",
    "BUILDJOB_STOCKPILE_LINK_ANYWHERE",
    "BUILDJOB_STOCKPILE_GIVE_TO",
    "BUILDJOB_STOCKPILE_DELETE_CHILD",
    "BUILDJOB_STOCKPILE_SETTINGS",
    "BUILDJOB_STOCKPILE_BARREL_UP",
    "BUILDJOB_STOCKPILE_BARREL_DOWN",
    "BUILDJOB_STOCKPILE_BARREL_ZERO",
    "BUILDJOB_STOCKPILE_BARREL_MAX",
    "BUILDJOB_STOCKPILE_BIN_UP",
    "BUILDJOB_STOCKPILE_BIN_DOWN",
    "BUILDJOB_STOCKPILE_BIN_ZERO",
    "BUILDJOB_STOCKPILE_BIN_MAX",
    "BUILDJOB_STOCKPILE_WHEELBARROW",
    "STOCKPILE_ANIMAL",
    "STOCKPILE_FOOD",
    "STOCKPILE_WEAPON",
    "STOCKPILE_ARMOR",
    "STOCKPILE_CUSTOM",
    "STOCKPILE_CUSTOM_SETTINGS",
    "STOCKPILE_FURNITURE",
    "STOCKPILE_GRAVEYARD",
    "STOCKPILE_REFUSE",
    "STOCKPILE_WOOD",
    "STOCKPILE_STONE",
    "STOCKPILE_GEM",
    "STOCKPILE_BARBLOCK",
    "STOCKPILE_CLOTH",
    "STOCKPILE_LEATHER",
    "STOCKPILE_AMMO",
    "STOCKPILE_COINS",
    "STOCKPILE_FINISHED",
    "STOCKPILE_NONE",
    "STOCKPILE_SETTINGS_ENABLE",
    "STOCKPILE_SETTINGS_DISABLE",
    "STOCKPILE_SETTINGS_PERMIT_ALL",
    "STOCKPILE_SETTINGS_FORBID_ALL",
    "STOCKPILE_SETTINGS_PERMIT_SUB",
    "STOCKPILE_SETTINGS_FORBID_SUB",
    "STOCKPILE_SETTINGS_SPECIFIC1",
    "STOCKPILE_SETTINGS_SPECIFIC2",
    "CIVZONE_REMOVE",
    "CIVZONE_REMOVE_ZONE",
    "CIVZONE_SHAPE",
    "CIVZONE_NEXT",
    "CIVZONE_WATER_SOURCE",
    "CIVZONE_FISH",
    "CIVZONE_GATHER",
    "CIVZONE_DUMP",
    "CIVZONE_POND",
    "CIVZONE_HOSPITAL",
    "CIVZONE_SAND_COLLECT",
    "CIVZONE_CLAY_COLLECT",
    "CIVZONE_ACTIVE",
    "CIVZONE_MEETING",
    "CIVZONE_ANIMAL_TRAINING",
    "CIVZONE_PEN",
    "CIVZONE_PEN_OPTIONS",
    "CIVZONE_POND_OPTIONS",
    "CIVZONE_POND_WATER",
    "CIVZONE_HOSPITAL_OPTIONS",
    "CIVZONE_GATHER_OPTIONS",
    "CIVZONE_GATHER_OPTIONS_PICK_TREES",
    "CIVZONE_GATHER_OPTIONS_PICK_SHRUBS",
    "CIVZONE_GATHER_OPTIONS_GATHER_FALLEN",
    "STORES_VIEW",
    "STORES_ZOOM",
    "STORES_FORBID",
    "STORES_MELT",
    "STORES_DUMP",
    "STORES_HIDE",
    "PET_BUTCHER",
    "PET_GELD",
    "ANIMAL_SELECT_TRAINER",
    "ANIMAL_WAR_TRAINING",
    "ANIMAL_HUNTING_TRAINING",
    "KITCHEN_COOK",
    "KITCHEN_BREW",
    "ORDERS_AUTOFORBID",
    "ORDERS_FORBID_PROJECTILE",
    "ORDERS_FORBID_YOUR_CORPSE",
    "ORDERS_FORBID_YOUR_ITEMS",
    "ORDERS_FORBID_OTHER_CORPSE",
    "ORDERS_FORBID_OTHER_ITEMS",
    "ORDERS_REFUSE_GATHER",
    "ORDERS_REFUSE_OUTSIDE",
    "ORDERS_REFUSE_OUTSIDE_VERMIN",
    "ORDERS_REFUSE_DUMP_CORPSE",
    "ORDERS_REFUSE_DUMP_SKULL",
    "ORDERS_REFUSE_DUMP_BONE",
    "ORDERS_REFUSE_DUMP_SHELL",
    "ORDERS_REFUSE_DUMP_SKIN",
    "ORDERS_REFUSE_DUMP_OTHER",
    "ORDERS_REFUSE_DUMP_STRAND_TISSUE",
    "ORDERS_GATHER_FURNITURE",
    "ORDERS_GATHER_ANIMALS",
    "ORDERS_GATHER_FOOD",
    "ORDERS_GATHER_BODIES",
    "ORDERS_REFUSE",
    "ORDERS_GATHER_STONE",
    "ORDERS_GATHER_WOOD",
    "ORDERS_ALL_HARVEST",
    "ORDERS_SAMEPILE",
    "ORDERS_MIXFOODS",
    "ORDERS_LOOM",
    "ORDERS_DYED_CLOTH",
    "ORDERS_EXCEPTIONS",
    "ORDERS_WORKSHOP",
    "ORDERS_COLLECT_WEB",
    "ORDERS_SLAUGHTER",
    "ORDERS_BUTCHER",
    "ORDERS_TAN",
    "ORDERS_AUTO_FISHERY",
    "ORDERS_AUTO_KITCHEN",
    "ORDERS_AUTO_KILN",
    "ORDERS_AUTO_SMELTER",
    "ORDERS_AUTO_OTHER",
    "ORDERS_ZONE",
    "ORDERS_ZONE_DRINKING",
    "ORDERS_ZONE_FISHING",
    "D_ONESTEP",
    "D_PAUSE",
    "D_DEPOT",
    "D_HOT_KEYS",
    "D_HOTKEY1",
    "D_HOTKEY2",
    "D_HOTKEY3",
    "D_HOTKEY4",
    "D_HOTKEY5",
    "D_HOTKEY6",
    "D_HOTKEY7",
    "D_HOTKEY8",
    "D_HOTKEY9",
    "D_HOTKEY10",
    "D_HOTKEY11",
    "D_HOTKEY12",
    "D_HOTKEY13",
    "D_HOTKEY14",
    "D_HOTKEY15",
    "D_HOTKEY16",
    "D_HOTKEY_CHANGE_NAME",
    "D_HOTKEY_ZOOM",
    "D_ANNOUNCE",
    "D_REPORTS",
    "D_BUILDING",
    "D_CIVLIST",
    "D_DESIGNATE",
    "D_ARTLIST",
    "D_NOBLES",
    "D_ORDERS",
    "D_MILITARY",
    "D_ROOMS",
    "D_SQUADS",
    "D_STOCKPILES",
    "D_CIVZONE",
    "D_VIEWUNIT",
    "D_JOBLIST",
    "D_UNITLIST",
    "D_LOOK",
    "D_HAULING",
    "D_HAULING_NEW_ROUTE",
    "D_HAULING_NEW_STOP",
    "D_HAULING_REMOVE",
    "D_HAULING_PROMOTE",
    "D_HAULING_VEHICLE",
    "D_HAULING_NICKNAME",
    "D_HAULING_STOP_NEW_DEPART",
    "D_HAULING_STOP_NEW_LINK",
    "D_HAULING_STOP_REMOVE",
    "D_HAULING_STOP_SL_SELECT_PILE",
    "D_HAULING_STOP_SL_TAKE_GIVE",
    "D_HAULING_STOP_LC_DIR",
    "D_HAULING_STOP_LC_MODE",
    "D_HAULING_STOP_LC_TIMER_UP",
    "D_HAULING_STOP_LC_TIMER_DOWN",
    "D_HAULING_STOP_LC_FULLNESS_UP",
    "D_HAULING_STOP_LC_FULLNESS_DOWN",
    "D_HAULING_STOP_LC_MORE_LESS",
    "D_HAULING_STOP_LC_DESIRED_TOTAL",
    "D_HAULING_STOP_LC_CHANGE",
    "D_HAULING_STOP_LC_ADVANCED",
    "D_BURROWS",
    "D_BURROWS_ADD",
    "D_BURROWS_DELETE",
    "D_BURROWS_DEFINE",
    "D_BURROWS_ADD_UNIT",
    "D_BURROWS_WORKSHOP_LIMIT",
    "D_BURROWS_CENTER",
    "D_BURROWS_NAME",
    "D_BURROWS_CHANGE_SELECTION",
    "D_BURROWS_BRUSH",
    "D_BURROWS_REMOVE",
    "D_NOTE",
    "D_NOTE_PLACE",
    "D_NOTE_DELETE",
    "D_NOTE_NAME",
    "D_NOTE_ENTER",
    "D_NOTE_ADOPT_SYMBOL",
    "D_NOTE_CHANGE_SELECTION",
    "D_NOTE_POINTS",
    "D_NOTE_ROUTE",
    "D_NOTE_ROUTE_ADD",
    "D_NOTE_ROUTE_EDIT",
    "D_NOTE_ROUTE_DELETE",
    "D_NOTE_ROUTE_CENTER",
    "D_NOTE_ROUTE_NAME",
    "D_BUILDJOB",
    "D_STATUS",
    "D_STATUS_OVERALL_HEALTH_RECENTER",
    "D_BUILDITEM",
    "D_BITEM_FORBID",
    "D_BITEM_DUMP",
    "D_BITEM_MELT",
    "D_BITEM_HIDE",
    "D_LOOK_FORBID",
    "D_LOOK_DUMP",
    "D_LOOK_MELT",
    "D_LOOK_HIDE",
    "D_LOOK_FOLLOW",
    "D_LOOK_ARENA_CREATURE",
    "D_LOOK_ARENA_ADV_MODE",
    "D_LOOK_ARENA_WATER",
    "D_LOOK_ARENA_MAGMA",
    "ARENA_CREATURE_SIDE_DOWN",
    "ARENA_CREATURE_SIDE_UP",
    "ARENA_CREATURE_NEW_ITEM",
    "ARENA_CREATURE_BLANK_LIST",
    "ARENA_CREATURE_REMOVE_ITEM",
    "ARENA_CREATURE_UNDEAD",
    "ARENA_CREATURE_STRING",
    "ARENA_CONFLICT_STATE_1",
    "ARENA_CONFLICT_STATE_2",
    "ARENA_MORALE",
    "ARENA_WEATHER",
    "ARENA_WEATHER_SNOW",
    "ARENA_WEATHER_MUD",
    "ARENA_WEATHER_CLEAR_SPATTER",
    "D_LOOK_ARENA_TREE",
    "ARENA_TREE_FILTER",
    "ARENA_TREE_AGE",
    "D_LOOK_ARENA_MOUNT",
    "ASSIGNTRADE_VIEW",
    "ASSIGNTRADE_STRING",
    "ASSIGNTRADE_EXCLUDE_PROHIBITED",
    "ASSIGNTRADE_PENDING",
    "ASSIGNTRADE_SORT",
    "NOBLELIST_REPLACE",
    "NOBLELIST_SETTINGS",
    "NOBLELIST_CAPITAL",
    "NOBLELIST_VIEW_CANDIDATE",
    "TRADE_VIEW",
    "TRADE_TRADE",
    "TRADE_OFFER",
    "TRADE_SEIZE",
    "MILITARY_ACTIVATE",
    "MILITARY_VIEW",
    "MILITARY_WEAPON",
    "MILITARY_ZOOM",
    "ANNOUNCE_ZOOM",
    "UNITJOB_REMOVE_CRE",
    "UNITJOB_ZOOM_CRE",
    "UNITJOB_ZOOM_BUILD",
    "UNITJOB_VIEW",
    "UNITJOB_MANAGER",
    "MANAGER_NEW_ORDER",
    "MANAGER_REMOVE",
    "MANAGER_PROMOTE",
    "MANAGER_MAX",
    "MANAGER_WAGES",
    "DESIGNATE_BITEM",
    "DESIGNATE_CLAIM",
    "DESIGNATE_UNCLAIM",
    "DESIGNATE_MELT",
    "DESIGNATE_NO_MELT",
    "DESIGNATE_DUMP",
    "DESIGNATE_NO_DUMP",
    "DESIGNATE_HIDE",
    "DESIGNATE_NO_HIDE",
    "DESIGNATE_DIG",
    "DESIGNATE_DIG_REMOVE_STAIRS_RAMPS",
    "DESIGNATE_TRAFFIC",
    "DESIGNATE_TRAFFIC_HIGH",
    "DESIGNATE_TRAFFIC_NORMAL",
    "DESIGNATE_TRAFFIC_LOW",
    "DESIGNATE_TRAFFIC_RESTRICTED",
    "DESIGNATE_TRAFFIC_INCREASE_WEIGHT",
    "DESIGNATE_TRAFFIC_DECREASE_WEIGHT",
    "DESIGNATE_TRAFFIC_INCREASE_WEIGHT_MORE",
    "DESIGNATE_TRAFFIC_DECREASE_WEIGHT_MORE",
    "DESIGNATE_STAIR_UP",
    "DESIGNATE_STAIR_DOWN",
    "DESIGNATE_STAIR_UPDOWN",
    "DESIGNATE_RAMP",
    "DESIGNATE_CHANNEL",
    "DESIGNATE_CHOP",
    "DESIGNATE_PLANTS",
    "DESIGNATE_SMOOTH",
    "DESIGNATE_ENGRAVE",
    "DESIGNATE_FORTIFY",
    "DESIGNATE_TRACK",
    "DESIGNATE_TOGGLE_ENGRAVING",
    "DESIGNATE_STANDARD_MARKER",
    "DESIGNATE_MINE_MODE",
    "DESIGNATE_TOGGLE_MARKER",
    "DESIGNATE_UNDO",
    "DESIGNATE_REMOVE_CONSTRUCTION",
    "ITEM_DESCRIPTION",
    "ITEM_FORBID",
    "ITEM_MELT",
    "ITEM_DUMP",
    "ITEM_HIDE",
    "UNITVIEW_CUSTOMIZE",
    "UNITVIEW_HEALTH",
    "UNITVIEW_RELATIONSHIPS",
    "UNITVIEW_RELATIONSHIPS_ZOOM",
    "UNITVIEW_RELATIONSHIPS_VIEW",
    "UNITVIEW_KILLS",
    "UNITVIEW_GEN",
    "UNITVIEW_INV",
    "UNITVIEW_PRF",
    "UNITVIEW_WND",
    "UNITVIEW_FOLLOW",
    "UNITVIEW_NEXT",
    "UNITVIEW_SLAUGHTER",
    "UNITVIEW_GELD",
    "UNITVIEW_GEN_COMBAT",
    "UNITVIEW_GEN_LABOR",
    "UNITVIEW_GEN_MISC",
    "UNITVIEW_PRF_PROF",
    "UNITVIEW_PRF_PET",
    "UNITVIEW_PRF_VIEW",
    "UNITVIEW_PRF_NEW_SQUAD",
    "UNITVIEW_PRF_REMOVE_FROM_SQUAD",
    "UNITVIEW_PRF_NAME_CURRENT_SQUAD",
    "UNITVIEW_PRF_NAME_SELECTED_SQUAD",
    "CUSTOMIZE_UNIT_NICKNAME",
    "CUSTOMIZE_UNIT_PROFNAME",
    "D_MILITARY_CREATE_SQUAD",
    "D_MILITARY_DISBAND_SQUAD",
    "D_MILITARY_CREATE_SUB_SQUAD",
    "D_MILITARY_CANCEL_ORDERS",
    "D_MILITARY_POSITIONS",
    "D_MILITARY_ALERTS",
    "D_MILITARY_ALERTS_ADD",
    "D_MILITARY_ALERTS_DELETE",
    "D_MILITARY_ALERTS_SET",
    "D_MILITARY_ALERTS_NAME",
    "D_MILITARY_ALERTS_SET_RETAIN",
    "D_MILITARY_EQUIP",
    "D_MILITARY_EQUIP_CUSTOMIZE",
    "D_MILITARY_EQUIP_UNIFORM",
    "D_MILITARY_EQUIP_PRIORITY",
    "D_MILITARY_UNIFORMS",
    "D_MILITARY_SUPPLIES",
    "D_MILITARY_SUPPLIES_WATER_DOWN",
    "D_MILITARY_SUPPLIES_WATER_UP",
    "D_MILITARY_SUPPLIES_FOOD_DOWN",
    "D_MILITARY_SUPPLIES_FOOD_UP",
    "D_MILITARY_AMMUNITION",
    "D_MILITARY_AMMUNITION_ADD_ITEM",
    "D_MILITARY_AMMUNITION_REMOVE_ITEM",
    "D_MILITARY_AMMUNITION_LOWER_AMOUNT",
    "D_MILITARY_AMMUNITION_RAISE_AMOUNT",
    "D_MILITARY_AMMUNITION_LOWER_AMOUNT_LOTS",
    "D_MILITARY_AMMUNITION_RAISE_AMOUNT_LOTS",
    "D_MILITARY_AMMUNITION_MATERIAL",
    "D_MILITARY_AMMUNITION_COMBAT",
    "D_MILITARY_AMMUNITION_TRAINING",
    "D_MILITARY_TRAINING",
    "D_MILITARY_SCHEDULE",
    "D_MILITARY_ADD_UNIFORM",
    "D_MILITARY_DELETE_UNIFORM",
    "D_MILITARY_NAME_UNIFORM",
    "D_MILITARY_NAME_SQUAD",
    "D_MILITARY_ADD_ARMOR",
    "D_MILITARY_ADD_PANTS",
    "D_MILITARY_ADD_HELM",
    "D_MILITARY_ADD_GLOVES",
    "D_MILITARY_ADD_BOOTS",
    "D_MILITARY_ADD_SHIELD",
    "D_MILITARY_ADD_WEAPON",
    "D_MILITARY_ADD_MATERIAL",
    "D_MILITARY_ADD_COLOR",
    "D_MILITARY_REPLACE_CLOTHING",
    "D_MILITARY_EXACT_MATCH",
    "D_SQUADS_MOVE",
    "D_SQUADS_KILL",
    "D_SQUADS_KILL_LIST",
    "D_SQUADS_KILL_RECT",
    "D_SQUADS_SCHEDULE",
    "D_SQUADS_CANCEL_ORDER",
    "D_SQUADS_ALERT",
    "D_SQUADS_SELECT_INDIVIDUALS",
    "D_SQUADS_CENTER",
    "D_SQUAD_SCH_SLEEP",
    "D_SQUAD_SCH_CIVILIAN_UNIFORM",
    "D_SQUAD_SCH_GIVE_ORDER",
    "D_SQUAD_SCH_EDIT_ORDER",
    "D_SQUAD_SCH_CANCEL_ORDER",
    "D_SQUAD_SCH_COPY_ORDERS",
    "D_SQUAD_SCH_PASTE_ORDERS",
    "D_SQUAD_SCH_MS_NAME",
    "STRING_A000",
    "STRING_A001",
    "STRING_A002",
    "STRING_A003",
    "STRING_A004",
    "STRING_A005",
    "STRING_A006",
    "STRING_A007",
    "STRING_A008",
    "STRING_A009",
    "STRING_A010",
    "STRING_A011",
    "STRING_A012",
    "STRING_A013",
    "STRING_A014",
    "STRING_A015",
    "STRING_A016",
    "STRING_A017",
    "STRING_A018",
    "STRING_A019",
    "STRING_A020",
    "STRING_A021",
    "STRING_A022",
    "STRING_A023",
    "STRING_A024",
    "STRING_A025",
    "STRING_A026",
    "STRING_A027",
    "STRING_A028",
    "STRING_A029",
    "STRING_A030",
    "STRING_A031",
    "STRING_A032",
    "STRING_A033",
    "STRING_A034",
    "STRING_A035",
    "STRING_A036",
    "STRING_A037",
    "STRING_A038",
    "STRING_A039",
    "STRING_A040",
    "STRING_A041",
    "STRING_A042",
    "STRING_A043",
    "STRING_A044",
    "STRING_A045",
    "STRING_A046",
    "STRING_A047",
    "STRING_A048",
    "STRING_A049",
    "STRING_A050",
    "STRING_A051",
    "STRING_A052",
    "STRING_A053",
    "STRING_A054",
    "STRING_A055",
    "STRING_A056",
    "STRING_A057",
    "STRING_A058",
    "STRING_A059",
    "STRING_A060",
    "STRING_A061",
    "STRING_A062",
    "STRING_A063",
    "STRING_A064",
    "STRING_A065",
    "STRING_A066",
    "STRING_A067",
    "STRING_A068",
    "STRING_A069",
    "STRING_A070",
    "STRING_A071",
    "STRING_A072",
    "STRING_A073",
    "STRING_A074",
    "STRING_A075",
    "STRING_A076",
    "STRING_A077",
    "STRING_A078",
    "STRING_A079",
    "STRING_A080",
    "STRING_A081",
    "STRING_A082",
    "STRING_A083",
    "STRING_A084",
    "STRING_A085",
    "STRING_A086",
    "STRING_A087",
    "STRING_A088",
    "STRING_A089",
    "STRING_A090",
    "STRING_A091",
    "STRING_A092",
    "STRING_A093",
    "STRING_A094",
    "STRING_A095",
    "STRING_A096",
    "STRING_A097",
    "STRING_A098",
    "STRING_A099",
    "STRING_A100",
    "STRING_A101",
    "STRING_A102",
    "STRING_A103",
    "STRING_A104",
    "STRING_A105",
    "STRING_A106",
    "STRING_A107",
    "STRING_A108",
    "STRING_A109",
    "STRING_A110",
    "STRING_A111",
    "STRING_A112",
    "STRING_A113",
    "STRING_A114",
    "STRING_A115",
    "STRING_A116",
    "STRING_A117",
    "STRING_A118",
    "STRING_A119",
    "STRING_A120",
    "STRING_A121",
    "STRING_A122",
    "STRING_A123",
    "STRING_A124",
    "STRING_A125",
    "STRING_A126",
    "STRING_A128",
    "STRING_A129",
    "STRING_A130",
    "STRING_A131",
    "STRING_A132",
    "STRING_A133",
    "STRING_A134",
    "STRING_A135",
    "STRING_A136",
    "STRING_A137",
    "STRING_A138",
    "STRING_A139",
    "STRING_A140",
    "STRING_A141",
    "STRING_A142",
    "STRING_A143",
    "STRING_A144",
    "STRING_A145",
    "STRING_A146",
    "STRING_A147",
    "STRING_A148",
    "STRING_A149",
    "STRING_A150",
    "STRING_A151",
    "STRING_A152",
    "STRING_A153",
    "STRING_A154",
    "STRING_A155",
    "STRING_A156",
    "STRING_A157",
    "STRING_A158",
    "STRING_A159",
    "STRING_A160",
    "STRING_A161",
    "STRING_A162",
    "STRING_A163",
    "STRING_A164",
    "STRING_A165",
    "STRING_A166",
    "STRING_A167",
    "STRING_A168",
    "STRING_A169",
    "STRING_A170",
    "STRING_A171",
    "STRING_A172",
    "STRING_A173",
    "STRING_A174",
    "STRING_A175",
    "STRING_A176",
    "STRING_A177",
    "STRING_A178",
    "STRING_A179",
    "STRING_A180",
    "STRING_A181",
    "STRING_A182",
    "STRING_A183",
    "STRING_A184",
    "STRING_A185",
    "STRING_A186",
    "STRING_A187",
    "STRING_A188",
    "STRING_A189",
    "STRING_A190",
    "STRING_A191",
    "STRING_A192",
    "STRING_A193",
    "STRING_A194",
    "STRING_A195",
    "STRING_A196",
    "STRING_A197",
    "STRING_A198",
    "STRING_A199",
    "STRING_A200",
    "STRING_A201",
    "STRING_A202",
    "STRING_A203",
    "STRING_A204",
    "STRING_A205",
    "STRING_A206",
    "STRING_A207",
    "STRING_A208",
    "STRING_A209",
    "STRING_A210",
    "STRING_A211",
    "STRING_A212",
    "STRING_A213",
    "STRING_A214",
    "STRING_A215",
    "STRING_A216",
    "STRING_A217",
    "STRING_A218",
    "STRING_A219",
    "STRING_A220",
    "STRING_A221",
    "STRING_A222",
    "STRING_A223",
    "STRING_A224",
    "STRING_A225",
    "STRING_A226",
    "STRING_A227",
    "STRING_A228",
    "STRING_A229",
    "STRING_A230",
    "STRING_A231",
    "STRING_A232",
    "STRING_A233",
    "STRING_A234",
    "STRING_A235",
    "STRING_A236",
    "STRING_A237",
    "STRING_A238",
    "STRING_A239",
    "STRING_A240",
    "STRING_A241",
    "STRING_A242",
    "STRING_A243",
    "STRING_A244",
    "STRING_A245",
    "STRING_A246",
    "STRING_A247",
    "STRING_A248",
    "STRING_A249",
    "STRING_A250",
    "STRING_A251",
    "STRING_A252",
    "STRING_A253",
    "STRING_A254",
    "STRING_A255",
    "KEYBINDING_COMPLETE"
  };
  enum_identity identity_traits<interface_key>::identity(sizeof(interface_key), NULL, "interface_key", TID(int32_t), 0, 1480, enum_traits<interface_key>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<invasion_info::T_flags>::bits[bit_count] = {
    { "active", 1 },
    { "siege", 1 }
  };
  bitfield_identity identity_traits<invasion_info::T_flags>::identity(sizeof(invasion_info::T_flags), &invasion_info::_identity, "T_flags", bitfield_traits<invasion_info::T_flags>::bit_count, bitfield_traits<invasion_info::T_flags>::bits);
  const bitfield_item_info bitfield_traits<item_body_component::T_corpse_flags>::bits[bit_count] = {
    { "unbutchered", 1 },
    { NULL, 1 },
    { NULL, 1 },
    { NULL, 1 },
    { "bone", 1 },
    { "shell", 1 },
    { NULL, 1 },
    { NULL, 1 },
    { NULL, 1 },
    { NULL, 1 },
    { NULL, 1 },
    { NULL, 1 },
    { "skull", 1 },
    { "separated_part", 1 },
    { "hair_wool", 1 },
    { "yarn", 1 }
  };
  bitfield_identity identity_traits<item_body_component::T_corpse_flags>::identity(sizeof(item_body_component::T_corpse_flags), &item_body_component::_identity, "T_corpse_flags", bitfield_traits<item_body_component::T_corpse_flags>::bit_count, bitfield_traits<item_body_component::T_corpse_flags>::bits);
  const bitfield_item_info bitfield_traits<item_eggst::T_egg_flags>::bits[bit_count] = {
    { "fertile", 1 }
  };
  bitfield_identity identity_traits<item_eggst::T_egg_flags>::identity(sizeof(item_eggst::T_egg_flags), &item_eggst::_identity, "T_egg_flags", bitfield_traits<item_eggst::T_egg_flags>::bit_count, bitfield_traits<item_eggst::T_egg_flags>::bits);
  const bitfield_item_info bitfield_traits<item_flags>::bits[bit_count] = {
    { "on_ground", 1 },
    { "in_job", 1 },
    { "hostile", 1 },
    { "in_inventory", 1 },
    { "removed", 1 },
    { "in_building", 1 },
    { "container", 1 },
    { "dead_dwarf", 1 },
    { "rotten", 1 },
    { "spider_web", 1 },
    { "construction", 1 },
    { "encased", 1 },
    { "unk12", 1 },
    { "murder", 1 },
    { "foreign", 1 },
    { "trader", 1 },
    { "owned", 1 },
    { "garbage_collect", 1 },
    { "artifact", 1 },
    { "forbid", 1 },
    { "already_uncategorized", 1 },
    { "dump", 1 },
    { "on_fire", 1 },
    { "melt", 1 },
    { "hidden", 1 },
    { "in_chest", 1 },
    { "use_recorded", 1 },
    { "artifact_mood", 1 },
    { "temps_computed", 1 },
    { "weight_computed", 1 },
    { "unk30", 1 },
    { "from_worldgen", 1 }
  };
  bitfield_identity identity_traits<item_flags>::identity(sizeof(item_flags), NULL, "item_flags", bitfield_traits<item_flags>::bit_count, bitfield_traits<item_flags>::bits);
  const bitfield_item_info bitfield_traits<item_flags2>::bits[bit_count] = {
    { "has_rider", 1 },
    { "unk1", 1 },
    { "grown", 1 }
  };
  bitfield_identity identity_traits<item_flags2>::identity(sizeof(item_flags2), NULL, "item_flags2", bitfield_traits<item_flags2>::bit_count, bitfield_traits<item_flags2>::bits);
  const char *const enum_traits<item_magicness_type>::key_table[9] = {
    "Sparkle",
    "AirWarped",
    "Whistle",
    "OddlySquare",
    "SmallBumps",
    "EarthSmell",
    "Lightning",
    "GrayHairs",
    "RustlingLeaves"
  };
  enum_identity identity_traits<item_magicness_type>::identity(sizeof(item_magicness_type), NULL, "item_magicness_type", TID(int16_t), 0, 8, enum_traits<item_magicness_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<item_matstate>::bits[bit_count] = {
    { "no_auto_clean", 1 },
    { "pressed", 1 },
    { "paste", 1 }
  };
  bitfield_identity identity_traits<item_matstate>::identity(sizeof(item_matstate), NULL, "item_matstate", bitfield_traits<item_matstate>::bit_count, bitfield_traits<item_matstate>::bits);
  const char *const enum_traits<item_quality>::key_table[7] = {
    "Ordinary",
    "WellCrafted",
    "FinelyCrafted",
    "Superior",
    "Exceptional",
    "Masterful",
    "Artifact"
  };
  enum_identity identity_traits<item_quality>::identity(sizeof(item_quality), NULL, "item_quality", TID(int16_t), 0, 6, enum_traits<item_quality>::key_table,
                NULL, NULL);
  const char *const enum_traits<item_type>::key_table[90] = {
    "NONE",
    "BAR",
    "SMALLGEM",
    "BLOCKS",
    "ROUGH",
    "BOULDER",
    "WOOD",
    "DOOR",
    "FLOODGATE",
    "BED",
    "CHAIR",
    "CHAIN",
    "FLASK",
    "GOBLET",
    "INSTRUMENT",
    "TOY",
    "WINDOW",
    "CAGE",
    "BARREL",
    "BUCKET",
    "ANIMALTRAP",
    "TABLE",
    "COFFIN",
    "STATUE",
    "CORPSE",
    "WEAPON",
    "ARMOR",
    "SHOES",
    "SHIELD",
    "HELM",
    "GLOVES",
    "BOX",
    "BIN",
    "ARMORSTAND",
    "WEAPONRACK",
    "CABINET",
    "FIGURINE",
    "AMULET",
    "SCEPTER",
    "AMMO",
    "CROWN",
    "RING",
    "EARRING",
    "BRACELET",
    "GEM",
    "ANVIL",
    "CORPSEPIECE",
    "REMAINS",
    "MEAT",
    "FISH",
    "FISH_RAW",
    "VERMIN",
    "PET",
    "SEEDS",
    "PLANT",
    "SKIN_TANNED",
    "PLANT_GROWTH",
    "THREAD",
    "CLOTH",
    "TOTEM",
    "PANTS",
    "BACKPACK",
    "QUIVER",
    "CATAPULTPARTS",
    "BALLISTAPARTS",
    "SIEGEAMMO",
    "BALLISTAARROWHEAD",
    "TRAPPARTS",
    "TRAPCOMP",
    "DRINK",
    "POWDER_MISC",
    "CHEESE",
    "FOOD",
    "LIQUID_MISC",
    "COIN",
    "GLOB",
    "ROCK",
    "PIPE_SECTION",
    "HATCH_COVER",
    "GRATE",
    "QUERN",
    "MILLSTONE",
    "SPLINT",
    "CRUTCH",
    "TRACTION_BENCH",
    "ORTHOPEDIC_CAST",
    "TOOL",
    "SLAB",
    "EGG",
    "BOOK"
  };
  const enum_traits<item_type>::attr_entry_type enum_traits<item_type>::attr_table[90+1] = {
    { NULL, (bool)0, (bool)0, (bool)0, NULL },
    { "bars", (bool)0, (bool)0, (bool)0, "item_barst" },
    { "cut gem", (bool)0, (bool)0, (bool)0, "item_smallgemst" },
    { "blocks", (bool)0, (bool)0, (bool)0, "item_blocksst" },
    { "rough gem", (bool)0, (bool)0, (bool)0, "item_roughst" },
    { "boulder", (bool)0, (bool)0, (bool)0, "item_boulderst" },
    { "logs", (bool)0, (bool)0, (bool)0, "item_woodst" },
    { "door", (bool)0, (bool)0, (bool)0, "item_doorst" },
    { "floodgate", (bool)0, (bool)0, (bool)0, "item_floodgatest" },
    { "bed", (bool)0, (bool)0, (bool)0, "item_bedst" },
    { "chair", (bool)0, (bool)0, (bool)0, "item_chairst" },
    { "chain", (bool)0, (bool)0, (bool)0, "item_chainst" },
    { "flask", (bool)0, (bool)0, (bool)0, "item_flaskst" },
    { "goblet", (bool)0, (bool)0, (bool)0, "item_gobletst" },
    { "instrument", true, (bool)0, (bool)0, "item_instrumentst" },
    { "toy", true, (bool)0, (bool)0, "item_toyst" },
    { "window", (bool)0, (bool)0, (bool)0, "item_windowst" },
    { "cage", (bool)0, (bool)0, (bool)0, "item_cagest" },
    { "barrel", (bool)0, (bool)0, (bool)0, "item_barrelst" },
    { "bucket", (bool)0, (bool)0, (bool)0, "item_bucketst" },
    { "animal trap", (bool)0, (bool)0, (bool)0, "item_animaltrapst" },
    { "table", (bool)0, (bool)0, (bool)0, "item_tablest" },
    { "coffin", (bool)0, (bool)0, (bool)0, "item_coffinst" },
    { "statue", (bool)0, (bool)0, (bool)0, "item_statuest" },
    { "corpse", (bool)0, (bool)0, (bool)0, "item_corpsest" },
    { "weapon", true, (bool)0, (bool)0, "item_weaponst" },
    { "armor", true, (bool)0, (bool)0, "item_armorst" },
    { "footwear", true, (bool)0, (bool)0, "item_shoesst" },
    { "shield", true, (bool)0, (bool)0, "item_shieldst" },
    { "headwear", true, (bool)0, (bool)0, "item_helmst" },
    { "handwear", true, (bool)0, (bool)0, "item_glovesst" },
    { "box/bag", (bool)0, (bool)0, (bool)0, "item_boxst" },
    { "bin", (bool)0, (bool)0, (bool)0, "item_binst" },
    { "armor stand", (bool)0, (bool)0, (bool)0, "item_armorstandst" },
    { "weapon rack", (bool)0, (bool)0, (bool)0, "item_weaponrackst" },
    { "cabinet", (bool)0, (bool)0, (bool)0, "item_cabinetst" },
    { "figurine", (bool)0, (bool)0, (bool)0, "item_figurinest" },
    { "amulet", (bool)0, (bool)0, (bool)0, "item_amuletst" },
    { "scepter", (bool)0, (bool)0, (bool)0, "item_scepterst" },
    { "ammo", true, true, (bool)0, "item_ammost" },
    { "crown", (bool)0, (bool)0, (bool)0, "item_crownst" },
    { "ring", (bool)0, (bool)0, (bool)0, "item_ringst" },
    { "earring", (bool)0, (bool)0, (bool)0, "item_earringst" },
    { "bracelet", (bool)0, (bool)0, (bool)0, "item_braceletst" },
    { "large gem", (bool)0, (bool)0, (bool)0, "item_gemst" },
    { "anvil", (bool)0, (bool)0, (bool)0, "item_anvilst" },
    { "body part", (bool)0, (bool)0, (bool)0, "item_corpsepiecest" },
    { "remains", (bool)0, true, true, "item_remainsst" },
    { "meat", (bool)0, true, (bool)0, "item_meatst" },
    { "fish", (bool)0, true, true, "item_fishst" },
    { "raw fish", (bool)0, true, true, "item_fish_rawst" },
    { "vermin", (bool)0, (bool)0, true, "item_verminst" },
    { "tame vermin", (bool)0, (bool)0, true, "item_petst" },
    { "seeds", (bool)0, (bool)0, (bool)0, "item_seedsst" },
    { "plant", (bool)0, true, (bool)0, "item_plantst" },
    { "leather", (bool)0, (bool)0, (bool)0, "item_skin_tannedst" },
    { "plant growth", (bool)0, true, (bool)0, "item_plant_growthst" },
    { "thread", (bool)0, (bool)0, (bool)0, "item_threadst" },
    { "cloth", (bool)0, (bool)0, (bool)0, "item_clothst" },
    { "totem", (bool)0, (bool)0, (bool)0, "item_totemst" },
    { "legwear", true, (bool)0, (bool)0, "item_pantsst" },
    { "backpack", (bool)0, (bool)0, (bool)0, "item_backpackst" },
    { "quiver", (bool)0, (bool)0, (bool)0, "item_quiverst" },
    { "catapult part", (bool)0, (bool)0, (bool)0, "item_catapultpartsst" },
    { "ballista part", (bool)0, (bool)0, (bool)0, "item_ballistapartsst" },
    { "siege ammo", true, (bool)0, (bool)0, "item_siegeammost" },
    { "ballista arrow head", (bool)0, (bool)0, (bool)0, "item_ballistaarrowheadst" },
    { "mechanism", (bool)0, (bool)0, (bool)0, "item_trappartsst" },
    { "trap component", true, (bool)0, (bool)0, "item_trapcompst" },
    { "drink", (bool)0, true, (bool)0, "item_drinkst" },
    { "powder", (bool)0, true, (bool)0, "item_powder_miscst" },
    { "cheese", (bool)0, true, (bool)0, "item_cheesest" },
    { "prepared meal", (bool)0, true, (bool)0, "item_foodst" },
    { "liquid", (bool)0, true, (bool)0, "item_liquid_miscst" },
    { "coin", (bool)0, true, (bool)0, "item_coinst" },
    { "glob", (bool)0, (bool)0, (bool)0, "item_globst" },
    { "small rock", (bool)0, (bool)0, (bool)0, "item_rockst" },
    { "pipe section", (bool)0, (bool)0, (bool)0, "item_pipe_sectionst" },
    { "hatch cover", (bool)0, (bool)0, (bool)0, "item_hatch_coverst" },
    { "grate", (bool)0, (bool)0, (bool)0, "item_gratest" },
    { "quern", (bool)0, (bool)0, (bool)0, "item_quernst" },
    { "millstone", (bool)0, (bool)0, (bool)0, "item_millstonest" },
    { "splint", (bool)0, (bool)0, (bool)0, "item_splintst" },
    { "crutch", (bool)0, (bool)0, (bool)0, "item_crutchst" },
    { "traction bench", (bool)0, (bool)0, (bool)0, "item_traction_benchst" },
    { "orthopedic cast", (bool)0, (bool)0, (bool)0, "item_orthopedic_castst" },
    { "tool", true, (bool)0, (bool)0, "item_toolst" },
    { "slab", (bool)0, (bool)0, (bool)0, "item_slabst" },
    { "egg", (bool)0, true, true, "item_eggst" },
    { "book", (bool)0, (bool)0, (bool)0, "item_bookst" },
    { NULL, (bool)0, (bool)0, (bool)0, NULL }
  };
  const enum_traits<item_type>::attr_entry_type & enum_traits<item_type>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[90];
  }
  enum_identity identity_traits<item_type>::identity(sizeof(item_type), NULL, "item_type", TID(int16_t), -1, 88, enum_traits<item_type>::key_table,
                enum_traits<item_type>::attr_table, &enum_traits<item_type>::attr_entry_type::_identity);
  const bitfield_item_info bitfield_traits<itemimprovement_coveredst::T_cover_flags>::bits[bit_count] = {
    { "glazed", 1 }
  };
  bitfield_identity identity_traits<itemimprovement_coveredst::T_cover_flags>::identity(sizeof(itemimprovement_coveredst::T_cover_flags), &itemimprovement_coveredst::_identity, "T_cover_flags", bitfield_traits<itemimprovement_coveredst::T_cover_flags>::bit_count, bitfield_traits<itemimprovement_coveredst::T_cover_flags>::bits);
  const char *const enum_traits<items_other_id>::key_table[131] = {
    "ANY",
    "IN_PLAY",
    "ANY_ARTIFACT",
    "WEAPON",
    "ANY_WEAPON",
    "ANY_SPIKE",
    "ANY_TRUE_ARMOR",
    "ANY_ARMOR_HELM",
    "ANY_ARMOR_SHOES",
    "SHIELD",
    "ANY_ARMOR_GLOVES",
    "ANY_ARMOR_PANTS",
    "QUIVER",
    "SPLINT",
    "ORTHOPEDIC_CAST",
    "CRUTCH",
    "BACKPACK",
    "AMMO",
    "WOOD",
    "BOULDER",
    "ROCK",
    "ANY_REFUSE",
    "ANY_GOOD_FOOD",
    "ANY_AUTO_CLEAN",
    "ANY_GENERIC23",
    "ANY_GENERIC24",
    "ANY_FURNITURE",
    "ANY_CAGE_OR_TRAP",
    "ANY_EDIBLE_RAW",
    "ANY_EDIBLE_CARNIVORE",
    "ANY_EDIBLE_BONECARN",
    "ANY_EDIBLE_VERMIN",
    "ANY_EDIBLE_VERMIN_BOX",
    "ANY_CAN_ROT",
    "ANY_MURDERED",
    "ANY_DEAD_DWARF",
    "ANY_GENERIC35",
    "ANY_GENERIC36",
    "ANY_GENERIC37",
    "ANY_GENERIC38",
    "DOOR",
    "FLOODGATE",
    "HATCH_COVER",
    "GRATE",
    "CAGE",
    "FLASK",
    "WINDOW",
    "GOBLET",
    "INSTRUMENT",
    "TOY",
    "TOOL",
    "BUCKET",
    "BARREL",
    "CHAIN",
    "ANIMALTRAP",
    "BED",
    "TRACTION_BENCH",
    "CHAIR",
    "COFFIN",
    "TABLE",
    "STATUE",
    "SLAB",
    "QUERN",
    "MILLSTONE",
    "BOX",
    "BIN",
    "ARMORSTAND",
    "WEAPONRACK",
    "CABINET",
    "ANVIL",
    "CATAPULTPARTS",
    "BALLISTAPARTS",
    "SIEGEAMMO",
    "TRAPPARTS",
    "ANY_WEBS",
    "PIPE_SECTION",
    "ANY_ENCASED",
    "ANY_IN_CONSTRUCTION",
    "DRINK",
    "ANY_DRINK",
    "LIQUID_MISC",
    "POWDER_MISC",
    "ANY_COOKABLE",
    "ANY_GENERIC82",
    "VERMIN",
    "PET",
    "ANY_CRITTER",
    "COIN",
    "GLOB",
    "TRAPCOMP",
    "BAR",
    "SMALLGEM",
    "BLOCKS",
    "ROUGH",
    "ANY_CORPSE",
    "CORPSE",
    "BOOK",
    "FIGURINE",
    "AMULET",
    "SCEPTER",
    "CROWN",
    "RING",
    "EARRING",
    "BRACELET",
    "GEM",
    "CORPSEPIECE",
    "REMAINS",
    "MEAT",
    "FISH",
    "FISH_RAW",
    "EGG",
    "SEEDS",
    "PLANT",
    "SKIN_TANNED",
    "PLANT_GROWTH",
    "THREAD",
    "CLOTH",
    "TOTEM",
    "PANTS",
    "CHEESE",
    "FOOD",
    "BALLISTAARROWHEAD",
    "ARMOR",
    "SHOES",
    "HELM",
    "GLOVES",
    "ANY_GENERIC123",
    "FOOD_STORAGE",
    "ANY_RECENTLY_DROPPED",
    "ANY_MELT_DESIGNATED",
    "BAD"
  };
  static const df::item_type _list_items_42[] = { item_type::WEAPON, item_type::TRAPCOMP };
  static const df::item_type _list_items_43[] = { item_type::WEAPON, item_type::TRAPCOMP };
  static const df::item_type _list_items_44[] = { item_type::ARMOR };
  static const df::item_type _list_items_45[] = { item_type::HELM };
  static const df::item_type _list_items_46[] = { item_type::SHOES };
  static const df::item_type _list_items_47[] = { item_type::GLOVES };
  static const df::item_type _list_items_48[] = { item_type::PANTS };
  static const df::item_type _list_items_49[] = { item_type::CORPSE, item_type::ARMOR, item_type::SHOES, item_type::HELM, item_type::GLOVES, item_type::CORPSEPIECE, item_type::REMAINS, item_type::PANTS, item_type::MEAT, item_type::FISH, item_type::FISH_RAW, item_type::SEEDS, item_type::PLANT, item_type::PLANT_GROWTH, item_type::CHEESE, item_type::FOOD, item_type::EGG, item_type::GLOB };
  static const df::item_type _list_items_50[] = { item_type::BOX, item_type::MEAT, item_type::FISH, item_type::FISH_RAW, item_type::SEEDS, item_type::PLANT, item_type::PLANT_GROWTH, item_type::CHEESE, item_type::FOOD, item_type::EGG };
  static const df::item_type _list_items_51[] = { item_type::DRINK, item_type::POWDER_MISC, item_type::LIQUID_MISC, item_type::GLOB };
  static const df::item_type _list_items_52[] = { item_type::CAGE, item_type::ANIMALTRAP, item_type::FISH_RAW, item_type::VERMIN, item_type::PLANT };
  static const df::item_type _list_items_53[] = { item_type::CAGE, item_type::ANIMALTRAP, item_type::CORPSE, item_type::CORPSEPIECE, item_type::VERMIN };
  static const df::item_type _list_items_54[] = { item_type::CAGE, item_type::ANIMALTRAP };
  static const df::item_type _list_items_55[] = { item_type::BARREL, item_type::BOX };
  static const df::item_type _list_items_56[] = { item_type::CORPSE, item_type::CORPSEPIECE, item_type::REMAINS, item_type::MEAT, item_type::FISH, item_type::FISH_RAW, item_type::SEEDS, item_type::PLANT, item_type::PLANT_GROWTH, item_type::CHEESE, item_type::FOOD, item_type::EGG };
  static const df::item_type _list_items_57[] = { item_type::CORPSE, item_type::CORPSEPIECE, item_type::REMAINS };
  static const df::item_type _list_items_58[] = { item_type::BAR, item_type::SMALLGEM, item_type::BLOCKS, item_type::ROUGH, item_type::CHAIN, item_type::FLASK, item_type::GOBLET, item_type::INSTRUMENT, item_type::TOY, item_type::FIGURINE, item_type::AMULET, item_type::SCEPTER, item_type::AMMO, item_type::CROWN, item_type::RING, item_type::EARRING, item_type::BRACELET, item_type::GEM, item_type::SKIN_TANNED, item_type::THREAD, item_type::CLOTH, item_type::TOTEM, item_type::BACKPACK, item_type::QUIVER, item_type::BALLISTAARROWHEAD, item_type::COIN, item_type::SPLINT, item_type::TOOL, item_type::BOOK };
  static const df::item_type _list_items_59[] = { item_type::ARMOR, item_type::SHOES, item_type::HELM, item_type::GLOVES, item_type::PANTS };
  static const df::item_type _list_items_60[] = { item_type::WEAPON, item_type::TRAPCOMP, item_type::SIEGEAMMO };
  static const df::item_type _list_items_61[] = { item_type::ARMOR, item_type::SHOES, item_type::SHIELD, item_type::HELM, item_type::GLOVES, item_type::PANTS };
  static const df::item_type _list_items_62[] = { item_type::THREAD };
  static const df::item_type _list_items_63[] = { item_type::DRINK };
  static const df::item_type _list_items_64[] = { item_type::FLASK, item_type::CAGE, item_type::BARREL, item_type::BUCKET, item_type::ANIMALTRAP, item_type::BOX, item_type::MEAT, item_type::FISH, item_type::FISH_RAW, item_type::VERMIN, item_type::SEEDS, item_type::PLANT, item_type::PLANT_GROWTH, item_type::DRINK, item_type::POWDER_MISC, item_type::CHEESE, item_type::LIQUID_MISC, item_type::GLOB, item_type::TOOL, item_type::EGG };
  static const df::item_type _list_items_65[] = { item_type::BOX };
  static const df::item_type _list_items_66[] = { item_type::VERMIN };
  static const df::item_type _list_items_67[] = { item_type::PET };
  static const df::item_type _list_items_68[] = { item_type::VERMIN, item_type::PET };
  static const df::item_type _list_items_69[] = { item_type::CORPSE, item_type::CORPSEPIECE };
  static const df::item_type _list_items_70[] = { item_type::FLASK, item_type::GOBLET, item_type::CAGE, item_type::BARREL, item_type::BUCKET, item_type::ANIMALTRAP, item_type::COFFIN, item_type::BOX, item_type::BIN, item_type::ARMORSTAND, item_type::WEAPONRACK, item_type::CABINET, item_type::BACKPACK, item_type::QUIVER, item_type::TOOL };
  static const df::item_type _list_items_71[] = { item_type::BARREL, item_type::TOOL };
  const enum_traits<items_other_id>::attr_entry_type enum_traits<items_other_id>::attr_table[131+1] = {
    { item_type::NONE, { 0, NULL } },
    { item_type::NONE, { 0, NULL } },
    { item_type::NONE, { 0, NULL } },
    { item_type::WEAPON, { 0, NULL } },
    { item_type::NONE, { 2, _list_items_42 } },
    { item_type::NONE, { 2, _list_items_43 } },
    { item_type::NONE, { 1, _list_items_44 } },
    { item_type::NONE, { 1, _list_items_45 } },
    { item_type::NONE, { 1, _list_items_46 } },
    { item_type::SHIELD, { 0, NULL } },
    { item_type::NONE, { 1, _list_items_47 } },
    { item_type::NONE, { 1, _list_items_48 } },
    { item_type::QUIVER, { 0, NULL } },
    { item_type::SPLINT, { 0, NULL } },
    { item_type::ORTHOPEDIC_CAST, { 0, NULL } },
    { item_type::CRUTCH, { 0, NULL } },
    { item_type::BACKPACK, { 0, NULL } },
    { item_type::AMMO, { 0, NULL } },
    { item_type::WOOD, { 0, NULL } },
    { item_type::BOULDER, { 0, NULL } },
    { item_type::ROCK, { 0, NULL } },
    { item_type::NONE, { 18, _list_items_49 } },
    { item_type::NONE, { 10, _list_items_50 } },
    { item_type::NONE, { 4, _list_items_51 } },
    { item_type::NONE, { 5, _list_items_52 } },
    { item_type::NONE, { 5, _list_items_53 } },
    { item_type::NONE, { 0, NULL } },
    { item_type::NONE, { 2, _list_items_54 } },
    { item_type::NONE, { 0, NULL } },
    { item_type::NONE, { 0, NULL } },
    { item_type::NONE, { 0, NULL } },
    { item_type::NONE, { 0, NULL } },
    { item_type::NONE, { 2, _list_items_55 } },
    { item_type::NONE, { 12, _list_items_56 } },
    { item_type::NONE, { 3, _list_items_57 } },
    { item_type::NONE, { 0, NULL } },
    { item_type::NONE, { 29, _list_items_58 } },
    { item_type::NONE, { 5, _list_items_59 } },
    { item_type::NONE, { 3, _list_items_60 } },
    { item_type::NONE, { 6, _list_items_61 } },
    { item_type::DOOR, { 0, NULL } },
    { item_type::FLOODGATE, { 0, NULL } },
    { item_type::HATCH_COVER, { 0, NULL } },
    { item_type::GRATE, { 0, NULL } },
    { item_type::CAGE, { 0, NULL } },
    { item_type::FLASK, { 0, NULL } },
    { item_type::WINDOW, { 0, NULL } },
    { item_type::GOBLET, { 0, NULL } },
    { item_type::INSTRUMENT, { 0, NULL } },
    { item_type::TOY, { 0, NULL } },
    { item_type::TOOL, { 0, NULL } },
    { item_type::BUCKET, { 0, NULL } },
    { item_type::BARREL, { 0, NULL } },
    { item_type::CHAIN, { 0, NULL } },
    { item_type::ANIMALTRAP, { 0, NULL } },
    { item_type::BED, { 0, NULL } },
    { item_type::TRACTION_BENCH, { 0, NULL } },
    { item_type::CHAIR, { 0, NULL } },
    { item_type::COFFIN, { 0, NULL } },
    { item_type::TABLE, { 0, NULL } },
    { item_type::STATUE, { 0, NULL } },
    { item_type::SLAB, { 0, NULL } },
    { item_type::QUERN, { 0, NULL } },
    { item_type::MILLSTONE, { 0, NULL } },
    { item_type::BOX, { 0, NULL } },
    { item_type::BIN, { 0, NULL } },
    { item_type::ARMORSTAND, { 0, NULL } },
    { item_type::WEAPONRACK, { 0, NULL } },
    { item_type::CABINET, { 0, NULL } },
    { item_type::ANVIL, { 0, NULL } },
    { item_type::CATAPULTPARTS, { 0, NULL } },
    { item_type::BALLISTAPARTS, { 0, NULL } },
    { item_type::SIEGEAMMO, { 0, NULL } },
    { item_type::TRAPPARTS, { 0, NULL } },
    { item_type::NONE, { 1, _list_items_62 } },
    { item_type::PIPE_SECTION, { 0, NULL } },
    { item_type::NONE, { 0, NULL } },
    { item_type::NONE, { 0, NULL } },
    { item_type::DRINK, { 0, NULL } },
    { item_type::NONE, { 1, _list_items_63 } },
    { item_type::LIQUID_MISC, { 0, NULL } },
    { item_type::POWDER_MISC, { 0, NULL } },
    { item_type::NONE, { 20, _list_items_64 } },
    { item_type::NONE, { 1, _list_items_65 } },
    { item_type::NONE, { 1, _list_items_66 } },
    { item_type::NONE, { 1, _list_items_67 } },
    { item_type::NONE, { 2, _list_items_68 } },
    { item_type::COIN, { 0, NULL } },
    { item_type::GLOB, { 0, NULL } },
    { item_type::TRAPCOMP, { 0, NULL } },
    { item_type::BAR, { 0, NULL } },
    { item_type::SMALLGEM, { 0, NULL } },
    { item_type::BLOCKS, { 0, NULL } },
    { item_type::ROUGH, { 0, NULL } },
    { item_type::NONE, { 2, _list_items_69 } },
    { item_type::CORPSE, { 0, NULL } },
    { item_type::BOOK, { 0, NULL } },
    { item_type::FIGURINE, { 0, NULL } },
    { item_type::AMULET, { 0, NULL } },
    { item_type::SCEPTER, { 0, NULL } },
    { item_type::CROWN, { 0, NULL } },
    { item_type::RING, { 0, NULL } },
    { item_type::EARRING, { 0, NULL } },
    { item_type::BRACELET, { 0, NULL } },
    { item_type::GEM, { 0, NULL } },
    { item_type::CORPSEPIECE, { 0, NULL } },
    { item_type::REMAINS, { 0, NULL } },
    { item_type::MEAT, { 0, NULL } },
    { item_type::FISH, { 0, NULL } },
    { item_type::FISH_RAW, { 0, NULL } },
    { item_type::EGG, { 0, NULL } },
    { item_type::SEEDS, { 0, NULL } },
    { item_type::PLANT, { 0, NULL } },
    { item_type::SKIN_TANNED, { 0, NULL } },
    { item_type::PLANT_GROWTH, { 0, NULL } },
    { item_type::THREAD, { 0, NULL } },
    { item_type::CLOTH, { 0, NULL } },
    { item_type::TOTEM, { 0, NULL } },
    { item_type::PANTS, { 0, NULL } },
    { item_type::CHEESE, { 0, NULL } },
    { item_type::FOOD, { 0, NULL } },
    { item_type::BALLISTAARROWHEAD, { 0, NULL } },
    { item_type::ARMOR, { 0, NULL } },
    { item_type::SHOES, { 0, NULL } },
    { item_type::HELM, { 0, NULL } },
    { item_type::GLOVES, { 0, NULL } },
    { item_type::NONE, { 15, _list_items_70 } },
    { item_type::NONE, { 2, _list_items_71 } },
    { item_type::NONE, { 0, NULL } },
    { item_type::NONE, { 0, NULL } },
    { item_type::NONE, { 0, NULL } },
    { item_type::NONE, { 0, NULL } }
  };
  const enum_traits<items_other_id>::attr_entry_type & enum_traits<items_other_id>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[131];
  }
  enum_identity identity_traits<items_other_id>::identity(sizeof(items_other_id), NULL, "items_other_id", TID(int32_t), -1, 129, enum_traits<items_other_id>::key_table,
                enum_traits<items_other_id>::attr_table, &enum_traits<items_other_id>::attr_entry_type::_identity);
  const bitfield_item_info bitfield_traits<job_flags>::bits[bit_count] = {
    { "repeat", 1 },
    { "suspend", 1 },
    { "working", 1 },
    { "fetching", 1 },
    { "special", 1 },
    { "bringing", 1 },
    { "item_lost", 1 },
    { "noise", 2 },
    { NULL, -1 },
    { "by_manager", 1 },
    { "store_item", 1 },
    { "quality", 3 },
    { NULL, -1 },
    { NULL, -2 },
    { "specific_dropoff", 1 },
    { NULL, 1 },
    { "on_break", 1 },
    { NULL, 1 },
    { "do_now", 1 }
  };
  bitfield_identity identity_traits<job_flags>::identity(sizeof(job_flags), NULL, "job_flags", bitfield_traits<job_flags>::bit_count, bitfield_traits<job_flags>::bits);
  const bitfield_item_info bitfield_traits<job_item_flags1>::bits[bit_count] = {
    { "improvable", 1 },
    { "butcherable", 1 },
    { "millable", 1 },
    { "allow_buryable", 1 },
    { "unrotten", 1 },
    { "undisturbed", 1 },
    { "collected", 1 },
    { "sharpenable", 1 },
    { "murdered", 1 },
    { "distillable", 1 },
    { "empty", 1 },
    { "processable", 1 },
    { "bag", 1 },
    { "cookable", 1 },
    { "extract_bearing_plant", 1 },
    { "extract_bearing_fish", 1 },
    { "extract_bearing_vermin", 1 },
    { "processable_to_vial", 1 },
    { "processable_to_bag", 1 },
    { "processable_to_barrel", 1 },
    { "solid", 1 },
    { "tameable_vermin", 1 },
    { "nearby", 1 },
    { "sand_bearing", 1 },
    { "glass", 1 },
    { "milk", 1 },
    { "milkable", 1 },
    { "finished_goods", 1 },
    { "ammo", 1 },
    { "furniture", 1 },
    { "not_bin", 1 },
    { "lye_bearing", 1 }
  };
  bitfield_identity identity_traits<job_item_flags1>::identity(sizeof(job_item_flags1), NULL, "job_item_flags1", bitfield_traits<job_item_flags1>::bit_count, bitfield_traits<job_item_flags1>::bits);
  const bitfield_item_info bitfield_traits<job_item_flags2>::bits[bit_count] = {
    { "dye", 1 },
    { "dyeable", 1 },
    { "dyed", 1 },
    { "sewn_imageless", 1 },
    { "glass_making", 1 },
    { "screw", 1 },
    { "building_material", 1 },
    { "fire_safe", 1 },
    { "magma_safe", 1 },
    { "deep_material", 1 },
    { "melt_designated", 1 },
    { "non_economic", 1 },
    { "allow_melt_dump", 1 },
    { "allow_artifact", 1 },
    { "plant", 1 },
    { "silk", 1 },
    { "leather", 1 },
    { "bone", 1 },
    { "shell", 1 },
    { "totemable", 1 },
    { "horn", 1 },
    { "pearl", 1 },
    { "plaster_containing", 1 },
    { NULL, 1 },
    { "soap", 1 },
    { "body_part", 1 },
    { "ivory_tooth", 1 },
    { "lye_milk_free", 1 },
    { "blunt", 1 },
    { "unengraved", 1 },
    { "hair_wool", 1 },
    { "yarn", 1 }
  };
  bitfield_identity identity_traits<job_item_flags2>::identity(sizeof(job_item_flags2), NULL, "job_item_flags2", bitfield_traits<job_item_flags2>::bit_count, bitfield_traits<job_item_flags2>::bits);
  const bitfield_item_info bitfield_traits<job_item_flags3>::bits[bit_count] = {
    { "unimproved", 1 },
    { "any_raw_material", 1 },
    { "non_absorbent", 1 },
    { "non_pressed", 1 },
    { "allow_liquid_powder", 1 },
    { "any_craft", 1 },
    { "hard", 1 },
    { "food_storage", 1 }
  };
  bitfield_identity identity_traits<job_item_flags3>::identity(sizeof(job_item_flags3), NULL, "job_item_flags3", bitfield_traits<job_item_flags3>::bit_count, bitfield_traits<job_item_flags3>::bits);
  const char *const enum_traits<job_item_ref::T_role>::key_table[9] = {
    NULL,
    "Reagent",
    "Hauled",
    "LinkToTarget",
    "LinkToTrigger",
    NULL,
    "TargetContainer",
    "QueuedContainer",
    "PushHaulVehicle"
  };
  enum_identity identity_traits<job_item_ref::T_role>::identity(sizeof(job_item_ref::T_role), &job_item_ref::_identity, "T_role", TID(int32_t), 0, 8, enum_traits<job_item_ref::T_role>::key_table,
                NULL, NULL);
  const char *const enum_traits<job_item_vector_id>::key_table[130] = {
    "ANY",
    "IN_PLAY",
    "ANY_ARTIFACT",
    "WEAPON",
    "ANY_WEAPON",
    "ANY_SPIKE",
    "ANY_TRUE_ARMOR",
    "ANY_ARMOR_HELM",
    "ANY_ARMOR_SHOES",
    "SHIELD",
    "ANY_ARMOR_GLOVES",
    "ANY_ARMOR_PANTS",
    "QUIVER",
    "SPLINT",
    "ANY_14",
    "CRUTCH",
    "BACKPACK",
    "AMMO",
    "WOOD",
    "BOULDER",
    "ROCK",
    "ANY_REFUSE",
    "ANY_GOOD_FOOD",
    "ANY_AUTO_CLEAN",
    "ANY_GENERIC23",
    "ANY_GENERIC24",
    "ANY_FURNITURE",
    "ANY_CAGE_OR_TRAP",
    "ANY_EDIBLE_RAW",
    "ANY_EDIBLE_CARNIVORE",
    "ANY_EDIBLE_BONECARN",
    "ANY_EDIBLE_VERMIN",
    "ANY_EDIBLE_VERMIN_BOX",
    "ANY_CAN_ROT",
    "ANY_MURDERED",
    "ANY_DEAD_DWARF",
    "ANY_GENERIC35",
    "ANY_GENERIC36",
    "ANY_GENERIC37",
    "ANY_GENERIC38",
    "DOOR",
    "FLOODGATE",
    "HATCH_COVER",
    "GRATE",
    "CAGE",
    "FLASK",
    "WINDOW",
    "GOBLET",
    "INSTRUMENT",
    "TOY",
    "BUCKET",
    "BARREL",
    "CHAIN",
    "ANIMALTRAP",
    "BED",
    "TRACTION_BENCH",
    "CHAIR",
    "COFFIN",
    "TABLE",
    "STATUE",
    "QUERN",
    "MILLSTONE",
    "BOX",
    "BIN",
    "ARMORSTAND",
    "WEAPONRACK",
    "CABINET",
    "ANVIL",
    "CATAPULTPARTS",
    "BALLISTAPARTS",
    "SIEGEAMMO",
    "TRAPPARTS",
    "ANY_WEBS",
    "PIPE_SECTION",
    "ANY_ENCASED",
    "ANY_IN_CONSTRUCTION",
    "DRINK",
    "ANY_DRINK",
    "LIQUID_MISC",
    "POWDER_MISC",
    "ANY_COOKABLE",
    "ANY_GENERIC82",
    "VERMIN",
    "PET",
    "ANY_CRITTER",
    "COIN",
    "GLOB",
    "ANY_RECENTLY_DROPPED",
    "ANY_MELT_DESIGNATED",
    "BAD",
    "TRAPCOMP",
    "BAR",
    "SMALLGEM",
    "BLOCKS",
    "ROUGH",
    "CORPSE",
    "FIGURINE",
    "AMULET",
    "SCEPTER",
    "CROWN",
    "RING",
    "EARRING",
    "BRACELET",
    "GEM",
    "CORPSEPIECE",
    "REMAINS",
    "MEAT",
    "FISH",
    "FISH_RAW",
    "SEEDS",
    "PLANT",
    "SKIN_TANNED",
    "PLANT_GROWTH",
    "THREAD",
    "CLOTH",
    "TOTEM",
    "PANTS",
    "CHEESE",
    "FOOD",
    "BALLISTAARROWHEAD",
    "ARMOR",
    "SHOES",
    "HELM",
    "GLOVES",
    "ANY_124",
    "ANY_125",
    "EGG",
    "ANY_127",
    "ANY_CORPSE",
    "BOOK"
  };
  const enum_traits<job_item_vector_id>::attr_entry_type enum_traits<job_item_vector_id>::attr_table[130+1] = {
    { items_other_id::ANY },
    { items_other_id::IN_PLAY },
    { items_other_id::ANY_ARTIFACT },
    { items_other_id::WEAPON },
    { items_other_id::ANY_WEAPON },
    { items_other_id::ANY_SPIKE },
    { items_other_id::ANY_TRUE_ARMOR },
    { items_other_id::ANY_ARMOR_HELM },
    { items_other_id::ANY_ARMOR_SHOES },
    { items_other_id::SHIELD },
    { items_other_id::ANY_ARMOR_GLOVES },
    { items_other_id::ANY_ARMOR_PANTS },
    { items_other_id::QUIVER },
    { items_other_id::SPLINT },
    { items_other_id::ANY },
    { items_other_id::CRUTCH },
    { items_other_id::BACKPACK },
    { items_other_id::AMMO },
    { items_other_id::WOOD },
    { items_other_id::BOULDER },
    { items_other_id::ROCK },
    { items_other_id::ANY_REFUSE },
    { items_other_id::ANY_GOOD_FOOD },
    { items_other_id::ANY_AUTO_CLEAN },
    { items_other_id::ANY_GENERIC23 },
    { items_other_id::ANY_GENERIC24 },
    { items_other_id::ANY_FURNITURE },
    { items_other_id::ANY_CAGE_OR_TRAP },
    { items_other_id::ANY_EDIBLE_RAW },
    { items_other_id::ANY_EDIBLE_CARNIVORE },
    { items_other_id::ANY_EDIBLE_BONECARN },
    { items_other_id::ANY_EDIBLE_VERMIN },
    { items_other_id::ANY_EDIBLE_VERMIN_BOX },
    { items_other_id::ANY_CAN_ROT },
    { items_other_id::ANY_MURDERED },
    { items_other_id::ANY_DEAD_DWARF },
    { items_other_id::ANY_GENERIC35 },
    { items_other_id::ANY_GENERIC36 },
    { items_other_id::ANY_GENERIC37 },
    { items_other_id::ANY_GENERIC38 },
    { items_other_id::DOOR },
    { items_other_id::FLOODGATE },
    { items_other_id::HATCH_COVER },
    { items_other_id::GRATE },
    { items_other_id::CAGE },
    { items_other_id::FLASK },
    { items_other_id::WINDOW },
    { items_other_id::GOBLET },
    { items_other_id::INSTRUMENT },
    { items_other_id::TOY },
    { items_other_id::BUCKET },
    { items_other_id::BARREL },
    { items_other_id::CHAIN },
    { items_other_id::ANIMALTRAP },
    { items_other_id::BED },
    { items_other_id::TRACTION_BENCH },
    { items_other_id::CHAIR },
    { items_other_id::COFFIN },
    { items_other_id::TABLE },
    { items_other_id::STATUE },
    { items_other_id::QUERN },
    { items_other_id::MILLSTONE },
    { items_other_id::BOX },
    { items_other_id::BIN },
    { items_other_id::ARMORSTAND },
    { items_other_id::WEAPONRACK },
    { items_other_id::CABINET },
    { items_other_id::ANVIL },
    { items_other_id::CATAPULTPARTS },
    { items_other_id::BALLISTAPARTS },
    { items_other_id::SIEGEAMMO },
    { items_other_id::TRAPPARTS },
    { items_other_id::ANY_WEBS },
    { items_other_id::PIPE_SECTION },
    { items_other_id::ANY_ENCASED },
    { items_other_id::ANY_IN_CONSTRUCTION },
    { items_other_id::DRINK },
    { items_other_id::ANY_DRINK },
    { items_other_id::LIQUID_MISC },
    { items_other_id::POWDER_MISC },
    { items_other_id::ANY_COOKABLE },
    { items_other_id::ANY_GENERIC82 },
    { items_other_id::VERMIN },
    { items_other_id::PET },
    { items_other_id::ANY_CRITTER },
    { items_other_id::COIN },
    { items_other_id::GLOB },
    { items_other_id::ANY_RECENTLY_DROPPED },
    { items_other_id::ANY_MELT_DESIGNATED },
    { items_other_id::BAD },
    { items_other_id::TRAPCOMP },
    { items_other_id::BAR },
    { items_other_id::SMALLGEM },
    { items_other_id::BLOCKS },
    { items_other_id::ROUGH },
    { items_other_id::CORPSE },
    { items_other_id::FIGURINE },
    { items_other_id::AMULET },
    { items_other_id::SCEPTER },
    { items_other_id::CROWN },
    { items_other_id::RING },
    { items_other_id::EARRING },
    { items_other_id::BRACELET },
    { items_other_id::GEM },
    { items_other_id::CORPSEPIECE },
    { items_other_id::REMAINS },
    { items_other_id::MEAT },
    { items_other_id::FISH },
    { items_other_id::FISH_RAW },
    { items_other_id::SEEDS },
    { items_other_id::PLANT },
    { items_other_id::SKIN_TANNED },
    { items_other_id::PLANT_GROWTH },
    { items_other_id::THREAD },
    { items_other_id::CLOTH },
    { items_other_id::TOTEM },
    { items_other_id::PANTS },
    { items_other_id::CHEESE },
    { items_other_id::FOOD },
    { items_other_id::BALLISTAARROWHEAD },
    { items_other_id::ARMOR },
    { items_other_id::SHOES },
    { items_other_id::HELM },
    { items_other_id::GLOVES },
    { items_other_id::ANY },
    { items_other_id::ANY },
    { items_other_id::EGG },
    { items_other_id::ANY },
    { items_other_id::ANY_CORPSE },
    { items_other_id::BOOK },
    { items_other_id::ANY }
  };
  const enum_traits<job_item_vector_id>::attr_entry_type & enum_traits<job_item_vector_id>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[130];
  }
  enum_identity identity_traits<job_item_vector_id>::identity(sizeof(job_item_vector_id), NULL, "job_item_vector_id", TID(int16_t), 0, 129, enum_traits<job_item_vector_id>::key_table,
                enum_traits<job_item_vector_id>::attr_table, &enum_traits<job_item_vector_id>::attr_entry_type::_identity);
  const bitfield_item_info bitfield_traits<job_material_category>::bits[bit_count] = {
    { "plant", 1 },
    { "wood", 1 },
    { "cloth", 1 },
    { "silk", 1 },
    { "leather", 1 },
    { "bone", 1 },
    { "shell", 1 },
    { "wood2", 1 },
    { "soap", 1 },
    { "tooth", 1 },
    { "horn", 1 },
    { "pearl", 1 },
    { "yarn", 1 }
  };
  bitfield_identity identity_traits<job_material_category>::identity(sizeof(job_material_category), NULL, "job_material_category", bitfield_traits<job_material_category>::bit_count, bitfield_traits<job_material_category>::bits);
  const char *const enum_traits<job_skill>::key_table[119] = {
    "NONE",
    "MINING",
    "WOODCUTTING",
    "CARPENTRY",
    "DETAILSTONE",
    "MASONRY",
    "ANIMALTRAIN",
    "ANIMALCARE",
    "DISSECT_FISH",
    "DISSECT_VERMIN",
    "PROCESSFISH",
    "BUTCHER",
    "TRAPPING",
    "TANNER",
    "WEAVING",
    "BREWING",
    "ALCHEMY",
    "CLOTHESMAKING",
    "MILLING",
    "PROCESSPLANTS",
    "CHEESEMAKING",
    "MILK",
    "COOK",
    "PLANT",
    "HERBALISM",
    "FISH",
    "SMELT",
    "EXTRACT_STRAND",
    "FORGE_WEAPON",
    "FORGE_ARMOR",
    "FORGE_FURNITURE",
    "CUTGEM",
    "ENCRUSTGEM",
    "WOODCRAFT",
    "STONECRAFT",
    "METALCRAFT",
    "GLASSMAKER",
    "LEATHERWORK",
    "BONECARVE",
    "AXE",
    "SWORD",
    "DAGGER",
    "MACE",
    "HAMMER",
    "SPEAR",
    "CROSSBOW",
    "SHIELD",
    "ARMOR",
    "SIEGECRAFT",
    "SIEGEOPERATE",
    "BOWYER",
    "PIKE",
    "WHIP",
    "BOW",
    "BLOWGUN",
    "THROW",
    "MECHANICS",
    "MAGIC_NATURE",
    "SNEAK",
    "DESIGNBUILDING",
    "DRESS_WOUNDS",
    "DIAGNOSE",
    "SURGERY",
    "SET_BONE",
    "SUTURE",
    "CRUTCH_WALK",
    "WOOD_BURNING",
    "LYE_MAKING",
    "SOAP_MAKING",
    "POTASH_MAKING",
    "DYER",
    "OPERATE_PUMP",
    "SWIMMING",
    "PERSUASION",
    "NEGOTIATION",
    "JUDGING_INTENT",
    "APPRAISAL",
    "ORGANIZATION",
    "RECORD_KEEPING",
    "LYING",
    "INTIMIDATION",
    "CONVERSATION",
    "COMEDY",
    "FLATTERY",
    "CONSOLE",
    "PACIFY",
    "TRACKING",
    "KNOWLEDGE_ACQUISITION",
    "CONCENTRATION",
    "DISCIPLINE",
    "SITUATIONAL_AWARENESS",
    "WRITING",
    "PROSE",
    "POETRY",
    "READING",
    "SPEAKING",
    "COORDINATION",
    "BALANCE",
    "LEADERSHIP",
    "TEACHING",
    "MELEE_COMBAT",
    "RANGED_COMBAT",
    "WRESTLING",
    "BITE",
    "GRASP_STRIKE",
    "STANCE_STRIKE",
    "DODGING",
    "MISC_WEAPON",
    "KNAPPING",
    "MILITARY_TACTICS",
    "SHEARING",
    "SPINNING",
    "POTTERY",
    "GLAZING",
    "PRESSING",
    "BEEKEEPING",
    "WAX_WORKING",
    "CLIMBING",
    "GELD"
  };
  const enum_traits<job_skill>::attr_entry_type enum_traits<job_skill>::attr_table[119+1] = {
    { NULL, NULL, profession::NONE, unit_labor::NONE, job_skill_class::Normal },
    { "Mining", "Miner", profession::MINER, unit_labor::MINE, job_skill_class::Normal },
    { "Wood Cutting", "Wood Cutter", profession::WOODCUTTER, unit_labor::CUTWOOD, job_skill_class::Normal },
    { "Carpentry", "Carpenter", profession::CARPENTER, unit_labor::CARPENTER, job_skill_class::Normal },
    { "Engraving", "Engraver", profession::ENGRAVER, unit_labor::DETAIL, job_skill_class::Normal },
    { "Masonry", "Mason", profession::MASON, unit_labor::MASON, job_skill_class::Normal },
    { "Animal Training", "Animal Trainer", profession::ANIMAL_TRAINER, unit_labor::ANIMALTRAIN, job_skill_class::Normal },
    { "Animal Caretaking", "Animal Caretaker", profession::ANIMAL_CARETAKER, unit_labor::ANIMALCARE, job_skill_class::Normal },
    { "Fish Dissection", "Fish Dissector", profession::FISH_DISSECTOR, unit_labor::DISSECT_FISH, job_skill_class::Normal },
    { "Animal Dissection", "Animal Dissector", profession::ANIMAL_DISSECTOR, unit_labor::DISSECT_VERMIN, job_skill_class::Normal },
    { "Fish Cleaning", "Fish Cleaner", profession::FISH_CLEANER, unit_labor::CLEAN_FISH, job_skill_class::Normal },
    { "Butchery", "Butcher", profession::BUTCHER, unit_labor::BUTCHER, job_skill_class::Normal },
    { "Trapping", "Trapper", profession::TRAPPER, unit_labor::TRAPPER, job_skill_class::Normal },
    { "Tanning", "Tanner", profession::TANNER, unit_labor::TANNER, job_skill_class::Normal },
    { "Weaving", "Weaver", profession::WEAVER, unit_labor::WEAVER, job_skill_class::Normal },
    { "Brewing", "Brewer", profession::BREWER, unit_labor::BREWER, job_skill_class::Normal },
    { "Alchemy", "Alchemist", profession::ALCHEMIST, unit_labor::ALCHEMIST, job_skill_class::Normal },
    { "Clothes Making", "Clothier", profession::CLOTHIER, unit_labor::CLOTHESMAKER, job_skill_class::Normal },
    { "Milling", "Miller", profession::MILLER, unit_labor::MILLER, job_skill_class::Normal },
    { "Threshing", "Thresher", profession::THRESHER, unit_labor::PROCESS_PLANT, job_skill_class::Normal },
    { "Cheese Making", "Cheese Maker", profession::CHEESE_MAKER, unit_labor::MAKE_CHEESE, job_skill_class::Normal },
    { "Milking", "Milker", profession::MILKER, unit_labor::MILK, job_skill_class::Normal },
    { "Cooking", "Cook", profession::COOK, unit_labor::COOK, job_skill_class::Normal },
    { "Growing", "Grower", profession::PLANTER, unit_labor::PLANT, job_skill_class::Normal },
    { "Herbalism", "Herbalist", profession::HERBALIST, unit_labor::HERBALIST, job_skill_class::Normal },
    { "Fishing", "Fisherman", profession::FISHERMAN, unit_labor::FISH, job_skill_class::Normal },
    { "Furnace Operation", "Furnace Operator", profession::FURNACE_OPERATOR, unit_labor::SMELT, job_skill_class::Normal },
    { "Strand Extraction", "Strand Extractor", profession::STRAND_EXTRACTOR, unit_labor::EXTRACT_STRAND, job_skill_class::Normal },
    { "Weaponsmithing", "Weaponsmith", profession::WEAPONSMITH, unit_labor::FORGE_WEAPON, job_skill_class::Normal },
    { "Armorsmithing", "Armorsmith", profession::ARMORER, unit_labor::FORGE_ARMOR, job_skill_class::Normal },
    { "Metalsmithing", "Metalsmith", profession::BLACKSMITH, unit_labor::FORGE_FURNITURE, job_skill_class::Normal },
    { "Gem Cutting", "Gem Cutter", profession::GEM_CUTTER, unit_labor::CUT_GEM, job_skill_class::Normal },
    { "Gem Setting", "Gem Setter", profession::GEM_SETTER, unit_labor::ENCRUST_GEM, job_skill_class::Normal },
    { "Wood Crafting", "Wood Crafter", profession::WOODCRAFTER, unit_labor::WOOD_CRAFT, job_skill_class::Normal },
    { "Stone Crafting", "Stone Crafter", profession::STONECRAFTER, unit_labor::STONE_CRAFT, job_skill_class::Normal },
    { "Metal Crafting", "Metal Crafter", profession::METALCRAFTER, unit_labor::METAL_CRAFT, job_skill_class::Normal },
    { "Glassmaking", "Glassmaker", profession::GLASSMAKER, unit_labor::GLASSMAKER, job_skill_class::Normal },
    { "Leatherworkering", "Leatherworker", profession::LEATHERWORKER, unit_labor::LEATHER, job_skill_class::Normal },
    { "Bone Carving", "Bone Carver", profession::BONE_CARVER, unit_labor::BONE_CARVE, job_skill_class::Normal },
    { "Axe", "Axeman", profession::AXEMAN, unit_labor::NONE, job_skill_class::MilitaryWeapon },
    { "Sword", "Swordsman", profession::SWORDSMAN, unit_labor::NONE, job_skill_class::MilitaryWeapon },
    { "Knife", "Knife User", profession::NONE, unit_labor::NONE, job_skill_class::MilitaryWeapon },
    { "Mace", "Maceman", profession::MACEMAN, unit_labor::NONE, job_skill_class::MilitaryWeapon },
    { "Hammer", "Hammerman", profession::HAMMERMAN, unit_labor::NONE, job_skill_class::MilitaryWeapon },
    { "Spear", "Spearman", profession::SPEARMAN, unit_labor::NONE, job_skill_class::MilitaryWeapon },
    { "Crossbow", "Crossbowman", profession::CROSSBOWMAN, unit_labor::NONE, job_skill_class::MilitaryWeapon },
    { "Shield", "Shield User", profession::NONE, unit_labor::NONE, job_skill_class::MilitaryDefense },
    { "Armor", "Armor User", profession::NONE, unit_labor::NONE, job_skill_class::MilitaryDefense },
    { "Siege Engineering", "Siege Engineer", profession::SIEGE_ENGINEER, unit_labor::SIEGECRAFT, job_skill_class::Normal },
    { "Siege Operation", "Siege Operator", profession::SIEGE_OPERATOR, unit_labor::SIEGEOPERATE, job_skill_class::Normal },
    { "Bowmaking", "Bowyer", profession::BOWYER, unit_labor::BOWYER, job_skill_class::Normal },
    { "Pike", "Pikeman", profession::PIKEMAN, unit_labor::NONE, job_skill_class::MilitaryWeapon },
    { "Lash", "Lasher", profession::LASHER, unit_labor::NONE, job_skill_class::MilitaryWeapon },
    { "Bow", "Bowman", profession::BOWMAN, unit_labor::NONE, job_skill_class::MilitaryWeapon },
    { "Blowgun", "Blowgunner", profession::BLOWGUNMAN, unit_labor::NONE, job_skill_class::MilitaryWeapon },
    { "Throwing", "Thrower", profession::NONE, unit_labor::NONE, job_skill_class::MilitaryAttack },
    { "Machinery", "Mechanic", profession::MECHANIC, unit_labor::MECHANIC, job_skill_class::Normal },
    { "Nature", "Druid", profession::NONE, unit_labor::NONE, job_skill_class::Normal },
    { "Ambush", "Ambusher", profession::HUNTER, unit_labor::HUNT, job_skill_class::Normal },
    { "Building Design", "Building Designer", profession::ARCHITECT, unit_labor::ARCHITECT, job_skill_class::Normal },
    { "Wound Dressing", "Wound Dresser", profession::NONE, unit_labor::DRESSING_WOUNDS, job_skill_class::Medical },
    { "Diagnostics", "Diagnostician", profession::DIAGNOSER, unit_labor::DIAGNOSE, job_skill_class::Medical },
    { "Surgery", "Surgeon", profession::SURGEON, unit_labor::SURGERY, job_skill_class::Medical },
    { "Bone Setting", "Bone Doctor", profession::BONE_SETTER, unit_labor::BONE_SETTING, job_skill_class::Medical },
    { "Suturing", "Suturer", profession::SUTURER, unit_labor::SUTURING, job_skill_class::Medical },
    { "Crutch-walking", "Crutch-walker", profession::NONE, unit_labor::NONE, job_skill_class::Personal },
    { "Wood Burning", "Wood Burner", profession::WOOD_BURNER, unit_labor::BURN_WOOD, job_skill_class::Normal },
    { "Lye Making", "Lye Maker", profession::LYE_MAKER, unit_labor::LYE_MAKING, job_skill_class::Normal },
    { "Soap Making", "Soaper", profession::SOAP_MAKER, unit_labor::SOAP_MAKER, job_skill_class::Normal },
    { "Potash Making", "Potash Maker", profession::POTASH_MAKER, unit_labor::POTASH_MAKING, job_skill_class::Normal },
    { "Dyeing", "Dyer", profession::DYER, unit_labor::DYER, job_skill_class::Normal },
    { "Pump Operation", "Pump Operator", profession::PUMP_OPERATOR, unit_labor::OPERATE_PUMP, job_skill_class::Normal },
    { "Swimming", "Swimmer", profession::NONE, unit_labor::NONE, job_skill_class::Personal },
    { "Persuasion", "Persuader", profession::NONE, unit_labor::NONE, job_skill_class::Social },
    { "Negotiation", "Negotiator", profession::NONE, unit_labor::NONE, job_skill_class::Social },
    { "Judging Intent", "Judge of Intent", profession::NONE, unit_labor::NONE, job_skill_class::Social },
    { "Appraisal", "Appraiser", profession::TRADER, unit_labor::NONE, job_skill_class::Normal },
    { "Organization", "Organizer", profession::ADMINISTRATOR, unit_labor::NONE, job_skill_class::Normal },
    { "Record Keeping", "Record Keeper", profession::CLERK, unit_labor::NONE, job_skill_class::Normal },
    { "Lying", "Liar", profession::NONE, unit_labor::NONE, job_skill_class::Social },
    { "Intimidation", "Intimidator", profession::NONE, unit_labor::NONE, job_skill_class::Social },
    { "Conversation", "Conversationalist", profession::NONE, unit_labor::NONE, job_skill_class::Social },
    { "Comedy", "Comedian", profession::NONE, unit_labor::NONE, job_skill_class::Social },
    { "Flattery", "Flatterer", profession::NONE, unit_labor::NONE, job_skill_class::Social },
    { "Consoling", "Consoler", profession::NONE, unit_labor::NONE, job_skill_class::Social },
    { "Pacification", "Pacifier", profession::NONE, unit_labor::NONE, job_skill_class::Social },
    { "Tracking", "Tracker", profession::NONE, unit_labor::NONE, job_skill_class::Personal },
    { "Studying", "Student", profession::NONE, unit_labor::NONE, job_skill_class::Social },
    { "Concentration", "Concentration", profession::NONE, unit_labor::NONE, job_skill_class::Personal },
    { "Discipline", "Discipline", profession::NONE, unit_labor::NONE, job_skill_class::Personal },
    { "Observation", "Observer", profession::NONE, unit_labor::NONE, job_skill_class::Personal },
    { "Writing", "Wordsmith", profession::NONE, unit_labor::NONE, job_skill_class::Cultural },
    { "Prose", "Writer", profession::NONE, unit_labor::NONE, job_skill_class::Cultural },
    { "Poetry", "Poet", profession::NONE, unit_labor::NONE, job_skill_class::Cultural },
    { "Reading", "Reader", profession::NONE, unit_labor::NONE, job_skill_class::Cultural },
    { "Speaking", "Speaker", profession::NONE, unit_labor::NONE, job_skill_class::Cultural },
    { "Coordination", "Coordination", profession::NONE, unit_labor::NONE, job_skill_class::Personal },
    { "Balance", "Balance", profession::NONE, unit_labor::NONE, job_skill_class::Personal },
    { "Leadership", "Leader", profession::NONE, unit_labor::NONE, job_skill_class::Social },
    { "Teaching", "Teacher", profession::NONE, unit_labor::NONE, job_skill_class::Social },
    { "Fighting", "Fighter", profession::NONE, unit_labor::NONE, job_skill_class::MilitaryAttack },
    { "Archery", "Archer", profession::NONE, unit_labor::NONE, job_skill_class::MilitaryAttack },
    { "Wrestling", "Wrestler", profession::WRESTLER, unit_labor::NONE, job_skill_class::MilitaryUnarmed },
    { "Biting", "Biter", profession::NONE, unit_labor::NONE, job_skill_class::MilitaryUnarmed },
    { "Striking", "Striker", profession::NONE, unit_labor::NONE, job_skill_class::MilitaryUnarmed },
    { "Kicking", "Kicker", profession::NONE, unit_labor::NONE, job_skill_class::MilitaryUnarmed },
    { "Dodging", "Dodger", profession::NONE, unit_labor::NONE, job_skill_class::MilitaryDefense },
    { "Misc. Object", "Misc. Object User", profession::NONE, unit_labor::NONE, job_skill_class::MilitaryWeapon },
    { "Knapping", "Knapper", profession::NONE, unit_labor::NONE, job_skill_class::MilitaryMisc },
    { "Military Tactics", "Military Tactics", profession::NONE, unit_labor::NONE, job_skill_class::Normal },
    { "Shearing", "Shearer", profession::SHEARER, unit_labor::SHEARER, job_skill_class::Normal },
    { "Spinning", "Spinner", profession::SPINNER, unit_labor::SPINNER, job_skill_class::Normal },
    { "Pottery", "Potter", profession::POTTER, unit_labor::POTTERY, job_skill_class::Normal },
    { "Glazing", "Glazer", profession::GLAZER, unit_labor::GLAZING, job_skill_class::Normal },
    { "Pressing", "Presser", profession::PRESSER, unit_labor::PRESSING, job_skill_class::Normal },
    { "Beekeeping", "Beekeeper", profession::BEEKEEPER, unit_labor::BEEKEEPING, job_skill_class::Normal },
    { "Wax Working", "Wax Worker", profession::WAX_WORKER, unit_labor::WAX_WORKING, job_skill_class::Normal },
    { "Climbing", "Climber", profession::NONE, unit_labor::NONE, job_skill_class::Personal },
    { "Gelding", "Gelder", profession::GELDER, unit_labor::GELD, job_skill_class::Normal },
    { NULL, NULL, profession::NONE, unit_labor::NONE, job_skill_class::Normal }
  };
  const enum_traits<job_skill>::attr_entry_type & enum_traits<job_skill>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[119];
  }
  enum_identity identity_traits<job_skill>::identity(sizeof(job_skill), NULL, "job_skill", TID(int16_t), -1, 117, enum_traits<job_skill>::key_table,
                enum_traits<job_skill>::attr_table, &enum_traits<job_skill>::attr_entry_type::_identity);
  const char *const enum_traits<job_skill_class>::key_table[10] = {
    "Normal",
    "Medical",
    "Personal",
    "Social",
    "Cultural",
    "MilitaryWeapon",
    "MilitaryUnarmed",
    "MilitaryAttack",
    "MilitaryDefense",
    "MilitaryMisc"
  };
  enum_identity identity_traits<job_skill_class>::identity(sizeof(job_skill_class), NULL, "job_skill_class", TID(int32_t), 0, 9, enum_traits<job_skill_class>::key_table,
                NULL, NULL);
  const char *const enum_traits<job_subtype_surgery>::key_table[4] = {
    "Surgery",
    "StopBleeding",
    "RepairCompoundFracture",
    "RemoveRottenTissue"
  };
  enum_identity identity_traits<job_subtype_surgery>::identity(sizeof(job_subtype_surgery), NULL, "job_subtype_surgery", TID(int32_t), 0, 3, enum_traits<job_subtype_surgery>::key_table,
                NULL, NULL);
  const char *const enum_traits<job_type>::key_table[232] = {
    "CarveFortification",
    "DetailWall",
    "DetailFloor",
    "Dig",
    "CarveUpwardStaircase",
    "CarveDownwardStaircase",
    "CarveUpDownStaircase",
    "CarveRamp",
    "DigChannel",
    "FellTree",
    "GatherPlants",
    "RemoveConstruction",
    "CollectWebs",
    "BringItemToDepot",
    "BringItemToShop",
    "Eat",
    "GetProvisions",
    "Drink",
    "Drink2",
    "FillWaterskin",
    "FillWaterskin2",
    "Sleep",
    "CollectSand",
    "Fish",
    "Hunt",
    "HuntVermin",
    "Kidnap",
    "BeatCriminal",
    "StartingFistFight",
    "CollectTaxes",
    "GuardTaxCollector",
    "CatchLiveLandAnimal",
    "CatchLiveFish",
    "ReturnKill",
    "CheckChest",
    "StoreOwnedItem",
    "PlaceItemInTomb",
    "StoreItemInStockpile",
    "StoreItemInBag",
    "StoreItemInHospital",
    NULL,
    NULL,
    "StoreWeapon",
    "StoreArmor",
    "StoreItemInBarrel",
    "StoreItemInBin",
    "SeekArtifact",
    "SeekInfant",
    "AttendParty",
    "GoShopping",
    "GoShopping2",
    "Clean",
    "Rest",
    "PickupEquipment",
    "DumpItem",
    "StrangeMoodCrafter",
    "StrangeMoodJeweller",
    "StrangeMoodForge",
    "StrangeMoodMagmaForge",
    "StrangeMoodBrooding",
    "StrangeMoodFell",
    "StrangeMoodCarpenter",
    "StrangeMoodMason",
    "StrangeMoodBowyer",
    "StrangeMoodTanner",
    "StrangeMoodWeaver",
    "StrangeMoodGlassmaker",
    "StrangeMoodMechanics",
    "ConstructBuilding",
    "ConstructDoor",
    "ConstructFloodgate",
    "ConstructBed",
    "ConstructThrone",
    "ConstructCoffin",
    "ConstructTable",
    "ConstructChest",
    "ConstructBin",
    "ConstructArmorStand",
    "ConstructWeaponRack",
    "ConstructCabinet",
    "ConstructStatue",
    "ConstructBlocks",
    "MakeRawGlass",
    "MakeCrafts",
    "MintCoins",
    "CutGems",
    "CutGlass",
    "EncrustWithGems",
    "EncrustWithGlass",
    "DestroyBuilding",
    "SmeltOre",
    "MeltMetalObject",
    "ExtractMetalStrands",
    "PlantSeeds",
    "HarvestPlants",
    "TrainHuntingAnimal",
    "TrainWarAnimal",
    "MakeWeapon",
    "ForgeAnvil",
    "ConstructCatapultParts",
    "ConstructBallistaParts",
    "MakeArmor",
    "MakeHelm",
    "MakePants",
    "StudWith",
    "ButcherAnimal",
    "PrepareRawFish",
    "MillPlants",
    "BaitTrap",
    "MilkCreature",
    "MakeCheese",
    "ProcessPlants",
    NULL,
    "ProcessPlantsVial",
    "ProcessPlantsBarrel",
    "PrepareMeal",
    "WeaveCloth",
    "MakeGloves",
    "MakeShoes",
    "MakeShield",
    "MakeCage",
    "MakeChain",
    "MakeFlask",
    "MakeGoblet",
    "MakeInstrument",
    "MakeToy",
    "MakeAnimalTrap",
    "MakeBarrel",
    "MakeBucket",
    "MakeWindow",
    "MakeTotem",
    "MakeAmmo",
    "DecorateWith",
    "MakeBackpack",
    "MakeQuiver",
    "MakeBallistaArrowHead",
    "AssembleSiegeAmmo",
    "LoadCatapult",
    "LoadBallista",
    "FireCatapult",
    "FireBallista",
    "ConstructMechanisms",
    "MakeTrapComponent",
    "LoadCageTrap",
    "LoadStoneTrap",
    "LoadWeaponTrap",
    "CleanTrap",
    "CastSpell",
    "LinkBuildingToTrigger",
    "PullLever",
    NULL,
    "ExtractFromPlants",
    "ExtractFromRawFish",
    "ExtractFromLandAnimal",
    "TameVermin",
    "TameAnimal",
    "ChainAnimal",
    "UnchainAnimal",
    "UnchainPet",
    "ReleaseLargeCreature",
    "ReleasePet",
    "ReleaseSmallCreature",
    "HandleSmallCreature",
    "HandleLargeCreature",
    "CageLargeCreature",
    "CageSmallCreature",
    "RecoverWounded",
    "DiagnosePatient",
    "ImmobilizeBreak",
    "DressWound",
    "CleanPatient",
    "Surgery",
    "Suture",
    "SetBone",
    "PlaceInTraction",
    "DrainAquarium",
    "FillAquarium",
    "FillPond",
    "GiveWater",
    "GiveFood",
    "GiveWater2",
    "GiveFood2",
    "RecoverPet",
    "PitLargeAnimal",
    "PitSmallAnimal",
    "SlaughterAnimal",
    "MakeCharcoal",
    "MakeAsh",
    "MakeLye",
    "MakePotashFromLye",
    "FertilizeField",
    "MakePotashFromAsh",
    "DyeThread",
    "DyeCloth",
    "SewImage",
    "MakePipeSection",
    "OperatePump",
    "ManageWorkOrders",
    "UpdateStockpileRecords",
    "TradeAtDepot",
    "ConstructHatchCover",
    "ConstructGrate",
    "RemoveStairs",
    "ConstructQuern",
    "ConstructMillstone",
    "ConstructSplint",
    "ConstructCrutch",
    "ConstructTractionBench",
    "CleanSelf",
    "BringCrutch",
    "ApplyCast",
    "CustomReaction",
    "ConstructSlab",
    "EngraveSlab",
    "ShearCreature",
    "SpinThread",
    "PenLargeAnimal",
    "PenSmallAnimal",
    "MakeTool",
    "CollectClay",
    "InstallColonyInHive",
    "CollectHiveProducts",
    "CauseTrouble",
    "DrinkBlood",
    "ReportCrime",
    "ExecuteCriminal",
    "TrainAnimal",
    "CarveTrack",
    "PushTrackVehicle",
    "PlaceTrackVehicle",
    "StoreItemInVehicle",
    "GeldAnimal"
  };
  static const df::item_type _list_items_72[] = { item_type::FIGURINE, item_type::RING, item_type::EARRING, item_type::CROWN, item_type::BRACELET, item_type::SCEPTER };
  static const df::item_type _list_items_73[] = { item_type::MEAT, item_type::CORPSEPIECE, item_type::GLOB };
  static const df::item_type _list_items_74[] = { item_type::MEAT, item_type::CORPSEPIECE, item_type::GLOB };
  const enum_traits<job_type>::attr_entry_type enum_traits<job_type>::attr_table[232+1] = {
    { "Carve Fortification", job_type_class::Digging, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::MINING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Detail Wall", job_type_class::Building, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::DETAILSTONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Detail Floor", job_type_class::Building, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::DETAILSTONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Dig", job_type_class::Digging, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::MINING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Carve Upward Staircase", job_type_class::Digging, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::MINING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Carve Downward Staircase", job_type_class::Digging, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::MINING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Carve Up/Down Staircase", job_type_class::Digging, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::MINING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Carve Ramp", job_type_class::Digging, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::MINING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Dig Channel", job_type_class::Digging, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::MINING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Fell Tree", job_type_class::Gathering, unit_labor::NONE, item_type::WOOD, { 0, NULL }, NULL, job_skill::WOODCUTTING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Gather Plants", job_type_class::Gathering, unit_labor::NONE, item_type::PLANT, { 0, NULL }, NULL, job_skill::HERBALISM, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Remove Construction", job_type_class::Building, unit_labor::REMOVE_CONSTRUCTION, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Collect Webs", job_type_class::Gathering, unit_labor::NONE, item_type::THREAD, { 0, NULL }, "silk", job_skill::WEAVING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Bring Item to Depot", job_type_class::Hauling, unit_labor::HAUL_TRADE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Bring Item to Shop", job_type_class::Hauling, unit_labor::HAUL_ITEM, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Eat", job_type_class::LifeSupport, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Get Provisions", job_type_class::LifeSupport, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Drink", job_type_class::LifeSupport, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Drink", job_type_class::LifeSupport, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Fill Waterskin", job_type_class::LifeSupport, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Fill Waterskin", job_type_class::LifeSupport, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Sleep", job_type_class::LifeSupport, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Collect Sand", job_type_class::Gathering, unit_labor::HAUL_ITEM, item_type::POWDER_MISC, { 0, NULL }, "sand", job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Fish", job_type_class::Gathering, unit_labor::NONE, item_type::FISH_RAW, { 0, NULL }, NULL, job_skill::FISH, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Hunt", job_type_class::Gathering, unit_labor::NONE, item_type::CORPSE, { 0, NULL }, NULL, job_skill::SNEAK, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Hunt for Small Creature", job_type_class::Gathering, unit_labor::NONE, item_type::REMAINS, { 0, NULL }, NULL, job_skill::TRAPPING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Kidnap", job_type_class::Crime, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Beat Criminal", job_type_class::LawEnforcement, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Starting Fist Fight", job_type_class::Crime, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Collect Taxes", job_type_class::LawEnforcement, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Guard Tax Collector", job_type_class::LawEnforcement, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Catch Live Land Animal", job_type_class::Gathering, unit_labor::NONE, item_type::VERMIN, { 0, NULL }, NULL, job_skill::TRAPPING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Catch Live Fish", job_type_class::Gathering, unit_labor::NONE, item_type::VERMIN, { 0, NULL }, NULL, job_skill::FISH, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Return Kill", job_type_class::Hauling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Check Chest", job_type_class::TidyUp, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Store Owned Item", job_type_class::TidyUp, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Place Item in Tomb", job_type_class::Hauling, unit_labor::HAUL_BODY, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Store Item in Stockpile", job_type_class::Hauling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Store Item in Bag", job_type_class::Hauling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Store Item in Hospital", job_type_class::Hauling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { NULL, job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { NULL, job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Store Weapon", job_type_class::Hauling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Store Armor", job_type_class::Hauling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Store Item in Barrel", job_type_class::Hauling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Store Item in Bin", job_type_class::Hauling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Seek Artifact", job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Seek Infant", job_type_class::LifeSupport, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Attend Party", job_type_class::Leisure, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Go Shopping", job_type_class::LifeSupport, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Go Shopping", job_type_class::LifeSupport, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Clean", job_type_class::TidyUp, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Rest", job_type_class::Leisure, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Pickup Equipment", job_type_class::LifeSupport, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Dump Item", job_type_class::Hauling, unit_labor::HAUL_REFUSE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Strange Mood (Crafter)", job_type_class::StrangeMood, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Strange Mood (Jeweller)", job_type_class::StrangeMood, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Strange Mood (Forge)", job_type_class::StrangeMood, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Strange Mood (Magma Forge)", job_type_class::StrangeMood, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Strange Mood (Brooding)", job_type_class::StrangeMood, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Strange Mood (Fell)", job_type_class::StrangeMood, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Strange Mood (Carpenter)", job_type_class::StrangeMood, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Strange Mood (Mason)", job_type_class::StrangeMood, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Strange Mood (Bowyer)", job_type_class::StrangeMood, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Strange Mood (Leather)", job_type_class::StrangeMood, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Strange Mood (Clothier)", job_type_class::StrangeMood, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Strange Mood (Glassmaker)", job_type_class::StrangeMood, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Strange Mood (Mechanics)", job_type_class::StrangeMood, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Building", job_type_class::Building, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Door", job_type_class::Manufacture, unit_labor::NONE, item_type::DOOR, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Floodgate", job_type_class::Manufacture, unit_labor::NONE, item_type::FLOODGATE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Bed", job_type_class::Manufacture, unit_labor::NONE, item_type::BED, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Throne", job_type_class::Manufacture, unit_labor::NONE, item_type::CHAIR, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Coffin", job_type_class::Manufacture, unit_labor::NONE, item_type::COFFIN, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Table", job_type_class::Manufacture, unit_labor::NONE, item_type::TABLE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Chest", job_type_class::Manufacture, unit_labor::NONE, item_type::BOX, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Bin", job_type_class::Manufacture, unit_labor::NONE, item_type::BIN, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Armor Stand", job_type_class::Manufacture, unit_labor::NONE, item_type::ARMORSTAND, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Weapon Rack", job_type_class::Manufacture, unit_labor::NONE, item_type::WEAPONRACK, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Cabinet", job_type_class::Manufacture, unit_labor::NONE, item_type::CABINET, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Statue", job_type_class::Manufacture, unit_labor::NONE, item_type::STATUE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Blocks", job_type_class::Manufacture, unit_labor::NONE, item_type::BLOCKS, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Raw Glass", job_type_class::Manufacture, unit_labor::NONE, item_type::ROUGH, { 0, NULL }, NULL, job_skill::GLASSMAKER, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Crafts", job_type_class::Manufacture, unit_labor::NONE, item_type::NONE, { 6, _list_items_72 }, NULL, job_skill::NONE, job_skill::STONECRAFT, job_skill::WOODCRAFT, job_skill::METALCRAFT },
    { "Mint Coins", job_type_class::Manufacture, unit_labor::NONE, item_type::COIN, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::METALCRAFT },
    { "Cut Gems", job_type_class::Manufacture, unit_labor::NONE, item_type::SMALLGEM, { 0, NULL }, NULL, job_skill::CUTGEM, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Cut Glass", job_type_class::Manufacture, unit_labor::NONE, item_type::SMALLGEM, { 0, NULL }, NULL, job_skill::CUTGEM, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Encrust With Gems", job_type_class::Improvement, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::ENCRUSTGEM, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Encrust With Glass", job_type_class::Improvement, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::ENCRUSTGEM, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Destroy Building", job_type_class::Building, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Smelt Ore", job_type_class::Manufacture, unit_labor::NONE, item_type::BAR, { 0, NULL }, NULL, job_skill::SMELT, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Melt a Metal Object", job_type_class::Manufacture, unit_labor::NONE, item_type::BAR, { 0, NULL }, "metal", job_skill::SMELT, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Extract Metal Strands", job_type_class::Manufacture, unit_labor::NONE, item_type::THREAD, { 0, NULL }, NULL, job_skill::EXTRACT_STRAND, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Plant Seeds", job_type_class::Gathering, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::PLANT, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Harvest Plants", job_type_class::Gathering, unit_labor::NONE, item_type::PLANT, { 0, NULL }, NULL, job_skill::PLANT, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Train Hunting Animal", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::ANIMALTRAIN, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Train War Animal", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::ANIMALTRAIN, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Forge Weapon", job_type_class::Manufacture, unit_labor::NONE, item_type::WEAPON, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::FORGE_WEAPON },
    { "Forge Anvil", job_type_class::Manufacture, unit_labor::NONE, item_type::ANVIL, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Catapult Parts", job_type_class::Manufacture, unit_labor::NONE, item_type::CATAPULTPARTS, { 0, NULL }, NULL, job_skill::SIEGECRAFT, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Ballista Parts", job_type_class::Manufacture, unit_labor::NONE, item_type::BALLISTAPARTS, { 0, NULL }, NULL, job_skill::SIEGECRAFT, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Armor", job_type_class::Manufacture, unit_labor::NONE, item_type::ARMOR, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::FORGE_ARMOR },
    { "Forge Helm", job_type_class::Manufacture, unit_labor::NONE, item_type::HELM, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::FORGE_ARMOR },
    { "Make Pants", job_type_class::Manufacture, unit_labor::NONE, item_type::PANTS, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::FORGE_ARMOR },
    { "Stud With", job_type_class::Improvement, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Butcher an Animal", job_type_class::Manufacture, unit_labor::NONE, item_type::NONE, { 3, _list_items_73 }, NULL, job_skill::BUTCHER, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Prepare a Raw Fish", job_type_class::Manufacture, unit_labor::NONE, item_type::FISH, { 0, NULL }, NULL, job_skill::PROCESSFISH, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Mill Plants", job_type_class::Manufacture, unit_labor::NONE, item_type::POWDER_MISC, { 0, NULL }, NULL, job_skill::MILLING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Bait Trap", job_type_class::Hauling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::TRAPPING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Milk Creature", job_type_class::Gathering, unit_labor::NONE, item_type::LIQUID_MISC, { 0, NULL }, "milk", job_skill::MILK, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Cheese", job_type_class::Manufacture, unit_labor::NONE, item_type::CHEESE, { 0, NULL }, NULL, job_skill::CHEESEMAKING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Process Plants", job_type_class::Manufacture, unit_labor::NONE, item_type::THREAD, { 0, NULL }, NULL, job_skill::PROCESSPLANTS, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { NULL, job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Process Plants (Vial)", job_type_class::Manufacture, unit_labor::NONE, item_type::LIQUID_MISC, { 0, NULL }, NULL, job_skill::PROCESSPLANTS, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Process Plants (Barrel)", job_type_class::Manufacture, unit_labor::NONE, item_type::LIQUID_MISC, { 0, NULL }, NULL, job_skill::PROCESSPLANTS, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Prepare Meal", job_type_class::Manufacture, unit_labor::NONE, item_type::FOOD, { 0, NULL }, NULL, job_skill::COOK, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Weave Cloth", job_type_class::Manufacture, unit_labor::NONE, item_type::CLOTH, { 0, NULL }, NULL, job_skill::WEAVING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Gloves", job_type_class::Manufacture, unit_labor::NONE, item_type::GLOVES, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::FORGE_ARMOR },
    { "Make Shoes", job_type_class::Manufacture, unit_labor::NONE, item_type::SHOES, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::FORGE_ARMOR },
    { "Make Shield", job_type_class::Misc, unit_labor::NONE, item_type::SHIELD, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::FORGE_ARMOR },
    { "Make Cage", job_type_class::Manufacture, unit_labor::NONE, item_type::CAGE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Chain", job_type_class::Manufacture, unit_labor::NONE, item_type::CHAIN, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::METALCRAFT },
    { "Make Flask", job_type_class::Manufacture, unit_labor::NONE, item_type::FLASK, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::METALCRAFT },
    { "Make Goblet", job_type_class::Manufacture, unit_labor::NONE, item_type::GOBLET, { 0, NULL }, NULL, job_skill::NONE, job_skill::STONECRAFT, job_skill::WOODCRAFT, job_skill::METALCRAFT },
    { "Make Instrument", job_type_class::Manufacture, unit_labor::NONE, item_type::INSTRUMENT, { 0, NULL }, NULL, job_skill::NONE, job_skill::STONECRAFT, job_skill::WOODCRAFT, job_skill::METALCRAFT },
    { "Make Toy", job_type_class::Manufacture, unit_labor::NONE, item_type::TOY, { 0, NULL }, NULL, job_skill::NONE, job_skill::STONECRAFT, job_skill::WOODCRAFT, job_skill::METALCRAFT },
    { "Make Animal Trap", job_type_class::Manufacture, unit_labor::NONE, item_type::ANIMALTRAP, { 0, NULL }, NULL, job_skill::TRAPPING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Barrel", job_type_class::Manufacture, unit_labor::NONE, item_type::BARREL, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Bucket", job_type_class::Manufacture, unit_labor::NONE, item_type::BUCKET, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Window", job_type_class::Manufacture, unit_labor::NONE, item_type::WINDOW, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Totem", job_type_class::Manufacture, unit_labor::NONE, item_type::TOTEM, { 0, NULL }, NULL, job_skill::BONECARVE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Ammo", job_type_class::Manufacture, unit_labor::NONE, item_type::AMMO, { 0, NULL }, NULL, job_skill::NONE, job_skill::STONECRAFT, job_skill::WOODCRAFT, job_skill::FORGE_WEAPON },
    { "Decorate With", job_type_class::Improvement, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Backpack", job_type_class::Manufacture, unit_labor::NONE, item_type::BACKPACK, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Quiver", job_type_class::Manufacture, unit_labor::NONE, item_type::QUIVER, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Ballista Arrow Head", job_type_class::Manufacture, unit_labor::NONE, item_type::BALLISTAARROWHEAD, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::FORGE_WEAPON },
    { "Assemble Siege Ammo", job_type_class::Manufacture, unit_labor::NONE, item_type::SIEGEAMMO, { 0, NULL }, NULL, job_skill::SIEGECRAFT, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Load Catapult", job_type_class::SiegeWeapon, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::SIEGEOPERATE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Load Ballista", job_type_class::SiegeWeapon, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::SIEGEOPERATE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Fire Catapult", job_type_class::SiegeWeapon, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::SIEGEOPERATE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Fire Ballista", job_type_class::SiegeWeapon, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::SIEGEOPERATE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Mechanisms", job_type_class::Manufacture, unit_labor::NONE, item_type::TRAPPARTS, { 0, NULL }, NULL, job_skill::MECHANICS, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "MakeTrapComponent", job_type_class::Manufacture, unit_labor::NONE, item_type::TRAPCOMP, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::FORGE_WEAPON },
    { "Load Cage Trap", job_type_class::Hauling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::MECHANICS, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Load Stone Trap", job_type_class::Hauling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::MECHANICS, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Load Weapon Trap", job_type_class::Hauling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::MECHANICS, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Clean Trap", job_type_class::TidyUp, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::MECHANICS, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Cast Spell", job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Link a Building to Trigger", job_type_class::Building, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::MECHANICS, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Pull the Lever", job_type_class::Misc, unit_labor::PULL_LEVER, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { NULL, job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Extract from Plants", job_type_class::Manufacture, unit_labor::NONE, item_type::LIQUID_MISC, { 0, NULL }, NULL, job_skill::HERBALISM, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Extract from Raw Fish", job_type_class::Manufacture, unit_labor::NONE, item_type::LIQUID_MISC, { 0, NULL }, NULL, job_skill::DISSECT_FISH, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Extract from Land Animal", job_type_class::Manufacture, unit_labor::NONE, item_type::LIQUID_MISC, { 0, NULL }, NULL, job_skill::DISSECT_VERMIN, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Tame Small Animal", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::ANIMALTRAIN, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Tame ?something?", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::ANIMALTRAIN, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Chain Animal", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Unchain Animal", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Unchain Pet", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Release Large Creature", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Release Pet", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Release Small Creature", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Handle Small Creature", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Handle Large Creature", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Cage Large Creature", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Cage Small Creature", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Recover Wounded", job_type_class::Hauling, unit_labor::RECOVER_WOUNDED, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Diagnose Patient", job_type_class::Medicine, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::DIAGNOSE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Immobilize Break", job_type_class::Medicine, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::SET_BONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Dress Wound", job_type_class::Medicine, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::DRESS_WOUNDS, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Clean Patient", job_type_class::Medicine, unit_labor::CLEAN, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Surgery", job_type_class::Medicine, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::SURGERY, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Suture", job_type_class::Medicine, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::SUTURE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Set Bone", job_type_class::Medicine, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::SET_BONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Place In Traction", job_type_class::Medicine, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::SET_BONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Drain Aquarium", job_type_class::Hauling, unit_labor::HAUL_WATER, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Fill Aquarium", job_type_class::Hauling, unit_labor::HAUL_WATER, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Fill Pond", job_type_class::Hauling, unit_labor::HAUL_WATER, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Give Water", job_type_class::LifeSupport, unit_labor::FEED_WATER_CIVILIANS, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Give Food", job_type_class::LifeSupport, unit_labor::FEED_WATER_CIVILIANS, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Give Water", job_type_class::LifeSupport, unit_labor::FEED_WATER_CIVILIANS, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Give Food", job_type_class::LifeSupport, unit_labor::FEED_WATER_CIVILIANS, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Recover Pet", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Pit/Pond Large Animal", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Pit/Pond Small Animal", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Slaughter Animal", job_type_class::Gathering, unit_labor::NONE, item_type::NONE, { 3, _list_items_74 }, NULL, job_skill::BUTCHER, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Charcoal", job_type_class::Manufacture, unit_labor::NONE, item_type::BAR, { 0, NULL }, "COAL", job_skill::WOOD_BURNING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Ash", job_type_class::Manufacture, unit_labor::NONE, item_type::BAR, { 0, NULL }, "ASH", job_skill::WOOD_BURNING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Lye", job_type_class::Manufacture, unit_labor::NONE, item_type::LIQUID_MISC, { 0, NULL }, "LYE", job_skill::LYE_MAKING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Potash From Lye", job_type_class::Manufacture, unit_labor::NONE, item_type::BAR, { 0, NULL }, "POTASH", job_skill::POTASH_MAKING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Fertilize Field", job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Potash From Ash", job_type_class::Manufacture, unit_labor::NONE, item_type::BAR, { 0, NULL }, "POTASH", job_skill::POTASH_MAKING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Dye Thread", job_type_class::Improvement, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::DYER, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Dye Cloth", job_type_class::Improvement, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::DYER, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Sew Image", job_type_class::Improvement, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Pipe Section", job_type_class::Manufacture, unit_labor::NONE, item_type::PIPE_SECTION, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Operate Pump", job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::OPERATE_PUMP, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Manage Work Orders", job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::ORGANIZATION, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Update Stockpile Records", job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::RECORD_KEEPING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Trade at Depot", job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::APPRAISAL, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Hatch Cover", job_type_class::Manufacture, unit_labor::NONE, item_type::HATCH_COVER, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Grate", job_type_class::Manufacture, unit_labor::NONE, item_type::GRATE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Remove Stairs/Ramps", job_type_class::Digging, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::MINING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Quern", job_type_class::Manufacture, unit_labor::NONE, item_type::QUERN, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Millstone", job_type_class::Manufacture, unit_labor::NONE, item_type::MILLSTONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Splint", job_type_class::Manufacture, unit_labor::NONE, item_type::SPLINT, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Crutch", job_type_class::Manufacture, unit_labor::NONE, item_type::CRUTCH, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Traction Bench", job_type_class::Manufacture, unit_labor::NONE, item_type::TRACTION_BENCH, { 0, NULL }, NULL, job_skill::MECHANICS, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Clean Self", job_type_class::TidyUp, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Bring Crutch", job_type_class::Medicine, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Apply Cast", job_type_class::Medicine, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::SET_BONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Custom Reaction", job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Construct Slab", job_type_class::Manufacture, unit_labor::NONE, item_type::SLAB, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Engrave Memorial Slab", job_type_class::Improvement, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Shear Creature", job_type_class::Gathering, unit_labor::NONE, item_type::CORPSEPIECE, { 0, NULL }, "yarn", job_skill::SHEARING, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Spin Thread", job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Pen/Pasture Large Animal", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Pen/Pasture Small Animal", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Make Tool", job_type_class::Manufacture, unit_labor::NONE, item_type::TOOL, { 0, NULL }, NULL, job_skill::NONE, job_skill::STONECRAFT, job_skill::WOODCRAFT, job_skill::NONE },
    { "Collect Clay", job_type_class::Gathering, unit_labor::NONE, item_type::BOULDER, { 0, NULL }, "clay", job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Install Colony In Hive", job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Collect Hive Products", job_type_class::Gathering, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Cause Trouble", job_type_class::Crime, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "On Break", job_type_class::Crime, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Report Crime", job_type_class::LawEnforcement, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Execute Criminal", job_type_class::LawEnforcement, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Train Animal", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::ANIMALTRAIN, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Carve Track", job_type_class::Building, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Push Track Vehicle", job_type_class::Hauling, unit_labor::HANDLE_VEHICLES, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Place Track Vehicle", job_type_class::Hauling, unit_labor::HANDLE_VEHICLES, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Store Item in Vehicle", job_type_class::Hauling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { "Geld ?something?", job_type_class::UnitHandling, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::GELD, job_skill::NONE, job_skill::NONE, job_skill::NONE },
    { NULL, job_type_class::Misc, unit_labor::NONE, item_type::NONE, { 0, NULL }, NULL, job_skill::NONE, job_skill::NONE, job_skill::NONE, job_skill::NONE }
  };
  const enum_traits<job_type>::attr_entry_type & enum_traits<job_type>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[232];
  }
  enum_identity identity_traits<job_type>::identity(sizeof(job_type), NULL, "job_type", TID(int16_t), 0, 231, enum_traits<job_type>::key_table,
                enum_traits<job_type>::attr_table, &enum_traits<job_type>::attr_entry_type::_identity);
  const char *const enum_traits<job_type_class>::key_table[16] = {
    "Misc",
    "Digging",
    "Building",
    "Hauling",
    "LifeSupport",
    "TidyUp",
    "Leisure",
    "Gathering",
    "Manufacture",
    "Improvement",
    "Crime",
    "LawEnforcement",
    "StrangeMood",
    "UnitHandling",
    "SiegeWeapon",
    "Medicine"
  };
  enum_identity identity_traits<job_type_class>::identity(sizeof(job_type_class), NULL, "job_type_class", TID(int32_t), 0, 15, enum_traits<job_type_class>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<language_word_flags>::bits[bit_count] = {
    { "front_compound_noun_sing", 1 },
    { "front_compound_noun_plur", 1 },
    { "front_compound_adj", 1 },
    { "front_compound_prefix", 1 },
    { "rear_compound_noun_sing", 1 },
    { "rear_compound_noun_plur", 1 },
    { "rear_compound_adj", 1 },
    { "the_noun_sing", 1 },
    { "the_noun_plur", 1 },
    { "the_compound_noun_sing", 1 },
    { "the_compound_noun_plur", 1 },
    { "the_compound_adj", 1 },
    { "the_compound_prefix", 1 },
    { "of_noun_sing", 1 },
    { "of_noun_plur", 1 },
    { "standard_verb", 1 }
  };
  bitfield_identity identity_traits<language_word_flags>::identity(sizeof(language_word_flags), NULL, "language_word_flags", bitfield_traits<language_word_flags>::bit_count, bitfield_traits<language_word_flags>::bits);
  const bitfield_item_info bitfield_traits<local_population::T_flags>::bits[bit_count] = {
    { "discovered", 1 },
    { "extinct", 1 },
    { "already_removed", 1 },
    { "unk3", 1 }
  };
  bitfield_identity identity_traits<local_population::T_flags>::identity(sizeof(local_population::T_flags), &local_population::_identity, "T_flags", bitfield_traits<local_population::T_flags>::bit_count, bitfield_traits<local_population::T_flags>::bits);
  const bitfield_item_info bitfield_traits<machine::T_flags>::bits[bit_count] = {
    { "active", 1 },
    { "frozen", 1 },
    { "unfreeze", 1 }
  };
  bitfield_identity identity_traits<machine::T_flags>::identity(sizeof(machine::T_flags), &machine::_identity, "T_flags", bitfield_traits<machine::T_flags>::bit_count, bitfield_traits<machine::T_flags>::bits);
  const bitfield_item_info bitfield_traits<machine_conn_modes>::bits[bit_count] = {
    { "up", 1 },
    { "down", 1 },
    { "right", 1 },
    { "left", 1 },
    { "z_up", 1 },
    { "z_down", 1 }
  };
  bitfield_identity identity_traits<machine_conn_modes>::identity(sizeof(machine_conn_modes), NULL, "machine_conn_modes", bitfield_traits<machine_conn_modes>::bit_count, bitfield_traits<machine_conn_modes>::bits);
  const bitfield_item_info bitfield_traits<machine_info::T_flags>::bits[bit_count] = {
    { "frozen", 1 }
  };
  bitfield_identity identity_traits<machine_info::T_flags>::identity(sizeof(machine_info::T_flags), &machine_info::_identity, "T_flags", bitfield_traits<machine_info::T_flags>::bit_count, bitfield_traits<machine_info::T_flags>::bits);
  const char *const enum_traits<machine_type>::key_table[1] = {
    "standard"
  };
  enum_identity identity_traits<machine_type>::identity(sizeof(machine_type), NULL, "machine_type", TID(int32_t), 0, 0, enum_traits<machine_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<masterpiece_loss_type>::key_table[6] = {
    "MELT",
    "MAGMA",
    "FORTIFICATION",
    "MINING",
    "CAVEIN",
    "VEGETATION"
  };
  enum_identity identity_traits<masterpiece_loss_type>::identity(sizeof(masterpiece_loss_type), NULL, "masterpiece_loss_type", TID(int32_t), 0, 5, enum_traits<masterpiece_loss_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<material_flags>::key_table[73] = {
    "BONE",
    "MEAT",
    "EDIBLE_VERMIN",
    "EDIBLE_RAW",
    "EDIBLE_COOKED",
    "ALCOHOL",
    "ITEMS_METAL",
    "ITEMS_BARRED",
    "ITEMS_SCALED",
    "ITEMS_LEATHER",
    "ITEMS_SOFT",
    "ITEMS_HARD",
    "IMPLIES_ANIMAL_KILL",
    "ALCOHOL_PLANT",
    "ALCOHOL_CREATURE",
    "CHEESE_PLANT",
    "CHEESE_CREATURE",
    "POWDER_MISC_PLANT",
    "POWDER_MISC_CREATURE",
    "STOCKPILE_GLOB",
    "LIQUID_MISC_PLANT",
    "LIQUID_MISC_CREATURE",
    "LIQUID_MISC_OTHER",
    "WOOD",
    "THREAD_PLANT",
    "TOOTH",
    "HORN",
    "PEARL",
    "SHELL",
    "LEATHER",
    "SILK",
    "SOAP",
    "ROTS",
    "IS_DYE",
    "POWDER_MISC",
    "LIQUID_MISC",
    "STRUCTURAL_PLANT_MAT",
    "SEED_MAT",
    "LEAF_MAT",
    "CHEESE",
    "ENTERS_BLOOD",
    "BLOOD_MAP_DESCRIPTOR",
    "ICHOR_MAP_DESCRIPTOR",
    "GOO_MAP_DESCRIPTOR",
    "SLIME_MAP_DESCRIPTOR",
    "PUS_MAP_DESCRIPTOR",
    "GENERATES_MIASMA",
    "IS_METAL",
    "IS_GEM",
    "IS_GLASS",
    "CRYSTAL_GLASSABLE",
    "ITEMS_WEAPON",
    "ITEMS_WEAPON_RANGED",
    "ITEMS_ANVIL",
    "ITEMS_AMMO",
    "ITEMS_DIGGER",
    "ITEMS_ARMOR",
    "ITEMS_DELICATE",
    "ITEMS_SIEGE_ENGINE",
    "ITEMS_QUERN",
    "IS_STONE",
    "UNDIGGABLE",
    "YARN",
    "STOCKPILE_GLOB_PASTE",
    "STOCKPILE_GLOB_PRESSED",
    "DISPLAY_UNGLAZED",
    "DO_NOT_CLEAN_GLOB",
    "NO_STONE_STOCKPILE",
    "STOCKPILE_THREAD_METAL",
    "SWEAT_MAP_DESCRIPTOR",
    "TEARS_MAP_DESCRIPTOR",
    "SPIT_MAP_DESCRIPTOR",
    "EVAPORATES"
  };
  const enum_traits<material_flags>::attr_entry_type enum_traits<material_flags>::attr_table[73+1] = {
    { craft_material_class::Bone },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::Wood },
    { craft_material_class::Cloth },
    { craft_material_class::Ivory },
    { craft_material_class::Horn },
    { craft_material_class::Pearl },
    { craft_material_class::Shell },
    { craft_material_class::Leather },
    { craft_material_class::Cloth },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::Metal },
    { craft_material_class::Gem },
    { craft_material_class::Glass },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::Stone },
    { craft_material_class::None },
    { craft_material_class::Cloth },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None },
    { craft_material_class::None }
  };
  const enum_traits<material_flags>::attr_entry_type & enum_traits<material_flags>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[73];
  }
  enum_identity identity_traits<material_flags>::identity(sizeof(material_flags), NULL, "material_flags", TID(int32_t), 0, 72, enum_traits<material_flags>::key_table,
                enum_traits<material_flags>::attr_table, &enum_traits<material_flags>::attr_entry_type::_identity);
  const char *const enum_traits<matter_state>::key_table[6] = {
    "Solid",
    "Liquid",
    "Gas",
    "Powder",
    "Paste",
    "Pressed"
  };
  enum_identity identity_traits<matter_state>::identity(sizeof(matter_state), NULL, "matter_state", TID(int16_t), 0, 5, enum_traits<matter_state>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<meeting_diplomat_info::T_flags>::bits[bit_count] = {
    { "dynamic_load", 1 },
    { "failure", 1 },
    { "success", 1 }
  };
  bitfield_identity identity_traits<meeting_diplomat_info::T_flags>::identity(sizeof(meeting_diplomat_info::T_flags), &meeting_diplomat_info::_identity, "T_flags", bitfield_traits<meeting_diplomat_info::T_flags>::bit_count, bitfield_traits<meeting_diplomat_info::T_flags>::bits);
  const char *const enum_traits<meeting_event_type>::key_table[6] = {
    "AcceptAgreement",
    "RejectAgreement",
    "AcceptPeace",
    "RejectPeace",
    "ExportAgreement",
    "ImportAgreement"
  };
  enum_identity identity_traits<meeting_event_type>::identity(sizeof(meeting_event_type), NULL, "meeting_event_type", TID(int16_t), 0, 5, enum_traits<meeting_event_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<meeting_topic>::key_table[9] = {
    "DiscussCurrent",
    "RequestPeace",
    "TreeQuota",
    "BecomeLandHolder",
    "PromoteLandHolder",
    "ExportAgreement",
    "ImportAgreement",
    "PleasantPlace",
    "WorldStatus"
  };
  enum_identity identity_traits<meeting_topic>::identity(sizeof(meeting_topic), NULL, "meeting_topic", TID(int16_t), 0, 8, enum_traits<meeting_topic>::key_table,
                NULL, NULL);
  const char *const enum_traits<mental_attribute_type>::key_table[13] = {
    "ANALYTICAL_ABILITY",
    "FOCUS",
    "WILLPOWER",
    "CREATIVITY",
    "INTUITION",
    "PATIENCE",
    "MEMORY",
    "LINGUISTIC_ABILITY",
    "SPATIAL_SENSE",
    "MUSICALITY",
    "KINESTHETIC_SENSE",
    "EMPATHY",
    "SOCIAL_AWARENESS"
  };
  enum_identity identity_traits<mental_attribute_type>::identity(sizeof(mental_attribute_type), NULL, "mental_attribute_type", TID(int32_t), 0, 12, enum_traits<mental_attribute_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<misc_trait_type>::key_table[59] = {
    "RequestWaterCooldown",
    "RequestFoodCooldown",
    "RequestRescueCooldown",
    "RequestHealthcareCooldown",
    "GetDrinkCooldown",
    "GetFoodCooldown",
    "CleanSelfCooldown",
    "Migrant",
    "RoomComplaint",
    "UnnamedResident",
    "RentBedroomCooldown",
    "ClaimTrinketCooldown",
    "ClaimClothingCooldown",
    "WantsDrink",
    "LikesOutdoors",
    "Hardened",
    "TimeSinceBreak",
    "OnBreak",
    "PrepareToDie",
    "CaveAdapt",
    NULL,
    NULL,
    NULL,
    NULL,
    "FollowUnitCooldown",
    NULL,
    NULL,
    NULL,
    "DangerousTerrainCooldown",
    "Beaching",
    "IdleAreaCooldown",
    NULL,
    "PartiedOut",
    "DiagnosePatientCooldown",
    "DressWoundCooldown",
    "CleanPatientCooldown",
    "SurgeryCooldown",
    "SutureCooldown",
    "SetBoneCooldown",
    "PlaceInTractionCooldown",
    "ApplyCastCooldown",
    "ImmobilizeBreakCooldown",
    "BringCrutchCooldown",
    NULL,
    "MilkCounter",
    "HadDrill",
    "CompletedDrill",
    "EggSpent",
    "GroundedAnimalAnger",
    NULL,
    "TimeSinceSuckedBlood",
    "DrinkingBlood",
    NULL,
    NULL,
    "RevertWildTimer",
    NULL,
    "NoPantsAnger",
    "NoShirtAnger",
    "NoShoesAnger"
  };
  const enum_traits<misc_trait_type>::attr_entry_type enum_traits<misc_trait_type>::attr_table[59+1] = {
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { "ALCOHOLIC" },
    { "MOUNTAIN" },
    { "COMBATHARDNESS" },
    { "TIME_SINCE_BREAK" },
    { "ON_BREAK" },
    { NULL },
    { "CAVE_ADAPT" },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { "PARTIED_OUT" },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { "MILK_COUNTER" },
    { NULL },
    { NULL },
    { "EGG_SPENT" },
    { "GROUNDED_ANIMAL_ANGER" },
    { NULL },
    { "TIME_SINCE_SUCKED_BLOOD" },
    { "DRINKING_BLOOD" },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL },
    { NULL }
  };
  const enum_traits<misc_trait_type>::attr_entry_type & enum_traits<misc_trait_type>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[59];
  }
  enum_identity identity_traits<misc_trait_type>::identity(sizeof(misc_trait_type), NULL, "misc_trait_type", TID(int16_t), 0, 58, enum_traits<misc_trait_type>::key_table,
                enum_traits<misc_trait_type>::attr_table, &enum_traits<misc_trait_type>::attr_entry_type::_identity);
  const char *const enum_traits<mood_type>::key_table[11] = {
    "None",
    "Fey",
    "Secretive",
    "Possessed",
    "Macabre",
    "Fell",
    "Melancholy",
    "Raving",
    "Berserk",
    "Baby",
    "Traumatized"
  };
  enum_identity identity_traits<mood_type>::identity(sizeof(mood_type), NULL, "mood_type", TID(int16_t), -1, 9, enum_traits<mood_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<nemesis_flags>::key_table[3] = {
    "ACTIVE_ADVENTURER",
    "RETIRED_ADVENTURER",
    "ADVENTURER"
  };
  enum_identity identity_traits<nemesis_flags>::identity(sizeof(nemesis_flags), NULL, "nemesis_flags", TID(int32_t), 0, 2, enum_traits<nemesis_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<organic_mat_category>::key_table[37] = {
    "Meat",
    "Fish",
    "UnpreparedFish",
    "Eggs",
    "Plants",
    "PlantDrink",
    "CreatureDrink",
    "PlantCheese",
    "CreatureCheese",
    "Seed",
    "Leaf",
    "PlantPowder",
    "CreaturePowder",
    "Glob",
    "PlantLiquid",
    "CreatureLiquid",
    "MiscLiquid",
    "Leather",
    "Silk",
    "PlantFiber",
    "Bone",
    "Shell",
    "Wood",
    "Horn",
    "Pearl",
    "Tooth",
    "EdibleCheese",
    "AnyDrink",
    "EdiblePlant",
    "CookableLiquid",
    "CookablePowder",
    "CookableSeed",
    "CookableLeaf",
    "Paste",
    "Pressed",
    "Yarn",
    "MetalThread"
  };
  enum_identity identity_traits<organic_mat_category>::identity(sizeof(organic_mat_category), NULL, "organic_mat_category", TID(int32_t), 0, 36, enum_traits<organic_mat_category>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<orientation_flags>::bits[bit_count] = {
    { NULL, 1 },
    { "romance_male", 1 },
    { "marry_male", 1 },
    { "romance_female", 1 },
    { "marry_female", 1 }
  };
  bitfield_identity identity_traits<orientation_flags>::identity(sizeof(orientation_flags), NULL, "orientation_flags", bitfield_traits<orientation_flags>::bit_count, bitfield_traits<orientation_flags>::bits);
  const char *const enum_traits<pants_flags>::key_table[1] = {
    "METAL_ARMOR_LEVELS"
  };
  enum_identity identity_traits<pants_flags>::identity(sizeof(pants_flags), NULL, "pants_flags", TID(int32_t), 0, 0, enum_traits<pants_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<part_of_speech>::key_table[9] = {
    "Noun",
    "NounPlural",
    "Adjective",
    "Prefix",
    "Verb",
    "Verb3rdPerson",
    "VerbPast",
    "VerbPassive",
    "VerbGerund"
  };
  enum_identity identity_traits<part_of_speech>::identity(sizeof(part_of_speech), NULL, "part_of_speech", TID(int32_t), 0, 8, enum_traits<part_of_speech>::key_table,
                NULL, NULL);
  const char *const enum_traits<pattern_type>::key_table[6] = {
    "MONOTONE",
    "STRIPES",
    "IRIS_EYE",
    "SPOTS",
    "PUPIL_EYE",
    "MOTTLED"
  };
  enum_identity identity_traits<pattern_type>::identity(sizeof(pattern_type), NULL, "pattern_type", TID(int16_t), 0, 5, enum_traits<pattern_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<personality_facet_type>::key_table[50] = {
    "LOVE_PROPENSITY",
    "HATE_PROPENSITY",
    "ENVY_PROPENSITY",
    "CHEER_PROPENSITY",
    "DEPRESSION_PROPENSITY",
    "ANGER_PROPENSITY",
    "ANXIETY_PROPENSITY",
    "LUST_PROPENSITY",
    "STRESS_VULNERABILITY",
    "GREED",
    "IMMODERATION",
    "VIOLENT",
    "PERSEVERENCE",
    "WASTEFULNESS",
    "DISCORD",
    "FRIENDLINESS",
    "POLITENESS",
    "DISDAIN_ADVICE",
    "BRAVERY",
    "CONFIDENCE",
    "VANITY",
    "AMBITION",
    "GRATITUDE",
    "IMMODESTY",
    "HUMOR",
    "VENGEFUL",
    "PRIDE",
    "CRUELTY",
    "SINGLEMINDED",
    "HOPEFUL",
    "CURIOUS",
    "BASHFUL",
    "PRIVACY",
    "PERFECTIONIST",
    "CLOSEMINDED",
    "TOLERANT",
    "EMOTIONALLY_OBSESSIVE",
    "SWAYED_BY_EMOTIONS",
    "ALTRUISM",
    "DUTIFULNESS",
    "THOUGHTLESSNESS",
    "ORDERLINESS",
    "TRUST",
    "GREGARIOUSNESS",
    "ASSERTIVENESS",
    "ACTIVITY_LEVEL",
    "EXCITEMENT_SEEKING",
    "IMAGINATION",
    "ABSTRACT_INCLINED",
    "ART_INCLINED"
  };
  enum_identity identity_traits<personality_facet_type>::identity(sizeof(personality_facet_type), NULL, "personality_facet_type", TID(int32_t), 0, 49, enum_traits<personality_facet_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<physical_attribute_type>::key_table[6] = {
    "STRENGTH",
    "AGILITY",
    "TOUGHNESS",
    "ENDURANCE",
    "RECUPERATION",
    "DISEASE_RESISTANCE"
  };
  enum_identity identity_traits<physical_attribute_type>::identity(sizeof(physical_attribute_type), NULL, "physical_attribute_type", TID(int32_t), 0, 5, enum_traits<physical_attribute_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<plant::T_damage_flags>::bits[bit_count] = {
    { "is_burning", 1 },
    { "is_drowning", 1 },
    { NULL, 1 }
  };
  bitfield_identity identity_traits<plant::T_damage_flags>::identity(sizeof(plant::T_damage_flags), &plant::_identity, "T_damage_flags", bitfield_traits<plant::T_damage_flags>::bit_count, bitfield_traits<plant::T_damage_flags>::bits);
  const bitfield_item_info bitfield_traits<plant_flags>::bits[bit_count] = {
    { "watery", 1 },
    { "is_shrub", 1 }
  };
  bitfield_identity identity_traits<plant_flags>::identity(sizeof(plant_flags), NULL, "plant_flags", bitfield_traits<plant_flags>::bit_count, bitfield_traits<plant_flags>::bits);
  const bitfield_item_info bitfield_traits<plant_growth::T_locations>::bits[bit_count] = {
    { "twigs", 1 },
    { "light_branches", 1 },
    { "heavy_branches", 1 },
    { "trunk", 1 },
    { "roots", 1 },
    { "cap", 1 },
    { "sapling", 1 }
  };
  bitfield_identity identity_traits<plant_growth::T_locations>::identity(sizeof(plant_growth::T_locations), &plant_growth::_identity, "T_locations", bitfield_traits<plant_growth::T_locations>::bit_count, bitfield_traits<plant_growth::T_locations>::bits);
  const bitfield_item_info bitfield_traits<plant_growth::T_behavior>::bits[bit_count] = {
    { "drops_off", 1 },
    { "no_cloud", 1 },
    { "has_seed", 1 }
  };
  bitfield_identity identity_traits<plant_growth::T_behavior>::identity(sizeof(plant_growth::T_behavior), &plant_growth::_identity, "T_behavior", bitfield_traits<plant_growth::T_behavior>::bit_count, bitfield_traits<plant_growth::T_behavior>::bits);
  const char *const enum_traits<plant_raw_flags>::key_table[88] = {
    "SPRING",
    "SUMMER",
    "AUTUMN",
    "WINTER",
    NULL,
    "SEED",
    "TREE_HAS_MUSHROOM_CAP",
    "DRINK",
    "EXTRACT_BARREL",
    "EXTRACT_VIAL",
    "EXTRACT_STILL_VIAL",
    "GENERATED",
    "THREAD",
    "MILL",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    "WET",
    "DRY",
    "BIOME_MOUNTAIN",
    "BIOME_GLACIER",
    "BIOME_TUNDRA",
    "BIOME_SWAMP_TEMPERATE_FRESHWATER",
    "BIOME_SWAMP_TEMPERATE_SALTWATER",
    "BIOME_MARSH_TEMPERATE_FRESHWATER",
    "BIOME_MARSH_TEMPERATE_SALTWATER",
    "BIOME_SWAMP_TROPICAL_FRESHWATER",
    "BIOME_SWAMP_TROPICAL_SALTWATER",
    "BIOME_SWAMP_MANGROVE",
    "BIOME_MARSH_TROPICAL_FRESHWATER",
    "BIOME_MARSH_TROPICAL_SALTWATER",
    "BIOME_FOREST_TAIGA",
    "BIOME_FOREST_TEMPERATE_CONIFER",
    "BIOME_FOREST_TEMPERATE_BROADLEAF",
    "BIOME_FOREST_TROPICAL_CONIFER",
    "BIOME_FOREST_TROPICAL_DRY_BROADLEAF",
    "BIOME_FOREST_TROPICAL_MOIST_BROADLEAF",
    "BIOME_GRASSLAND_TEMPERATE",
    "BIOME_SAVANNA_TEMPERATE",
    "BIOME_SHRUBLAND_TEMPERATE",
    "BIOME_GRASSLAND_TROPICAL",
    "BIOME_SAVANNA_TROPICAL",
    "BIOME_SHRUBLAND_TROPICAL",
    "BIOME_DESERT_BADLAND",
    "BIOME_DESERT_ROCK",
    "BIOME_DESERT_SAND",
    "BIOME_OCEAN_TROPICAL",
    "BIOME_OCEAN_TEMPERATE",
    "BIOME_OCEAN_ARCTIC",
    "BIOME_POOL_TEMPERATE_FRESHWATER",
    "BIOME_SUBTERRANEAN_WATER",
    "BIOME_SUBTERRANEAN_CHASM",
    "BIOME_SUBTERRANEAN_LAVA",
    "GOOD",
    "EVIL",
    "SAVAGE",
    "BIOME_POOL_TEMPERATE_BRACKISHWATER",
    "BIOME_POOL_TEMPERATE_SALTWATER",
    "BIOME_POOL_TROPICAL_FRESHWATER",
    "BIOME_POOL_TROPICAL_BRACKISHWATER",
    "BIOME_POOL_TROPICAL_SALTWATER",
    "BIOME_LAKE_TEMPERATE_FRESHWATER",
    "BIOME_LAKE_TEMPERATE_BRACKISHWATER",
    "BIOME_LAKE_TEMPERATE_SALTWATER",
    "BIOME_LAKE_TROPICAL_FRESHWATER",
    "BIOME_LAKE_TROPICAL_BRACKISHWATER",
    "BIOME_LAKE_TROPICAL_SALTWATER",
    "BIOME_RIVER_TEMPERATE_FRESHWATER",
    "BIOME_RIVER_TEMPERATE_BRACKISHWATER",
    "BIOME_RIVER_TEMPERATE_SALTWATER",
    "BIOME_RIVER_TROPICAL_FRESHWATER",
    "BIOME_RIVER_TROPICAL_BRACKISHWATER",
    "BIOME_RIVER_TROPICAL_SALTWATER",
    "TWIGS_SIDE_BRANCHES",
    "SAPLING",
    "TREE",
    "GRASS",
    "TWIGS_ABOVE_BRANCHES",
    "TWIGS_BELOW_BRANCHES",
    "TWIGS_SIDE_HEAVY_BRANCHES",
    "TWIGS_ABOVE_HEAVY_BRANCHES",
    "TWIGS_BELOW_HEAVY_BRANCHES",
    "TWIGS_SIDE_TRUNK",
    "TWIGS_ABOVE_TRUNK",
    "TWIGS_BELOW_TRUNK"
  };
  enum_identity identity_traits<plant_raw_flags>::identity(sizeof(plant_raw_flags), NULL, "plant_raw_flags", TID(int32_t), 0, 87, enum_traits<plant_raw_flags>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<plant_tree_tile>::bits[bit_count] = {
    { "trunk", 1 },
    { "thick_branches_1", 1 },
    { "thick_branches_2", 1 },
    { "thick_branches_3", 1 },
    { "thick_branches_4", 1 },
    { "branches", 1 },
    { "twigs", 1 },
    { "blocked", 1 }
  };
  bitfield_identity identity_traits<plant_tree_tile>::identity(sizeof(plant_tree_tile), NULL, "plant_tree_tile", bitfield_traits<plant_tree_tile>::bit_count, bitfield_traits<plant_tree_tile>::bits);
  const bitfield_item_info bitfield_traits<pressure_plate_info::T_flags>::bits[bit_count] = {
    { "units", 1 },
    { "water", 1 },
    { "magma", 1 },
    { "citizens", 1 },
    { "resets", 1 },
    { "track", 1 }
  };
  bitfield_identity identity_traits<pressure_plate_info::T_flags>::identity(sizeof(pressure_plate_info::T_flags), &pressure_plate_info::_identity, "T_flags", bitfield_traits<pressure_plate_info::T_flags>::bit_count, bitfield_traits<pressure_plate_info::T_flags>::bits);
  const char *const enum_traits<profession>::key_table[113] = {
    "NONE",
    "MINER",
    "WOODWORKER",
    "CARPENTER",
    "BOWYER",
    "WOODCUTTER",
    "STONEWORKER",
    "ENGRAVER",
    "MASON",
    "RANGER",
    "ANIMAL_CARETAKER",
    "ANIMAL_TRAINER",
    "HUNTER",
    "TRAPPER",
    "ANIMAL_DISSECTOR",
    "METALSMITH",
    "FURNACE_OPERATOR",
    "WEAPONSMITH",
    "ARMORER",
    "BLACKSMITH",
    "METALCRAFTER",
    "JEWELER",
    "GEM_CUTTER",
    "GEM_SETTER",
    "CRAFTSMAN",
    "WOODCRAFTER",
    "STONECRAFTER",
    "LEATHERWORKER",
    "BONE_CARVER",
    "WEAVER",
    "CLOTHIER",
    "GLASSMAKER",
    "POTTER",
    "GLAZER",
    "WAX_WORKER",
    "STRAND_EXTRACTOR",
    "FISHERY_WORKER",
    "FISHERMAN",
    "FISH_DISSECTOR",
    "FISH_CLEANER",
    "FARMER",
    "CHEESE_MAKER",
    "MILKER",
    "COOK",
    "THRESHER",
    "MILLER",
    "BUTCHER",
    "TANNER",
    "DYER",
    "PLANTER",
    "HERBALIST",
    "BREWER",
    "SOAP_MAKER",
    "POTASH_MAKER",
    "LYE_MAKER",
    "WOOD_BURNER",
    "SHEARER",
    "SPINNER",
    "PRESSER",
    "BEEKEEPER",
    "ENGINEER",
    "MECHANIC",
    "SIEGE_ENGINEER",
    "SIEGE_OPERATOR",
    "PUMP_OPERATOR",
    "CLERK",
    "ADMINISTRATOR",
    "TRADER",
    "ARCHITECT",
    "ALCHEMIST",
    "DOCTOR",
    "DIAGNOSER",
    "BONE_SETTER",
    "SUTURER",
    "SURGEON",
    "MERCHANT",
    "HAMMERMAN",
    "MASTER_HAMMERMAN",
    "SPEARMAN",
    "MASTER_SPEARMAN",
    "CROSSBOWMAN",
    "MASTER_CROSSBOWMAN",
    "WRESTLER",
    "MASTER_WRESTLER",
    "AXEMAN",
    "MASTER_AXEMAN",
    "SWORDSMAN",
    "MASTER_SWORDSMAN",
    "MACEMAN",
    "MASTER_MACEMAN",
    "PIKEMAN",
    "MASTER_PIKEMAN",
    "BOWMAN",
    "MASTER_BOWMAN",
    "BLOWGUNMAN",
    "MASTER_BLOWGUNMAN",
    "LASHER",
    "MASTER_LASHER",
    "RECRUIT",
    "TRAINED_HUNTER",
    "TRAINED_WAR",
    "MASTER_THIEF",
    "THIEF",
    "STANDARD",
    "CHILD",
    "BABY",
    "DRUNK",
    "MONSTER_SLAYER",
    "SCOUT",
    "BEAST_HUNTER",
    "SNATCHER",
    "MERCENARY",
    "GELDER"
  };
  const enum_traits<profession>::attr_entry_type enum_traits<profession>::attr_table[113+1] = {
    { NULL, false, profession::NONE, true, -1, false },
    { "Miner", false, profession::NONE, true, 7, true },
    { "Woodworker", false, profession::NONE, true, 14, true },
    { "Carpenter", false, profession::WOODWORKER, true, 14, true },
    { "Bowyer", false, profession::WOODWORKER, true, 14, true },
    { "Woodcutter", false, profession::WOODWORKER, true, 14, true },
    { "Stoneworker", false, profession::NONE, true, 15, true },
    { "Engraver", false, profession::STONEWORKER, true, 15, true },
    { "Mason", false, profession::STONEWORKER, true, 15, true },
    { "Ranger", false, profession::NONE, true, 2, true },
    { "Animal Caretaker", false, profession::RANGER, true, 2, true },
    { "Animal Trainer", false, profession::RANGER, true, 2, true },
    { "Hunter", false, profession::RANGER, true, 2, true },
    { "Trapper", false, profession::RANGER, true, 2, true },
    { "Animal Dissector", false, profession::RANGER, true, 2, true },
    { "Metalsmith", false, profession::NONE, true, 8, true },
    { "Furnace Operator", false, profession::METALSMITH, true, 8, true },
    { "Weaponsmith", false, profession::METALSMITH, true, 8, true },
    { "Armorer", false, profession::METALSMITH, true, 8, true },
    { "Blacksmith", false, profession::METALSMITH, true, 8, true },
    { "Metalcrafter", false, profession::METALSMITH, true, 8, true },
    { "Jeweler", false, profession::NONE, true, 10, true },
    { "Gem Cutter", false, profession::JEWELER, true, 10, true },
    { "Gem Setter", false, profession::JEWELER, true, 10, true },
    { "Craftsman", false, profession::NONE, true, 9, true },
    { "Woodcrafter", false, profession::CRAFTSMAN, true, 9, true },
    { "Stonecrafter", false, profession::CRAFTSMAN, true, 9, true },
    { "Leatherworker", false, profession::CRAFTSMAN, true, 9, true },
    { "Bone Carver", false, profession::CRAFTSMAN, true, 9, true },
    { "Weaver", false, profession::CRAFTSMAN, true, 9, true },
    { "Clothier", false, profession::CRAFTSMAN, true, 9, true },
    { "Glassmaker", false, profession::CRAFTSMAN, true, 9, true },
    { "Potter", false, profession::CRAFTSMAN, true, 9, true },
    { "Glazer", false, profession::CRAFTSMAN, true, 9, true },
    { "Wax Worker", false, profession::CRAFTSMAN, true, 9, true },
    { "Strand Extractor", false, profession::CRAFTSMAN, true, 9, true },
    { "Fishery Worker", false, profession::NONE, true, 1, true },
    { "Fisherman", false, profession::FISHERY_WORKER, true, 1, true },
    { "Fish Dissector", false, profession::FISHERY_WORKER, true, 1, true },
    { "Fish Cleaner", false, profession::FISHERY_WORKER, true, 1, true },
    { "Farmer", false, profession::NONE, true, 6, true },
    { "Cheese Maker", false, profession::FARMER, true, 6, true },
    { "Milker", false, profession::FARMER, true, 6, true },
    { "Cook", false, profession::FARMER, true, 6, true },
    { "Thresher", false, profession::FARMER, true, 6, true },
    { "Miller", false, profession::FARMER, true, 6, true },
    { "Butcher", false, profession::FARMER, true, 6, true },
    { "Tanner", false, profession::FARMER, true, 6, true },
    { "Dyer", false, profession::FARMER, true, 6, true },
    { "Planter", false, profession::FARMER, true, 6, true },
    { "Herbalist", false, profession::FARMER, true, 6, true },
    { "Brewer", false, profession::FARMER, true, 6, true },
    { "Soap Maker", false, profession::FARMER, true, 6, true },
    { "Potash Maker", false, profession::FARMER, true, 6, true },
    { "Lye Maker", false, profession::FARMER, true, 6, true },
    { "Wood Burner", false, profession::FARMER, true, 6, true },
    { "Shearer", false, profession::FARMER, true, 6, true },
    { "Spinner", false, profession::FARMER, true, 6, true },
    { "Presser", false, profession::FARMER, true, 6, true },
    { "Bee Keeper", false, profession::FARMER, true, 6, true },
    { "Engineer", false, profession::NONE, true, 12, true },
    { "Mechanic", false, profession::ENGINEER, true, 12, true },
    { "Siege Engineer", false, profession::ENGINEER, true, 12, true },
    { "Siege Operator", false, profession::ENGINEER, true, 12, true },
    { "Pump Operator", false, profession::ENGINEER, true, 12, true },
    { "Clerk", false, profession::ADMINISTRATOR, true, 5, true },
    { "Administrator", false, profession::NONE, true, 5, true },
    { "Trader", false, profession::ADMINISTRATOR, true, 5, true },
    { "Architect", false, profession::ADMINISTRATOR, true, 5, true },
    { "Alchemist", false, profession::NONE, true, 5, true },
    { "Doctor", false, profession::NONE, true, 5, true },
    { "Diagnoser", false, profession::DOCTOR, true, 5, true },
    { "Bone Setter", false, profession::DOCTOR, true, 5, true },
    { "Suturer", false, profession::DOCTOR, true, 5, true },
    { "Surgeon", false, profession::DOCTOR, true, 5, true },
    { "Merchant", false, profession::NONE, true, 7, false },
    { "Hammerman", true, profession::NONE, true, 5, false },
    { "Hammer Lord", true, profession::HAMMERMAN, true, 13, false },
    { "Spearman", true, profession::NONE, true, 6, false },
    { "Spearmaster", true, profession::SPEARMAN, true, 14, false },
    { "Crossbowman", true, profession::NONE, true, 2, false },
    { "Elite Crossbowman", true, profession::CROSSBOWMAN, true, 10, false },
    { "Wrestler", true, profession::NONE, true, 7, false },
    { "Elite Wrestler", true, profession::WRESTLER, true, 15, false },
    { "Axeman", true, profession::NONE, true, 1, false },
    { "Axe Lord", true, profession::AXEMAN, true, 9, false },
    { "Swordsman", true, profession::NONE, true, 3, false },
    { "Swordsmaster", true, profession::SWORDSMAN, true, 11, false },
    { "Maceman", true, profession::NONE, true, 4, false },
    { "Mace Lord", true, profession::MACEMAN, true, 12, false },
    { "Pikeman", true, profession::NONE, true, 6, false },
    { "Pikemaster", true, profession::PIKEMAN, true, 14, false },
    { "Bowman", true, profession::NONE, true, 2, false },
    { "Elite Bowman", true, profession::BOWMAN, true, 10, false },
    { "Blowgunner", true, profession::NONE, true, 8, false },
    { "Master Blowgunner", true, profession::BLOWGUNMAN, true, 8, false },
    { "Lasher", true, profession::NONE, true, 8, false },
    { "Master Lasher", true, profession::LASHER, true, 8, false },
    { "Recruit", true, profession::NONE, true, 8, true },
    { "Hunting Animal", false, profession::NONE, true, 15, false },
    { "War Animal", false, profession::NONE, true, 8, false },
    { "Master Thief", false, profession::THIEF, true, 8, false },
    { "Thief", false, profession::NONE, true, 8, false },
    { "Peasant", false, profession::NONE, true, -1, true },
    { "Child", false, profession::STANDARD, false, 4, true },
    { "Baby", false, profession::STANDARD, false, 4, false },
    { "Drunk", false, profession::STANDARD, false, 6, false },
    { "Monster slayer", false, profession::STANDARD, false, 6, false },
    { "Scout", false, profession::STANDARD, false, 6, false },
    { "Beast hunter", false, profession::STANDARD, false, 6, false },
    { "Snatcher", false, profession::STANDARD, false, 6, false },
    { "Mercenary", false, profession::STANDARD, false, 6, false },
    { "Gelder", false, profession::FARMER, true, 6, false },
    { NULL, false, profession::NONE, true, -1, false }
  };
  const enum_traits<profession>::attr_entry_type & enum_traits<profession>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[113];
  }
  enum_identity identity_traits<profession>::identity(sizeof(profession), NULL, "profession", TID(int16_t), -1, 111, enum_traits<profession>::key_table,
                enum_traits<profession>::attr_table, &enum_traits<profession>::attr_entry_type::_identity);
  const bitfield_item_info bitfield_traits<projectile_flags>::bits[bit_count] = {
    { "no_impact_destroy", 1 },
    { "has_hit_ground", 1 },
    { "bouncing", 1 },
    { "high_flying", 1 },
    { "piercing", 1 },
    { "to_be_deleted", 1 },
    { "unk6", 1 },
    { "unk7", 1 },
    { "parabolic", 1 },
    { "unk9", 1 },
    { "unk10", 1 },
    { "no_collide", 1 }
  };
  bitfield_identity identity_traits<projectile_flags>::identity(sizeof(projectile_flags), NULL, "projectile_flags", bitfield_traits<projectile_flags>::bit_count, bitfield_traits<projectile_flags>::bits);
  const char *const enum_traits<projectile_type>::key_table[3] = {
    "Item",
    "Unit",
    "Magic"
  };
  enum_identity identity_traits<projectile_type>::identity(sizeof(projectile_type), NULL, "projectile_type", TID(int32_t), 0, 2, enum_traits<projectile_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<reaction_flags>::key_table[3] = {
    "FUEL",
    "AUTOMATIC",
    "ADVENTURE_MODE_ENABLED"
  };
  enum_identity identity_traits<reaction_flags>::identity(sizeof(reaction_flags), NULL, "reaction_flags", TID(int32_t), 0, 2, enum_traits<reaction_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<reaction_product_improvement_flags>::key_table[3] = {
    "GET_MATERIAL_SAME",
    "GET_MATERIAL_PRODUCT",
    "GLAZED"
  };
  enum_identity identity_traits<reaction_product_improvement_flags>::identity(sizeof(reaction_product_improvement_flags), NULL, "reaction_product_improvement_flags", TID(int32_t), 0, 2, enum_traits<reaction_product_improvement_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<reaction_product_item_flags>::key_table[6] = {
    "GET_MATERIAL_SAME",
    "GET_MATERIAL_PRODUCT",
    "FORCE_EDGE",
    "PASTE",
    "PRESSED",
    "CRAFTS"
  };
  enum_identity identity_traits<reaction_product_item_flags>::identity(sizeof(reaction_product_item_flags), NULL, "reaction_product_item_flags", TID(int32_t), 0, 5, enum_traits<reaction_product_item_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<reaction_product_type>::key_table[2] = {
    "item",
    "improvement"
  };
  enum_identity identity_traits<reaction_product_type>::identity(sizeof(reaction_product_type), NULL, "reaction_product_type", TID(int32_t), 0, 1, enum_traits<reaction_product_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<reaction_reagent_flags>::bits[bit_count] = {
    { "PRESERVE_REAGENT", 1 },
    { "IN_CONTAINER", 1 },
    { "DOES_NOT_DETERMINE_PRODUCT_AMOUNT", 1 }
  };
  bitfield_identity identity_traits<reaction_reagent_flags>::identity(sizeof(reaction_reagent_flags), NULL, "reaction_reagent_flags", bitfield_traits<reaction_reagent_flags>::bit_count, bitfield_traits<reaction_reagent_flags>::bits);
  const char *const enum_traits<reaction_reagent_type>::key_table[1] = {
    "item"
  };
  enum_identity identity_traits<reaction_reagent_type>::identity(sizeof(reaction_reagent_type), NULL, "reaction_reagent_type", TID(int32_t), 0, 0, enum_traits<reaction_reagent_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<region_map_entry::T_clouds>::bits[bit_count] = {
    { NULL, 1 },
    { NULL, 1 },
    { "density", 2 },
    { NULL, -1 },
    { "striped", 1 },
    { "darkness", 2 },
    { NULL, -1 },
    { "fog", 2 },
    { NULL, -1 },
    { NULL, 4 },
    { NULL, -1 },
    { NULL, -2 },
    { NULL, -3 }
  };
  bitfield_identity identity_traits<region_map_entry::T_clouds>::identity(sizeof(region_map_entry::T_clouds), &region_map_entry::_identity, "T_clouds", bitfield_traits<region_map_entry::T_clouds>::bit_count, bitfield_traits<region_map_entry::T_clouds>::bits);
  const bitfield_item_info bitfield_traits<region_map_entry::T_wind>::bits[bit_count] = {
    { "north_1", 1 },
    { "south_1", 1 },
    { "east_1", 1 },
    { "west_1", 1 },
    { "north_2", 1 },
    { "south_2", 1 },
    { "east_2", 1 },
    { "west_2", 1 }
  };
  bitfield_identity identity_traits<region_map_entry::T_wind>::identity(sizeof(region_map_entry::T_wind), &region_map_entry::_identity, "T_wind", bitfield_traits<region_map_entry::T_wind>::bit_count, bitfield_traits<region_map_entry::T_wind>::bits);
  const char *const enum_traits<region_map_entry_flags>::key_table[24] = {
    "has_river",
    "tile_variant",
    NULL,
    "has_site",
    NULL,
    "river_up",
    "river_down",
    "river_right",
    "river_left",
    "discovered",
    NULL,
    NULL,
    NULL,
    "is_peak",
    "is_lake",
    "is_brook",
    "has_road",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
  };
  enum_identity identity_traits<region_map_entry_flags>::identity(sizeof(region_map_entry_flags), NULL, "region_map_entry_flags", TID(int32_t), 0, 23, enum_traits<region_map_entry_flags>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<report::T_flags>::bits[bit_count] = {
    { "continuation", 1 },
    { "unconscious", 1 },
    { "announcement", 1 }
  };
  bitfield_identity identity_traits<report::T_flags>::identity(sizeof(report::T_flags), &report::_identity, "T_flags", bitfield_traits<report::T_flags>::bit_count, bitfield_traits<report::T_flags>::bits);
  const char *const enum_traits<resource_allotment_specifier_type>::key_table[44] = {
    "CROP",
    "STONE",
    "METAL",
    "WOOD",
    "ARMOR_BODY",
    "ARMOR_PANTS",
    "ARMOR_GLOVES",
    "ARMOR_BOOTS",
    "ARMOR_HELM",
    "CLOTHING_BODY",
    "CLOTHING_PANTS",
    "CLOTHING_GLOVES",
    "CLOTHING_BOOTS",
    "CLOTHING_HELM",
    "WEAPON_MELEE",
    "WEAPON_RANGED",
    "ANVIL",
    "GEMS",
    "THREAD",
    "CLOTH",
    "LEATHER",
    "QUIVER",
    "BACKPACK",
    "FLASK",
    "BAG",
    "TABLE",
    "CABINET",
    "CHAIR",
    "BOX",
    "BED",
    "CRAFTS",
    "MEAT",
    "BONE",
    "HORN",
    "SHELL",
    "TALLOW",
    "TOOTH",
    "PEARL",
    "SOAP",
    "EXTRACT",
    "CHEESE",
    "SKIN",
    "POWDER",
    "AMMO"
  };
  enum_identity identity_traits<resource_allotment_specifier_type>::identity(sizeof(resource_allotment_specifier_type), NULL, "resource_allotment_specifier_type", TID(int32_t), 0, 43, enum_traits<resource_allotment_specifier_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<room_rent_info::T_flags>::bits[bit_count] = {
    { "eviction_underway", 1 },
    { "move_underway", 1 }
  };
  bitfield_identity identity_traits<room_rent_info::T_flags>::identity(sizeof(room_rent_info::T_flags), &room_rent_info::_identity, "T_flags", bitfield_traits<room_rent_info::T_flags>::bit_count, bitfield_traits<room_rent_info::T_flags>::bits);
  const bitfield_item_info bitfield_traits<route_stockpile_link::T_mode>::bits[bit_count] = {
    { "take", 1 },
    { "give", 1 }
  };
  bitfield_identity identity_traits<route_stockpile_link::T_mode>::identity(sizeof(route_stockpile_link::T_mode), &route_stockpile_link::_identity, "T_mode", bitfield_traits<route_stockpile_link::T_mode>::bit_count, bitfield_traits<route_stockpile_link::T_mode>::bits);
  const char *const enum_traits<screw_pump_direction>::key_table[4] = {
    "FromNorth",
    "FromEast",
    "FromSouth",
    "FromWest"
  };
  enum_identity identity_traits<screw_pump_direction>::identity(sizeof(screw_pump_direction), NULL, "screw_pump_direction", TID(int8_t), 0, 3, enum_traits<screw_pump_direction>::key_table,
                NULL, NULL);
  const char *const enum_traits<shoes_flags>::key_table[1] = {
    "METAL_ARMOR_LEVELS"
  };
  enum_identity identity_traits<shoes_flags>::identity(sizeof(shoes_flags), NULL, "shoes_flags", TID(int32_t), 0, 0, enum_traits<shoes_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<shop_type>::key_table[4] = {
    "GeneralStore",
    "CraftsMarket",
    "ClothingShop",
    "ExoticClothingShop"
  };
  enum_identity identity_traits<shop_type>::identity(sizeof(shop_type), NULL, "shop_type", TID(int16_t), 0, 3, enum_traits<shop_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<siegeengine_type>::key_table[2] = {
    "Catapult",
    "Ballista"
  };
  enum_identity identity_traits<siegeengine_type>::identity(sizeof(siegeengine_type), NULL, "siegeengine_type", TID(int16_t), 0, 1, enum_traits<siegeengine_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<site_dispute_type>::key_table[6] = {
    "Territory",
    "WaterRights",
    "GrazingRights",
    "FishingRights",
    "RightsOfWay",
    "LivestockOwnership"
  };
  enum_identity identity_traits<site_dispute_type>::identity(sizeof(site_dispute_type), NULL, "site_dispute_type", TID(int32_t), 0, 5, enum_traits<site_dispute_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<site_realization_building_type>::key_table[21] = {
    "cottage_plot",
    "castle_wall",
    "castle_tower",
    "castle_courtyard",
    "house",
    "temple",
    "tomb",
    "shop_house",
    "warehouse",
    "market_square",
    "pasture",
    "waste",
    "courtyard",
    "well",
    "vault",
    "great_tower",
    "trenches",
    "tree_house",
    "hillock_house",
    "mead_hall",
    "fortress_entrance"
  };
  enum_identity identity_traits<site_realization_building_type>::identity(sizeof(site_realization_building_type), NULL, "site_realization_building_type", TID(int32_t), 0, 20, enum_traits<site_realization_building_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<site_shop_type>::key_table[26] = {
    "GeneralImports",
    "FoodImports",
    "ClothingImports",
    "Cloth",
    "Leather",
    "WovenClothing",
    "LeatherClothing",
    "BoneCarver",
    "GemCutter",
    "Weaponsmith",
    "Bowyer",
    "Blacksmith",
    "Armorsmith",
    "MetalCraft",
    "LeatherGoods",
    "Carpenter",
    "StoneFurniture",
    "MetalFurniture",
    "ImportedGoodsMarket",
    "ImportedFoodMarket",
    "ImportedClothingMarket",
    "MeatMarket",
    "FruitAndVegetableMarket",
    "CheeseMarket",
    "ProcessedGoodsMarket",
    "Tavern"
  };
  enum_identity identity_traits<site_shop_type>::identity(sizeof(site_shop_type), NULL, "site_shop_type", TID(int32_t), 0, 25, enum_traits<site_shop_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<site_type>::key_table[11] = {
    "PLAYER_FORTRESS",
    "DARK_FORTRESS",
    "CAVE",
    "CAVE_DETAILED",
    "TREE_CITY",
    "CITY",
    NULL,
    NULL,
    "FORTRESS",
    NULL,
    "MONUMENT"
  };
  enum_identity identity_traits<site_type>::identity(sizeof(site_type), NULL, "site_type", TID(int32_t), 0, 10, enum_traits<site_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<skill_rating>::key_table[21] = {
    "Dabbling",
    "Novice",
    "Adequate",
    "Competent",
    "Skilled",
    "Proficient",
    "Talented",
    "Adept",
    "Expert",
    "Professional",
    "Accomplished",
    "Great",
    "Master",
    "HighMaster",
    "GrandMaster",
    "Legendary",
    "Legendary1",
    "Legendary2",
    "Legendary3",
    "Legendary4",
    "Legendary5"
  };
  const enum_traits<skill_rating>::attr_entry_type enum_traits<skill_rating>::attr_table[21+1] = {
    { 500, "Dabbling" },
    { 600, "Novice" },
    { 700, "Adequate" },
    { 800, "Competent" },
    { 900, "Skilled" },
    { 1000, "Proficient" },
    { 1100, "Talented" },
    { 1200, "Adept" },
    { 1300, "Expert" },
    { 1400, "Professional" },
    { 1500, "Accomplished" },
    { 1600, "Great" },
    { 1700, "Master" },
    { 1800, "High Master" },
    { 1900, "Grand Master" },
    { 2000, "Legendary" },
    { 2100, "Legendary+1" },
    { 2200, "Legendary+2" },
    { 2300, "Legendary+3" },
    { 2400, "Legendary+4" },
    { (uint32_t)0, "Legendary+5" },
    { (uint32_t)0, NULL }
  };
  const enum_traits<skill_rating>::attr_entry_type & enum_traits<skill_rating>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[21];
  }
  enum_identity identity_traits<skill_rating>::identity(sizeof(skill_rating), NULL, "skill_rating", TID(int32_t), 0, 20, enum_traits<skill_rating>::key_table,
                enum_traits<skill_rating>::attr_table, &enum_traits<skill_rating>::attr_entry_type::_identity);
  const char *const enum_traits<slab_engraving_type>::key_table[28] = {
    "Slab",
    "Memorial",
    "CraftShopSign",
    "WeaponsmithShopSign",
    "ArmorsmithShopSign",
    "GeneralStoreSign",
    "FoodShopSign",
    "Secrets",
    "FoodImportsSign",
    "ClothingImportsSign",
    "GeneralImportsSign",
    "ClothShopSign",
    "LeatherShopSign",
    "WovenClothingShopSign",
    "LeatherClothingShopSign",
    "BoneCarverShopSign",
    "GemCutterShopSign",
    "WeaponsmithShopSign2",
    "BowyerShopSign",
    "BlacksmithShopSign",
    "ArmorsmithShopSign2",
    "MetalCraftShopSign",
    "LeatherGoodsShopSign",
    "CarpenterShopSign",
    "StoneFurnitureShopSign",
    "MetalFurnitureShopSign",
    "DemonIdentity",
    "TavernSign"
  };
  enum_identity identity_traits<slab_engraving_type>::identity(sizeof(slab_engraving_type), NULL, "slab_engraving_type", TID(int16_t), -1, 26, enum_traits<slab_engraving_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<spatter::T_flags>::bits[bit_count] = {
    { "water_soluble", 1 }
  };
  bitfield_identity identity_traits<spatter::T_flags>::identity(sizeof(spatter::T_flags), &spatter::_identity, "T_flags", bitfield_traits<spatter::T_flags>::bit_count, bitfield_traits<spatter::T_flags>::bits);
  const bitfield_item_info bitfield_traits<spatter_common::T_base_flags>::bits[bit_count] = {
    { "evaporates", 1 }
  };
  bitfield_identity identity_traits<spatter_common::T_base_flags>::identity(sizeof(spatter_common::T_base_flags), &spatter_common::_identity, "T_base_flags", bitfield_traits<spatter_common::T_base_flags>::bit_count, bitfield_traits<spatter_common::T_base_flags>::bits);
  const char *const enum_traits<specific_ref_type>::key_table[31] = {
    NULL,
    "UNIT_INVENTORY",
    "JOB",
    "BUILDING_PARTY",
    "ACTIVITY",
    "ITEM_GENERAL",
    "EFFECT",
    "PETINFO_PET",
    "PETINFO_OWNER",
    "VERMIN_EVENT",
    "VERMIN_ESCAPED_PET",
    "ENTITY",
    "PLOT_INFO",
    "VIEWSCREEN",
    "UNIT_ITEM_WRESTLE",
    "NULL_REF",
    "HIST_FIG",
    "SITE",
    "ARTIFACT",
    "ITEM_IMPROVEMENT",
    "COIN_FRONT",
    "COIN_BACK",
    "DETAIL_EVENT",
    "SUBREGION",
    "FEATURE_LAYER",
    "ART_IMAGE",
    "CREATURE_DEF",
    NULL,
    NULL,
    "ENTITY_POPULATION",
    "BREED"
  };
  enum_identity identity_traits<specific_ref_type>::identity(sizeof(specific_ref_type), NULL, "specific_ref_type", TID(int32_t), 0, 30, enum_traits<specific_ref_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<sphere_type>::key_table[130] = {
    "AGRICULTURE",
    "ANIMALS",
    "ART",
    "BALANCE",
    "BEAUTY",
    "BIRTH",
    "BLIGHT",
    "BOUNDARIES",
    "CAVERNS",
    "CHAOS",
    "CHARITY",
    "CHILDREN",
    "COASTS",
    "CONSOLATION",
    "COURAGE",
    "CRAFTS",
    "CREATION",
    "DANCE",
    "DARKNESS",
    "DAWN",
    "DAY",
    "DEATH",
    "DEFORMITY",
    "DEPRAVITY",
    "DISCIPLINE",
    "DISEASE",
    "DREAMS",
    "DUSK",
    "DUTY",
    "EARTH",
    "FAMILY",
    "FAME",
    "FATE",
    "FERTILITY",
    "FESTIVALS",
    "FIRE",
    "FISH",
    "FISHING",
    "FOOD",
    "FORGIVENESS",
    "FORTRESSES",
    "FREEDOM",
    "GAMBLING",
    "GAMES",
    "GENEROSITY",
    "HAPPINESS",
    "HEALING",
    "HOSPITALITY",
    "HUNTING",
    "INSPIRATION",
    "JEALOUSY",
    "JEWELS",
    "JUSTICE",
    "LABOR",
    "LAKES",
    "LAWS",
    "LIES",
    "LIGHT",
    "LIGHTNING",
    "LONGEVITY",
    "LOVE",
    "LOYALTY",
    "LUCK",
    "LUST",
    "MARRIAGE",
    "MERCY",
    "METALS",
    "MINERALS",
    "MISERY",
    "MIST",
    "MOON",
    "MOUNTAINS",
    "MUCK",
    "MURDER",
    "MUSIC",
    "NATURE",
    "NIGHT",
    "NIGHTMARES",
    "OATHS",
    "OCEANS",
    "ORDER",
    "PAINTING",
    "PEACE",
    "PERSUASION",
    "PLANTS",
    "POETRY",
    "PREGNANCY",
    "RAIN",
    "RAINBOWS",
    "REBIRTH",
    "REVELRY",
    "REVENGE",
    "RIVERS",
    "RULERSHIP",
    "RUMORS",
    "SACRIFICE",
    "SALT",
    "SCHOLARSHIP",
    "SEASONS",
    "SILENCE",
    "SKY",
    "SONG",
    "SPEECH",
    "STARS",
    "STORMS",
    "STRENGTH",
    "SUICIDE",
    "SUN",
    "THEFT",
    "THRALLDOM",
    "THUNDER",
    "TORTURE",
    "TRADE",
    "TRAVELERS",
    "TREACHERY",
    "TREES",
    "TRICKERY",
    "TRUTH",
    "TWILIGHT",
    "VALOR",
    "VICTORY",
    "VOLCANOS",
    "WAR",
    "WATER",
    "WEALTH",
    "WEATHER",
    "WIND",
    "WISDOM",
    "WRITING",
    "YOUTH"
  };
  enum_identity identity_traits<sphere_type>::identity(sizeof(sphere_type), NULL, "sphere_type", TID(int32_t), 0, 129, enum_traits<sphere_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<squad_ammo_spec::T_flags>::bits[bit_count] = {
    { "use_combat", 1 },
    { "use_training", 1 }
  };
  bitfield_identity identity_traits<squad_ammo_spec::T_flags>::identity(sizeof(squad_ammo_spec::T_flags), &squad_ammo_spec::_identity, "T_flags", bitfield_traits<squad_ammo_spec::T_flags>::bit_count, bitfield_traits<squad_ammo_spec::T_flags>::bits);
  const char *const enum_traits<squad_event_type>::key_table[4] = {
    "None",
    "Unk0",
    "Unk1",
    "Unk2"
  };
  enum_identity identity_traits<squad_event_type>::identity(sizeof(squad_event_type), NULL, "squad_event_type", TID(int16_t), -1, 2, enum_traits<squad_event_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<squad_order_cannot_reason>::key_table[17] = {
    "not_following_order",
    "activity_cancelled",
    "no_barracks",
    "improper_barracks",
    "no_activity",
    "cannot_individually_drill",
    "does_not_exist",
    "no_archery_target",
    "improper_building",
    "unreachable_location",
    "invalid_location",
    "no_reachable_valid_target",
    "no_burrow",
    "not_in_squad",
    "no_patrol_route",
    "no_reachable_point_on_route",
    "invalid_order"
  };
  enum_identity identity_traits<squad_order_cannot_reason>::identity(sizeof(squad_order_cannot_reason), NULL, "squad_order_cannot_reason", TID(int32_t), 0, 16, enum_traits<squad_order_cannot_reason>::key_table,
                NULL, NULL);
  const char *const enum_traits<squad_order_type>::key_table[7] = {
    "MOVE",
    "KILL_LIST",
    "DEFEND_BURROWS",
    "PATROL_ROUTE",
    "TRAIN",
    "DRIVE_ENTITY_OFF_SITE",
    "CAUSE_TROUBLE_FOR_ENTITY"
  };
  enum_identity identity_traits<squad_order_type>::identity(sizeof(squad_order_type), NULL, "squad_order_type", TID(int32_t), 0, 6, enum_traits<squad_order_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<squad_use_flags>::bits[bit_count] = {
    { "sleep", 1 },
    { "train", 1 },
    { "indiv_eq", 1 },
    { "squad_eq", 1 }
  };
  bitfield_identity identity_traits<squad_use_flags>::identity(sizeof(squad_use_flags), NULL, "squad_use_flags", bitfield_traits<squad_use_flags>::bit_count, bitfield_traits<squad_use_flags>::bits);
  const char *const enum_traits<stockpile_category>::key_table[19] = {
    "Remove",
    "Animals",
    "Food",
    "Furniture",
    "Corpses",
    "Refuse",
    "Stone",
    "Ore",
    "Ammo",
    "Coins",
    "Bars",
    "Gems",
    "Goods",
    "Leather",
    "Cloth",
    "Wood",
    "Weapons",
    "Armor",
    "Custom"
  };
  enum_identity identity_traits<stockpile_category>::identity(sizeof(stockpile_category), NULL, "stockpile_category", TID(int16_t), -1, 17, enum_traits<stockpile_category>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<stockpile_group_set>::bits[bit_count] = {
    { "animals", 1 },
    { "food", 1 },
    { "furniture", 1 },
    { "corpses", 1 },
    { "refuse", 1 },
    { "stone", 1 },
    { "ammo", 1 },
    { "coins", 1 },
    { "bars_blocks", 1 },
    { "gems", 1 },
    { "finished_goods", 1 },
    { "leather", 1 },
    { "cloth", 1 },
    { "wood", 1 },
    { "weapons", 1 },
    { "armor", 1 }
  };
  bitfield_identity identity_traits<stockpile_group_set>::identity(sizeof(stockpile_group_set), NULL, "stockpile_group_set", bitfield_traits<stockpile_group_set>::bit_count, bitfield_traits<stockpile_group_set>::bits);
  const char *const enum_traits<stockpile_list>::key_table[100] = {
    "Animals",
    "Food",
    "FoodMeat",
    "FoodFish",
    "FoodUnpreparedFish",
    "FoodEgg",
    "FoodPlants",
    "FoodDrinkPlant",
    "FoodDrinkAnimal",
    "FoodCheesePlant",
    "FoodCheeseAnimal",
    "FoodSeeds",
    "FoodLeaves",
    "FoodMilledPlant",
    "FoodBoneMeal",
    "FoodFat",
    "FoodPaste",
    "FoodPressedMaterial",
    "FoodExtractPlant",
    "FoodExtractAnimal",
    "FoodMiscLiquid",
    "Furniture",
    "FurnitureType",
    "FurnitureStoneClay",
    "FurnitureMetal",
    "FurnitureOtherMaterials",
    "FurnitureCoreQuality",
    "FurnitureTotalQuality",
    "Corpses",
    "Refuse",
    "RefuseItems",
    "RefuseCorpses",
    "RefuseParts",
    "RefuseSkulls",
    "RefuseBones",
    "RefuseShells",
    "RefuseTeeth",
    "RefuseHorns",
    "RefuseHair",
    "Stone",
    "StoneOres",
    "StoneEconomic",
    "StoneOther",
    "StoneClay",
    "Ammo",
    "AmmoType",
    "AmmoMetal",
    "AmmoOther",
    "AmmoCoreQuality",
    "AmmoTotalQuality",
    "Coins",
    "BarsBlocks",
    "BarsMetal",
    "BarsOther",
    "BlocksStone",
    "BlocksMetal",
    "BlocksOther",
    "Gems",
    "RoughGem",
    "RoughGlass",
    "CutGem",
    "CutGlass",
    "Goods",
    "GoodsType",
    "GoodsStone",
    "GoodsMetal",
    "GoodsOther",
    "GoodsCoreQuality",
    "GoodsTotalQuality",
    "Leather",
    "Cloth",
    "ThreadSilk",
    "ThreadPlant",
    "ThreadYarn",
    "ThreadMetal",
    "ClothSilk",
    "ClothPlant",
    "ClothYarn",
    "ClothMetal",
    "Wood",
    "Weapons",
    "WeaponsType",
    "WeaponsTrapcomp",
    "WeaponsMetal",
    "WeaponsStone",
    "WeaponsOther",
    "WeaponsCoreQuality",
    "WeaponsTotalQuality",
    "Armor",
    "ArmorBody",
    "ArmorHead",
    "ArmorFeet",
    "ArmorHands",
    "ArmorLegs",
    "ArmorShield",
    "ArmorMetal",
    "ArmorOther",
    "ArmorCoreQuality",
    "ArmorTotalQuality",
    "AdditionalOptions"
  };
  const enum_traits<stockpile_list>::attr_entry_type enum_traits<stockpile_list>::attr_table[100+1] = {
    { true },
    { true },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { true },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { true },
    { true },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { true },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { true },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { true },
    { true },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { true },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { true },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { true },
    { true },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { true },
    { true },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { true },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { (bool)0 },
    { true },
    { (bool)0 }
  };
  const enum_traits<stockpile_list>::attr_entry_type & enum_traits<stockpile_list>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[100];
  }
  enum_identity identity_traits<stockpile_list>::identity(sizeof(stockpile_list), NULL, "stockpile_list", TID(int32_t), 0, 99, enum_traits<stockpile_list>::key_table,
                enum_traits<stockpile_list>::attr_table, &enum_traits<stockpile_list>::attr_entry_type::_identity);
  const char *const enum_traits<stop_depart_condition::T_direction>::key_table[4] = {
    "North",
    "South",
    "East",
    "West"
  };
  enum_identity identity_traits<stop_depart_condition::T_direction>::identity(sizeof(stop_depart_condition::T_direction), &stop_depart_condition::_identity, "T_direction", TID(int32_t), 0, 3, enum_traits<stop_depart_condition::T_direction>::key_table,
                NULL, NULL);
  const char *const enum_traits<stop_depart_condition::T_mode>::key_table[3] = {
    "Push",
    "Ride",
    "Guide"
  };
  enum_identity identity_traits<stop_depart_condition::T_mode>::identity(sizeof(stop_depart_condition::T_mode), &stop_depart_condition::_identity, "T_mode", TID(int32_t), 0, 2, enum_traits<stop_depart_condition::T_mode>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<stop_depart_condition::T_flags>::bits[bit_count] = {
    { "at_most", 1 },
    { "desired", 1 }
  };
  bitfield_identity identity_traits<stop_depart_condition::T_flags>::identity(sizeof(stop_depart_condition::T_flags), &stop_depart_condition::_identity, "T_flags", bitfield_traits<stop_depart_condition::T_flags>::bit_count, bitfield_traits<stop_depart_condition::T_flags>::bits);
  const char *const enum_traits<strain_type>::key_table[6] = {
    "BENDING",
    "SHEAR",
    "TORSION",
    "IMPACT",
    "TENSILE",
    "COMPRESSIVE"
  };
  enum_identity identity_traits<strain_type>::identity(sizeof(strain_type), NULL, "strain_type", TID(int32_t), 0, 5, enum_traits<strain_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<syndrome_flags>::bits[bit_count] = {
    { "SYN_INJECTED", 1 },
    { "SYN_CONTACT", 1 },
    { "SYN_INHALED", 1 },
    { NULL, 1 },
    { "SYN_INGESTED", 1 }
  };
  bitfield_identity identity_traits<syndrome_flags>::identity(sizeof(syndrome_flags), NULL, "syndrome_flags", bitfield_traits<syndrome_flags>::bit_count, bitfield_traits<syndrome_flags>::bits);
  const char *const enum_traits<talk_choice_type>::key_table[169] = {
    "Greet",
    "Nevermind",
    "Trade",
    "AskJoin",
    "AskSurroundings",
    "SayGoodbye",
    "AskStructure",
    "AskFamily",
    "AskProfession",
    "AskPermissionSleep",
    "AccuseNightCreature",
    "AskTroubles",
    "BringUpEvent",
    "SpreadRumor",
    "ReplyGreeting",
    "RefuseConversation",
    "ReplyImpersonate",
    "BringUpIncident",
    "TellNothingChanged",
    "Goodbye2",
    "ReturnTopic",
    "ChangeSubject",
    "AskTargetAction",
    "RequestSuggestAction",
    "AskJoinInsurrection",
    "AskJoinRescue",
    "StateOpinion",
    NULL,
    NULL,
    "AllowPermissionSleep",
    "DenyPermissionSleep",
    NULL,
    "AskJoinAdventure",
    "AskGuideLocation",
    "RespondJoin",
    "RespondJoin2",
    "OfferCondolences",
    "StateNotAcquainted",
    "SuggestTravel",
    "SuggestTalk",
    "RequestSelfRescue",
    "AskWhatHappened",
    "AskBeRescued",
    "SayNotRemember",
    NULL,
    "SayNoFamily",
    "StateUnitLocation",
    "ReferToElder",
    "AskComeCloser",
    "DoBusiness",
    "AskComeStoreLater",
    "AskComeMarketLater",
    "TellTryShopkeeper",
    "DescribeSurroundings",
    "AskWaitUntilHome",
    "DescribeFamily",
    "StateAge",
    "DescribeProfession",
    "AnnounceNightCreature",
    "StateIncredulity",
    "BypassGreeting",
    "AskCeaseHostilities",
    "DemandYield",
    "HawkWares",
    "YieldTerror",
    "Yield",
    "ExpressOverwhelmingEmotion",
    "ExpressGreatEmotion",
    "ExpressEmotion",
    "ExpressMinorEmotion",
    "ExpressLackEmotion",
    "OutburstFleeConflict",
    "StateFleeConflict",
    "MentionJourney",
    "SummarizeTroubles",
    "AskAboutIncident",
    "AskDirectionsPerson",
    "AskDirectionsPlace",
    "AskWhereabouts",
    "RequestGuide",
    "RequestGuide2",
    "ProvideDirections",
    "ProvideWhereabouts",
    "TellTargetSelf",
    "TellTargetDead",
    "RecommendGuide",
    "ProfessIgnorance",
    "TellAboutPlace",
    "AskFavorMenu",
    "AskWait",
    "AskFollow",
    "ApologizeBusy",
    "ComplyOrder",
    "AgreeFollow",
    "ExchangeItems",
    "AskComeCloser2",
    "InitiateBarter",
    "AgreeCeaseHostile",
    "RefuseCeaseHostile",
    "RefuseCeaseHostile2",
    "RefuseYield",
    "RefuseYield2",
    "Brag",
    "DescribeRelation",
    NULL,
    "AnnounceLairHunt",
    "RequestDuty",
    "AskJoinService",
    "AcceptService",
    "TellRemainVigilant",
    "GiveServiceOrder",
    "WelcomeSelfHome",
    NULL,
    "AskTravelReason",
    "TellTravelReason",
    "AskLocalRuler",
    "ComplainAgreement",
    "CancelAgreement",
    "SummarizeConflict",
    "SummarizeViews",
    "AskClaimStrength",
    "AskArmyPosition",
    "AskOtherClaims",
    "AskDeserters",
    "AskSiteNeighbors",
    "DescribeSiteNeighbors",
    "RaiseAlarm",
    "DemandDropWeapon",
    "AgreeComplyDemand",
    "RefuseComplyDemand",
    "AskLocationObject",
    "DemandTribute",
    "AgreeGiveTribute",
    "RefuseGiveTribute",
    "OfferGiveTribute",
    "AgreeAcceptTribute",
    "RefuseAcceptTribute",
    "CancelTribute",
    "OfferPeace",
    "AgreePeace",
    "RefusePeace",
    "AskTradeDepotLater",
    "ExpressAstonishment",
    "CommentWeather",
    "CommentNature",
    "SummarizeTerritory",
    "SummarizePatrols",
    "SummarizeOpposition",
    "DescribeRefugees",
    "AccuseTroublemaker",
    "AskAdopt",
    "AgreeAdopt",
    "RefuseAdopt",
    "RevokeService",
    "InviteService",
    "AcceptInviteService",
    "RefuseShareInformation",
    "RefuseInviteService",
    "RefuseRequestService",
    "OfferService",
    "AcceptPositionService",
    "RefusePositionService",
    "InvokeNameBanish",
    "InvokeNameService",
    "GrovelMaster",
    "DemandItem",
    "GiveServiceReport",
    "OfferEncouragement",
    "PraiseTaskCompleter"
  };
  enum_identity identity_traits<talk_choice_type>::identity(sizeof(talk_choice_type), NULL, "talk_choice_type", TID(int32_t), 0, 168, enum_traits<talk_choice_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<tile_building_occ>::key_table[8] = {
    "None",
    "Planned",
    "Passable",
    "Obstacle",
    "Well",
    "Floored",
    "Impassable",
    "Dynamic"
  };
  enum_identity identity_traits<tile_building_occ>::identity(sizeof(tile_building_occ), NULL, "tile_building_occ", TID(uint32_t), 0, 7, enum_traits<tile_building_occ>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<tile_designation>::bits[bit_count] = {
    { "flow_size", 3 },
    { NULL, -1 },
    { NULL, -2 },
    { "pile", 1 },
    { "dig", 3 },
    { NULL, -1 },
    { NULL, -2 },
    { "smooth", 2 },
    { NULL, -1 },
    { "hidden", 1 },
    { "geolayer_index", 4 },
    { NULL, -1 },
    { NULL, -2 },
    { NULL, -3 },
    { "light", 1 },
    { "subterranean", 1 },
    { "outside", 1 },
    { "biome", 4 },
    { NULL, -1 },
    { NULL, -2 },
    { NULL, -3 },
    { "liquid_type", 1 },
    { "water_table", 1 },
    { "rained", 1 },
    { "traffic", 2 },
    { NULL, -1 },
    { "flow_forbid", 1 },
    { "liquid_static", 1 },
    { "feature_local", 1 },
    { "feature_global", 1 },
    { "water_stagnant", 1 },
    { "water_salt", 1 }
  };
  bitfield_identity identity_traits<tile_designation>::identity(sizeof(tile_designation), NULL, "tile_designation", bitfield_traits<tile_designation>::bit_count, bitfield_traits<tile_designation>::bits);
  const char *const enum_traits<tile_dig_designation>::key_table[7] = {
    "No",
    "Default",
    "UpDownStair",
    "Channel",
    "Ramp",
    "DownStair",
    "UpStair"
  };
  enum_identity identity_traits<tile_dig_designation>::identity(sizeof(tile_dig_designation), NULL, "tile_dig_designation", TID(uint32_t), 0, 6, enum_traits<tile_dig_designation>::key_table,
                NULL, NULL);
  const char *const enum_traits<tile_liquid>::key_table[2] = {
    "Water",
    "Magma"
  };
  enum_identity identity_traits<tile_liquid>::identity(sizeof(tile_liquid), NULL, "tile_liquid", TID(uint32_t), 0, 1, enum_traits<tile_liquid>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<tile_liquid_flow>::bits[bit_count] = {
    { "temp_flow_timer", 3 },
    { NULL, -1 },
    { NULL, -2 },
    { "unk_1", 3 },
    { NULL, -1 },
    { NULL, -2 },
    { "perm_flow_dir", 4 },
    { NULL, -1 },
    { NULL, -2 },
    { NULL, -3 },
    { "unk_2", 6 },
    { NULL, -1 },
    { NULL, -2 },
    { NULL, -3 },
    { NULL, -4 },
    { NULL, -5 }
  };
  bitfield_identity identity_traits<tile_liquid_flow>::identity(sizeof(tile_liquid_flow), NULL, "tile_liquid_flow", bitfield_traits<tile_liquid_flow>::bit_count, bitfield_traits<tile_liquid_flow>::bits);
  const char *const enum_traits<tile_liquid_flow_dir>::key_table[16] = {
    "none",
    "south",
    "east",
    "northeast",
    "west",
    "northwest",
    "southeast",
    "southwest",
    "inv_8",
    "inv_9",
    "north",
    "inv_b",
    "inv_c",
    "inv_d",
    "inv_e",
    "inv_f"
  };
  enum_identity identity_traits<tile_liquid_flow_dir>::identity(sizeof(tile_liquid_flow_dir), NULL, "tile_liquid_flow_dir", TID(uint16_t), 0, 15, enum_traits<tile_liquid_flow_dir>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<tile_occupancy>::bits[bit_count] = {
    { "building", 3 },
    { NULL, -1 },
    { NULL, -2 },
    { "unit", 1 },
    { "unit_grounded", 1 },
    { "item", 1 },
    { "edge_flow_in", 1 },
    { "moss", 1 },
    { "arrow_color", 4 },
    { NULL, -1 },
    { NULL, -2 },
    { NULL, -3 },
    { "arrow_variant", 1 },
    { "unk13_noncitizen_unit", 1 },
    { "monster_lair", 1 },
    { "no_grow", 1 },
    { "unk16", 1 },
    { "unk17", 1 },
    { "carve_track_north", 1 },
    { "carve_track_south", 1 },
    { "carve_track_east", 1 },
    { "carve_track_west", 1 },
    { "unk22", 1 },
    { "unk23", 1 },
    { "dig_marked", 1 },
    { "dig_auto", 1 }
  };
  bitfield_identity identity_traits<tile_occupancy>::identity(sizeof(tile_occupancy), NULL, "tile_occupancy", bitfield_traits<tile_occupancy>::bit_count, bitfield_traits<tile_occupancy>::bits);
  const char *const enum_traits<tile_traffic>::key_table[4] = {
    "Normal",
    "Low",
    "High",
    "Restricted"
  };
  enum_identity identity_traits<tile_traffic>::identity(sizeof(tile_traffic), NULL, "tile_traffic", TID(uint32_t), 0, 3, enum_traits<tile_traffic>::key_table,
                NULL, NULL);
  const char *const enum_traits<tiletype>::key_table[695] = {
    "Void",
    "RampTop",
    "MurkyPool",
    "MurkyPoolRamp",
    "UnderworldGateStairU",
    "UnderworldGateStairD",
    "UnderworldGateStairUD",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    "Driftwood",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    "FrozenStairUD",
    "FrozenStairD",
    "FrozenStairU",
    NULL,
    NULL,
    NULL,
    NULL,
    "OpenSpace",
    NULL,
    "Shrub",
    "Chasm",
    "LavaStairUD",
    "LavaStairD",
    "LavaStairU",
    "SoilStairUD",
    "SoilStairD",
    "SoilStairU",
    "EeriePit",
    "StoneFloorSmooth",
    "LavaFloorSmooth",
    "FeatureFloorSmooth",
    "MineralFloorSmooth",
    "FrozenFloorSmooth",
    NULL,
    "Grass1StairUD",
    "Grass1StairD",
    "Grass1StairU",
    "Grass2StairUD",
    "Grass2StairD",
    "Grass2StairU",
    "StoneStairUD",
    "StoneStairD",
    "StoneStairU",
    "MineralStairUD",
    "MineralStairD",
    "MineralStairU",
    "FeatureStairUD",
    "FeatureStairD",
    "FeatureStairU",
    NULL,
    "StoneFortification",
    NULL,
    "Campfire",
    NULL,
    NULL,
    "Fire",
    "BurningTreeTrunk",
    "BurningTreeBranches",
    "BurningTreeTwigs",
    "BurningTreeCapWall",
    "BurningTreeCapRamp",
    "BurningTreeCapFloor",
    NULL,
    NULL,
    "StonePillar",
    "LavaPillar",
    "FeaturePillar",
    "MineralPillar",
    "FrozenPillar",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    "Waterfall",
    "RiverSource",
    "TreeRootSloping",
    "TreeRoots",
    "TreeTrunkPillar",
    "TreeTrunkSloping",
    "TreeTrunkN",
    "TreeTrunkS",
    "TreeTrunkE",
    "TreeTrunkW",
    "TreeTrunkNW",
    "TreeTrunkNE",
    "TreeTrunkSW",
    "TreeTrunkSE",
    "TreeTrunkBranchN",
    "TreeTrunkBranchS",
    "TreeTrunkBranchE",
    "TreeTrunkBranchW",
    "TreeBranchNS",
    "TreeBranchEW",
    "TreeBranchesSmooth",
    "TreeDeadBranchesSmooth",
    "TreeBranchNW",
    "TreeBranchNE",
    "TreeBranchSW",
    "TreeBranchSE",
    "TreeBranches",
    "TreeTwigs",
    "TreeCapRamp",
    "TreeCapPillar",
    "TreeCapWallN",
    "TreeCapWallS",
    "TreeCapWallE",
    "TreeCapWallW",
    "TreeCapWallNW",
    "TreeCapWallNE",
    "TreeCapWallSW",
    "TreeCapWallSE",
    "TreeCapFloor1",
    "TreeCapFloor2",
    "TreeCapFloor3",
    "TreeCapFloor4",
    "TreeDeadRootSloping",
    "TreeDeadRoots",
    "TreeDeadTrunkPillar",
    "TreeDeadTrunkSloping",
    "TreeDeadTrunkN",
    "TreeDeadTrunkS",
    "TreeDeadTrunkE",
    "TreeDeadTrunkW",
    "TreeDeadTrunkNW",
    "TreeDeadTrunkNE",
    "TreeDeadTrunkSW",
    "TreeDeadTrunkSE",
    "TreeDeadTrunkBranchN",
    "TreeDeadTrunkBranchS",
    "TreeDeadTrunkBranchE",
    "TreeDeadTrunkBranchW",
    "TreeDeadBranchNS",
    "TreeDeadBranchEW",
    NULL,
    NULL,
    "TreeDeadBranchNW",
    "TreeDeadBranchNE",
    "TreeDeadBranchSW",
    "TreeDeadBranchSE",
    "TreeDeadBranches",
    "TreeDeadTwigs",
    "TreeDeadCapRamp",
    "TreeDeadCapPillar",
    "TreeDeadCapWallN",
    "TreeDeadCapWallS",
    "TreeDeadCapWallE",
    "TreeDeadCapWallW",
    "TreeDeadCapWallNW",
    "TreeDeadCapWallNE",
    "TreeDeadCapWallSW",
    "TreeDeadCapWallSE",
    "TreeDeadCapFloor1",
    "TreeDeadCapFloor2",
    "TreeDeadCapFloor3",
    "TreeDeadCapFloor4",
    NULL,
    "StoneWallWorn1",
    "StoneWallWorn2",
    "StoneWallWorn3",
    "TreeBranchNSE",
    "TreeBranchNSW",
    "TreeBranchNEW",
    "TreeBranchSEW",
    "TreeBranchNSEW",
    "TreeDeadBranchNSE",
    "TreeDeadBranchNSW",
    "TreeDeadBranchNEW",
    "TreeDeadBranchSEW",
    "TreeDeadBranchNSEW",
    "TreeTrunkNSE",
    "TreeTrunkNSW",
    "TreeTrunkNEW",
    "TreeTrunkSEW",
    "TreeTrunkNS",
    "TreeTrunkEW",
    "TreeTrunkNSEW",
    "TreeTrunkInterior",
    "TreeDeadTrunkNSE",
    "TreeDeadTrunkNSW",
    "TreeDeadTrunkNEW",
    "TreeDeadTrunkSEW",
    "TreeDeadTrunkNS",
    "TreeDeadTrunkEW",
    "TreeDeadTrunkNSEW",
    "TreeDeadTrunkInterior",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    "StoneWall",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    "Sapling",
    NULL,
    "GrassDryRamp",
    "GrassDeadRamp",
    "GrassLightRamp",
    "GrassDarkRamp",
    "StoneRamp",
    "LavaRamp",
    "FeatureRamp",
    "MineralRamp",
    "SoilRamp",
    "Ashes1",
    "Ashes2",
    "Ashes3",
    "FrozenRamp",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    "FrozenFloor2",
    "FrozenFloor3",
    "FrozenFloor4",
    "FurrowedSoil",
    "FrozenFloor1",
    "SemiMoltenRock",
    "MagmaFlow",
    "SoilWall",
    "GlowingBarrier",
    "GlowingFloor",
    NULL,
    "LavaWallSmoothRD2",
    "LavaWallSmoothR2D",
    "LavaWallSmoothR2U",
    "LavaWallSmoothRU2",
    "LavaWallSmoothL2U",
    "LavaWallSmoothLU2",
    "LavaWallSmoothL2D",
    "LavaWallSmoothLD2",
    "LavaWallSmoothLRUD",
    "LavaWallSmoothRUD",
    "LavaWallSmoothLRD",
    "LavaWallSmoothLRU",
    "LavaWallSmoothLUD",
    "LavaWallSmoothRD",
    "LavaWallSmoothRU",
    "LavaWallSmoothLU",
    "LavaWallSmoothLD",
    "LavaWallSmoothUD",
    "LavaWallSmoothLR",
    "FeatureWallSmoothRD2",
    "FeatureWallSmoothR2D",
    "FeatureWallSmoothR2U",
    "FeatureWallSmoothRU2",
    "FeatureWallSmoothL2U",
    "FeatureWallSmoothLU2",
    "FeatureWallSmoothL2D",
    "FeatureWallSmoothLD2",
    "FeatureWallSmoothLRUD",
    "FeatureWallSmoothRUD",
    "FeatureWallSmoothLRD",
    "FeatureWallSmoothLRU",
    "FeatureWallSmoothLUD",
    "FeatureWallSmoothRD",
    "FeatureWallSmoothRU",
    "FeatureWallSmoothLU",
    "FeatureWallSmoothLD",
    "FeatureWallSmoothUD",
    "FeatureWallSmoothLR",
    "StoneWallSmoothRD2",
    "StoneWallSmoothR2D",
    "StoneWallSmoothR2U",
    "StoneWallSmoothRU2",
    "StoneWallSmoothL2U",
    "StoneWallSmoothLU2",
    "StoneWallSmoothL2D",
    "StoneWallSmoothLD2",
    "StoneWallSmoothLRUD",
    "StoneWallSmoothRUD",
    "StoneWallSmoothLRD",
    "StoneWallSmoothLRU",
    "StoneWallSmoothLUD",
    "StoneWallSmoothRD",
    "StoneWallSmoothRU",
    "StoneWallSmoothLU",
    "StoneWallSmoothLD",
    "StoneWallSmoothUD",
    "StoneWallSmoothLR",
    "LavaFortification",
    "FeatureFortification",
    "LavaWallWorn1",
    "LavaWallWorn2",
    "LavaWallWorn3",
    "LavaWall",
    "FeatureWallWorn1",
    "FeatureWallWorn2",
    "FeatureWallWorn3",
    "FeatureWall",
    "StoneFloor1",
    "StoneFloor2",
    "StoneFloor3",
    "StoneFloor4",
    "LavaFloor1",
    "LavaFloor2",
    "LavaFloor3",
    "LavaFloor4",
    "FeatureFloor1",
    "FeatureFloor2",
    "FeatureFloor3",
    "FeatureFloor4",
    "GrassDarkFloor1",
    "GrassDarkFloor2",
    "GrassDarkFloor3",
    "GrassDarkFloor4",
    "SoilFloor1",
    "SoilFloor2",
    "SoilFloor3",
    "SoilFloor4",
    "SoilWetFloor1",
    "SoilWetFloor2",
    "SoilWetFloor3",
    "SoilWetFloor4",
    "FrozenFortification",
    "FrozenWallWorn1",
    "FrozenWallWorn2",
    "FrozenWallWorn3",
    "FrozenWall",
    "RiverN",
    "RiverS",
    "RiverE",
    "RiverW",
    "RiverNW",
    "RiverNE",
    "RiverSW",
    "RiverSE",
    "BrookN",
    "BrookS",
    "BrookE",
    "BrookW",
    "BrookNW",
    "BrookNE",
    "BrookSW",
    "BrookSE",
    "BrookTop",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    "GrassDryFloor1",
    "GrassDryFloor2",
    "GrassDryFloor3",
    "GrassDryFloor4",
    NULL,
    "SaplingDead",
    "ShrubDead",
    "GrassDeadFloor1",
    "GrassDeadFloor2",
    "GrassDeadFloor3",
    "GrassDeadFloor4",
    "GrassLightFloor1",
    "GrassLightFloor2",
    "GrassLightFloor3",
    "GrassLightFloor4",
    "StoneBoulder",
    "LavaBoulder",
    "FeatureBoulder",
    "StonePebbles1",
    "StonePebbles2",
    "StonePebbles3",
    "StonePebbles4",
    "LavaPebbles1",
    "LavaPebbles2",
    "LavaPebbles3",
    "LavaPebbles4",
    "FeaturePebbles1",
    "FeaturePebbles2",
    "FeaturePebbles3",
    "FeaturePebbles4",
    "MineralWallSmoothRD2",
    "MineralWallSmoothR2D",
    "MineralWallSmoothR2U",
    "MineralWallSmoothRU2",
    "MineralWallSmoothL2U",
    "MineralWallSmoothLU2",
    "MineralWallSmoothL2D",
    "MineralWallSmoothLD2",
    "MineralWallSmoothLRUD",
    "MineralWallSmoothRUD",
    "MineralWallSmoothLRD",
    "MineralWallSmoothLRU",
    "MineralWallSmoothLUD",
    "MineralWallSmoothRD",
    "MineralWallSmoothRU",
    "MineralWallSmoothLU",
    "MineralWallSmoothLD",
    "MineralWallSmoothUD",
    "MineralWallSmoothLR",
    "MineralFortification",
    "MineralWallWorn1",
    "MineralWallWorn2",
    "MineralWallWorn3",
    "MineralWall",
    "MineralFloor1",
    "MineralFloor2",
    "MineralFloor3",
    "MineralFloor4",
    "MineralBoulder",
    "MineralPebbles1",
    "MineralPebbles2",
    "MineralPebbles3",
    "MineralPebbles4",
    "FrozenWallSmoothRD2",
    "FrozenWallSmoothR2D",
    "FrozenWallSmoothR2U",
    "FrozenWallSmoothRU2",
    "FrozenWallSmoothL2U",
    "FrozenWallSmoothLU2",
    "FrozenWallSmoothL2D",
    "FrozenWallSmoothLD2",
    "FrozenWallSmoothLRUD",
    "FrozenWallSmoothRUD",
    "FrozenWallSmoothLRD",
    "FrozenWallSmoothLRU",
    "FrozenWallSmoothLUD",
    "FrozenWallSmoothRD",
    "FrozenWallSmoothRU",
    "FrozenWallSmoothLU",
    "FrozenWallSmoothLD",
    "FrozenWallSmoothUD",
    "FrozenWallSmoothLR",
    "RiverRampN",
    "RiverRampS",
    "RiverRampE",
    "RiverRampW",
    "RiverRampNW",
    "RiverRampNE",
    "RiverRampSW",
    "RiverRampSE",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    "ConstructedFloor",
    "ConstructedFortification",
    "ConstructedPillar",
    "ConstructedWallRD2",
    "ConstructedWallR2D",
    "ConstructedWallR2U",
    "ConstructedWallRU2",
    "ConstructedWallL2U",
    "ConstructedWallLU2",
    "ConstructedWallL2D",
    "ConstructedWallLD2",
    "ConstructedWallLRUD",
    "ConstructedWallRUD",
    "ConstructedWallLRD",
    "ConstructedWallLRU",
    "ConstructedWallLUD",
    "ConstructedWallRD",
    "ConstructedWallRU",
    "ConstructedWallLU",
    "ConstructedWallLD",
    "ConstructedWallUD",
    "ConstructedWallLR",
    "ConstructedStairUD",
    "ConstructedStairD",
    "ConstructedStairU",
    "ConstructedRamp",
    "StoneFloorTrackN",
    "StoneFloorTrackS",
    "StoneFloorTrackE",
    "StoneFloorTrackW",
    "StoneFloorTrackNS",
    "StoneFloorTrackNE",
    "StoneFloorTrackNW",
    "StoneFloorTrackSE",
    "StoneFloorTrackSW",
    "StoneFloorTrackEW",
    "StoneFloorTrackNSE",
    "StoneFloorTrackNSW",
    "StoneFloorTrackNEW",
    "StoneFloorTrackSEW",
    "StoneFloorTrackNSEW",
    "LavaFloorTrackN",
    "LavaFloorTrackS",
    "LavaFloorTrackE",
    "LavaFloorTrackW",
    "LavaFloorTrackNS",
    "LavaFloorTrackNE",
    "LavaFloorTrackNW",
    "LavaFloorTrackSE",
    "LavaFloorTrackSW",
    "LavaFloorTrackEW",
    "LavaFloorTrackNSE",
    "LavaFloorTrackNSW",
    "LavaFloorTrackNEW",
    "LavaFloorTrackSEW",
    "LavaFloorTrackNSEW",
    "FeatureFloorTrackN",
    "FeatureFloorTrackS",
    "FeatureFloorTrackE",
    "FeatureFloorTrackW",
    "FeatureFloorTrackNS",
    "FeatureFloorTrackNE",
    "FeatureFloorTrackNW",
    "FeatureFloorTrackSE",
    "FeatureFloorTrackSW",
    "FeatureFloorTrackEW",
    "FeatureFloorTrackNSE",
    "FeatureFloorTrackNSW",
    "FeatureFloorTrackNEW",
    "FeatureFloorTrackSEW",
    "FeatureFloorTrackNSEW",
    "MineralFloorTrackN",
    "MineralFloorTrackS",
    "MineralFloorTrackE",
    "MineralFloorTrackW",
    "MineralFloorTrackNS",
    "MineralFloorTrackNE",
    "MineralFloorTrackNW",
    "MineralFloorTrackSE",
    "MineralFloorTrackSW",
    "MineralFloorTrackEW",
    "MineralFloorTrackNSE",
    "MineralFloorTrackNSW",
    "MineralFloorTrackNEW",
    "MineralFloorTrackSEW",
    "MineralFloorTrackNSEW",
    "FrozenFloorTrackN",
    "FrozenFloorTrackS",
    "FrozenFloorTrackE",
    "FrozenFloorTrackW",
    "FrozenFloorTrackNS",
    "FrozenFloorTrackNE",
    "FrozenFloorTrackNW",
    "FrozenFloorTrackSE",
    "FrozenFloorTrackSW",
    "FrozenFloorTrackEW",
    "FrozenFloorTrackNSE",
    "FrozenFloorTrackNSW",
    "FrozenFloorTrackNEW",
    "FrozenFloorTrackSEW",
    "FrozenFloorTrackNSEW",
    "ConstructedFloorTrackN",
    "ConstructedFloorTrackS",
    "ConstructedFloorTrackE",
    "ConstructedFloorTrackW",
    "ConstructedFloorTrackNS",
    "ConstructedFloorTrackNE",
    "ConstructedFloorTrackNW",
    "ConstructedFloorTrackSE",
    "ConstructedFloorTrackSW",
    "ConstructedFloorTrackEW",
    "ConstructedFloorTrackNSE",
    "ConstructedFloorTrackNSW",
    "ConstructedFloorTrackNEW",
    "ConstructedFloorTrackSEW",
    "ConstructedFloorTrackNSEW",
    "StoneRampTrackN",
    "StoneRampTrackS",
    "StoneRampTrackE",
    "StoneRampTrackW",
    "StoneRampTrackNS",
    "StoneRampTrackNE",
    "StoneRampTrackNW",
    "StoneRampTrackSE",
    "StoneRampTrackSW",
    "StoneRampTrackEW",
    "StoneRampTrackNSE",
    "StoneRampTrackNSW",
    "StoneRampTrackNEW",
    "StoneRampTrackSEW",
    "StoneRampTrackNSEW",
    "LavaRampTrackN",
    "LavaRampTrackS",
    "LavaRampTrackE",
    "LavaRampTrackW",
    "LavaRampTrackNS",
    "LavaRampTrackNE",
    "LavaRampTrackNW",
    "LavaRampTrackSE",
    "LavaRampTrackSW",
    "LavaRampTrackEW",
    "LavaRampTrackNSE",
    "LavaRampTrackNSW",
    "LavaRampTrackNEW",
    "LavaRampTrackSEW",
    "LavaRampTrackNSEW",
    "FeatureRampTrackN",
    "FeatureRampTrackS",
    "FeatureRampTrackE",
    "FeatureRampTrackW",
    "FeatureRampTrackNS",
    "FeatureRampTrackNE",
    "FeatureRampTrackNW",
    "FeatureRampTrackSE",
    "FeatureRampTrackSW",
    "FeatureRampTrackEW",
    "FeatureRampTrackNSE",
    "FeatureRampTrackNSW",
    "FeatureRampTrackNEW",
    "FeatureRampTrackSEW",
    "FeatureRampTrackNSEW",
    "MineralRampTrackN",
    "MineralRampTrackS",
    "MineralRampTrackE",
    "MineralRampTrackW",
    "MineralRampTrackNS",
    "MineralRampTrackNE",
    "MineralRampTrackNW",
    "MineralRampTrackSE",
    "MineralRampTrackSW",
    "MineralRampTrackEW",
    "MineralRampTrackNSE",
    "MineralRampTrackNSW",
    "MineralRampTrackNEW",
    "MineralRampTrackSEW",
    "MineralRampTrackNSEW",
    "FrozenRampTrackN",
    "FrozenRampTrackS",
    "FrozenRampTrackE",
    "FrozenRampTrackW",
    "FrozenRampTrackNS",
    "FrozenRampTrackNE",
    "FrozenRampTrackNW",
    "FrozenRampTrackSE",
    "FrozenRampTrackSW",
    "FrozenRampTrackEW",
    "FrozenRampTrackNSE",
    "FrozenRampTrackNSW",
    "FrozenRampTrackNEW",
    "FrozenRampTrackSEW",
    "FrozenRampTrackNSEW",
    "ConstructedRampTrackN",
    "ConstructedRampTrackS",
    "ConstructedRampTrackE",
    "ConstructedRampTrackW",
    "ConstructedRampTrackNS",
    "ConstructedRampTrackNE",
    "ConstructedRampTrackNW",
    "ConstructedRampTrackSE",
    "ConstructedRampTrackSW",
    "ConstructedRampTrackEW",
    "ConstructedRampTrackNSE",
    "ConstructedRampTrackNSW",
    "ConstructedRampTrackNEW",
    "ConstructedRampTrackSEW",
    "ConstructedRampTrackNSEW"
  };
  const enum_traits<tiletype>::attr_entry_type enum_traits<tiletype>::attr_table[695+1] = {
    { "void", tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "ramp top", tiletype_shape::RAMP_TOP, tiletype_material::AIR, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "murky pool", tiletype_shape::FLOOR, tiletype_material::POOL, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "murky pool slope", tiletype_shape::RAMP, tiletype_material::POOL, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "underworld gate up", tiletype_shape::STAIR_UP, tiletype_material::UNDERWORLD_GATE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "underworld gate down", tiletype_shape::STAIR_DOWN, tiletype_material::UNDERWORLD_GATE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "underworld gate up/down", tiletype_shape::STAIR_UPDOWN, tiletype_material::UNDERWORLD_GATE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "driftwood", tiletype_shape::FLOOR, tiletype_material::DRIFTWOOD, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "ice stair up/down", tiletype_shape::STAIR_UPDOWN, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "ice stair down", tiletype_shape::STAIR_DOWN, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "ice stair up", tiletype_shape::STAIR_UP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "open space", tiletype_shape::EMPTY, tiletype_material::AIR, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "shrub", tiletype_shape::SHRUB, tiletype_material::PLANT, tiletype_variant::NONE, tiletype_special::NORMAL, "--------" },
    { "chasm", tiletype_shape::ENDLESS_PIT, tiletype_material::AIR, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "obsidian stair up/down", tiletype_shape::STAIR_UPDOWN, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "obsidian stair down", tiletype_shape::STAIR_DOWN, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "obsidian stair up", tiletype_shape::STAIR_UP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "soil stair up/down", tiletype_shape::STAIR_UPDOWN, tiletype_material::SOIL, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "soil stair down", tiletype_shape::STAIR_DOWN, tiletype_material::SOIL, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "soil stair up", tiletype_shape::STAIR_UP, tiletype_material::SOIL, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "eerie pit", tiletype_shape::ENDLESS_PIT, tiletype_material::HFS, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "smooth stone floor", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { "smooth obsidian floor", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { "smooth featstone floor", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { "smooth vein floor", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { "smooth ice floor", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "light grass stair up/down", tiletype_shape::STAIR_UPDOWN, tiletype_material::GRASS_LIGHT, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "light grass stair down", tiletype_shape::STAIR_DOWN, tiletype_material::GRASS_LIGHT, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "light grass stair up", tiletype_shape::STAIR_UP, tiletype_material::GRASS_LIGHT, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "dark grass stair up/down", tiletype_shape::STAIR_UPDOWN, tiletype_material::GRASS_DARK, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "dark grass stair down", tiletype_shape::STAIR_DOWN, tiletype_material::GRASS_DARK, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "dark grass stair up", tiletype_shape::STAIR_UP, tiletype_material::GRASS_DARK, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "stone stair up/down", tiletype_shape::STAIR_UPDOWN, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "stone stair down", tiletype_shape::STAIR_DOWN, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "stone stair up", tiletype_shape::STAIR_UP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "vein stair up/down", tiletype_shape::STAIR_UPDOWN, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "vein stair down", tiletype_shape::STAIR_DOWN, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "vein stair up", tiletype_shape::STAIR_UP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "featstone stair up/down", tiletype_shape::STAIR_UPDOWN, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "featstone stair down", tiletype_shape::STAIR_DOWN, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "featstone stair up", tiletype_shape::STAIR_UP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "stone fortification", tiletype_shape::FORTIFICATION, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "campfire", tiletype_shape::FLOOR, tiletype_material::CAMPFIRE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "fire", tiletype_shape::FLOOR, tiletype_material::FIRE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "fire", tiletype_shape::WALL, tiletype_material::FIRE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "fire", tiletype_shape::BRANCH, tiletype_material::FIRE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "fire", tiletype_shape::TWIG, tiletype_material::FIRE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "fire", tiletype_shape::WALL, tiletype_material::FIRE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "fire", tiletype_shape::RAMP, tiletype_material::FIRE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "fire", tiletype_shape::FLOOR, tiletype_material::FIRE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "stone pillar", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { "obsidian pillar", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { "featstone pillar", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { "vein pillar", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { "ice pillar", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "waterfall", tiletype_shape::FLOOR, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::WATERFALL, "--------" },
    { "river source", tiletype_shape::FLOOR, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::RIVER_SOURCE, "--------" },
    { "sloping roots", tiletype_shape::RAMP, tiletype_material::ROOT, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "roots", tiletype_shape::WALL, tiletype_material::ROOT, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "trunk pillar", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { "sloping trunk", tiletype_shape::RAMP, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "trunk (N)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "N" },
    { "trunk (S)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "S" },
    { "trunk (E)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "E" },
    { "trunk (W)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "W" },
    { "trunk (NW)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "NW" },
    { "trunk (NE)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "NE" },
    { "trunk (SW)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "SW" },
    { "trunk (SE)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "SE" },
    { "trunk branch (N)", tiletype_shape::TRUNK_BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "N" },
    { "trunk branch (S)", tiletype_shape::TRUNK_BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "S" },
    { "trunk branch (E)", tiletype_shape::TRUNK_BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "E" },
    { "trunk branch (W)", tiletype_shape::TRUNK_BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "W" },
    { "branch (NS)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "NS" },
    { "branch (EW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "EW" },
    { "smooth branch", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { "smooth dead branch", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::SMOOTH_DEAD, "--------" },
    { "branch (NW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "NW" },
    { "branch (NE)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "NE" },
    { "branch (SW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "SW" },
    { "branch (SE)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "SE" },
    { "branches", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "twigs", tiletype_shape::TWIG, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "cap ramp", tiletype_shape::RAMP, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "cap pillar", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { "cap wall (N)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::NONE, "N" },
    { "cap wall (S)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::NONE, "S" },
    { "cap wall (E)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::NONE, "E" },
    { "cap wall (W)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::NONE, "W" },
    { "cap wall (NW)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::NONE, "NW" },
    { "cap wall (NE)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::NONE, "NE" },
    { "cap wall (SW)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::NONE, "SW" },
    { "cap wall (SE)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::NONE, "SE" },
    { "cap floor", tiletype_shape::FLOOR, tiletype_material::MUSHROOM, tiletype_variant::VAR_1, tiletype_special::NONE, "--------" },
    { "cap floor", tiletype_shape::FLOOR, tiletype_material::MUSHROOM, tiletype_variant::VAR_2, tiletype_special::NONE, "--------" },
    { "cap floor", tiletype_shape::FLOOR, tiletype_material::MUSHROOM, tiletype_variant::VAR_3, tiletype_special::NONE, "--------" },
    { "cap floor", tiletype_shape::FLOOR, tiletype_material::MUSHROOM, tiletype_variant::VAR_4, tiletype_special::NONE, "--------" },
    { "dead sloping roots", tiletype_shape::RAMP, tiletype_material::ROOT, tiletype_variant::NONE, tiletype_special::DEAD, "--------" },
    { "dead roots", tiletype_shape::WALL, tiletype_material::ROOT, tiletype_variant::NONE, tiletype_special::DEAD, "--------" },
    { "dead trunk pillar", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::SMOOTH_DEAD, "--------" },
    { "dead sloping trunk", tiletype_shape::RAMP, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "--------" },
    { "dead trunk (N)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "N" },
    { "dead trunk (S)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "S" },
    { "dead trunk (E)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "E" },
    { "dead trunk (W)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "W" },
    { "dead trunk (NW)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "NW" },
    { "dead trunk (NE)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "NE" },
    { "dead trunk (SW)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "SW" },
    { "dead trunk (SE)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "SE" },
    { "dead trunk branch (N)", tiletype_shape::TRUNK_BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "N" },
    { "dead trunk branch (S)", tiletype_shape::TRUNK_BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "S" },
    { "dead trunk branch (E)", tiletype_shape::TRUNK_BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "E" },
    { "dead trunk branch (W)", tiletype_shape::TRUNK_BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "W" },
    { "dead branch (NS)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "NS" },
    { "dead branch (EW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "EW" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "dead branch (NW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "NW" },
    { "dead branch (NE)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "NE" },
    { "dead branch (SW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "SW" },
    { "dead branch (SE)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "SE" },
    { "dead branches", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "--------" },
    { "dead twigs", tiletype_shape::TWIG, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "--------" },
    { "dead cap ramp", tiletype_shape::RAMP, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::DEAD, "--------" },
    { "dead cap pillar", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::SMOOTH_DEAD, "--------" },
    { "dead cap wall (N)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::DEAD, "N" },
    { "dead cap wall (S)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::DEAD, "S" },
    { "dead cap wall (E)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::DEAD, "E" },
    { "dead cap wall (W)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::DEAD, "W" },
    { "dead cap wall (NW)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::DEAD, "NW" },
    { "dead cap wall (NE)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::DEAD, "NE" },
    { "dead cap wall (SW)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::DEAD, "SW" },
    { "dead cap wall (SE)", tiletype_shape::WALL, tiletype_material::MUSHROOM, tiletype_variant::NONE, tiletype_special::DEAD, "SE" },
    { "dead cap floor", tiletype_shape::FLOOR, tiletype_material::MUSHROOM, tiletype_variant::VAR_1, tiletype_special::DEAD, "--------" },
    { "dead cap floor", tiletype_shape::FLOOR, tiletype_material::MUSHROOM, tiletype_variant::VAR_2, tiletype_special::DEAD, "--------" },
    { "dead cap floor", tiletype_shape::FLOOR, tiletype_material::MUSHROOM, tiletype_variant::VAR_3, tiletype_special::DEAD, "--------" },
    { "dead cap floor", tiletype_shape::FLOOR, tiletype_material::MUSHROOM, tiletype_variant::VAR_4, tiletype_special::DEAD, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "worn 1 stone wall", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::WORN_1, "--------" },
    { "worn 2 stone wall", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::WORN_2, "--------" },
    { "worn 3 stone wall", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::WORN_3, "--------" },
    { "branches (NSE)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "NSE" },
    { "branches (NSW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "NSW" },
    { "branches (NEW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "NEW" },
    { "branches (SEW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "SEW" },
    { "branches (NSEW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "NSEW" },
    { "dead branches (NSW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "NSW" },
    { "dead branches (NEW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "NEW" },
    { "dead branches (NEW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "NEW" },
    { "dead branches (SEW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "SEW" },
    { "dead branches (NSEW)", tiletype_shape::BRANCH, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "NSEW" },
    { "trunk (NSE)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "NSE" },
    { "trunk (NSW)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "NSW" },
    { "trunk (NEW)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "NEW" },
    { "trunk (SEW)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "SEW" },
    { "trunk (NS)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "NS" },
    { "trunk (EW)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "EW" },
    { "trunk (NSEW)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "NSEW" },
    { "trunk interior", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "dead trunk (NSE)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "NSE" },
    { "dead trunk (NSW)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "NSW" },
    { "dead trunk (NEW)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "NEW" },
    { "dead trunk (SEW)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "SEW" },
    { "dead trunk (NS)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "NS" },
    { "dead trunk (EW)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "EW" },
    { "dead trunk (NSEW)", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "NSEW" },
    { "dead trunk interior", tiletype_shape::WALL, tiletype_material::TREE, tiletype_variant::NONE, tiletype_special::DEAD, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "stone wall", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::NORMAL, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "sapling", tiletype_shape::SAPLING, tiletype_material::PLANT, tiletype_variant::NONE, tiletype_special::NORMAL, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "dry grass ramp", tiletype_shape::RAMP, tiletype_material::GRASS_DRY, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "dead grass ramp", tiletype_shape::RAMP, tiletype_material::GRASS_DEAD, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "light grass ramp", tiletype_shape::RAMP, tiletype_material::GRASS_LIGHT, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "dark grass ramp", tiletype_shape::RAMP, tiletype_material::GRASS_DARK, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "stone ramp", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "obsidian ramp", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "featstone ramp", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "vein ramp", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "soil ramp", tiletype_shape::RAMP, tiletype_material::SOIL, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "ashes", tiletype_shape::FLOOR, tiletype_material::ASHES, tiletype_variant::VAR_1, tiletype_special::NONE, "--------" },
    { "ashes", tiletype_shape::FLOOR, tiletype_material::ASHES, tiletype_variant::VAR_2, tiletype_special::NONE, "--------" },
    { "ashes", tiletype_shape::FLOOR, tiletype_material::ASHES, tiletype_variant::VAR_3, tiletype_special::NONE, "--------" },
    { "ice ramp", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "ice floor", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::VAR_2, tiletype_special::NORMAL, "--------" },
    { "ice floor", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::VAR_3, tiletype_special::NORMAL, "--------" },
    { "ice floor", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::VAR_4, tiletype_special::NORMAL, "--------" },
    { "furrowed soil", tiletype_shape::FLOOR, tiletype_material::SOIL, tiletype_variant::NONE, tiletype_special::FURROWED, "--------" },
    { "ice floor", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::VAR_1, tiletype_special::NORMAL, "--------" },
    { "semi-molten rock", tiletype_shape::WALL, tiletype_material::MAGMA, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "magma flow", tiletype_shape::FLOOR, tiletype_material::MAGMA, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "soil wall", tiletype_shape::WALL, tiletype_material::SOIL, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "glowing barrier", tiletype_shape::WALL, tiletype_material::HFS, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "glowing floor", tiletype_shape::FLOOR, tiletype_material::HFS, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "smooth obsidian wall RD2", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--SS--E-" },
    { "smooth obsidian wall R2D", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S---EE" },
    { "smooth obsidian wall R2U", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-----EE" },
    { "smooth obsidian wall RU2", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "NN----E-" },
    { "smooth obsidian wall L2U", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---WW--" },
    { "smooth obsidian wall LU2", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "NN--W---" },
    { "smooth obsidian wall L2D", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-WW--" },
    { "smooth obsidian wall LD2", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--SSW---" },
    { "smooth obsidian wall LRUD", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-W-E-" },
    { "smooth obsidian wall RUD", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S---E-" },
    { "smooth obsidian wall LRD", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-W-E-" },
    { "smooth obsidian wall LRU", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---W-E-" },
    { "smooth obsidian wall LUD", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-W---" },
    { "smooth obsidian wall RD", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S---E-" },
    { "smooth obsidian wall RU", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-----E-" },
    { "smooth obsidian wall LU", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---W---" },
    { "smooth obsidian wall LD", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-W---" },
    { "smooth obsidian wall UD", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-----" },
    { "smooth obsidian wall LR", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "----W-E-" },
    { "smooth featstone wall RD2", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--SS--E-" },
    { "smooth featstone wall R2D", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S---EE" },
    { "smooth featstone wall R2U", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-----EE" },
    { "smooth featstone wall RU2", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "NN----E-" },
    { "smooth featstone wall L2U", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---WW--" },
    { "smooth featstone wall LU2", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "NN--W---" },
    { "smooth featstone wall L2D", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-WW--" },
    { "smooth featstone wall LD2", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--SSW---" },
    { "smooth featstone wall LRUD", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-W-E-" },
    { "smooth featstone wall RUD", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S---E-" },
    { "smooth featstone wall LRD", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-W-E-" },
    { "smooth featstone wall LRU", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---W-E-" },
    { "smooth featstone wall LUD", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-W---" },
    { "smooth featstone wall RD", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S---E-" },
    { "smooth featstone wall RU", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-----E-" },
    { "smooth featstone wall LU", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---W---" },
    { "smooth featstone wall LD", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-W---" },
    { "smooth featstone wall UD", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-----" },
    { "smooth featstone wall LR", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::SMOOTH, "----W-E-" },
    { "smooth stone wall RD2", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--SS--E-" },
    { "smooth stone wall R2D", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S---EE" },
    { "smooth stone wall R2U", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-----EE" },
    { "smooth stone wall RU2", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "NN----E-" },
    { "smooth stone wall L2U", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---WW--" },
    { "smooth stone wall LU2", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "NN--W---" },
    { "smooth stone wall L2D", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-WW--" },
    { "smooth stone wall LD2", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--SSW---" },
    { "smooth stone wall LRUD", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-W-E-" },
    { "smooth stone wall RUD", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S---E-" },
    { "smooth stone wall LRD", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-W-E-" },
    { "smooth stone wall LRU", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---W-E-" },
    { "smooth stone wall LUD", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-W---" },
    { "smooth stone wall RD", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S---E-" },
    { "smooth stone wall RU", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-----E-" },
    { "smooth stone wall LU", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---W---" },
    { "smooth stone wall LD", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-W---" },
    { "smooth stone wall UD", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-----" },
    { "smooth stone wall LR", tiletype_shape::WALL, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::SMOOTH, "----W-E-" },
    { "obsidian fortification", tiletype_shape::FORTIFICATION, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "featstone fortification", tiletype_shape::FORTIFICATION, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "worn 1 obsidian wall", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::WORN_1, "--------" },
    { "worn 2 obsidian wall", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::WORN_2, "--------" },
    { "worn 3 obsidian wall", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::WORN_3, "--------" },
    { "obsidian wall", tiletype_shape::WALL, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::NORMAL, "--------" },
    { "worn 1 featstone wall", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::WORN_1, "--------" },
    { "worn 2 featstone wall", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::WORN_2, "--------" },
    { "worn 3 featstone wall", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::WORN_3, "--------" },
    { "featstone wall", tiletype_shape::WALL, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::NORMAL, "--------" },
    { "stone floor", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::VAR_1, tiletype_special::NORMAL, "--------" },
    { "stone floor", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::VAR_2, tiletype_special::NORMAL, "--------" },
    { "stone floor", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::VAR_3, tiletype_special::NORMAL, "--------" },
    { "stone floor", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::VAR_4, tiletype_special::NORMAL, "--------" },
    { "obsidian floor", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::VAR_1, tiletype_special::NORMAL, "--------" },
    { "obsidian floor", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::VAR_2, tiletype_special::NORMAL, "--------" },
    { "obsidian floor", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::VAR_3, tiletype_special::NORMAL, "--------" },
    { "obsidian floor", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::VAR_4, tiletype_special::NORMAL, "--------" },
    { "featstone floor", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::VAR_1, tiletype_special::NORMAL, "--------" },
    { "featstone floor", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::VAR_2, tiletype_special::NORMAL, "--------" },
    { "featstone floor", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::VAR_3, tiletype_special::NORMAL, "--------" },
    { "featstone floor", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::VAR_4, tiletype_special::NORMAL, "--------" },
    { "dark grass", tiletype_shape::FLOOR, tiletype_material::GRASS_DARK, tiletype_variant::VAR_1, tiletype_special::NONE, "--------" },
    { "dark grass", tiletype_shape::FLOOR, tiletype_material::GRASS_DARK, tiletype_variant::VAR_2, tiletype_special::NONE, "--------" },
    { "dark grass", tiletype_shape::FLOOR, tiletype_material::GRASS_DARK, tiletype_variant::VAR_3, tiletype_special::NONE, "--------" },
    { "dark grass", tiletype_shape::FLOOR, tiletype_material::GRASS_DARK, tiletype_variant::VAR_4, tiletype_special::NONE, "--------" },
    { "soil floor", tiletype_shape::FLOOR, tiletype_material::SOIL, tiletype_variant::VAR_1, tiletype_special::NORMAL, "--------" },
    { "soil floor", tiletype_shape::FLOOR, tiletype_material::SOIL, tiletype_variant::VAR_2, tiletype_special::NORMAL, "--------" },
    { "soil floor", tiletype_shape::FLOOR, tiletype_material::SOIL, tiletype_variant::VAR_3, tiletype_special::NORMAL, "--------" },
    { "soil floor", tiletype_shape::FLOOR, tiletype_material::SOIL, tiletype_variant::VAR_4, tiletype_special::NORMAL, "--------" },
    { "wet soil floor", tiletype_shape::FLOOR, tiletype_material::SOIL, tiletype_variant::VAR_1, tiletype_special::WET, "--------" },
    { "wet soil floor", tiletype_shape::FLOOR, tiletype_material::SOIL, tiletype_variant::VAR_2, tiletype_special::WET, "--------" },
    { "wet soil floor", tiletype_shape::FLOOR, tiletype_material::SOIL, tiletype_variant::VAR_3, tiletype_special::WET, "--------" },
    { "wet soil floor", tiletype_shape::FLOOR, tiletype_material::SOIL, tiletype_variant::VAR_4, tiletype_special::WET, "--------" },
    { "ice fortification", tiletype_shape::FORTIFICATION, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "worn 1 ice wall", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::WORN_1, "--------" },
    { "worn 2 ice wall", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::WORN_2, "--------" },
    { "worn 3 ice wall", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::WORN_3, "--------" },
    { "ice wall", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::NORMAL, "--------" },
    { "river N", tiletype_shape::FLOOR, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NORMAL, "N" },
    { "river S", tiletype_shape::FLOOR, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NORMAL, "S" },
    { "river E", tiletype_shape::FLOOR, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NORMAL, "E" },
    { "river W", tiletype_shape::FLOOR, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NORMAL, "W" },
    { "river NW", tiletype_shape::FLOOR, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NORMAL, "NW" },
    { "river NE", tiletype_shape::FLOOR, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NORMAL, "NE" },
    { "river SW", tiletype_shape::FLOOR, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NORMAL, "SW" },
    { "river SE", tiletype_shape::FLOOR, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NORMAL, "SE" },
    { "brook bed N", tiletype_shape::BROOK_BED, tiletype_material::BROOK, tiletype_variant::NONE, tiletype_special::NONE, "N" },
    { "brook bed S", tiletype_shape::BROOK_BED, tiletype_material::BROOK, tiletype_variant::NONE, tiletype_special::NONE, "S" },
    { "brook bed E", tiletype_shape::BROOK_BED, tiletype_material::BROOK, tiletype_variant::NONE, tiletype_special::NONE, "E" },
    { "brook bed W", tiletype_shape::BROOK_BED, tiletype_material::BROOK, tiletype_variant::NONE, tiletype_special::NONE, "W" },
    { "brook bed NW", tiletype_shape::BROOK_BED, tiletype_material::BROOK, tiletype_variant::NONE, tiletype_special::NONE, "NW" },
    { "brook bed NE", tiletype_shape::BROOK_BED, tiletype_material::BROOK, tiletype_variant::NONE, tiletype_special::NONE, "NE" },
    { "brook bed SW", tiletype_shape::BROOK_BED, tiletype_material::BROOK, tiletype_variant::NONE, tiletype_special::NONE, "SW" },
    { "brook bed SE", tiletype_shape::BROOK_BED, tiletype_material::BROOK, tiletype_variant::NONE, tiletype_special::NONE, "SE" },
    { "brook top", tiletype_shape::BROOK_TOP, tiletype_material::BROOK, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "dry grass", tiletype_shape::FLOOR, tiletype_material::GRASS_DRY, tiletype_variant::VAR_1, tiletype_special::NONE, "--------" },
    { "dry grass", tiletype_shape::FLOOR, tiletype_material::GRASS_DRY, tiletype_variant::VAR_2, tiletype_special::NONE, "--------" },
    { "dry grass", tiletype_shape::FLOOR, tiletype_material::GRASS_DRY, tiletype_variant::VAR_3, tiletype_special::NONE, "--------" },
    { "dry grass", tiletype_shape::FLOOR, tiletype_material::GRASS_DRY, tiletype_variant::VAR_4, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "dead sapling", tiletype_shape::SAPLING, tiletype_material::PLANT, tiletype_variant::NONE, tiletype_special::DEAD, "--------" },
    { "dead shrub", tiletype_shape::SHRUB, tiletype_material::PLANT, tiletype_variant::NONE, tiletype_special::DEAD, "--------" },
    { "dead grass", tiletype_shape::FLOOR, tiletype_material::GRASS_DEAD, tiletype_variant::VAR_1, tiletype_special::NONE, "--------" },
    { "dead grass", tiletype_shape::FLOOR, tiletype_material::GRASS_DEAD, tiletype_variant::VAR_2, tiletype_special::NONE, "--------" },
    { "dead grass", tiletype_shape::FLOOR, tiletype_material::GRASS_DEAD, tiletype_variant::VAR_3, tiletype_special::NONE, "--------" },
    { "dead grass", tiletype_shape::FLOOR, tiletype_material::GRASS_DEAD, tiletype_variant::VAR_4, tiletype_special::NONE, "--------" },
    { "light grass", tiletype_shape::FLOOR, tiletype_material::GRASS_LIGHT, tiletype_variant::VAR_1, tiletype_special::NONE, "--------" },
    { "light grass", tiletype_shape::FLOOR, tiletype_material::GRASS_LIGHT, tiletype_variant::VAR_2, tiletype_special::NONE, "--------" },
    { "light grass", tiletype_shape::FLOOR, tiletype_material::GRASS_LIGHT, tiletype_variant::VAR_3, tiletype_special::NONE, "--------" },
    { "light grass", tiletype_shape::FLOOR, tiletype_material::GRASS_LIGHT, tiletype_variant::VAR_4, tiletype_special::NONE, "--------" },
    { "boulder", tiletype_shape::BOULDER, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "obsidian boulder", tiletype_shape::BOULDER, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "featstone boulder", tiletype_shape::BOULDER, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "stone pebbles", tiletype_shape::PEBBLES, tiletype_material::STONE, tiletype_variant::VAR_1, tiletype_special::NONE, "--------" },
    { "stone pebbles", tiletype_shape::PEBBLES, tiletype_material::STONE, tiletype_variant::VAR_2, tiletype_special::NONE, "--------" },
    { "stone pebbles", tiletype_shape::PEBBLES, tiletype_material::STONE, tiletype_variant::VAR_3, tiletype_special::NONE, "--------" },
    { "stone pebbles", tiletype_shape::PEBBLES, tiletype_material::STONE, tiletype_variant::VAR_4, tiletype_special::NONE, "--------" },
    { "obsidian pebbles", tiletype_shape::PEBBLES, tiletype_material::LAVA_STONE, tiletype_variant::VAR_1, tiletype_special::NONE, "--------" },
    { "obsidian pebbles", tiletype_shape::PEBBLES, tiletype_material::LAVA_STONE, tiletype_variant::VAR_2, tiletype_special::NONE, "--------" },
    { "obsidian pebbles", tiletype_shape::PEBBLES, tiletype_material::LAVA_STONE, tiletype_variant::VAR_3, tiletype_special::NONE, "--------" },
    { "obsidian pebbles", tiletype_shape::PEBBLES, tiletype_material::LAVA_STONE, tiletype_variant::VAR_4, tiletype_special::NONE, "--------" },
    { "featstone pebbles", tiletype_shape::PEBBLES, tiletype_material::FEATURE, tiletype_variant::VAR_1, tiletype_special::NONE, "--------" },
    { "featstone pebbles", tiletype_shape::PEBBLES, tiletype_material::FEATURE, tiletype_variant::VAR_2, tiletype_special::NONE, "--------" },
    { "featstone pebbles", tiletype_shape::PEBBLES, tiletype_material::FEATURE, tiletype_variant::VAR_3, tiletype_special::NONE, "--------" },
    { "featstone pebbles", tiletype_shape::PEBBLES, tiletype_material::FEATURE, tiletype_variant::VAR_4, tiletype_special::NONE, "--------" },
    { "smooth vein wall RD2", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "--SS--E-" },
    { "smooth vein wall R2D", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S---EE" },
    { "smooth vein wall R2U", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-----EE" },
    { "smooth vein wall RU2", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "NN----E-" },
    { "smooth vein wall L2U", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---WW--" },
    { "smooth vein wall LU2", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "NN--W---" },
    { "smooth vein wall L2D", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-WW--" },
    { "smooth vein wall LD2", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "--SSW---" },
    { "smooth vein wall LRUD", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-W-E-" },
    { "smooth vein wall RUD", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S---E-" },
    { "smooth vein wall LRD", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-W-E-" },
    { "smooth vein wall LRU", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---W-E-" },
    { "smooth vein wall LUD", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-W---" },
    { "smooth vein wall RD", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S---E-" },
    { "smooth vein wall RU", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-----E-" },
    { "smooth vein wall LU", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---W---" },
    { "smooth vein wall LD", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-W---" },
    { "smooth vein wall UD", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-----" },
    { "smooth vein wall LR", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::SMOOTH, "----W-E-" },
    { "vein fortification", tiletype_shape::FORTIFICATION, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "worn 1 vein wall", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::WORN_1, "--------" },
    { "worn 2 vein wall", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::WORN_2, "--------" },
    { "worn 3 vein wall", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::WORN_3, "--------" },
    { "vein wall", tiletype_shape::WALL, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::NORMAL, "--------" },
    { "vein floor", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::VAR_1, tiletype_special::NORMAL, "--------" },
    { "vein floor", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::VAR_2, tiletype_special::NORMAL, "--------" },
    { "vein floor", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::VAR_3, tiletype_special::NORMAL, "--------" },
    { "vein floor", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::VAR_4, tiletype_special::NORMAL, "--------" },
    { "vein boulder", tiletype_shape::BOULDER, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "vein pebbles", tiletype_shape::PEBBLES, tiletype_material::MINERAL, tiletype_variant::VAR_1, tiletype_special::NONE, "--------" },
    { "vein pebbles", tiletype_shape::PEBBLES, tiletype_material::MINERAL, tiletype_variant::VAR_2, tiletype_special::NONE, "--------" },
    { "vein pebbles", tiletype_shape::PEBBLES, tiletype_material::MINERAL, tiletype_variant::VAR_3, tiletype_special::NONE, "--------" },
    { "vein pebbles", tiletype_shape::PEBBLES, tiletype_material::MINERAL, tiletype_variant::VAR_4, tiletype_special::NONE, "--------" },
    { "smooth ice wall RD2", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "--SS--E-" },
    { "smooth ice wall R2D", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S---EE" },
    { "smooth ice wall R2U", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-----EE" },
    { "smooth ice wall RU2", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "NN----E-" },
    { "smooth ice wall L2U", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---WW--" },
    { "smooth ice wall LU2", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "NN--W---" },
    { "smooth ice wall L2D", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-WW--" },
    { "smooth ice wall LD2", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "--SSW---" },
    { "smooth ice wall LRUD", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-W-E-" },
    { "smooth ice wall RUD", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S---E-" },
    { "smooth ice wall LRD", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-W-E-" },
    { "smooth ice wall LRU", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---W-E-" },
    { "smooth ice wall LUD", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-W---" },
    { "smooth ice wall RD", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S---E-" },
    { "smooth ice wall RU", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-----E-" },
    { "smooth ice wall LU", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---W---" },
    { "smooth ice wall LD", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-W---" },
    { "smooth ice wall UD", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-----" },
    { "smooth ice wall LR", tiletype_shape::WALL, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::SMOOTH, "----W-E-" },
    { "river ramp N", tiletype_shape::RAMP, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NONE, "N" },
    { "river ramp S", tiletype_shape::RAMP, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NONE, "S" },
    { "river ramp E", tiletype_shape::RAMP, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NONE, "E" },
    { "river ramp W", tiletype_shape::RAMP, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NONE, "W" },
    { "river ramp NW", tiletype_shape::RAMP, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NONE, "NW" },
    { "river ramp NE", tiletype_shape::RAMP, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NONE, "NE" },
    { "river ramp SW", tiletype_shape::RAMP, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NONE, "SW" },
    { "river ramp SE", tiletype_shape::RAMP, tiletype_material::RIVER, tiletype_variant::NONE, tiletype_special::NONE, "SE" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "constructed floor", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { "constructed fortification", tiletype_shape::FORTIFICATION, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "constructed pillar", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "--------" },
    { "constructed wall RD2", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "--SS--E-" },
    { "constructed wall R2D", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S---EE" },
    { "constructed wall R2U", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-----EE" },
    { "constructed wall RU2", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "NN----E-" },
    { "constructed wall L2U", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---WW--" },
    { "constructed wall LU2", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "NN--W---" },
    { "constructed wall L2D", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-WW--" },
    { "constructed wall LD2", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "--SSW---" },
    { "constructed wall LRUD", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-W-E-" },
    { "constructed wall RUD", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S---E-" },
    { "constructed wall LRD", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-W-E-" },
    { "constructed wall LRU", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---W-E-" },
    { "constructed wall LUD", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-W---" },
    { "constructed wall RD", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S---E-" },
    { "constructed wall RU", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-----E-" },
    { "constructed wall LU", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "N---W---" },
    { "constructed wall LD", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "--S-W---" },
    { "constructed wall UD", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "N-S-----" },
    { "constructed wall LR", tiletype_shape::WALL, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::SMOOTH, "----W-E-" },
    { "constructed stair up/down", tiletype_shape::STAIR_UPDOWN, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "constructed stair down", tiletype_shape::STAIR_DOWN, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "constructed stair up", tiletype_shape::STAIR_UP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "constructed ramp", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::NONE, "--------" },
    { "stone floor track N", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "N" },
    { "stone floor track S", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "S" },
    { "stone floor track E", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "E" },
    { "stone floor track W", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "W" },
    { "stone floor track NS", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NS" },
    { "stone floor track NE", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NE" },
    { "stone floor track NW", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NW" },
    { "stone floor track SE", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "SE" },
    { "stone floor track SW", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "SW" },
    { "stone floor track EW", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "EW" },
    { "stone floor track NSE", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NSE" },
    { "stone floor track NSW", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NSW" },
    { "stone floor track NEW", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NEW" },
    { "stone floor track SEW", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "SEW" },
    { "stone floor track NSEW", tiletype_shape::FLOOR, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NSEW" },
    { "obsidian floor track N", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "N" },
    { "obsidian floor track S", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "S" },
    { "obsidian floor track E", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "E" },
    { "obsidian floor track W", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "W" },
    { "obsidian floor track NS", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NS" },
    { "obsidian floor track NE", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NE" },
    { "obsidian floor track NW", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NW" },
    { "obsidian floor track SE", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "SE" },
    { "obsidian floor track SW", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "SW" },
    { "obsidian floor track EW", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "EW" },
    { "obsidian floor track NSE", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NSE" },
    { "obsidian floor track NSW", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NSW" },
    { "obsidian floor track NEW", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NEW" },
    { "obsidian floor track SEW", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "SEW" },
    { "obsidian floor track NSEW", tiletype_shape::FLOOR, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NSEW" },
    { "featstone floor track N", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "N" },
    { "featstone floor track S", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "S" },
    { "featstone floor track E", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "E" },
    { "featstone floor track W", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "W" },
    { "featstone floor track NS", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "NS" },
    { "featstone floor track NE", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "NE" },
    { "featstone floor track NW", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "NW" },
    { "featstone floor track SE", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "SE" },
    { "featstone floor track SW", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "SW" },
    { "featstone floor track EW", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "EW" },
    { "featstone floor track NSE", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "NSE" },
    { "featstone floor track NSW", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "NSW" },
    { "featstone floor track NEW", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "NEW" },
    { "featstone floor track SEW", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "SEW" },
    { "featstone floor track NSEW", tiletype_shape::FLOOR, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "NSEW" },
    { "vein floor track N", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "N" },
    { "vein floor track S", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "S" },
    { "vein floor track E", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "E" },
    { "vein floor track W", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "W" },
    { "vein floor track NS", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "NS" },
    { "vein floor track NE", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "NE" },
    { "vein floor track NW", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "NW" },
    { "vein floor track SE", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "SE" },
    { "vein floor track SW", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "SW" },
    { "vein floor track EW", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "EW" },
    { "vein floor track NSE", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "NSE" },
    { "vein floor track NSW", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "NSW" },
    { "vein floor track NEW", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "NEW" },
    { "vein floor track SEW", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "SEW" },
    { "vein floor track NSEW", tiletype_shape::FLOOR, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "NSEW" },
    { "ice floor track N", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "N" },
    { "ice floor track S", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "S" },
    { "ice floor track E", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "E" },
    { "ice floor track W", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "W" },
    { "ice floor track NS", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "NS" },
    { "ice floor track NE", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "NE" },
    { "ice floor track NW", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "NW" },
    { "ice floor track SE", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "SE" },
    { "ice floor track SW", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "SW" },
    { "ice floor track EW", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "EW" },
    { "ice floor track NSE", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "NSE" },
    { "ice floor track NSW", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "NSW" },
    { "ice floor track NEW", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "NEW" },
    { "ice floor track SEW", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "SEW" },
    { "ice floor track NSEW", tiletype_shape::FLOOR, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "NSEW" },
    { "constructed floor track N", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "N" },
    { "constructed floor track S", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "S" },
    { "constructed floor track E", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "E" },
    { "constructed floor track W", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "W" },
    { "constructed floor track NS", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "NS" },
    { "constructed floor track NE", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "NE" },
    { "constructed floor track NW", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "NW" },
    { "constructed floor track SE", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "SE" },
    { "constructed floor track SW", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "SW" },
    { "constructed floor track EW", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "EW" },
    { "constructed floor track NSE", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "NSE" },
    { "constructed floor track NSW", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "NSW" },
    { "constructed floor track NEW", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "NEW" },
    { "constructed floor track SEW", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "SEW" },
    { "constructed floor track NSEW", tiletype_shape::FLOOR, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "NSEW" },
    { "stone ramp track N", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "N" },
    { "stone ramp track S", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "S" },
    { "stone ramp track E", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "E" },
    { "stone ramp track W", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "W" },
    { "stone ramp track NS", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NS" },
    { "stone ramp track NE", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NE" },
    { "stone ramp track NW", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NW" },
    { "stone ramp track SE", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "SE" },
    { "stone ramp track SW", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "SW" },
    { "stone ramp track EW", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "EW" },
    { "stone ramp track NSE", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NSE" },
    { "stone ramp track NSW", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NSW" },
    { "stone ramp track NEW", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NEW" },
    { "stone ramp track SEW", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "SEW" },
    { "stone ramp track NSEW", tiletype_shape::RAMP, tiletype_material::STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NSEW" },
    { "obsidian ramp track N", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "N" },
    { "obsidian ramp track S", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "S" },
    { "obsidian ramp track E", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "E" },
    { "obsidian ramp track W", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "W" },
    { "obsidian ramp track NS", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NS" },
    { "obsidian ramp track NE", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NE" },
    { "obsidian ramp track NW", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NW" },
    { "obsidian ramp track SE", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "SE" },
    { "obsidian ramp track SW", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "SW" },
    { "obsidian ramp track EW", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "EW" },
    { "obsidian ramp track NSE", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NSE" },
    { "obsidian ramp track NSW", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NSW" },
    { "obsidian ramp track NEW", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NEW" },
    { "obsidian ramp track SEW", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "SEW" },
    { "obsidian ramp track NSEW", tiletype_shape::RAMP, tiletype_material::LAVA_STONE, tiletype_variant::NONE, tiletype_special::TRACK, "NSEW" },
    { "featstone ramp track N", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "N" },
    { "featstone ramp track S", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "S" },
    { "featstone ramp track E", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "E" },
    { "featstone ramp track W", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "W" },
    { "featstone ramp track NS", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "NS" },
    { "featstone ramp track NE", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "NE" },
    { "featstone ramp track NW", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "NW" },
    { "featstone ramp track SE", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "SE" },
    { "featstone ramp track SW", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "SW" },
    { "featstone ramp track EW", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "EW" },
    { "featstone ramp track NSE", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "NSE" },
    { "featstone ramp track NSW", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "NSW" },
    { "featstone ramp track NEW", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "NEW" },
    { "featstone ramp track SEW", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "SEW" },
    { "featstone ramp track NSEW", tiletype_shape::RAMP, tiletype_material::FEATURE, tiletype_variant::NONE, tiletype_special::TRACK, "NSEW" },
    { "vein ramp track N", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "N" },
    { "vein ramp track S", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "S" },
    { "vein ramp track E", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "E" },
    { "vein ramp track W", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "W" },
    { "vein ramp track NS", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "NS" },
    { "vein ramp track NE", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "NE" },
    { "vein ramp track NW", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "NW" },
    { "vein ramp track SE", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "SE" },
    { "vein ramp track SW", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "SW" },
    { "vein ramp track EW", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "EW" },
    { "vein ramp track NSE", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "NSE" },
    { "vein ramp track NSW", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "NSW" },
    { "vein ramp track NEW", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "NEW" },
    { "vein ramp track SEW", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "SEW" },
    { "vein ramp track NSEW", tiletype_shape::RAMP, tiletype_material::MINERAL, tiletype_variant::NONE, tiletype_special::TRACK, "NSEW" },
    { "ice ramp track N", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "N" },
    { "ice ramp track S", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "S" },
    { "ice ramp track E", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "E" },
    { "ice ramp track W", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "W" },
    { "ice ramp track NS", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "NS" },
    { "ice ramp track NE", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "NE" },
    { "ice ramp track NW", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "NW" },
    { "ice ramp track SE", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "SE" },
    { "ice ramp track SW", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "SW" },
    { "ice ramp track EW", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "EW" },
    { "ice ramp track NSE", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "NSE" },
    { "ice ramp track NSW", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "NSW" },
    { "ice ramp track NEW", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "NEW" },
    { "ice ramp track SEW", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "SEW" },
    { "ice ramp track NSEW", tiletype_shape::RAMP, tiletype_material::FROZEN_LIQUID, tiletype_variant::NONE, tiletype_special::TRACK, "NSEW" },
    { "constructed ramp track N", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "N" },
    { "constructed ramp track S", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "S" },
    { "constructed ramp track E", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "E" },
    { "constructed ramp track W", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "W" },
    { "constructed ramp track NS", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "NS" },
    { "constructed ramp track NE", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "NE" },
    { "constructed ramp track NW", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "NW" },
    { "constructed ramp track SE", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "SE" },
    { "constructed ramp track SW", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "SW" },
    { "constructed ramp track EW", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "EW" },
    { "constructed ramp track NSE", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "NSE" },
    { "constructed ramp track NSW", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "NSW" },
    { "constructed ramp track NEW", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "NEW" },
    { "constructed ramp track SEW", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "SEW" },
    { "constructed ramp track NSEW", tiletype_shape::RAMP, tiletype_material::CONSTRUCTION, tiletype_variant::NONE, tiletype_special::TRACK, "NSEW" },
    { NULL, tiletype_shape::NONE, tiletype_material::NONE, tiletype_variant::NONE, tiletype_special::NONE, "--------" }
  };
  const enum_traits<tiletype>::attr_entry_type & enum_traits<tiletype>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[695];
  }
  enum_identity identity_traits<tiletype>::identity(sizeof(tiletype), NULL, "tiletype", TID(int16_t), 0, 694, enum_traits<tiletype>::key_table,
                enum_traits<tiletype>::attr_table, &enum_traits<tiletype>::attr_entry_type::_identity);
  const char *const enum_traits<tiletype_material>::key_table[27] = {
    "NONE",
    "AIR",
    "SOIL",
    "STONE",
    "FEATURE",
    "LAVA_STONE",
    "MINERAL",
    "FROZEN_LIQUID",
    "CONSTRUCTION",
    "GRASS_LIGHT",
    "GRASS_DARK",
    "GRASS_DRY",
    "GRASS_DEAD",
    "PLANT",
    "HFS",
    "CAMPFIRE",
    "FIRE",
    "ASHES",
    "MAGMA",
    "DRIFTWOOD",
    "POOL",
    "BROOK",
    "RIVER",
    "ROOT",
    "TREE",
    "MUSHROOM",
    "UNDERWORLD_GATE"
  };
  const enum_traits<tiletype_material>::attr_entry_type enum_traits<tiletype_material>::attr_table[27+1] = {
    { NULL },
    { "empty" },
    { "ordinary soil. material depends on geology" },
    { "ordinary layer stone. material depends on geology" },
    { "map special stone. used for things like hell, curious structures, or adamantine tubes. material depends on local/global special" },
    { "lava stone created by mixing magma and water" },
    { "vein stone. material depends on mineral veins present" },
    { "frozen liquid. material depends on ice vein present (which also indicates what was on the tile before it froze)" },
    { "material depends on the construction present" },
    { "light grass" },
    { "dark grass" },
    { "dry grass" },
    { "dead grass" },
    { "plant" },
    { "the stuff glowing barriers/floors and eerie pits are made of - this makes them different from ordinary walls/floors and chasms" },
    { "human armies make them when they siege. original tile is lost?" },
    { "burning grass" },
    { "what remains from a fire" },
    { "material for semi-molten rock and magma flow tiles" },
    { "driftwood. normally shows up on beaches" },
    { "A pool. Gathers water while it's raining." },
    { "Brook beds and floors" },
    { "It's a riverbed. Basically a tile that doesn't get muddy." },
    { "tree root" },
    { "tree trunk/branch" },
    { "mushroom cap" },
    { "Underworld Gate" },
    { NULL }
  };
  const enum_traits<tiletype_material>::attr_entry_type & enum_traits<tiletype_material>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[27];
  }
  enum_identity identity_traits<tiletype_material>::identity(sizeof(tiletype_material), NULL, "tiletype_material", TID(int32_t), -1, 25, enum_traits<tiletype_material>::key_table,
                enum_traits<tiletype_material>::attr_table, &enum_traits<tiletype_material>::attr_entry_type::_identity);
  const char *const enum_traits<tiletype_shape>::key_table[20] = {
    "NONE",
    "EMPTY",
    "FLOOR",
    "BOULDER",
    "PEBBLES",
    "WALL",
    "FORTIFICATION",
    "STAIR_UP",
    "STAIR_DOWN",
    "STAIR_UPDOWN",
    "RAMP",
    "RAMP_TOP",
    "BROOK_BED",
    "BROOK_TOP",
    "BRANCH",
    "TRUNK_BRANCH",
    "TWIG",
    "SAPLING",
    "SHRUB",
    "ENDLESS_PIT"
  };
  const enum_traits<tiletype_shape>::attr_entry_type enum_traits<tiletype_shape>::attr_table[20+1] = {
    { NULL, tiletype_shape_basic::None, false, false, false, false, false, false },
    { NULL, tiletype_shape_basic::Open, true, true, true, true, false, false },
    { NULL, tiletype_shape_basic::Floor, false, true, true, false, true, false },
    { NULL, tiletype_shape_basic::Floor, false, true, true, false, true, false },
    { NULL, tiletype_shape_basic::Floor, false, true, true, false, true, false },
    { NULL, tiletype_shape_basic::Wall, false, false, false, false, false, false },
    { NULL, tiletype_shape_basic::Wall, false, false, true, false, false, false },
    { NULL, tiletype_shape_basic::Stair, false, true, true, false, true, true },
    { NULL, tiletype_shape_basic::Stair, true, true, true, true, true, false },
    { NULL, tiletype_shape_basic::Stair, true, true, true, true, true, true },
    { "ramps have no direction", tiletype_shape_basic::Ramp, false, true, true, false, true, true },
    { "used for pathing?", tiletype_shape_basic::Open, true, true, true, true, true, false },
    { "mineable, water-passable rock on the bottom of a brook", tiletype_shape_basic::Wall, false, false, true, false, false, false },
    { "water-passable floor on top of BROOK_BED tiles", tiletype_shape_basic::Floor, false, true, true, true, true, false },
    { "small tree branch", tiletype_shape_basic::Floor, false, true, true, true, true, false },
    { "large tree branch", tiletype_shape_basic::Floor, false, true, true, true, true, false },
    { "tiny tree branch, not strong enough to support creatures", tiletype_shape_basic::Open, true, true, true, true, false, false },
    { NULL, tiletype_shape_basic::Floor, false, true, true, false, true, false },
    { NULL, tiletype_shape_basic::Floor, false, true, true, false, true, false },
    { "a fake endless pit", tiletype_shape_basic::Open, false, true, true, false, true, false },
    { NULL, tiletype_shape_basic::None, false, false, false, false, false, false }
  };
  const enum_traits<tiletype_shape>::attr_entry_type & enum_traits<tiletype_shape>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[20];
  }
  enum_identity identity_traits<tiletype_shape>::identity(sizeof(tiletype_shape), NULL, "tiletype_shape", TID(int32_t), -1, 18, enum_traits<tiletype_shape>::key_table,
                enum_traits<tiletype_shape>::attr_table, &enum_traits<tiletype_shape>::attr_entry_type::_identity);
  const char *const enum_traits<tiletype_shape_basic>::key_table[6] = {
    "None",
    "Open",
    "Floor",
    "Ramp",
    "Wall",
    "Stair"
  };
  enum_identity identity_traits<tiletype_shape_basic>::identity(sizeof(tiletype_shape_basic), NULL, "tiletype_shape_basic", TID(int32_t), -1, 4, enum_traits<tiletype_shape_basic>::key_table,
                NULL, NULL);
  const char *const enum_traits<tiletype_special>::key_table[13] = {
    "NONE",
    "NORMAL",
    "RIVER_SOURCE",
    "WATERFALL",
    "SMOOTH",
    "FURROWED",
    "WET",
    "DEAD",
    "WORN_1",
    "WORN_2",
    "WORN_3",
    "TRACK",
    "SMOOTH_DEAD"
  };
  const enum_traits<tiletype_special>::attr_entry_type enum_traits<tiletype_special>::attr_table[13+1] = {
    { NULL },
    { "default for all tiles, nothing special about it" },
    { "river source, when it exists on a map" },
    { "waterfall from nowhere, used by cave rivers back in 40d" },
    { "smooth walls and floors, including constructions" },
    { "furrowed soil, left by roads/farms and removing constructions" },
    { "wet soil, found on beaches" },
    { "dead, used by plants" },
    { "partially (25%) mined walls" },
    { "partially (50%) mined walls" },
    { "partially (75%) mined walls" },
    { "mine cart track" },
    { "smooth dead leaves, a unique combination" },
    { NULL }
  };
  const enum_traits<tiletype_special>::attr_entry_type & enum_traits<tiletype_special>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[13];
  }
  enum_identity identity_traits<tiletype_special>::identity(sizeof(tiletype_special), NULL, "tiletype_special", TID(int32_t), -1, 11, enum_traits<tiletype_special>::key_table,
                enum_traits<tiletype_special>::attr_table, &enum_traits<tiletype_special>::attr_entry_type::_identity);
  const char *const enum_traits<tiletype_variant>::key_table[5] = {
    "NONE",
    "VAR_1",
    "VAR_2",
    "VAR_3",
    "VAR_4"
  };
  enum_identity identity_traits<tiletype_variant>::identity(sizeof(tiletype_variant), NULL, "tiletype_variant", TID(int32_t), -1, 3, enum_traits<tiletype_variant>::key_table,
                NULL, NULL);
  const char *const enum_traits<timed_event_type>::key_table[9] = {
    "Caravan",
    "Migrants",
    "Diplomat",
    "FeatureAttack",
    "Megabeast",
    "WildlifeCurious",
    "WildlifeMischievous",
    "WildlifeFlier",
    "NightCreature"
  };
  enum_identity identity_traits<timed_event_type>::identity(sizeof(timed_event_type), NULL, "timed_event_type", TID(int16_t), 0, 8, enum_traits<timed_event_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<tissue_flags>::key_table[22] = {
    "THICKENS_ON_STRENGTH",
    "THICKENS_ON_ENERGY_STORAGE",
    "ARTERIES",
    "SCARS",
    "STRUCTURAL",
    "NERVOUS",
    "THOUGHT",
    "MUSCULAR",
    "SMELL",
    "HEAR",
    "FLIGHT",
    "BREATHE",
    "SIGHT",
    "COSMETIC",
    "CONNECTS",
    "FUNCTIONAL",
    "MAJOR_ARTERIES",
    "TISSUE_LEAKS",
    "STYLEABLE",
    "CONNECTIVE_TISSUE_ANCHOR",
    "SETTABLE",
    "SPLINTABLE"
  };
  enum_identity identity_traits<tissue_flags>::identity(sizeof(tissue_flags), NULL, "tissue_flags", TID(int32_t), 0, 21, enum_traits<tissue_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<tool_flags>::key_table[9] = {
    "HARD_MAT",
    "METAL_MAT",
    "HAS_EDGE_ATTACK",
    "METAL_WEAPON_MAT",
    "UNIMPROVABLE",
    "SOFT_MAT",
    "WOOD_MAT",
    "INVERTED_TILE",
    "FURNITURE"
  };
  enum_identity identity_traits<tool_flags>::identity(sizeof(tool_flags), NULL, "tool_flags", TID(int32_t), 0, 8, enum_traits<tool_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<tool_uses>::key_table[19] = {
    "NONE",
    "LIQUID_COOKING",
    "LIQUID_SCOOP",
    "GRIND_POWDER_RECEPTACLE",
    "GRIND_POWDER_GRINDER",
    "MEAT_CARVING",
    "MEAT_BONING",
    "MEAT_SLICING",
    "MEAT_CLEAVING",
    "HOLD_MEAT_FOR_CARVING",
    "MEAL_CONTAINER",
    "LIQUID_CONTAINER",
    "FOOD_STORAGE",
    "HIVE",
    "NEST_BOX",
    "SMALL_OBJECT_STORAGE",
    "TRACK_CART",
    "HEAVY_OBJECT_HAULING",
    "STAND_AND_WORK_ABOVE"
  };
  enum_identity identity_traits<tool_uses>::identity(sizeof(tool_uses), NULL, "tool_uses", TID(int16_t), -1, 17, enum_traits<tool_uses>::key_table,
                NULL, NULL);
  const char *const enum_traits<toy_flags>::key_table[1] = {
    "HARD_MAT"
  };
  enum_identity identity_traits<toy_flags>::identity(sizeof(toy_flags), NULL, "toy_flags", TID(int32_t), 0, 0, enum_traits<toy_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<training_assignment::T_auto_mode>::key_table[3] = {
    "None",
    "Any",
    "AnyUnassigned"
  };
  enum_identity identity_traits<training_assignment::T_auto_mode>::identity(sizeof(training_assignment::T_auto_mode), &training_assignment::_identity, "T_auto_mode", TID(int32_t), 0, 2, enum_traits<training_assignment::T_auto_mode>::key_table,
                NULL, NULL);
  const char *const enum_traits<training_knowledge_level>::key_table[6] = {
    "None",
    "FewFacts",
    "GeneralFamiliarity",
    "Knowledgeable",
    "Expert",
    "Domesticated"
  };
  enum_identity identity_traits<training_knowledge_level>::identity(sizeof(training_knowledge_level), NULL, "training_knowledge_level", TID(int32_t), 0, 5, enum_traits<training_knowledge_level>::key_table,
                NULL, NULL);
  const char *const enum_traits<trap_type>::key_table[6] = {
    "Lever",
    "PressurePlate",
    "CageTrap",
    "StoneFallTrap",
    "WeaponTrap",
    "TrackStop"
  };
  enum_identity identity_traits<trap_type>::identity(sizeof(trap_type), NULL, "trap_type", TID(int16_t), 0, 5, enum_traits<trap_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<trapcomp_flags>::key_table[5] = {
    "IS_SCREW",
    "IS_SPIKE",
    "WOOD",
    "METAL",
    "HAS_EDGE_ATTACK"
  };
  enum_identity identity_traits<trapcomp_flags>::identity(sizeof(trapcomp_flags), NULL, "trapcomp_flags", TID(int32_t), 0, 4, enum_traits<trapcomp_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<tree_house_type>::key_table[4] = {
    "TreeHouse",
    "HomeTree",
    "ShapingTree",
    "MarketTree"
  };
  enum_identity identity_traits<tree_house_type>::identity(sizeof(tree_house_type), NULL, "tree_house_type", TID(int32_t), 0, 3, enum_traits<tree_house_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<ui::T_unk23c8_flags>::bits[bit_count] = {
    { NULL, 1 },
    { "recheck_aid_requests", 1 }
  };
  bitfield_identity identity_traits<ui::T_unk23c8_flags>::identity(sizeof(ui::T_unk23c8_flags), &ui::_identity, "T_unk23c8_flags", bitfield_traits<ui::T_unk23c8_flags>::bit_count, bitfield_traits<ui::T_unk23c8_flags>::bits);
  const bitfield_item_info bitfield_traits<ui::T_equipment::T_update>::bits[bit_count] = {
    { "weapon", 1 },
    { "armor", 1 },
    { "shoes", 1 },
    { "shield", 1 },
    { "helm", 1 },
    { "gloves", 1 },
    { "ammo", 1 },
    { "pants", 1 },
    { "backpack", 1 },
    { "quiver", 1 },
    { "flask", 1 },
    { NULL, 1 },
    { "buildings", 1 }
  };
  bitfield_identity identity_traits<ui::T_equipment::T_update>::identity(sizeof(ui::T_equipment::T_update), &ui::T_equipment::_identity, "T_update", bitfield_traits<ui::T_equipment::T_update>::bit_count, bitfield_traits<ui::T_equipment::T_update>::bits);
  const char *const enum_traits<ui_advmode::T_travel_right_map>::key_table[3] = {
    "MapNone",
    "MapSite",
    "MapWorld"
  };
  enum_identity identity_traits<ui_advmode::T_travel_right_map>::identity(sizeof(ui_advmode::T_travel_right_map), &ui_advmode::_identity, "T_travel_right_map", TID(int8_t), 0, 2, enum_traits<ui_advmode::T_travel_right_map>::key_table,
                NULL, NULL);
  const char *const enum_traits<ui_advmode_menu>::key_table[36] = {
    "Default",
    "Look",
    "Talk",
    "Inventory",
    "Drop",
    "ThrowItem",
    "Wear",
    "Remove",
    "Interact",
    "Put",
    "PutContainer",
    "Eat",
    "ThrowAim",
    "Unk13",
    "Get",
    "Fire",
    "CombatPrefs",
    "Companions",
    "MovementPrefs",
    "InteractAction",
    "MoveCarefully",
    "Announcements",
    "Attack",
    "UseBuilding",
    "Travel",
    "Unk25",
    "WrestleTarget",
    "Unk27",
    "Unk28",
    "Sleep",
    "Unk30",
    "AttackBodypart",
    "AttackType",
    "Unk33",
    "Unk34",
    "Unk35"
  };
  enum_identity identity_traits<ui_advmode_menu>::identity(sizeof(ui_advmode_menu), NULL, "ui_advmode_menu", TID(int16_t), 0, 35, enum_traits<ui_advmode_menu>::key_table,
                NULL, NULL);
  const char *const enum_traits<ui_hotkey::T_cmd>::key_table[4] = {
    "None",
    "Zoom",
    "FollowUnit",
    "FollowItem"
  };
  enum_identity identity_traits<ui_hotkey::T_cmd>::identity(sizeof(ui_hotkey::T_cmd), &ui_hotkey::_identity, "T_cmd", TID(int16_t), -1, 2, enum_traits<ui_hotkey::T_cmd>::key_table,
                NULL, NULL);
  const char *const enum_traits<ui_look_list::T_items::T_type>::key_table[13] = {
    "Item",
    "Floor",
    "Unit",
    "Building",
    "Vermin",
    "Flow",
    "Campfire",
    "Spatter",
    "BuildingItem",
    "Fire",
    "Water",
    "Magma",
    "Spoor"
  };
  enum_identity identity_traits<ui_look_list::T_items::T_type>::identity(sizeof(ui_look_list::T_items::T_type), &ui_look_list::T_items::_identity, "T_type", TID(int16_t), 0, 12, enum_traits<ui_look_list::T_items::T_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<ui_sidebar_menus::T_designation::T_mine_mode>::key_table[4] = {
    "All",
    "AutoMine",
    "Economic",
    "Gems"
  };
  enum_identity identity_traits<ui_sidebar_menus::T_designation::T_mine_mode>::identity(sizeof(ui_sidebar_menus::T_designation::T_mine_mode), &ui_sidebar_menus::T_designation::_identity, "T_mine_mode", TID(int32_t), 0, 3, enum_traits<ui_sidebar_menus::T_designation::T_mine_mode>::key_table,
                NULL, NULL);
  const char *const enum_traits<ui_sidebar_menus::T_zone::T_mode>::key_table[3] = {
    "Rectangle",
    "Flow",
    "FloorFlow"
  };
  enum_identity identity_traits<ui_sidebar_menus::T_zone::T_mode>::identity(sizeof(ui_sidebar_menus::T_zone::T_mode), &ui_sidebar_menus::T_zone::_identity, "T_mode", TID(int16_t), 0, 2, enum_traits<ui_sidebar_menus::T_zone::T_mode>::key_table,
                NULL, NULL);
  const char *const enum_traits<ui_sidebar_mode>::key_table[53] = {
    "Default",
    "Squads",
    "DesignateMine",
    "DesignateRemoveRamps",
    "DesignateUpStair",
    "DesignateDownStair",
    "DesignateUpDownStair",
    "DesignateUpRamp",
    "DesignateChannel",
    "DesignateGatherPlants",
    "DesignateRemoveDesignation",
    "DesignateSmooth",
    "DesignateCarveTrack",
    "DesignateEngrave",
    "DesignateCarveFortification",
    "Stockpiles",
    "Build",
    "QueryBuilding",
    "Orders",
    "OrdersForbid",
    "OrdersRefuse",
    "OrdersWorkshop",
    "OrdersZone",
    "BuildingItems",
    "ViewUnits",
    "LookAround",
    "DesignateItemsClaim",
    "DesignateItemsForbid",
    "DesignateItemsMelt",
    "DesignateItemsUnmelt",
    "DesignateItemsDump",
    "DesignateItemsUndump",
    "DesignateItemsHide",
    "DesignateItemsUnhide",
    "DesignateChopTrees",
    "DesignateToggleEngravings",
    "DesignateToggleMarker",
    "Hotkeys",
    "DesignateTrafficHigh",
    "DesignateTrafficNormal",
    "DesignateTrafficLow",
    "DesignateTrafficRestricted",
    "Zones",
    "ZonesPenInfo",
    "ZonesPitInfo",
    "ZonesHospitalInfo",
    "ZonesGatherInfo",
    "DesignateRemoveConstruction",
    "DepotAccess",
    "NotesPoints",
    "NotesRoutes",
    "Burrows",
    "Hauling"
  };
  enum_identity identity_traits<ui_sidebar_mode>::identity(sizeof(ui_sidebar_mode), NULL, "ui_sidebar_mode", TID(int32_t), 0, 52, enum_traits<ui_sidebar_mode>::key_table,
                NULL, NULL);
  const char *const enum_traits<ui_unit_view_mode::T_value>::key_table[6] = {
    "General",
    "Inventory",
    "Preferences",
    "Wounds",
    "PrefLabor",
    "PrefDogs"
  };
  enum_identity identity_traits<ui_unit_view_mode::T_value>::identity(sizeof(ui_unit_view_mode::T_value), &ui_unit_view_mode::_identity, "T_value", TID(int32_t), 0, 5, enum_traits<ui_unit_view_mode::T_value>::key_table,
                NULL, NULL);
  const char *const enum_traits<uniform_category>::key_table[7] = {
    "body",
    "head",
    "pants",
    "gloves",
    "shoes",
    "shield",
    "weapon"
  };
  enum_identity identity_traits<uniform_category>::identity(sizeof(uniform_category), NULL, "uniform_category", TID(int16_t), 0, 6, enum_traits<uniform_category>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<uniform_flags>::bits[bit_count] = {
    { "replace_clothing", 1 },
    { "exact_matches", 1 }
  };
  bitfield_identity identity_traits<uniform_flags>::identity(sizeof(uniform_flags), NULL, "uniform_flags", bitfield_traits<uniform_flags>::bit_count, bitfield_traits<uniform_flags>::bits);
  const bitfield_item_info bitfield_traits<uniform_indiv_choice>::bits[bit_count] = {
    { "any", 1 },
    { "melee", 1 },
    { "ranged", 1 }
  };
  bitfield_identity identity_traits<uniform_indiv_choice>::identity(sizeof(uniform_indiv_choice), NULL, "uniform_indiv_choice", bitfield_traits<uniform_indiv_choice>::bit_count, bitfield_traits<uniform_indiv_choice>::bits);
  enum_identity identity_traits<unit::T_meeting::T_state>::identity(sizeof(unit::T_meeting::T_state), &unit::T_meeting::_identity, "T_state", TID(int8_t), 0, -1, NULL, NULL, NULL);
  const bitfield_item_info bitfield_traits<unit::T_military::T_pickup_flags>::bits[bit_count] = {
    { "update", 1 }
  };
  bitfield_identity identity_traits<unit::T_military::T_pickup_flags>::identity(sizeof(unit::T_military::T_pickup_flags), &unit::T_military::_identity, "T_pickup_flags", bitfield_traits<unit::T_military::T_pickup_flags>::bit_count, bitfield_traits<unit::T_military::T_pickup_flags>::bits);
  const char *const enum_traits<unit::T_counters::T_soldier_mood>::key_table[6] = {
    "None",
    "MartialTrance",
    "Enranged",
    "Tantrum",
    "Depressed",
    "Oblivious"
  };
  enum_identity identity_traits<unit::T_counters::T_soldier_mood>::identity(sizeof(unit::T_counters::T_soldier_mood), &unit::T_counters::_identity, "T_soldier_mood", TID(int16_t), -1, 4, enum_traits<unit::T_counters::T_soldier_mood>::key_table,
                NULL, NULL);
  const char *const enum_traits<unit_action_type>::key_table[21] = {
    "None",
    "Move",
    "Attack",
    "Jump",
    "HoldTerrain",
    "ReleaseTerrain",
    "Climb",
    "Job",
    "Talk",
    "Unsteady",
    "Parry",
    "Block",
    "Dodge",
    "Recover",
    "StandUp",
    "LieDown",
    "Job2",
    "PushObject",
    "SuckBlood",
    "HoldItem",
    "ReleaseItem"
  };
  enum_identity identity_traits<unit_action_type>::identity(sizeof(unit_action_type), NULL, "unit_action_type", TID(int32_t), -1, 19, enum_traits<unit_action_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<unit_bp_health_flags>::bits[bit_count] = {
    { "rq_immobilize", 1 },
    { "rq_dressing", 1 },
    { "rq_cleaning", 1 },
    { "rq_surgery", 1 },
    { "rq_suture", 1 },
    { "rq_setting", 1 },
    { "rq_traction", 1 },
    { "inoperable_rot", 1 },
    { "needs_bandage", 1 },
    { "needs_cast", 1 }
  };
  bitfield_identity identity_traits<unit_bp_health_flags>::identity(sizeof(unit_bp_health_flags), NULL, "unit_bp_health_flags", bitfield_traits<unit_bp_health_flags>::bit_count, bitfield_traits<unit_bp_health_flags>::bits);
  const char *const enum_traits<unit_complaint::T_type>::key_table[5] = {
    "SelfUnemployed",
    "GuildUnemployed",
    "NeedWeapons",
    "IsAngry",
    "IsSad"
  };
  enum_identity identity_traits<unit_complaint::T_type>::identity(sizeof(unit_complaint::T_type), &unit_complaint::_identity, "T_type", TID(int16_t), 0, 4, enum_traits<unit_complaint::T_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<unit_demand::T_place>::key_table[4] = {
    "Office",
    "Bedroom",
    "DiningRoom",
    "Tomb"
  };
  enum_identity identity_traits<unit_demand::T_place>::identity(sizeof(unit_demand::T_place), &unit_demand::_identity, "T_place", TID(int16_t), 0, 3, enum_traits<unit_demand::T_place>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<unit_flags1>::bits[bit_count] = {
    { "move_state", 1 },
    { "dead", 1 },
    { "has_mood", 1 },
    { "had_mood", 1 },
    { "marauder", 1 },
    { "drowning", 1 },
    { "merchant", 1 },
    { "forest", 1 },
    { "left", 1 },
    { "rider", 1 },
    { "incoming", 1 },
    { "diplomat", 1 },
    { "zombie", 1 },
    { "skeleton", 1 },
    { "can_swap", 1 },
    { "on_ground", 1 },
    { "projectile", 1 },
    { "active_invader", 1 },
    { "hidden_in_ambush", 1 },
    { "invader_origin", 1 },
    { "coward", 1 },
    { "hidden_ambusher", 1 },
    { "invades", 1 },
    { "check_flows", 1 },
    { "ridden", 1 },
    { "caged", 1 },
    { "tame", 1 },
    { "chained", 1 },
    { "royal_guard", 1 },
    { "fortress_guard", 1 },
    { "suppress_wield", 1 },
    { "important_historical_figure", 1 }
  };
  bitfield_identity identity_traits<unit_flags1>::identity(sizeof(unit_flags1), NULL, "unit_flags1", bitfield_traits<unit_flags1>::bit_count, bitfield_traits<unit_flags1>::bits);
  const bitfield_item_info bitfield_traits<unit_flags2>::bits[bit_count] = {
    { "swimming", 1 },
    { "sparring", 1 },
    { "no_notify", 1 },
    { "unused", 1 },
    { "calculated_nerves", 1 },
    { "calculated_bodyparts", 1 },
    { "important_historical_figure", 1 },
    { "killed", 1 },
    { "cleanup_1", 1 },
    { "cleanup_2", 1 },
    { "cleanup_3", 1 },
    { "for_trade", 1 },
    { "trade_resolved", 1 },
    { "has_breaks", 1 },
    { "gutted", 1 },
    { "circulatory_spray", 1 },
    { "locked_in_for_trading", 1 },
    { "slaughter", 1 },
    { "underworld", 1 },
    { "resident", 1 },
    { "cleanup_4", 1 },
    { "calculated_insulation", 1 },
    { "visitor_uninvited", 1 },
    { "visitor", 1 },
    { "calculated_inventory", 1 },
    { "vision_good", 1 },
    { "vision_damaged", 1 },
    { "vision_missing", 1 },
    { "breathing_good", 1 },
    { "breathing_problem", 1 },
    { "roaming_wilderness_population_source", 1 },
    { "roaming_wilderness_population_source_not_a_map_feature", 1 }
  };
  bitfield_identity identity_traits<unit_flags2>::identity(sizeof(unit_flags2), NULL, "unit_flags2", bitfield_traits<unit_flags2>::bit_count, bitfield_traits<unit_flags2>::bits);
  const bitfield_item_info bitfield_traits<unit_flags3>::bits[bit_count] = {
    { "body_part_relsize_computed", 1 },
    { "size_modifier_computed", 1 },
    { "stuck_weapon_computed", 1 },
    { "compute_health", 1 },
    { "announce_titan", 1 },
    { "unk5", 1 },
    { "on_crutch", 1 },
    { "weight_computed", 1 },
    { "body_temp_in_range", 1 },
    { "wait_until_reveal", 1 },
    { "scuttle", 1 },
    { "unk11", 1 },
    { "ghostly", 1 },
    { "unk13", 1 },
    { "unk14", 1 },
    { "unk15", 1 },
    { "unk16", 1 },
    { "no_meandering", 1 },
    { "floundering", 1 },
    { "exit_vehicle1", 1 },
    { "exit_vehicle2", 1 },
    { "dangerous_terrain", 1 },
    { "unk22", 1 },
    { "unk23", 1 },
    { "unk24", 1 },
    { "emotionally_overloaded", 1 }
  };
  bitfield_identity identity_traits<unit_flags3>::identity(sizeof(unit_flags3), NULL, "unit_flags3", bitfield_traits<unit_flags3>::bit_count, bitfield_traits<unit_flags3>::bits);
  const bitfield_item_info bitfield_traits<unit_ghost_info::T_flags>::bits[bit_count] = {
    { "announced", 1 },
    { "was_at_rest", 1 }
  };
  bitfield_identity identity_traits<unit_ghost_info::T_flags>::identity(sizeof(unit_ghost_info::T_flags), &unit_ghost_info::_identity, "T_flags", bitfield_traits<unit_ghost_info::T_flags>::bit_count, bitfield_traits<unit_ghost_info::T_flags>::bits);
  const bitfield_item_info bitfield_traits<unit_health_flags>::bits[bit_count] = {
    { "rq_diagnosis", 1 },
    { "needs_recovery", 1 },
    { "needs_healthcare", 1 },
    { "rq_immobilize", 1 },
    { "rq_dressing", 1 },
    { "rq_cleaning", 1 },
    { "rq_surgery", 1 },
    { "rq_suture", 1 },
    { "rq_setting", 1 },
    { "rq_traction", 1 },
    { "rq_crutch", 1 }
  };
  bitfield_identity identity_traits<unit_health_flags>::identity(sizeof(unit_health_flags), NULL, "unit_health_flags", bitfield_traits<unit_health_flags>::bit_count, bitfield_traits<unit_health_flags>::bits);
  const char *const enum_traits<unit_inventory_item::T_mode>::key_table[10] = {
    "Hauled",
    "Weapon",
    "Worn",
    "Piercing",
    "Flask",
    "WrappedAround",
    "StuckIn",
    "InMouth",
    "Pet",
    "SewnInto"
  };
  enum_identity identity_traits<unit_inventory_item::T_mode>::identity(sizeof(unit_inventory_item::T_mode), &unit_inventory_item::_identity, "T_mode", TID(int16_t), 0, 9, enum_traits<unit_inventory_item::T_mode>::key_table,
                NULL, NULL);
  const char *const enum_traits<unit_labor>::key_table[82] = {
    "NONE",
    "MINE",
    "HAUL_STONE",
    "HAUL_WOOD",
    "HAUL_BODY",
    "HAUL_FOOD",
    "HAUL_REFUSE",
    "HAUL_ITEM",
    "HAUL_FURNITURE",
    "HAUL_ANIMALS",
    "CLEAN",
    "CUTWOOD",
    "CARPENTER",
    "DETAIL",
    "MASON",
    "ARCHITECT",
    "ANIMALTRAIN",
    "ANIMALCARE",
    "DIAGNOSE",
    "SURGERY",
    "BONE_SETTING",
    "SUTURING",
    "DRESSING_WOUNDS",
    "FEED_WATER_CIVILIANS",
    "RECOVER_WOUNDED",
    "BUTCHER",
    "TRAPPER",
    "DISSECT_VERMIN",
    "LEATHER",
    "TANNER",
    "BREWER",
    "ALCHEMIST",
    "SOAP_MAKER",
    "WEAVER",
    "CLOTHESMAKER",
    "MILLER",
    "PROCESS_PLANT",
    "MAKE_CHEESE",
    "MILK",
    "COOK",
    "PLANT",
    "HERBALIST",
    "FISH",
    "CLEAN_FISH",
    "DISSECT_FISH",
    "HUNT",
    "SMELT",
    "FORGE_WEAPON",
    "FORGE_ARMOR",
    "FORGE_FURNITURE",
    "METAL_CRAFT",
    "CUT_GEM",
    "ENCRUST_GEM",
    "WOOD_CRAFT",
    "STONE_CRAFT",
    "BONE_CARVE",
    "GLASSMAKER",
    "EXTRACT_STRAND",
    "SIEGECRAFT",
    "SIEGEOPERATE",
    "BOWYER",
    "MECHANIC",
    "POTASH_MAKING",
    "LYE_MAKING",
    "DYER",
    "BURN_WOOD",
    "OPERATE_PUMP",
    "SHEARER",
    "SPINNER",
    "POTTERY",
    "GLAZING",
    "PRESSING",
    "BEEKEEPING",
    "WAX_WORKING",
    "HANDLE_VEHICLES",
    "HAUL_TRADE",
    "PULL_LEVER",
    "REMOVE_CONSTRUCTION",
    "HAUL_WATER",
    "GELD",
    "BUILD_ROAD",
    "BUILD_CONSTRUCTION"
  };
  const enum_traits<unit_labor>::attr_entry_type enum_traits<unit_labor>::attr_table[82+1] = {
    { NULL },
    { "Mining" },
    { "Stone Hauling" },
    { "Wood Hauling" },
    { "Burial" },
    { "Food Hauling" },
    { "Refuse Hauling" },
    { "Item Hauling" },
    { "Furniture Hauling" },
    { "Animal Hauling" },
    { "Cleaning" },
    { "Wood Cutting" },
    { "Carpentry" },
    { "Stone Detailing" },
    { "Masonry" },
    { "Architecture" },
    { "Animal Training" },
    { "Animal Care" },
    { "Diagnosis" },
    { "Surgery" },
    { "Setting Bones" },
    { "Suturing" },
    { "Dressing Wounds" },
    { "Feed Patients/Prisoners" },
    { "Recovering Wounded" },
    { "Butchery" },
    { "Trapping" },
    { "Small Animal Dissection" },
    { "Leatherworking" },
    { "Tanning" },
    { "Brewing" },
    { "Alchemy" },
    { "Soap Maker" },
    { "Weaving" },
    { "Clothesmaking" },
    { "Milling" },
    { "Plant Processing" },
    { "Cheese Making" },
    { "Milking" },
    { "Cooking" },
    { "Farming (Fields)" },
    { "Plant Gathering" },
    { "Fishing" },
    { "Fish Cleaning" },
    { "Fish Dissection" },
    { "Hunting" },
    { "Furnace Operating" },
    { "Weaponsmithing" },
    { "Armoring" },
    { "Blacksmithing" },
    { "Metalcrafting" },
    { "Gem Cutting" },
    { "Gem Setting" },
    { "Woodcrafting" },
    { "Stonecrafting" },
    { "Bone Carving" },
    { "Glassmaking" },
    { "Strand Extraction" },
    { "Siege Engineering" },
    { "Siege Operating" },
    { "Crossbow-making" },
    { "Mechanics" },
    { "Potash Making" },
    { "Lye Making" },
    { "Dyeing" },
    { "Wood Burning" },
    { "Pump Operating" },
    { "Shearing" },
    { "Spinning" },
    { "Pottery" },
    { "Glazing" },
    { "Pressing" },
    { "Bee Keeping" },
    { "Wax Working" },
    { "Push/Haul Vehicles" },
    { "Trade Good Hauling" },
    { "Lever Operation" },
    { "Construction Removal" },
    { "Water Hauling" },
    { "Gelding" },
    { "Road Building" },
    { "Wall/Floor Construction" },
    { NULL }
  };
  const enum_traits<unit_labor>::attr_entry_type & enum_traits<unit_labor>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[82];
  }
  enum_identity identity_traits<unit_labor>::identity(sizeof(unit_labor), NULL, "unit_labor", TID(int32_t), -1, 80, enum_traits<unit_labor>::key_table,
                enum_traits<unit_labor>::attr_table, &enum_traits<unit_labor>::attr_entry_type::_identity);
  const char *const enum_traits<unit_path_goal>::key_table[181] = {
    "None",
    "ComeToJobBuilding",
    "ValidPondDumpUnit",
    "ValidPondDump",
    "ConflictDefense",
    "AdventureMove",
    "MarauderMill",
    "WildernessCuriousStealTarget",
    "WildernessRoamer",
    "ThiefTarget",
    "Owner",
    "CheckChest",
    "SleepBed",
    "SleepBarracks",
    "SleepGround",
    "LeaveWall",
    "FleeTerrain",
    "TaxRoom",
    "GuardTaxes",
    "RansackTaxes",
    "GetEmptySandBag",
    "SandZone",
    "GrabCage",
    "UncageAnimal",
    "CaptureSmallPet",
    "GrabCageUnit",
    "GoToCage",
    "GrabAnimalTrap",
    "CageVermin",
    "GrabUnfillBucket",
    "SeekFillBucket",
    "SeekPatientForCarry",
    "SeekPatientForDiagnosis",
    "SeekPatientForImmobilizeBreak",
    "SeekPatientForCrutch",
    "SeekPatientForSuturing",
    "SeekSurgerySite",
    "CarryPatientToBed",
    "SeekGiveWaterBucket",
    "SeekJobItem",
    "SeekUnitForItemDrop",
    "SeekUnitForJob",
    "SeekSplint",
    "SeekCrutch",
    "SeekSutureThread",
    "SeekDressingCloth",
    "GoToGiveWaterTarget",
    "SeekFoodForTarget",
    "SeekTargetForFood",
    "SeekAnimalForSlaughter",
    "SeekSlaughterBuilding",
    "SeekAnimalForChain",
    "SeekChainForAnimal",
    "SeekCageForUnchain",
    "SeekAnimalForUnchain",
    "GrabFoodForTaming",
    "SeekAnimalForTaming",
    "SeekDrinkItem",
    "SeekFoodItem",
    "SeekEatingChair",
    "SeekEatingChair2",
    "SeekBadMoodBuilding",
    "SetGlassMoodBuilding",
    "SetMoodBuilding",
    "SeekFellVictim",
    "CleanBuildingSite",
    "ResetPriorityGoal",
    "MainJobBuilding",
    "DropOffJobItems",
    "GrabJobResources",
    "WorkAtBuilding",
    "GrabUniform",
    "GrabClothing",
    "GrabWeapon",
    "GrabAmmunition",
    "GrabShield",
    "GrabArmor",
    "GrabHelm",
    "GrabBoots",
    "GrabGloves",
    "GrabPants",
    "GrabQuiver",
    "GrabBackpack",
    "GrabWaterskin",
    "StartHunt",
    "StartFish",
    "Clean",
    "HuntVermin",
    "Patrol",
    "SquadStation",
    "SeekInfant",
    "ShopSpecific",
    "MillInShop",
    "GoToShop",
    "SeekTrainingAmmunition",
    "ArcheryTrainingSite",
    "SparringPartner",
    "SparringSite",
    "AttendParty",
    "SeekArtifact",
    "GrabAmmunitionForBuilding",
    "SeekBuildingForAmmunition",
    "SeekItemForStorage",
    "StoreItem",
    "GrabKill",
    "DropKillAtButcher",
    "DropKillOutFront",
    "GoToBeatingTarget",
    "SeekKidnapVictim",
    "SeekHuntingTarget",
    "SeekTargetMechanism",
    "SeekTargetForMechanism",
    "SeekMechanismForTrigger",
    "SeekTriggerForMechanism",
    "SeekTrapForVerminCatch",
    "SeekVerminForCatching",
    "SeekVerminCatchLocation",
    "WanderVerminCatchLocation",
    "SeekVerminForHunting",
    "SeekVerminHuntingSpot",
    "WanderVerminHuntingSpot",
    "SeekFishTrap",
    "SeekFishCatchLocation",
    "SeekWellForWater",
    "SeekDrinkAreaForWater",
    "UpgradeSquadEquipment",
    "PrepareEquipmentManifests",
    "WanderDepot",
    "SeekUpdateOffice",
    "SeekManageOffice",
    "AssignedBuildingJob",
    "ChaseOpponent",
    "FleeFromOpponent",
    "AttackBuilding",
    "StartBedCarry",
    "StartGiveFoodWater",
    "StartMedicalAid",
    "SeekStationFlood",
    "SeekStation",
    "StartWaterJobWell",
    "StartWaterJobDrinkArea",
    "StartEatJob",
    "ScheduledMeal",
    "ScheduledSleepBed",
    "ScheduledSleepGround",
    "Rest",
    "RemoveConstruction",
    "Chop",
    "Detail",
    "GatherPlant",
    "Dig",
    "Mischief",
    "ChaseOpponentSameSquare",
    "RestRecovered",
    "RestReset",
    "CombatTraining",
    "SkillDemonstration",
    "IndividualSkillDrill",
    "SeekBuildingForItemDrop",
    "SeekBuildingForJob",
    "GrabMilkUnit",
    "GoToMilkStation",
    "SeekPatientForDressWound",
    "UndeadHunt",
    "GrabShearUnit",
    "GoToShearStation",
    "LayEggNestBox",
    "ClayZone",
    "ColonyToInstall",
    "ReturnColonyToInstall",
    "Nonsense",
    "SeekBloodSuckVictim",
    "SeekSheriff",
    "GrabExecutionWeapon",
    "TrainAnimal",
    "GuardPath",
    "Harass",
    "SiteWalk",
    "SiteWalkToBuilding",
    "Reunion",
    "ArmyWalk"
  };
  enum_identity identity_traits<unit_path_goal>::identity(sizeof(unit_path_goal), NULL, "unit_path_goal", TID(int16_t), -1, 179, enum_traits<unit_path_goal>::key_table,
                NULL, NULL);
  const char *const enum_traits<unit_preference::T_type>::key_table[9] = {
    "LikeMaterial",
    "LikeCreature",
    "LikeFood",
    "HateCreature",
    "LikeItem",
    "LikePlant",
    "LikeTree",
    "LikeColor",
    "LikeShape"
  };
  enum_identity identity_traits<unit_preference::T_type>::identity(sizeof(unit_preference::T_type), &unit_preference::_identity, "T_type", TID(int16_t), 0, 8, enum_traits<unit_preference::T_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<unit_relationship_type>::key_table[35] = {
    "Pet",
    "Spouse",
    "Mother",
    "Father",
    "LastAttacker",
    "GroupLeader",
    "Dragee",
    "Dragger",
    "RiderMount",
    "Lover",
    "unk10",
    "unk11",
    "Child",
    "Friend",
    "Grudge",
    "Worship",
    "AcquaintanceLong",
    "AcquaintancePassing",
    "Bonded",
    "Hero",
    "ConsidersViolent",
    "ConsidersPsychotic",
    "GoodForBusiness",
    "FriendlyTerms",
    "ConsidersKiller",
    "ConsidersMurderer",
    "Comrade",
    "MemberOfRespectedGroup",
    "MemberOfHatedGroup",
    "EnemyFighter",
    "FriendlyFighter",
    "ConsidersBully",
    "ConsidersBrigand",
    "LoyalSoldier",
    "ConsidersMonster"
  };
  enum_identity identity_traits<unit_relationship_type>::identity(sizeof(unit_relationship_type), NULL, "unit_relationship_type", TID(int16_t), 0, 34, enum_traits<unit_relationship_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<unit_report_type>::key_table[3] = {
    "Combat",
    "Sparring",
    "Hunting"
  };
  enum_identity identity_traits<unit_report_type>::identity(sizeof(unit_report_type), NULL, "unit_report_type", TID(int16_t), 0, 2, enum_traits<unit_report_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<unit_request::T_type>::key_table[1] = {
    "DoGuildJobs"
  };
  enum_identity identity_traits<unit_request::T_type>::identity(sizeof(unit_request::T_type), &unit_request::_identity, "T_type", TID(int16_t), 0, 0, enum_traits<unit_request::T_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<unit_station_type>::key_table[43] = {
    "None",
    "Nonsense",
    "DungeonCommander",
    "InsaneMood",
    "UndeadHunt",
    "SiegerPatrol",
    "MaraudeTarget",
    "SiegerBasepoint",
    "SiegerMill",
    "AmbushPatrol",
    "MarauderMill",
    "WildernessCuriousWander",
    "WildernessCuriousStealTarget",
    "WildernessRoamer",
    "PatternPatrol",
    "InactiveMarauder",
    "Owner",
    "Commander",
    "ChainedAnimal",
    "MeetingLocation",
    "MeetingLocationBuilding",
    "Depot",
    "VerminHunting",
    "SeekCommander",
    "ReturnToBase",
    "MillAnywhere",
    "Wagon",
    "MillBuilding",
    "HeadForEdge",
    "MillingFlood",
    "MillingBurrow",
    "SquadMove",
    "SquadKillList",
    "SquadPatrol",
    "SquadDefendBurrow",
    "SquadDefendBurrowFromTarget",
    "LairHunter",
    "Graze",
    "Guard",
    "Alarm",
    "MoveToSite",
    "ClaimSite",
    "WaitOrder"
  };
  enum_identity identity_traits<unit_station_type>::identity(sizeof(unit_station_type), NULL, "unit_station_type", TID(int16_t), -1, 41, enum_traits<unit_station_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<unit_syndrome::T_symptoms::T_flags>::bits[bit_count] = {
    { "disabled", 1 },
    { "active", 1 }
  };
  bitfield_identity identity_traits<unit_syndrome::T_symptoms::T_flags>::identity(sizeof(unit_syndrome::T_symptoms::T_flags), &unit_syndrome::T_symptoms::_identity, "T_flags", bitfield_traits<unit_syndrome::T_symptoms::T_flags>::bit_count, bitfield_traits<unit_syndrome::T_symptoms::T_flags>::bits);
  const bitfield_item_info bitfield_traits<unit_syndrome::T_flags>::bits[bit_count] = {
    { "is_sick", 1 },
    { "is_sick_low", 1 },
    { NULL, 1 },
    { NULL, 1 }
  };
  bitfield_identity identity_traits<unit_syndrome::T_flags>::identity(sizeof(unit_syndrome::T_flags), &unit_syndrome::_identity, "T_flags", bitfield_traits<unit_syndrome::T_flags>::bit_count, bitfield_traits<unit_syndrome::T_flags>::bits);
  const char *const enum_traits<unit_thought_type>::key_table[180] = {
    "Conflict",
    "Trauma",
    "WitnessDeath",
    "UnexpectedDeath",
    "Death",
    "Kill",
    "LoveSeparated",
    "LoveReunited",
    "JoinConflict",
    "MakeMasterwork",
    "MadeArtifact",
    "MasterSkill",
    "NewRomance",
    "BecomeParent",
    "NearConflict",
    "CancelAgreement",
    "JoinTravel",
    "SiteControlled",
    "TributeCancel",
    "Incident",
    "HearRumor",
    "MilitaryRemoved",
    "StrangerWeapon",
    "StrangerSneaking",
    "SawDrinkBlood",
    "Complained",
    "ReceivedComplaint",
    "AdmireBuilding",
    "AdmireOwnBuilding",
    "AdmireArrangedBuilding",
    "AdmireOwnArrangedBuilding",
    "LostPet",
    "ThrownStuff",
    "JailReleased",
    "Miscarriage",
    "SpouseMiscarriage",
    "OldClothing",
    "TatteredClothing",
    "RottedClothing",
    "GhostNightmare",
    "GhostHaunt",
    "Spar",
    "UnableComplain",
    "LongPatrol",
    "SunNausea",
    "SunIrritated",
    "Drowsy",
    "VeryDrowsy",
    "Thirsty",
    "Dehydrated",
    "Hungry",
    "Starving",
    "MajorInjuries",
    "MinorInjuries",
    "SleepNoise",
    "Rest",
    "FreakishWeather",
    "Rain",
    "SnowStorm",
    "Miasma",
    "Smoke",
    "Waterfall",
    "Dust",
    "Demands",
    "ImproperPunishment",
    "PunishmentReduced",
    "Elected",
    "Reelected",
    "RequestApproved",
    "RequestIgnored",
    "NoPunishment",
    "PunishmentDelayed",
    "DelayedPunishment",
    "ScarceCageChain",
    "MandateIgnored",
    "MandateDeadlineMissed",
    "LackWork",
    "SmashedBuilding",
    "ToppledStuff",
    "NoblePromotion",
    "BecomeNoble",
    "Cavein",
    "MandateDeadlineMet",
    "Uncovered",
    "NoShirt",
    "NoShoes",
    "EatPet",
    "EatLikedCreature",
    "EatVermin",
    "FistFight",
    "GaveBeating",
    "GotBeaten",
    "GaveHammering",
    "GotHammered",
    "NoHammer",
    "SameFood",
    "AteRotten",
    "GoodMeal",
    "GoodDrink",
    "MoreChests",
    "MoreCabinets",
    "MoreWeaponRacks",
    "MoreArmorStands",
    "RoomPretension",
    "LackTables",
    "CrowdedTables",
    "DiningQuality",
    "NoDining",
    "LackChairs",
    "TrainingBond",
    "Rescued",
    "RescuedOther",
    "SatisfiedAtWork",
    "TaxedLostProperty",
    "Taxed",
    "LackProtection",
    "TaxRoomUnreachable",
    "TaxRoomMisinformed",
    "PleasedNoble",
    "TaxCollectionSmooth",
    "DisappointedNoble",
    "TaxCollectionRough",
    "MadeFriend",
    "FormedGrudge",
    "AnnoyedVermin",
    "NearVermin",
    "PesteredVermin",
    "AcquiredItem",
    "AdoptedPet",
    "Jailed",
    "Bath",
    "SoapyBath",
    "SparringAccident",
    "Attacked",
    "AttackedByDead",
    "SameBooze",
    "DrinkBlood",
    "DrinkSlime",
    "DrinkVomit",
    "DrinkGoo",
    "DrinkIchor",
    "DrinkPus",
    "NastyWater",
    "DrankSpoiled",
    "LackWell",
    "NearCaged",
    "NearCaged2",
    "LackBedroom",
    "BedroomQuality",
    "SleptFloor",
    "SleptMud",
    "SleptGrass",
    "SleptRoughFloor",
    "SleptRocks",
    "SleptIce",
    "SleptDirt",
    "SleptDriftwood",
    "ArtDefacement",
    "Evicted",
    "GaveBirth",
    "SpouseGaveBirth",
    "ReceivedWater",
    "GaveWater",
    "ReceivedFood",
    "GaveFood",
    "Talked",
    "OfficeQuality",
    "MeetingInBedroom",
    "MeetingInDiningRoom",
    "NoRooms",
    "TombQuality",
    "TombLack",
    "TalkToNoble",
    "InteractPet",
    "ConvictionCorpse",
    "ConvictionAnimal",
    "ConvictionVictim",
    "ConvictionJusticeSelf",
    "ConvictionJusticeFamily",
    "Decay"
  };
  const enum_traits<unit_thought_type>::attr_entry_type enum_traits<unit_thought_type>::attr_table[180+1] = {
    { "while in conflic" },
    { "after experiencing trauma" },
    { "after seeing somebody die" },
    { "at the unexpected death of [somebody]" },
    { "at somebody's death" },
    { "while killing somebody" },
    { "at being separated from a loved one" },
    { "after being reunited with a loved one" },
    { "when joining an existing conflict" },
    { "after producing a masterwork" },
    { "after creating an artifact" },
    { "upon mastering [skill]" },
    { "as [he] was caught up in a new romance" },
    { "after becoming a parent" },
    { "being near to a conflict" },
    { "after an agreement was cancelled" },
    { "upon joining a traveling group" },
    { "after a site was controlled" },
    { "after a tribute cancellation" },
    { "after an incident" },
    { "after hearing a rumor" },
    { "after being removed from a military group" },
    { "when a stranger advanced with a weapon" },
    { "after seeing a stranger sneaking around" },
    { "after witnessing a night creature drinking blood" },
    { "[multiple]" },
    { "[multiple]" },
    { "near a [quality] [building]" },
    { "near [his] own [quality] [building]" },
    { "near a [quality] tastefully arranged [building]" },
    { "near [his] own [quality] tastefully arranged [building]" },
    { "after losing a pet" },
    { "after throwing something" },
    { "after being released from confinement" },
    { "after a miscarriage" },
    { "after [his] spouse's miscarriage" },
    { "to be wearing old clothing" },
    { "to be wearing tattered clothing" },
    { "to have clothes rot off of [his] body" },
    { "after being tormented in nightmares by a dead [somebody]" },
    { "after being haunted/tormented/possessed by a dead [somebody]" },
    { "after a sparring session" },
    { "after being unable to [meet]" },
    { "during long patrol duty" },
    { "after being nauseated bu the sun" },
    { "at being out in the sunshine again" },
    { "when drowsy" },
    { "when utterly sleep-deprived" },
    { "when thirsty" },
    { "when dehydrated" },
    { "when hungry" },
    { "when starving" },
    { "after suffering a major injury" },
    { "after suffering a minor injury" },
    { "after [varying]" },
    { "after being able to rest and recuperate" },
    { "when caught in freakish weather" },
    { "when caught in the rain" },
    { "when caught in a snow storm" },
    { "after retching on a miasma" },
    { "after choking on smoke underground" },
    { "being near to a waterfall" },
    { "after choking on dust underground" },
    { "considering the state of demands" },
    { "that a criminal could not be properly punished" },
    { "to have [his] punishment reduced" },
    { "to be elected" },
    { "to be re-elected" },
    { "having a request approved" },
    { "having a request ignored" },
    { "that nobody could be punished for a failure" },
    { "to have [his] punishment delayed" },
    { "after the delayed punishment of a criminal" },
    { "considering the scarcity of cages and chains" },
    { "having a mandate ignored" },
    { "having a mandate deadline missed" },
    { "after the lack of work last season" },
    { "after smashing up a building" },
    { "after toppling something over" },
    { "after receiving a higher rank of nobility" },
    { "after entering the nobility" },
    { "after being knocked out during a cave-in" },
    { "to have a mandate deadline met" },
    { "to be uncovered" },
    { "to have no shirt" },
    { "to have no shoes" },
    { "after being forced to eat a treasured pet to survive" },
    { "after being forced to eat a beloved creature to survive" },
    { "after being forced to eat vermin to survive" },
    { "after starting a fist fight" },
    { "after punishing somebody with a beating" },
    { "after being beaten" },
    { "after beating somebody with a hammer" },
    { "after being beaten with a hammer" },
    { "after being unable to find a hammer" },
    { "eating the same old food" },
    { "after eating rotten food" },
    { "after eating [quality food]" },
    { "after having [quality drink]" },
    { "not having enough chests" },
    { "not having enough cabinets" },
    { "not having enough weapon racks" },
    { "not having enough armor stands" },
    { "by a lesser's pretentious [room] arrangements" },
    { "at the lack of dining tables" },
    { "eating at a crowded table" },
    { "dining in [a quality] dining room" },
    { "being without a proper dining room" },
    { "at the lack of chairs" },
    { "after forming a bond with an animal training partner" },
    { "after being rescued" },
    { "after bringing somebody to rest in bed" },
    { "at work" },
    { "after losing property to the tax collector's escorts" },
    { "after being taxed" },
    { "not having adequate protection" },
    { "after being unable to reach a room for tax collection" },
    { "after being misinformed about a room for tax collection" },
    { "having pleased a noble" },
    { "that the tax collection went smoothly" },
    { "having disappointed a noble" },
    { "that the tax collection didn't go smoothly" },
    { "after making a friend" },
    { "after forming a grudge" },
    { "after being accosted by [vermin]" },
    { "after being near [vermin]" },
    { "after being pestered by [vermin]" },
    { "after a satisfying acquisition" },
    { "after adopting a new pet" },
    { "after being confined" },
    { "after a bath" },
    { "after a soapy bath" },
    { "after killing somebody by accident while sparring" },
    { "after being attacked" },
    { "after being attacked by dead [HF relative]" },
    { "drinking the same old booze" },
    { "while forced to drink bloody water" },
    { "while forced to drink slime" },
    { "while forced to drink vomit" },
    { "while forced to drink gooey water" },
    { "while forced to drink ichorous water" },
    { "while forced to drink purulent water" },
    { "drinking nasty water" },
    { "after drinking something spoiled" },
    { "after drinking water without a well" },
    { "after being near to a [animal] in a cage" },
    { "after being near to a [animal] in a cage" },
    { "after sleeping without a proper room" },
    { "after sleeing in a [quality] bedroom" },
    { "after sleeping on the floor" },
    { "after sleeping in the mud" },
    { "after sleeping in the grass" },
    { "after sleeping on a rough cave floor" },
    { "after sleeping on rocks" },
    { "after sleeping on ice" },
    { "after sleeping in the dirt" },
    { "after sleeping on a pile of driftwood" },
    { "after suffering the travesty of art defacement" },
    { "after being evicted" },
    { "after giving birth to [a baby]" },
    { "after becoming a parent of [a baby]" },
    { "after receiving water" },
    { "after giving somebody water" },
    { "after receiving food" },
    { "after giving somebody food" },
    { "talking with a [relation]" },
    { "conducted meeting in a [quality] room" },
    { "having to conduct an official meeting in a bedroom" },
    { "having to conduct an official meeting in a dining room" },
    { "not having any rooms" },
    { "having a [quality] tomb after gaining another year" },
    { "about not having a tomb after gaining another year" },
    { "after talking to a pillar of society" },
    { "after interacting with a pet" },
    { "after a long-dead corpse was convicted of a crime" },
    { "after an animal was convicted of a crime" },
    { "after the bizarre conviction against all reason of the victim of a crime" },
    { "upon receiving justice through a criminal's conviction" },
    { "when a family member received justice through a criminal's conviction" },
    { "after being forced to endure the decay of a [relative]" },
    { NULL }
  };
  const enum_traits<unit_thought_type>::attr_entry_type & enum_traits<unit_thought_type>::attrs(enum_type value) {
    return is_valid(value) ? attr_table[value - first_item_value] : attr_table[180];
  }
  enum_identity identity_traits<unit_thought_type>::identity(sizeof(unit_thought_type), NULL, "unit_thought_type", TID(int32_t), 0, 179, enum_traits<unit_thought_type>::key_table,
                enum_traits<unit_thought_type>::attr_table, &enum_traits<unit_thought_type>::attr_entry_type::_identity);
  const bitfield_item_info bitfield_traits<unit_wound::T_flags>::bits[bit_count] = {
    { "severed_part", 1 },
    { "mortal_wound", 1 },
    { "stuck_weapon", 1 },
    { "diagnosed", 1 },
    { "sutured", 1 },
    { "infection", 1 }
  };
  bitfield_identity identity_traits<unit_wound::T_flags>::identity(sizeof(unit_wound::T_flags), &unit_wound::_identity, "T_flags", bitfield_traits<unit_wound::T_flags>::bit_count, bitfield_traits<unit_wound::T_flags>::bits);
  const char *const enum_traits<units_other_id>::key_table[2] = {
    "ANY_RIDER",
    "ANY_BABY2"
  };
  enum_identity identity_traits<units_other_id>::identity(sizeof(units_other_id), NULL, "units_other_id", TID(int32_t), 0, 1, enum_traits<units_other_id>::key_table,
                NULL, NULL);
  const char *const enum_traits<value_type>::key_table[32] = {
    "LAW",
    "LOYALTY",
    "FAMILY",
    "FRIENDSHIP",
    "POWER",
    "TRUTH",
    "CUNNING",
    "ELOQUENCE",
    "FAIRNESS",
    "DECORUM",
    "TRADITION",
    "ARTWORK",
    "COOPERATION",
    "INDEPENDENCE",
    "STOICISM",
    "INTROSPECTION",
    "SELF_CONTROL",
    "TRANQUILITY",
    "HARMONY",
    "MERRIMENT",
    "CRAFTSMANSHIP",
    "MARTIAL_PROWESS",
    "SKILL",
    "HARD_WORK",
    "SACRIFICE",
    "COMPETITION",
    "PERSEVERENCE",
    "LEISURE_TIME",
    "COMMERCE",
    "ROMANCE",
    "NATURE",
    "PEACE"
  };
  enum_identity identity_traits<value_type>::identity(sizeof(value_type), NULL, "value_type", TID(int32_t), 0, 31, enum_traits<value_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<vermin_flags>::bits[bit_count] = {
    { NULL, 1 },
    { "is_colony", 1 },
    { NULL, 1 },
    { NULL, 1 },
    { NULL, 1 }
  };
  bitfield_identity identity_traits<vermin_flags>::identity(sizeof(vermin_flags), NULL, "vermin_flags", bitfield_traits<vermin_flags>::bit_count, bitfield_traits<vermin_flags>::bits);
  const char *const enum_traits<viewscreen_adventure_logst::T_mode>::key_table[2] = {
    "Info",
    "Map"
  };
  enum_identity identity_traits<viewscreen_adventure_logst::T_mode>::identity(sizeof(viewscreen_adventure_logst::T_mode), &viewscreen_adventure_logst::_identity, "T_mode", TID(int8_t), 0, 1, enum_traits<viewscreen_adventure_logst::T_mode>::key_table,
                NULL, NULL);
  const char *const enum_traits<viewscreen_adventure_logst::T_info_mode>::key_table[7] = {
    "Events",
    "Agreements",
    "People",
    "Sites",
    "Groups",
    "Regions",
    "Bestiary"
  };
  enum_identity identity_traits<viewscreen_adventure_logst::T_info_mode>::identity(sizeof(viewscreen_adventure_logst::T_info_mode), &viewscreen_adventure_logst::_identity, "T_info_mode", TID(int16_t), 0, 6, enum_traits<viewscreen_adventure_logst::T_info_mode>::key_table,
                NULL, NULL);
  const char *const enum_traits<viewscreen_choose_start_sitest::T_page>::key_table[9] = {
    "Biome",
    "Neighbors",
    "Civilization",
    "Elevation",
    "Cliffs",
    "Reclaim",
    "Reclaim2",
    "Find",
    "Notes"
  };
  enum_identity identity_traits<viewscreen_choose_start_sitest::T_page>::identity(sizeof(viewscreen_choose_start_sitest::T_page), &viewscreen_choose_start_sitest::_identity, "T_page", TID(int32_t), 0, 8, enum_traits<viewscreen_choose_start_sitest::T_page>::key_table,
                NULL, NULL);
  const char *const enum_traits<viewscreen_game_cleanerst::T_state>::key_table[3] = {
    "CleaningGameObjects",
    "CleaningStrandedObjects",
    "CleaningPlayObjects"
  };
  enum_identity identity_traits<viewscreen_game_cleanerst::T_state>::identity(sizeof(viewscreen_game_cleanerst::T_state), &viewscreen_game_cleanerst::_identity, "T_state", TID(int32_t), 0, 2, enum_traits<viewscreen_game_cleanerst::T_state>::key_table,
                NULL, NULL);
  const char *const enum_traits<viewscreen_layer_militaryst::T_page>::key_table[6] = {
    "Positions",
    "Alerts",
    "Equip",
    "Uniforms",
    "Supplies",
    "Ammunition"
  };
  enum_identity identity_traits<viewscreen_layer_militaryst::T_page>::identity(sizeof(viewscreen_layer_militaryst::T_page), &viewscreen_layer_militaryst::_identity, "T_page", TID(int32_t), 0, 5, enum_traits<viewscreen_layer_militaryst::T_page>::key_table,
                NULL, NULL);
  const char *const enum_traits<viewscreen_layer_militaryst::T_equip::T_mode>::key_table[3] = {
    "Customize",
    "Uniform",
    "Priority"
  };
  enum_identity identity_traits<viewscreen_layer_militaryst::T_equip::T_mode>::identity(sizeof(viewscreen_layer_militaryst::T_equip::T_mode), &viewscreen_layer_militaryst::T_equip::_identity, "T_mode", TID(int32_t), 0, 2, enum_traits<viewscreen_layer_militaryst::T_equip::T_mode>::key_table,
                NULL, NULL);
  const char *const enum_traits<viewscreen_layer_militaryst::T_equip::T_edit_mode>::key_table[16] = {
    "Armor",
    "Helm",
    "Legs",
    "Gloves",
    "Boots",
    "Shield",
    "Weapon",
    "Material",
    "Color",
    "SpecificArmor",
    "SpecificHelm",
    "SpecificLegs",
    "SpecificGloves",
    "SpecificBoots",
    "SpecificShield",
    "SpecificWeapon"
  };
  enum_identity identity_traits<viewscreen_layer_militaryst::T_equip::T_edit_mode>::identity(sizeof(viewscreen_layer_militaryst::T_equip::T_edit_mode), &viewscreen_layer_militaryst::T_equip::_identity, "T_edit_mode", TID(int32_t), 0, 15, enum_traits<viewscreen_layer_militaryst::T_equip::T_edit_mode>::key_table,
                NULL, NULL);
  const char *const enum_traits<viewscreen_layer_noblelistst::T_mode>::key_table[3] = {
    "List",
    "Appoint",
    "Settings"
  };
  enum_identity identity_traits<viewscreen_layer_noblelistst::T_mode>::identity(sizeof(viewscreen_layer_noblelistst::T_mode), &viewscreen_layer_noblelistst::_identity, "T_mode", TID(int16_t), 0, 2, enum_traits<viewscreen_layer_noblelistst::T_mode>::key_table,
                NULL, NULL);
  const char *const enum_traits<viewscreen_petst::T_mode>::key_table[3] = {
    "List",
    "TrainingKnowledge",
    "SelectTrainer"
  };
  enum_identity identity_traits<viewscreen_petst::T_mode>::identity(sizeof(viewscreen_petst::T_mode), &viewscreen_petst::_identity, "T_mode", TID(int32_t), 0, 2, enum_traits<viewscreen_petst::T_mode>::key_table,
                NULL, NULL);
  const char *const enum_traits<viewscreen_setupadventurest::T_subscreen>::key_table[3] = {
    "Nemesis",
    "Skills",
    "Name"
  };
  enum_identity identity_traits<viewscreen_setupadventurest::T_subscreen>::identity(sizeof(viewscreen_setupadventurest::T_subscreen), &viewscreen_setupadventurest::_identity, "T_subscreen", TID(int16_t), 1, 3, enum_traits<viewscreen_setupadventurest::T_subscreen>::key_table,
                NULL, NULL);
  const char *const enum_traits<viewscreen_setupadventurest::T_adventurer::T_status>::key_table[3] = {
    "Peasant",
    "Hero",
    "Demigod"
  };
  enum_identity identity_traits<viewscreen_setupadventurest::T_adventurer::T_status>::identity(sizeof(viewscreen_setupadventurest::T_adventurer::T_status), &viewscreen_setupadventurest::T_adventurer::_identity, "T_status", TID(int16_t), 0, 2, enum_traits<viewscreen_setupadventurest::T_adventurer::T_status>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<viewscreen_textviewerst::T_formatted_text::T_flags>::bits[bit_count] = {
    { "hyperlink", 1 },
    { "no_newline", 1 }
  };
  bitfield_identity identity_traits<viewscreen_textviewerst::T_formatted_text::T_flags>::identity(sizeof(viewscreen_textviewerst::T_formatted_text::T_flags), &viewscreen_textviewerst::T_formatted_text::_identity, "T_flags", bitfield_traits<viewscreen_textviewerst::T_formatted_text::T_flags>::bit_count, bitfield_traits<viewscreen_textviewerst::T_formatted_text::T_flags>::bits);
  const char *const enum_traits<viewscreen_titlest::T_sel_subpage>::key_table[5] = {
    "None",
    "StartSelectWorld",
    "StartSelectMode",
    "Arena",
    "About"
  };
  enum_identity identity_traits<viewscreen_titlest::T_sel_subpage>::identity(sizeof(viewscreen_titlest::T_sel_subpage), &viewscreen_titlest::_identity, "T_sel_subpage", TID(int16_t), 0, 4, enum_traits<viewscreen_titlest::T_sel_subpage>::key_table,
                NULL, NULL);
  const char *const enum_traits<viewscreen_unitlist_page>::key_table[4] = {
    "Citizens",
    "Livestock",
    "Others",
    "Dead"
  };
  enum_identity identity_traits<viewscreen_unitlist_page>::identity(sizeof(viewscreen_unitlist_page), NULL, "viewscreen_unitlist_page", TID(int32_t), 0, 3, enum_traits<viewscreen_unitlist_page>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<weapon_attack::T_flags>::bits[bit_count] = {
    { NULL, 1 },
    { "bad_multiattack", 1 }
  };
  bitfield_identity identity_traits<weapon_attack::T_flags>::identity(sizeof(weapon_attack::T_flags), &weapon_attack::_identity, "T_flags", bitfield_traits<weapon_attack::T_flags>::bit_count, bitfield_traits<weapon_attack::T_flags>::bits);
  const char *const enum_traits<weapon_flags>::key_table[3] = {
    "CAN_STONE",
    "HAS_EDGE_ATTACK",
    "TRAINING"
  };
  enum_identity identity_traits<weapon_flags>::identity(sizeof(weapon_flags), NULL, "weapon_flags", TID(int32_t), 0, 2, enum_traits<weapon_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<weather_type>::key_table[3] = {
    "None",
    "Rain",
    "Snow"
  };
  enum_identity identity_traits<weather_type>::identity(sizeof(weather_type), NULL, "weather_type", TID(int8_t), 0, 2, enum_traits<weather_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<workshop_type>::key_table[25] = {
    "Carpenters",
    "Farmers",
    "Masons",
    "Craftsdwarfs",
    "Jewelers",
    "MetalsmithsForge",
    "MagmaForge",
    "Bowyers",
    "Mechanics",
    "Siege",
    "Butchers",
    "Leatherworks",
    "Tanners",
    "Clothiers",
    "Fishery",
    "Still",
    "Loom",
    "Quern",
    "Kennels",
    "Kitchen",
    "Ashery",
    "Dyers",
    "Millstone",
    "Custom",
    "Tool"
  };
  enum_identity identity_traits<workshop_type>::identity(sizeof(workshop_type), NULL, "workshop_type", TID(int16_t), 0, 24, enum_traits<workshop_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<world::T_status::T_flags>::bits[bit_count] = {
    { "combat", 1 },
    { "hunting", 1 },
    { "sparring", 1 }
  };
  bitfield_identity identity_traits<world::T_status::T_flags>::identity(sizeof(world::T_status::T_flags), &world::T_status::_identity, "T_flags", bitfield_traits<world::T_status::T_flags>::bit_count, bitfield_traits<world::T_status::T_flags>::bits);
  const bitfield_item_info bitfield_traits<world::T_status::T_slots::T_flags>::bits[bit_count] = {
    { "behind", 1 },
    { "side", 1 },
    { "by", 1 },
    { "item", 1 },
    { "tap", 1 },
    { "sever", 1 }
  };
  bitfield_identity identity_traits<world::T_status::T_slots::T_flags>::identity(sizeof(world::T_status::T_slots::T_flags), &world::T_status::T_slots::_identity, "T_flags", bitfield_traits<world::T_status::T_slots::T_flags>::bit_count, bitfield_traits<world::T_status::T_slots::T_flags>::bits);
  const char *const enum_traits<world_construction_type>::key_table[4] = {
    "ROAD",
    "TUNNEL",
    "BRIDGE",
    "WALL"
  };
  enum_identity identity_traits<world_construction_type>::identity(sizeof(world_construction_type), NULL, "world_construction_type", TID(int32_t), 0, 3, enum_traits<world_construction_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<world_population_type>::key_table[8] = {
    "Animal",
    "Vermin",
    "Unk2",
    "VerminInnumerable",
    "ColonyInsect",
    "Tree",
    "Grass",
    "Bush"
  };
  enum_identity identity_traits<world_population_type>::identity(sizeof(world_population_type), NULL, "world_population_type", TID(int32_t), 0, 7, enum_traits<world_population_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<world_region_type>::key_table[10] = {
    "Swamp",
    "Desert",
    "Jungle",
    "Mountains",
    "Ocean",
    "Lake",
    "Glacier",
    "Tundra",
    "Steppe",
    "Hills"
  };
  enum_identity identity_traits<world_region_type>::identity(sizeof(world_region_type), NULL, "world_region_type", TID(int16_t), 0, 9, enum_traits<world_region_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<world_site_flags>::key_table[4] = {
    "Undiscovered",
    NULL,
    NULL,
    "Town"
  };
  enum_identity identity_traits<world_site_flags>::identity(sizeof(world_site_flags), NULL, "world_site_flags", TID(int32_t), 0, 3, enum_traits<world_site_flags>::key_table,
                NULL, NULL);
  const char *const enum_traits<world_site_type>::key_table[11] = {
    "PlayerFortress",
    "DarkFortress",
    "Cave",
    "MountainHalls",
    "ForestRetreat",
    "Town",
    "ImportantLocation",
    "LairShrine",
    "Fortress",
    "Camp",
    "Monument"
  };
  enum_identity identity_traits<world_site_type>::identity(sizeof(world_site_type), NULL, "world_site_type", TID(int16_t), 0, 10, enum_traits<world_site_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<world_underground_region::T_type>::key_table[3] = {
    "Cavern",
    "MagmaSea",
    "Underworld"
  };
  enum_identity identity_traits<world_underground_region::T_type>::identity(sizeof(world_underground_region::T_type), &world_underground_region::_identity, "T_type", TID(int16_t), 0, 2, enum_traits<world_underground_region::T_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<worldgen_range_type>::key_table[24] = {
    "ELEVATION",
    "RAINFALL",
    NULL,
    "TEMPERATURE",
    NULL,
    "DRAINAGE",
    "VOLCANISM",
    "SAVAGERY",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
  };
  enum_identity identity_traits<worldgen_range_type>::identity(sizeof(worldgen_range_type), NULL, "worldgen_range_type", TID(int32_t), 0, 23, enum_traits<worldgen_range_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<worldgen_region_type>::key_table[10] = {
    "SWAMP",
    "DESERT",
    "FOREST",
    "MOUNTAINS",
    "OCEAN",
    "LAKE",
    "GLACIER",
    "TUNDRA",
    "GRASSLAND",
    "HILLS"
  };
  enum_identity identity_traits<worldgen_region_type>::identity(sizeof(worldgen_region_type), NULL, "worldgen_region_type", TID(int32_t), 0, 9, enum_traits<worldgen_region_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<wound_damage_flags1>::bits[bit_count] = {
    { "cut", 1 },
    { "smashed", 1 },
    { "scar_cut", 1 },
    { "scar_smashed", 1 },
    { "tendon_bruised", 1 },
    { "tendon_strained", 1 },
    { "tendon_torn", 1 },
    { "ligament_bruised", 1 },
    { "ligament_sprained", 1 },
    { "ligament_torn", 1 },
    { "motor_nerve_severed", 1 },
    { "sensory_nerve_severed", 1 },
    { "edged_damage", 1 },
    { "smashed_apart", 1 },
    { "major_artery", 1 },
    { "guts_spilled", 1 },
    { "edged_shake1", 1 },
    { "scar_edged_shake1", 1 },
    { "edged_shake2", 1 },
    { "broken", 1 },
    { "scar_broken", 1 },
    { "gouged", 1 },
    { "blunt_shake1", 1 },
    { "scar_blunt_shake1", 1 },
    { "blunt_shake2", 1 },
    { "joint_bend1", 1 },
    { "scar_joint_bend1", 1 },
    { "joint_bend2", 1 },
    { "compound_fracture", 1 },
    { "diagnosed", 1 },
    { "artery", 1 },
    { "overlapping_fracture", 1 }
  };
  bitfield_identity identity_traits<wound_damage_flags1>::identity(sizeof(wound_damage_flags1), NULL, "wound_damage_flags1", bitfield_traits<wound_damage_flags1>::bit_count, bitfield_traits<wound_damage_flags1>::bits);
  const bitfield_item_info bitfield_traits<wound_damage_flags2>::bits[bit_count] = {
    { "needs_setting", 1 },
    { "entire_surface", 1 },
    { "gelded", 1 }
  };
  bitfield_identity identity_traits<wound_damage_flags2>::identity(sizeof(wound_damage_flags2), NULL, "wound_damage_flags2", bitfield_traits<wound_damage_flags2>::bit_count, bitfield_traits<wound_damage_flags2>::bits);
  const char *const enum_traits<wound_effect_type>::key_table[10] = {
    "Bruise",
    "Burn",
    "Frostbite",
    "Burn2",
    "Melting",
    "Boiling",
    "Freezing",
    "Condensation",
    "Necrosis",
    "Blister"
  };
  enum_identity identity_traits<wound_effect_type>::identity(sizeof(wound_effect_type), NULL, "wound_effect_type", TID(int16_t), 0, 9, enum_traits<wound_effect_type>::key_table,
                NULL, NULL);
  const char *const enum_traits<written_content_style>::key_table[18] = {
    "Meandering",
    "Cheerful",
    "Depressing",
    "Rigid",
    "Serious",
    "Disjointed",
    "Ornate",
    "Forceful",
    "Humorous",
    "Immature",
    "SelfIndulgent",
    "Touching",
    "Compassionate",
    "Vicious",
    "Concise",
    "Scornful",
    "Witty",
    "Ranting"
  };
  enum_identity identity_traits<written_content_style>::identity(sizeof(written_content_style), NULL, "written_content_style", TID(int32_t), 0, 17, enum_traits<written_content_style>::key_table,
                NULL, NULL);
  const char *const enum_traits<written_content_type>::key_table[12] = {
    "Manual",
    "Guide",
    "Chronicle",
    "ShortStory",
    "Novel",
    "Biography",
    "Autobiography",
    "Poem",
    "Play",
    "Letter",
    "Essay",
    "Dialog"
  };
  enum_identity identity_traits<written_content_type>::identity(sizeof(written_content_type), NULL, "written_content_type", TID(int32_t), 0, 11, enum_traits<written_content_type>::key_table,
                NULL, NULL);
  const bitfield_item_info bitfield_traits<z_level_flags>::bits[bit_count] = {
    { "update", 1 },
    { "can_stop", 1 },
    { "update_twice", 1 }
  };
  bitfield_identity identity_traits<z_level_flags>::identity(sizeof(z_level_flags), NULL, "z_level_flags", bitfield_traits<z_level_flags>::bit_count, bitfield_traits<z_level_flags>::bits);
  const char *const enum_traits<zoom_commands>::key_table[5] = {
    "zoom_in",
    "zoom_out",
    "zoom_reset",
    "zoom_fullscreen",
    "zoom_resetgrid"
  };
  enum_identity identity_traits<zoom_commands>::identity(sizeof(zoom_commands), NULL, "zoom_commands", TID(int32_t), 0, 4, enum_traits<zoom_commands>::key_table,
                NULL, NULL);
}
